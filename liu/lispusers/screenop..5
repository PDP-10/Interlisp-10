(FILECREATED "22-Feb-83 11:17:32" <DDYER>SCREENOP..43 68490  

      previous date: "22-FEB-83 11:04:38" <DDYER>SCREENOP..42)


(PRETTYCOMPRINT SCREENOPCOMS)

(RPAQQ SCREENOPCOMS ((FILES EDITHIST)
		     (FILEPKGCOMS * SCREENOPFILEPKGCOMS)
		     (FNS * SCREENOPFNS)
		     (ADDVARS (CURRENTDRIVER)
			      (SYSTEMTERMTYPES)
			      (SYSTEMSCREENDRIVERS)
			      (AFTERSYSOUTFORMS (SETQ DISPLAYTERMP (DISPLAYTERMP)))
			      (DISPLAYTERMPFORMS (PREPAREDELETENEXT)))
		     [P (SETQ SYSTEMTERMTYPES
			      (APPEND SYSTEMTERMTYPES
				      (SELECTQ (SYSTEMTYPE)
					       [TENEX (QUOTE ((10 COND ((ILEQ (CSPEED)
									      2400)
								   (QUOTE HP2640))
								  (T (QUOTE HP)))
							      (14 . h1520e)
							      (21 . ANNARBOR]
					       [TOPS20 (QUOTE ((6 COND ((ILEQ (CSPEED)
									      2400)
								   (QUOTE HP2640))
								  (T (QUOTE HP)))
							       (15 . h1520e)
							       (21 . h1520)
							       (24 . ANNARBOR)
							       (25 . HEATHKIT]
					       [VAX (QUOTE ((hp . HP)
							    (2621 . HP)
							    (2621k45 . HP)
							    (2640 . HP2640]
					       NIL]
		     (GLOBALVARS CURRENTSCREEN DISPLAYTERM DISPON)
		     [P (PROG ((I 1))
			      (SETQ DISPLAYTERM (COPYTERMTABLE (QUOTE ORIG)))
			      (RPTQ 31 (ECHOCONTROL I (QUOTE REAL)
						    DISPLAYTERM)
				    (SETQ I (ADD1 I]
		     (EDITHIST * SCREENOPEDITHIST)
		     (EXPORT (MACROS * SCREENOPMACROS)
			     (DECLARE: EVAL@COMPILE DONTCOPY (FNS COMPILESCREENOP))
			     (RECORDS * SCREENOPRECORDS))
		     (SCREENDRIVERS CreatePrototypeDriver)
		     (SCREENDRIVERS * SCREENOPS)
		     [VARS (PROTOTYPEDRIVER (CreatePrototypeDriver))
			   (\SPEEDBLOCK (CREATE SGTTYB))
			   (HPENHANCECHAR (QUOTE B))
			   (RUBOUTS (PACKC (QUOTE (127 127 127 127 127]
		     (P (DISPLAYTERMP))))
(FILESLOAD EDITHIST)

(RPAQQ SCREENOPFILEPKGCOMS (SCREENDRIVERS))
(PUTDEF (QUOTE SCREENDRIVERS) (QUOTE FILEPKGCOMS) [QUOTE
						    ((COM
						       MACRO
						       [X (FNS . X)
							  (PROP SCREENDRIVERS . X)
							  (P (MAPCAR (QUOTE X)
								     (FUNCTION (LAMBDA
										 (A)
										 (AND (GETD A)
										      (APPLY* A]
						       CONTENTS CHECKIFSCREENDRIVER)
						     (TYPE DESCRIPTION "Screen Drivers" GETDEF
							   [LAMBDA (A)
								   (AND (GETPROP A (QUOTE 
										    SCREENDRIVERS))
									(GETDEF A (QUOTE FNS)
										0
										(QUOTE ("NO DEF"]
							   PUTDEF
							   [LAMBDA (A B C)
								   (PUTDEF A (QUOTE FNS)
									   C)
								   (PUTPROP A (QUOTE SCREENDRIVERS)
									    T]
							   EDITDEF
							   [LAMBDA (A)
								   (EDITDEF A (QUOTE FNS]
							   DELDEF
							   (LAMBDA (A)
								   (DELDEF A (QUOTE FNS])

(RPAQQ SCREENOPFNS (BUILDDRIVER CHECKIFSCREENDRIVER COMPILESCREENOP CSPEED DELAYFOR DISPLAYTERMP 
				DISPLAYTERMTYPE GETSCREENOPHANDLER GETSCREENOPINFO KNOWNTERMTYPES 
				PARSECHARSEQUENCE PARSECURSORPOS PARSETERMCAP PREPAREDELETENEXT 
				SCREENOP SCREENOPCOMPILED SEGMENTSTRING SETSCREENOPINFO \SCREENPUT))
(DEFINEQ

(BUILDDRIVER
  [LAMBDA (TERMCAP)                                         (* DD: "11-Jan-83 02:11")
                                                            (* this builds a driver from termcap information, 
							    defining a function that the user will be invited to 
							    save)
    (PROG ((ORIG (OR TERMCAP (SELECTQ (SYSTEMTYPE)
				      (VAX (GETENV (QUOTE TERMCAP)))
				      NIL)))
	   PARSED INFO TYPE)
          (OR ORIG (RETURN NIL))
          (COND
	    ((SETQ PARSED (PARSETERMCAP TERMCAP))           (* select a name from the list known)
	      (SETQ TYPE (OR [CAR (EVAL (CADR (FASSOC (QUOTE TYPE)
						      PARSED]
			     (MKATOM)))
	      (SETQ INFO (BQUOTE ((TERMCAP , ORIG)
				   ,@ PARSED)))
	      [PUTDEF (SETQ TYPE (PACK* (QUOTE Create)
					TYPE
					(QUOTE Driver)))
		      (QUOTE SCREENDRIVER)
		      (BQUOTE (LAMBDA NIL                   (* this driver generated automatically from termcap 
							    information)
				      (CREATE SCREENDRIVER ,@[RESETVAR CURRENTSCREEN PROTOTYPEDRIVER
						(for SPEC ENTRY in (QUOTE ((TYPELIST TYPE)
									    (XSIZE co 80)
									    (YSIZE li 24)
									    (CLEAR cl)
									    (CLEARLINE ce)
									    (CLEARREST cd)
									    (INSERT im)
									    (INSERTLINE al)
									    (DELETE dc)
									    (DELETELINE dl)
									    (SETHIGHLIGHT so NIL)
									    (CLEARHIGHLIGHT se NIL)
									    (SETLOCK ml NIL)
									    (CLEARLOCK mu NIL)
									    (SETCURSOR cm)
									    (OVERSTRIKEP os NIL)))
						   when [PROGN (SETQ ENTRY (FASSOC (CADR SPEC)
										   PARSED))
							       (COND
								 ((NULL ENTRY)
								   (SETQ ENTRY (CDDR SPEC)))
								 ((NULL (CDR ENTRY))
								   (SETQ ENTRY (CONS T)))
								 (T (SETQ ENTRY (CDR ENTRY]
						   collect (BQUOTE (SETQ
								     ,
								     (CAR SPEC)
								     (FUNCTION
								       ,
								       (SUBST ENTRY (QUOTE PROGRAM)
									      (SCREENOP (QUOTE 
										       GETHANDLER)
											(CAR SPEC]
					      \INFOALIST _(QUOTE , INFO]
	      (MARKASCHANGED TYPE (QUOTE SCREENDRIVERS)
			     T)
	      (UNMARKASCHANGED TYPE (QUOTE FNS))
	      (RETURN (EVAL (CONS TYPE])

(CHECKIFSCREENDRIVER
  [LAMBDA (COM NAME TYPE)                                   (* DD: "20-SEP-82 13:14")
    (PROG [(NAMEIT (AND (OR (EQ TYPE (CAR COM))
			    (EQ TYPE (QUOTE FNS)))
			(COND
			  ((EQ (CADR COM)
			       (QUOTE *))
			    (GETATOMVAL (CADDR COM)))
			  (T (CDR COM]                      (* NAMEIT is the recognised list.
							    Now MATCH the list NAME against in the canonical way and
							    return the result)
          (RETURN (COND
		    ((EQ NAME T)
		      (NEQ NAMEIT NIL))
		    ((LISTP NAME)
		      (INTERSECTION NAME NAMEIT))
		    ((NULL NAME)
		      NAMEIT)
		    ((FMEMB NAME NAMEIT)
		      T])

(COMPILESCREENOP
  [LAMBDA (X)                                               (* DD: "18-FEB-83 01:00")

          (* this does the work of compiling a SCREENOP into a more effecient form, with the function lookup already done.
	  It assumes that changes to the SCREENDRIVER record will be backward compatable)


    (PROG (FIELDNAMES (OP (CAR X))
		      (ARG1 (CADR X)))
          (RETURN (COND
		    [(EQ (CAR (LISTP OP))
			 (QUOTE QUOTE))
		      (COND
			([NOT (FMEMB (CADR OP)
				     (SETQ FIELDNAMES (RECORDFIELDNAMES (QUOTE SCREENDRIVER]
			  (COMPERRM (LIST (CADAR X)
					  "IS NOT A DEFINED SCREENOP"))
			  (QUOTE IGNOREMACRO))
			[(AND (EQ (CADR OP)
				  (QUOTE GETHANDLER))
			      (EQ (CAR (LISTP ARG1))
				  (QUOTE QUOTE))
			      (FMEMB (CADR ARG1)
				     FIELDNAMES))
			  (LIST (QUOTE AND)
				(QUOTE CURRENTSCREEN)
				(LIST (QUOTE FFETCH)
				      (LIST (QUOTE SCREENDRIVER)
					    (CADR ARG1))
				      (QUOTE CURRENTSCREEN]
			(T (LIST (QUOTE AND)
				 (QUOTE CURRENTSCREEN)
				 (NCONC (LIST (QUOTE SCREENOPCOMPILED)
					      (KWOTE (CADR OP))
					      (LIST (QUOTE FFETCH)
						    (LIST (QUOTE SCREENDRIVER)
							  (CADR OP))
						    (QUOTE CURRENTSCREEN)))
					(CDR X]
		    (T (QUOTE IGNOREMACRO])

(CSPEED
  [LAMBDA NIL                                               (* DD: "17-Sep-82 12:01")
    (SELECTQ (SYSTEMTYPE)
	     [(TOPS20 TENEX)
	       (PROG ((SP (LOGAND (JSYS 63 64 23 0 3)
				  262143)))
		     (DECLARE (LOCALVARS SP))
		     (RETURN (COND
			       ((ZEROP SP)
				 2400)
			       (T SP]
	     (VAX (OR (fetch (SGTTYB OUTPUTSPEED) of \SPEEDBLOCK)
		      2400))
	     (QUOTE 9600])

(DELAYFOR
  [LAMBDA (N PROPORTIONAL)                                  (* DD: "18-JUL-82 19:50")
                                                            (* pad for N milliseconds, assuming 10 bits per 
							    character so 9600 baud is 960 chars/second)
    (SCREENOP (QUOTE PAD)
	      (IQUOTIENT (ITIMES N (CSPEED))
			 9600])

(DISPLAYTERMP
  [LAMBDA (DIRECTEDTYPE)                                    (* DD: "20-FEB-83 21:46")
                                                            (* determines the type of the terminal and setq up the 
							    current screen driver if one can be found or 
							    manufactured)
    (SETQ DISPLAYTERMTYPE (DISPLAYTERMTYPE DIRECTEDTYPE))
    (bind TRIED NEWDRIVER do [COND
			       [(SETQ TRIED (for X in SYSTEMSCREENDRIVERS
					       when (AND X (NEQ X PROTOTYPEDRIVER))
					       do (SETQ CURRENTSCREEN X)
						  (COND
						    ((EQMEMB DISPLAYTERMTYPE (SCREENOP (QUOTE 
											 TYPELIST)))
						      (for X in DISPLAYTERMPFORMS
							 do (EVAL X))
						      (RETURN DISPLAYTERMTYPE)))
					       finally (RETURN (SETQ DISPON (SETQ DISPLAYTERMTYPE
								   (SETQ CURRENTSCREEN NIL]
			       (T (COND
				    ((OR DIRECTEDTYPE NEWDRIVER)
				      (SETQ TRIED T))
				    ((SETQ NEWDRIVER (BUILDDRIVER))
				      (PRIN1 "..Built a screen driver from TERMCAP info")
				      (TERPRI))
				    (T (SETQ TRIED T]
       repeatuntil TRIED finally (COND
				   (DISPLAYTERMTYPE         (* set screen size if possible)
						    (AND (BOUNDP (QUOTE \#DISPLAYLINES))
							 (FIXP \#DISPLAYLINES)
							 (NEQ 0 \#DISPLAYLINES)
							 (SCREENOP (QUOTE YSIZE))
							 (SETQ \#DISPLAYLINES
							   (IDIFFERENCE (SCREENOP (QUOTE YSIZE))
									2)))
						    [AND (SCREENOP (QUOTE XSIZE))
							 (LINELENGTH (SETQ TTYLINELENGTH
								       (SCREENOP (QUOTE XSIZE]
						    (RETURN DISPLAYTERMTYPE))
				   (T (SETQ CURRENTSCREEN NIL])

(DISPLAYTERMTYPE
  [LAMBDA (DIRECTEDTYPE)                                    (* DD: "18-JUL-82 14:56")

          (* * Returns the terminal type number. Uses the jsys GTTYP.)


    (PROG [(TYPE (OR DIRECTEDTYPE (SELECTQ (SYSTEMTYPE)
					   ((TOPS20 TENEX)
					     (JSYS 195 262143 NIL NIL 2))
					   (VAX (0Syscall 32 1 \SPEEDBLOCK)
                                                            (* record speed etc for later)
						(MKATOM (GETENV "TERM")))
					   NIL]
          (SETQ TYPE (OR (CDR (FASSOC TYPE SYSTEMTERMTYPES))
			 TYPE))
          [COND
	    ((LISTP TYPE)
	      (SETQ TYPE (EVAL TYPE]
          (RETURN TYPE])

(GETSCREENOPHANDLER
  [LAMBDA (ACTION)                                          (* DD: "17-JUL-82 18:57")
    (AND CURRENTSCREEN (RECORDACCESS ACTION CURRENTSCREEN (CONSTANT (RECLOOK (QUOTE SCREENDRIVER)))
				     (QUOTE FETCH])

(GETSCREENOPINFO
  [LAMBDA (DATUM)                                           (* DD: "17-JUL-82 17:00")
    (FASSOC DATUM (SCREENOP (QUOTE GETHANDLER)
			    (QUOTE \INFOALIST])

(KNOWNTERMTYPES
  [LAMBDA NIL                                               (* DD: "20-FEB-83 21:58")
    (PROG (KNOWN)
          (RESETVARS (CURRENTSCREEN)
		     (SETQ KNOWN (for X Y in SYSTEMSCREENDRIVERS eachtime (SETQ CURRENTSCREEN X)
				    when [SETQ Y (LISTP (SCREENOP (QUOTE TYPELIST] collect Y)))
          (RETURN KNOWN])

(PARSECHARSEQUENCE
  [LAMBDA (X)                                               (* DD: "20-FEB-83 19:41")
                                                            (* this parses character sequences used by TERMCAP 
							    entries, which covers everything except cursor 
							    positioning, which requeres more elaborate processing 
							    aftewards)
    (bind CHAR (X _(MKSTRING X))
	  DELAY first [bind (I _ 1) while (FIXP (NTHCHAR X I)) do (add I 1)
			 finally [COND
				   ((NEQ I 1)
				     (SETQ DELAY (SUBATOM X 1 (SUB1 I)))
				     (SETQ X (SUBSTRING X I -1]
				 (COND
				   ((NULL DELAY))
				   ((EQ (NTHCHAR X 1)
					(QUOTE *))
				     (SETQ DELAY (BQUOTE (DELAYFOR , DELAY T)))
				     (GNC X))
				   (T (SETQ DELAY (BQUOTE (DELAYFOR , DELAY]
       while (AND (STRINGP X)
		  (SETQ CHAR (GNC X)))
       collect (SELECTQ CHAR
			[\ (SELECTQ (SETQ CHAR (GNC X))
				    ((\ ^)
				      (CHCON1 CHAR))
				    ((E e)
				      (CHARCODE ESCAPE))
				    ((n N)
				      (CHARCODE LF))
				    ((R r)
				      (CHARCODE CR))
				    ((T t)
				      (CHARCODE TAB))
				    ((B b)
				      (CHARCODE ^H))
				    ((F f)
				      (CHARCODE ^L))
				    (COND
				      ((FIXP CHAR)
					[while (FIXP (NTHCHAR X 1)) do (SETQ CHAR
									 (IPLUS (GNC X)
										(ITIMES CHAR 8]
					CHAR)
				      (T (ERROR "ILLEGAL \ SEQUENCE IN STRING, STARTING AT "
						(PACK* (QUOTE \)
						       CHAR X]
			(^ (LOGAND (GNCCODE X)
				   31))
			(CHCON1 CHAR))
       finally [SETQ $$VAL (LIST (LIST (QUOTE \SCREENPUT)
				       (MKSTRING (PACKC $$VAL]
	       (COND
		 (DELAY (NCONC1 $$VAL DELAY])

(PARSECURSORPOS
  [LAMBDA (STR)                                             (* DD: "22-FEB-83 10:53")
                                                            (* parse a cursor positioning TERMCAP string, producing 
							    a program)
    (bind (X _(MKSTRING STR))
	  EMITFLG
	  [ORDINATE _(APPEND (QUOTE (Y X]
	  (WIDTH _ 0)
	  OUTPUTCHRS CHR PROGRAM while (SETQ CHR (GNC X))
       do (SELECTQ CHR
		   (%% (SELECTQ (SETQ CHR (GNC X))
				(d (SETQ WIDTH 0)
				   (SETQ EMITFLG (QUOTE PRINTNUM)))
				(2 (SETQ WIDTH 2)
				   (SETQ EMITFLG (QUOTE PRINTNUM)))
				(3 (SETQ WIDTH 3)
				   (SETQ EMITFLG (QUOTE PRINTNUM)))
				(%. (SETQ EMITFLG (QUOTE \SCREENPUT)))
				(+ [RPLACA ORDINATE (BQUOTE (IPLUS , (GNCCODE X)
								   ,
								   (CAR ORDINATE]
				   (SETQ EMITFLG (QUOTE \SCREENPUT)))
				[> (RPLACA ORDINATE (BQUOTE (COND ((IGREATERP , (CAR ORDINATE)
									      ,
									      (GNCCODE X))
								    (IPLUS , (GNCCODE X)
									   ,
									   (CAR ORDINATE)))
								  (T (CAR ORDINATE]
				(r (SETQ ORDINATE (DREVERSE ORDINATE)))
				[i (RPLACA ORDINATE (BQUOTE (ADD1 , (CAR ORDINATE]
				(%% (push OUTPUTCHRS (CHCON1 CHR)))
				[n [RPLACA ORDINATE (BQUOTE (LOGXOR 96 , (CAR ORDINATE]
				   (RPLACA (CDR ORDINATE)
					   (BQUOTE (LOGXOR 96 , (CADR ORDINATE]
				[B (RPLACA ORDINATE (BQUOTE (IPLUS (IREMAINDER , (CAR ORDINATE)
									       10)
								   (ITIMES 16 (IQUOTIENT
									     ,
									     (CAR ORDINATE)
									     10]
				(ERROR "UNSUPPORTED CURSOR CODE" CHR)))
		   (push OUTPUTCHRS (CHCON1 CHR)))
	  (COND
	    (EMITFLG (COND
		       (OUTPUTCHRS [push PROGRAM (BQUOTE (\SCREENPUT , (MKSTRING (PACKC (DREVERSE
											  OUTPUTCHRS]
				   (SETQ OUTPUTCHRS)))
		     (SELECTQ EMITFLG
			      [PRINTNUM (push PROGRAM (COND
						[(EQ WIDTH 0)
						  (BQUOTE (PRIN3 , (CAR ORDINATE]
						(T (BQUOTE (PRINTNUM (QUOTE (FIX , WIDTH))
								     ,
								     (CAR ORDINATE]
			      [\SCREENPUT (push PROGRAM (BQUOTE (\SCREENPUT , (CAR ORDINATE]
			      (SHOULDNT))
		     (SETQ ORDINATE (CDR ORDINATE))
		     (SETQ EMITFLG)))
       finally [AND OUTPUTCHRS (COND
		      (OUTPUTCHRS [push PROGRAM (BQUOTE (\SCREENPUT , (MKSTRING (PACKC (DREVERSE
											 OUTPUTCHRS]
				  (SETQ OUTPUTCHRS]
	       (RETURN (DREVERSE PROGRAM])

(PARSETERMCAP
  [LAMBDA (TCAP)                                            (* DD: "20-FEB-83 21:43")
    (AND (OR TCAP (SETQ TCAP (SELECTQ (SYSTEMTYPE)
				      (VAX (GETENV "TERMCAP"))
				      NIL)))
	 (PROG ((FORMS (SEGMENTSTRING TCAP (QUOTE :)))
		TYPE VARS CPOS)
	       (DECLARE (SPECVARS ESCAPE))
	       (SETQ TYPE (SEGMENTSTRING (CAR FORMS)
					 "|"))
	       (OR TCAP (MEMBER (GETENV "TERM")
				FORMS)
		   (push FORMS (GETENV "TERM")))
	       [SETQ TYPE (UNION TYPE (for X in TYPE collect (DISPLAYTERMTYPE (MKATOM X]
	       [SETQ TYPE (BQUOTE (TYPE (QUOTE , TYPE]
	       [SETQ VARS (for X in (CDR FORMS)
			     collect [COND
				       ((EQ (CHCON1 X)
					    (CHARCODE %.))
                                                            (* I dont know what this means, but it seems to come up 
							    a few times.)
					 (SETQ X (SUBATOM X 2 -1]
				     (CONS (SUBATOM X 1 2)
					   (SELECTQ (NTHCHAR X 3)
						    (NIL NIL)
						    (# (CONS (SUBATOM X 4 -1)))
						    (= (PARSECHARSEQUENCE (SUBSTRING X 4 -1)))
						    ((^ \)
						      (PARSECHARSEQUENCE (SUBSTRING X 3 -1)))
						    ((0 1 2 3 4 5 6 7 8 9)
						      (CONS (SUBATOM X 3 -1)))
						    (ERROR 
						      "Uninterpretable TERMCAP capability string"
							   X]
	       [COND
		 ((SETQ CPOS (FASSOC (QUOTE cm)
				     VARS))
		   (RPLACD CPOS (BQUOTE (,@ (PARSECURSORPOS (CADR (CADR CPOS)))
					    ,@
					    (CDDR CPOS]     (* compute the best string for delete-last)
	       [PROG (BACKSPACE CLEARNEXT)
		     [SETQ BACKSPACE (COND
			 ((FASSOC (QUOTE bs)
				  VARS)
			   (CHARCODE (BS)))
			 [(SETQ BACKSPACE (FASSOC (QUOTE bc)
						  VARS))
			   (CHCON (CADR (CADR BACKSPACE]
			 (T (CHARCODE (BS]
		     [SETQ CLEARNEXT (COND
			 ((NOT (FASSOC (QUOTE os)
				       VARS))
			   (APPEND (CHARCODE (SPACE))
				   BACKSPACE))
			 [(SETQ CLEARNEXT (for X Y in (QUOTE (dc ce cd)) thereis (SETQ Y
										   (FASSOC X VARS))
					     finally (RETURN Y)))
			   (CHCON (CADR (CADR CLEARNEXT]
			 (T (CHARCODE (SPACE]
		     (SETQ BACKSPACE (APPEND BACKSPACE CLEARNEXT))
		     (push VARS (BQUOTE (DELETENEXT , (PACKC BACKSPACE]
	       (RETURN (CONS TYPE VARS])

(PREPAREDELETENEXT
  [LAMBDA NIL                                               (* DD: "17-Sep-82 12:04")
                                                            (* Set the DELETECONTROL up to correspond to the 
							    deletenext info, if present)
    (PROG [(N (SCREENOP (QUOTE OTHERINFO)
			(QUOTE DELETENEXT]
          (COND
	    ((SETQ N (CADR N))
	      (for X in (CHCON N)
		 collect [COND
			   ((EQ (SELECTQ (SYSTEMTYPE)
					 ((TOPS20 TENEX)
					   (AND (ILESSP X (CHARCODE SPACE))
						(ECHOCONTROL X)))
					 (ECHOCHAR X))
				(QUOTE REAL)))
			   ((EQ X 127)                      (* SUPDUP TERMINAL?)
			     (SETQ X (LOGOR X 128]
			 (SELECTQ (SYSTEMTYPE)
				  [(TOPS20 TENEX)
				    (AND (ILESSP X (CHARCODE SPACE))
					 (ECHOCONTROL X (QUOTE REAL]
				  (ECHOCHAR X (QUOTE REAL)))
			 X
		 finally (DELETECONTROL (QUOTE 1STCHDEL)
					(SETQ X (PACKC $$VAL)))
			 (DELETECONTROL (QUOTE NTHCHDEL)
					X])

(SCREENOP
  [LAMBDA (ACTION ARG1 ARG2 ARG3)                           (* DD: "20-SEP-82 12:36")
    (AND CURRENTSCREEN (RESETLST (RESETSAVE (SETTERMTABLE DISPLAYTERM))
				 (RESETSAVE (RADIX 10))
				 (PROG [(OPR (RECORDACCESS ACTION CURRENTSCREEN
							   (CONSTANT (RECLOOK (QUOTE SCREENDRIVER)))
							   (QUOTE FETCH]
				       (COND
					 (OPR (RETURN (APPLY* OPR ARG1 ARG2 ARG3)))
					 (T (ERROR "UNDEFINED SCREENOP - " ACTION])

(SCREENOPCOMPILED
  [LAMBDA (ACTION ARG0 ARG1 ARG2 ARG3)                      (* DD: "20-SEP-82 12:35")
    (RESETLST (RESETSAVE (SETTERMTABLE DISPLAYTERM))
	      (RESETSAVE (RADIX 10))
	      (COND
		(ARG0 (APPLY* ARG0 ARG1 ARG2 ARG3))
		(T (ERROR "UNDEFINED SCREENOP - " ACTION])

(SEGMENTSTRING
  [LAMBDA (STR PAT)                                         (* DD: "17-Sep-82 13:30")
                                                            (* segment STR wherever the substring PAT occurs, return
							    a list of substrings separated out)
    (bind POS_1
	  START VAL while (first (SETQ START POS) while (EQ START (SETQ POS (STRPOS PAT STR START)))
			     do (add START (NCHARS PAT)) finally (RETURN POS))
       when (SETQ VAL (SUBATOM STR START (SUB1 POS))) collect VAL
       finally (SETQ $$VAL (NCONC1 $$VAL (SUBATOM STR START -1])

(SETSCREENOPINFO
  [LAMBDA (DATUM VAL)                                       (* DD: "17-JUL-82 17:06")
    (PUTASSOC DATUM VAL (SCREENOP (QUOTE GETHANDLER)
				  (QUOTE \INFOALIST])

(\SCREENPUT
  [LAMBDA (CHR)                                             (* DD: "17-Sep-82 12:43")
                                                            (* send a character or a strig directly to the terminal,
							    with no interference or interpretation)
    (SELECTQ (SYSTEMTYPE)
	     [(TOPS20 TENEX)
	       (COND
		 ((FIXP CHR)                                (* pbout)
		   (JSYS 60 CHR))
		 [(STRINGP CHR)                             (* psout)
		   (for I from 1 to (NCHARS CHR) do (JSYS 60 (NTHCHARCODE CHR I]
		 (T                                         (* psout)
		    (JSYS 62 (MKSTRING CHR]
	     [VAX (COND
		    ((FIXP CHR)
		      (0Dspbout 1 CHR))
		    ((STRINGP CHR)
		      (0Dspsout 1 CHR))
		    (T (0Dspsout 1 (MKSTRING CHR]
	     (COND
	       ((FIXP CHR)
		 (PRIN3 (FCHARACTER CHR)))
	       (T (PRIN3 CHR])
)

(ADDTOVAR CURRENTDRIVER )

(ADDTOVAR SYSTEMTERMTYPES )

(ADDTOVAR SYSTEMSCREENDRIVERS )

(ADDTOVAR AFTERSYSOUTFORMS (SETQ DISPLAYTERMP (DISPLAYTERMP)))

(ADDTOVAR DISPLAYTERMPFORMS (PREPAREDELETENEXT))
(SETQ SYSTEMTERMTYPES (APPEND SYSTEMTERMTYPES (SELECTQ (SYSTEMTYPE)
						       [TENEX (QUOTE ((10 COND ((ILEQ (CSPEED)
										      2400)
									   (QUOTE HP2640))
									  (T (QUOTE HP)))
								      (14 . h1520e)
								      (21 . ANNARBOR]
						       [TOPS20 (QUOTE ((6 COND ((ILEQ (CSPEED)
										      2400)
									   (QUOTE HP2640))
									  (T (QUOTE HP)))
								       (15 . h1520e)
								       (21 . h1520)
								       (24 . ANNARBOR)
								       (25 . HEATHKIT]
						       [VAX (QUOTE ((hp . HP)
								    (2621 . HP)
								    (2621k45 . HP)
								    (2640 . HP2640]
						       NIL)))
(DECLARE: DOEVAL@COMPILE DONTCOPY

(ADDTOVAR GLOBALVARS CURRENTSCREEN DISPLAYTERM DISPON)
)
[PROG ((I 1))
      (SETQ DISPLAYTERM (COPYTERMTABLE (QUOTE ORIG)))
      (RPTQ 31 (ECHOCONTROL I (QUOTE REAL)
			    DISPLAYTERM)
	    (SETQ I (ADD1 I]

(RPAQQ SCREENOPEDITHIST (SCREENDRIVER))
(DECLARE: DONTCOPY 

(ADDTOVAR EDITHISTALIST (SCREENDRIVER (("18-JUL-82 15:08:52" . "19-FEB-82 16:25:07")
				       DD:
				       (/lisp/ddyer/lisp/init/SCREENOP.;16 . 
					 /lisp/ddyer/lisp/init/SCREENDRIVER.;6)
				       (SGTTYB BUILDDRIVER SETSCREENOPINFO GETSCREENOPINFO 
					       GETSCREENOPHANDLER PARSECURSORPOS DELAYFOR \SCREENPUT 
					       PARSETERMCAP PARSECHARSEQUENCE SEGMENTSTRING 
					       CreateSupdupDriver CreateZenithDriver CreateAAdriver 
					       CSPEED SCREENOPCOMS SCREENOPS SCREENOPFNS 
					       SCREENOPRECORDS SCREENOPVARS SCREENOPEDITHIST 
					       SCREENOPMACROS SCREENOP COMPILESCREENOP 
					       SCREENOPCOMPILED SCREENDRIVERMACROS SCREENDRIVER 
					       SCREENDRIVERS CreateHZTdriver CreateHZdriver 
					       CreateHPdriver CreateHP2640Driver 
					       CreatePrototypeDriver SCREENDRIVERVARS DISPLAYTERMTYPE 
					       DISPLAYTERMP SCREENDRIVERCOMS SCREENDRIVEREDITHIST)
				       (all around improvements, but most notably added the 
					    capability to build a driver from TERMCAP info))
				      (("19-JUL-82 16:53:32" . "18-JUL-82 21:35:50")
				       DD:
				       (/lisp/ddyer/lisp/init/SCREENOP.;18 . 
					 /lisp/ddyer/lisp/init/SCREENOP.;17)
				       (PARSECURSORPOS DELAYFOR PARSECHARSEQUENCE)
				       (fixed some bugs in termcap parsing functions when delays were 
					      specified and when PRINTNUM was used to print screen 
					      coordinates))
				      (("26-JUL-82 20:38:17" . "19-JUL-82 18:37:56")
				       DD:
				       (/lisp/ddyer/lisp/init/SCREENOP.;31 . 
					 /lisp/ddyer/lisp/init/SCREENOP.;19)
				       (Create2621k45Driver PARSECHARSEQUENCE CreateV2Driver 
							    PREPAREDELETENEXT PARSETERMCAP 
							    CreatePrototypeDriver SCREENOPFILEPKGCOMS 
							    SCREENDRIVERS DISPLAYTERMP CreateSDDriver 
							    BUILDDRIVER SCREENOPS SCREENOPFNS 
							    SCREENOPVARS SCREENOPCOMS))
				      ("27-JUL-82 23:34:50" ddyer /lisp/ddyer/lisp/init/SCREENOP.;2
							    (SCREENOPCOMS SCREENOPFILEPKGCOMS 
									  SCREENOPFNS SCREENOPVARS 
									  SCREENDRIVERS BUILDDRIVER))
				      (("24-OCT-82 00:08:22" . "30-JUL-82 13:37:59")
				       DD:
				       (/lisp/ddyer/lisp/init/SCREENOP.;5 . 
					 /lisp/ddyer/lisp/init/SCREENOP.;3)
				       ((VARS SCREENOPCOMS SCREENOPFILEPKGCOMS SCREENOPFNS 
					      SCREENOPVARS SCREENOPEDITHIST SCREENOPMACROS 
					      SCREENOPRECORDS SCREENOPS)
					(SCREENDRIVERS CreateD2Driver)
					(FNS CreateD2Driver)
					(FILEPKGCOMS SCREENDRIVERS)
					(FNS Create2621k45Driver CHECKIFSCREENDRIVER PARSECURSORPOS)
					(FNS PARSECURSORPOS SCREENOPCOMPILED SCREENOP)
					(RECORDS SCREENDRIVER)
					(FNS \SCREENPUT)
					(FNS PREPAREDELETENEXT CSPEED)
					SCREENOPCOMS SCREENOPFILEPKGCOMS SCREENOPFNS SCREENOPVARS 
					SCREENOPEDITHIST SCREENOPMACROS SCREENOPRECORDS SGTTYB 
					SCREENDRIVERS)
				       (tweaked to accept ill-formed string type specifiers, where 
						there is no = before theparameter))
				      ("15-DEC-82 12:14:10" DD: /lisp/ddyer/lisp/init.4/SCREENOP.;2
							    (CreatekbDriver))
				      ("15-DEC-82 12:23:54" DD: /lisp/ddyer/lisp/init.4/SCREENOP.;3
							    (CreatekbDriver))
				      ("11-Jan-83 02:12:26" DD: <DDYER>SCREENOP..25 (BUILDDRIVER
							      PARSETERMCAP))
				      ("14-Jan-83 15:17:56" DD: <DDYER>SCREENOP..29 (DISPLAYTERMP))
				      ("16-FEB-83 18:40:35" DD: /lisp/ddyer/lisp/init/SCREENOP.;2
							    (CreateD2Driver))
				      ("18-FEB-83 01:09:55" DD: /lisp/ddyer/lisp/init/SCREENOP.;3
							    (DISPLAYTERMP COMPILESCREENOP))
				      ("20-FEB-83 20:44:01" DD: /lisp/ddyer/lisp/init/SCREENOP.;5
							    (PARSETERMCAP CreateD2Driver 
									  CreatekbDriver 
									  PARSECHARSEQUENCE 
									  CreateSDDriver 
									  Create2621k45Driver 
									  CreateV2Driver))
				      ("20-FEB-83 20:57:01" DD: /lisp/ddyer/lisp/init/SCREENOP.;6
							    (KNOWNTERMTYPES DISPLAYTERMP 
									    CreateD0Driver 
									    Created1Driver))
				      ("20-FEB-83 21:47:18" DD: /lisp/ddyer/lisp/init/SCREENOP.;7
							    (PARSETERMCAP DISPLAYTERMP)
							    (made PARSETERMCAP and friends more 
								  defensive against junk in termcap 
								  strings, and added a few new 
								  drivers for VT100 and DM1520))
				      ("20-FEB-83 22:05:14" DD: /lisp/ddyer/lisp/init/SCREENOP.;8
							    (KNOWNTERMTYPES CreatePrototypeDriver))
				      ("22-FEB-83 11:05:20" DD: /lisp/ddyer/lisp/init/SCREENOP.;4
							    (CreateD2Driver CreateD0Driver 
									    CreatekbDriver 
									    PARSECURSORPOS 
									    CreateSDDriver 
									    Create2621k45Driver 
									    Created1Driver 
									    CreateV2Driver 
									    CreateH8Driver))))
)

(* FOLLOWING DEFINITIONS EXPORTED)



(RPAQQ SCREENOPMACROS (SCREENOP))
(DECLARE: EVAL@COMPILE 

(PUTPROPS SCREENOP MACRO (X (COMPILESCREENOP X)))
)
(DECLARE: EVAL@COMPILE DONTCOPY 
(DEFINEQ

(COMPILESCREENOP
  [LAMBDA (X)                                               (* DD: "18-FEB-83 01:00")

          (* this does the work of compiling a SCREENOP into a more effecient form, with the function lookup already done.
	  It assumes that changes to the SCREENDRIVER record will be backward compatable)


    (PROG (FIELDNAMES (OP (CAR X))
		      (ARG1 (CADR X)))
          (RETURN (COND
		    [(EQ (CAR (LISTP OP))
			 (QUOTE QUOTE))
		      (COND
			([NOT (FMEMB (CADR OP)
				     (SETQ FIELDNAMES (RECORDFIELDNAMES (QUOTE SCREENDRIVER]
			  (COMPERRM (LIST (CADAR X)
					  "IS NOT A DEFINED SCREENOP"))
			  (QUOTE IGNOREMACRO))
			[(AND (EQ (CADR OP)
				  (QUOTE GETHANDLER))
			      (EQ (CAR (LISTP ARG1))
				  (QUOTE QUOTE))
			      (FMEMB (CADR ARG1)
				     FIELDNAMES))
			  (LIST (QUOTE AND)
				(QUOTE CURRENTSCREEN)
				(LIST (QUOTE FFETCH)
				      (LIST (QUOTE SCREENDRIVER)
					    (CADR ARG1))
				      (QUOTE CURRENTSCREEN]
			(T (LIST (QUOTE AND)
				 (QUOTE CURRENTSCREEN)
				 (NCONC (LIST (QUOTE SCREENOPCOMPILED)
					      (KWOTE (CADR OP))
					      (LIST (QUOTE FFETCH)
						    (LIST (QUOTE SCREENDRIVER)
							  (CADR OP))
						    (QUOTE CURRENTSCREEN)))
					(CDR X]
		    (T (QUOTE IGNOREMACRO])
)
)

(RPAQQ SCREENOPRECORDS (SCREENDRIVER SGTTYB))
[DECLARE: EVAL@COMPILE 

(ARRAYBLOCK SCREENDRIVER (TYPELIST XSIZE YSIZE CLEAR CLEARLINE CLEARREST INSERT INSERTLINE DELETE 
				   DELETELINE SETHIGHLIGHT CLEARHIGHLIGHT SETLOCK CLEARLOCK SETCURSOR 
				   READCURSOR OVERSTRIKEP OTHERINFO OTHERFUNCTIONS \INFOALIST 
				   GETHANDLER SETINFO PAD PRINT)
	    (CREATE (PROG ((TMP DATUM))
		          (DECLARE (LOCALVARS TMP))
		          (push SYSTEMSCREENDRIVERS TMP)
		          (RETURN TMP)))
	    OVERSTRIKEP _(FUNCTION NILL)
	    SETLOCK _(FUNCTION NILL)
	    CLEARLOCK _(FUNCTION NILL)
	    SETHIGHLIGHT _(FUNCTION NILL)
	    CLEARHIGHLIGHT _(FUNCTION NILL)
	    OTHERINFO _(FUNCTION GETSCREENOPINFO)
	    OTHERFUNCTIONS _(FUNCTION NILL)
	    SETINFO _(FUNCTION SETSCREENOPINFO)
	    \INFOALIST _(CONS (CONS (QUOTE CREATED)
				    (DATE)))
	    PAD _[FUNCTION (LAMBDA (N)
		(RPTQ N (\SCREENPUT 0]
	    PRINT _(FUNCTION \SCREENPUT)
	    GETHANDLER _(FUNCTION GETSCREENOPHANDLER))

(ARRAYBLOCK SGTTYB ((ISPEED BITS 8)
		    (OSPEED BITS 8)
		    (ERASE BITS 8)
		    (KILL BITS 8)
		    (FLAGS BITS 16))
		   [ACCESSFNS ((OUTPUTSPEED (SELECTQ (FETCH (SGTTYB OSPEED) OF DATUM)
						     (1 50)
						     (2 75)
						     (3 110)
						     (4 134)
						     (5 150)
						     (6 200)
						     (7 300)
						     (8 600)
						     (9 1200)
						     (10 1800)
						     (11 2400)
						     (12 4800)
						     (13 9600)
						     NIL])
]


(* END EXPORTED DEFINITIONS)

(DEFINEQ

(CreatePrototypeDriver
  [LAMBDA NIL                                               (* DD: "20-FEB-83 21:55")

          (* this prototype driver is used by BUILDDRIVER as a template for defining new drivers, the atom PROGRAM is SUBST'd 
	  with the stuff from termcap info. The expressions are all (QUOTE --) deliberately so they will not be compiled, but 
	  for copies, one would want to use FUNCTION to cause them to be compiled)


    (create SCREENDRIVER
	    TYPELIST _(QUOTE [LAMBDA NIL                    (* return a list of terminal types 
							    (as processed by DISPLAYTERMTYPE and DISPLAYTERMP that 
							    this is a driver for))
				     NIL . PROGRAM])
	    XSIZE _(QUOTE [LAMBDA NIL                       (* return the width of the screen in characters)
 . PROGRAM])
	    YSIZE _(QUOTE [LAMBDA NIL                       (* return the number of lines on the screen.)
 . PROGRAM])
	    CLEAR _(QUOTE [LAMBDA NIL                       (* home, unlock, and clear the whole screen)
 . PROGRAM])
	    CLEARLINE _(QUOTE [LAMBDA NIL                   (* clear the rest of the current line) . 
				      PROGRAM])
	    CLEARREST _(QUOTE [LAMBDA NIL                   (* clear the rest of the current line) . 
				      PROGRAM])
	    INSERT _(QUOTE [LAMBDA NIL                      (* set insert mode) . PROGRAM])
	    INSERTLINE _[QUOTE (LAMBDA (N)                  (* insert a new line before the current line)
				       (RPTQ (OR N 1) . PROGRAM]
	    DELETE _[QUOTE (LAMBDA (N)                      (* delete N characters at the current cursor position)
				   (RPTQ (OR N 1) . PROGRAM]
	    DELETELINE _[QUOTE (LAMBDA (N)                  (* delete this line and the next N-1 lines, scrolling up
							    the bottom of the screen)
				       (RPTQ (OR N 1) . PROGRAM]
	    SETHIGHLIGHT _(QUOTE [LAMBDA NIL                (* set some sort of highlight mode) . 
					 PROGRAM])
	    CLEARHIGHLIGHT _(QUOTE [LAMBDA NIL              (* clear the highlight mode) . PROGRAM])
	    SETLOCK _(QUOTE [LAMBDA NIL 

          (* set a memory lock, to prevent the lines above the cursor from rolling off the screen. If your terminal can't 
	  support this, a nop will probably be ok)

 . PROGRAM])
	    CLEARLOCK _(QUOTE [LAMBDA NIL                   (* clear the memory lock. a nop is ok if set lock is not
							    supported) . PROGRAM])
	    SETCURSOR _(QUOTE [LAMBDA (X Y)                 (* position the cursor to X,Y)
				       . PROGRAM])
	    READCURSOR _(QUOTE [LAMBDA NIL                  (* read the current cursor position) . 
				       PROGRAM])
	    OVERSTRIKEP _(QUOTE [LAMBDA NIL                 (* return T if this terminal overstrikes rather than 
							    superceeds) . PROGRAM])
	    PAD _(QUOTE (LAMBDA (N)                         (* output N pad characters, called by DELAYFOR after 
							    computing the correct number)
				(RPTQ N . PROGRAM])
)

(PUTPROPS CreatePrototypeDriver SCREENDRIVERS T)
[MAPCAR (QUOTE (CreatePrototypeDriver))
	(FUNCTION (LAMBDA (A)
			  (AND (GETD A)
			       (APPLY* A]

(RPAQQ SCREENOPS (Create2621k45Driver CreateAAdriver CreateD2Driver CreateV2Driver CreatekbDriver 
				      CreateHP2640Driver CreateSDDriver Created1Driver CreateD0Driver 
				      CreateH8Driver))
(DEFINEQ

(Create2621k45Driver
  [LAMBDA NIL                                               (* this driver generated automatically from termcap 
							    information)
    (create SCREENDRIVER
	    TYPELIST _[FUNCTION (LAMBDA NIL                 (* return a list of terminal types 
							    (as processed by DISPLAYTERMTYPE and DISPLAYTERMP that 
							    this is a driver for))
		NIL
		(QUOTE (2621k45 h3 HP hp2621k45 k45]
	    XSIZE _(FUNCTION [LAMBDA NIL                    (* return the width of the screen in characters)
		80])
	    YSIZE _(FUNCTION [LAMBDA NIL                    (* return the number of lines on the screen.)
		24])
	    CLEAR _(FUNCTION [LAMBDA NIL                    (* home, unlock, and clear the whole screen)
		(\SCREENPUT "HJ"])
	    CLEARLINE _(FUNCTION [LAMBDA NIL                (* clear the rest of the current line)
		(\SCREENPUT "K")
		(DELAYFOR 8])
	    CLEARREST _(FUNCTION [LAMBDA NIL                (* clear the rest of the current line)
		(\SCREENPUT "J")
		(DELAYFOR 8])
	    INSERT _(FUNCTION [LAMBDA NIL                   (* set insert mode)
		(\SCREENPUT "Q"])
	    INSERTLINE _[FUNCTION (LAMBDA (N)               (* insert a new line before the current line)
		(RPTQ (OR N 1)
		      (\SCREENPUT "L")
		      (DELAYFOR 38]
	    DELETE _[FUNCTION (LAMBDA (N)                   (* delete N characters at the current cursor position)
		(RPTQ (OR N 1)
		      (\SCREENPUT "P")
		      (DELAYFOR 2]
	    DELETELINE _[FUNCTION (LAMBDA (N)               (* delete this line and the next N-1 lines, scrolling up
							    the bottom of the screen)
		(RPTQ (OR N 1)
		      (\SCREENPUT "M"]
	    SETHIGHLIGHT _(FUNCTION [LAMBDA NIL             (* set some sort of highlight mode)
		(\SCREENPUT "&dD"])
	    CLEARHIGHLIGHT _(FUNCTION [LAMBDA NIL           (* clear the highlight mode)
		(\SCREENPUT "&d@"])
	    SETLOCK _(FUNCTION [LAMBDA NIL

          (* set a memory lock, to prevent the lines above the cursor from rolling off the screen. If your terminal can't 
	  support this, a nop will probably be ok)


		(\SCREENPUT "l"])
	    CLEARLOCK _(FUNCTION [LAMBDA NIL                (* clear the memory lock. a nop is ok if set lock is not
							    supported)
		(\SCREENPUT "m"])
	    SETCURSOR _(FUNCTION [LAMBDA (X Y)              (* position the cursor to X,Y)
		(\SCREENPUT "&a")
		(PRIN3 X)
		(\SCREENPUT "c")
		(PRIN3 Y)
		(\SCREENPUT "Y")
		(DELAYFOR 2])
	    OVERSTRIKEP _(FUNCTION [LAMBDA NIL              (* return T if this terminal overstrikes rather than 
							    superceeds)
		NIL])
	    \INFOALIST _(QUOTE ((TERMCAP 

"h3|2621k45|hp2621k45|k45:kb=^H:ku=\EA:kd=\EB:kl=\ED:kr=\EC:kh=\Eh:ks=\E&s1A:ke=\E&s0A:pc=\200:is=@:bt=2\Ei:cm=2\E&a%%r%%dc%%dY:dc=2\EP:ip=2:kn#8:k1=\Ep\r:k2=\Eq\r:k3=\Er\r:k4=\Es\r:k5=\Et\r:k6=\Eu\r:k7=\Ev\r:k8=\Ew\r:ta=2^I:if=/usr/lib/tabset/std:al=38\EL:am:bs:cd=8\EJ:ce=8\EK:ch=8\E&a%%dC:cl=\EH\EJ:co#80:cv=\E&a%%dY:da:db:dl=\EM:ei=\ER:im=\EQ:li#24:mi:ml=\El:mu=\Em:nd=\EC:pt:se=\E&d@:so=\E&dD:us=\E&dD:ue=\E&d@:up=\EA:xs"
					 )
				 (TYPE (QUOTE (2621k45 h3 HP hp2621k45 k45)))
				 (DELETENEXT %% %)
				 (kb (\SCREENPUT ""))
				 (ku (\SCREENPUT "A"))
				 (kd (\SCREENPUT "B"))
				 (kl (\SCREENPUT "D"))
				 (kr (\SCREENPUT "C"))
				 (kh (\SCREENPUT "h"))
				 (ks (\SCREENPUT "&s1A"))
				 (ke (\SCREENPUT "&s0A"))
				 (pc (\SCREENPUT " "))
				 (is (\SCREENPUT "@"))
				 (bt (\SCREENPUT "i")
				     (DELAYFOR 2))
				 (cm (\SCREENPUT "&a")
				     (PRIN3 X)
				     (\SCREENPUT "c")
				     (PRIN3 Y)
				     (\SCREENPUT "Y")
				     (DELAYFOR 2))
				 (dc (\SCREENPUT "P")
				     (DELAYFOR 2))
				 (ip (\SCREENPUT "")
				     (DELAYFOR 2))
				 (kn 8)
				 (k1 (\SCREENPUT "p"))
				 (k2 (\SCREENPUT "q"))
				 (k3 (\SCREENPUT "r"))
				 (k4 (\SCREENPUT "s"))
				 (k5 (\SCREENPUT "t"))
				 (k6 (\SCREENPUT "u"))
				 (k7 (\SCREENPUT "v"))
				 (k8 (\SCREENPUT "w"))
				 (ta (\SCREENPUT "	")
				     (DELAYFOR 2))
				 (if (\SCREENPUT "/usr/lib/tabset/std"))
				 (al (\SCREENPUT "L")
				     (DELAYFOR 38))
				 (am)
				 (bs)
				 (cd (\SCREENPUT "J")
				     (DELAYFOR 8))
				 (ce (\SCREENPUT "K")
				     (DELAYFOR 8))
				 (ch (\SCREENPUT "&a%%dC")
				     (DELAYFOR 8))
				 (cl (\SCREENPUT "HJ"))
				 (co 80)
				 (cv (\SCREENPUT "&a%%dY"))
				 (da)
				 (db)
				 (dl (\SCREENPUT "M"))
				 (ei (\SCREENPUT "R"))
				 (im (\SCREENPUT "Q"))
				 (li 24)
				 (mi)
				 (ml (\SCREENPUT "l"))
				 (mu (\SCREENPUT "m"))
				 (nd (\SCREENPUT "C"))
				 (pt)
				 (se (\SCREENPUT "&d@"))
				 (so (\SCREENPUT "&dD"))
				 (us (\SCREENPUT "&dD"))
				 (ue (\SCREENPUT "&d@"))
				 (up (\SCREENPUT "A"))
				 (xs])

(CreateAAdriver
  [LAMBDA NIL                                               (* DD: "15-JUL-82 21:22")
    (DECLARE (GLOBALVARS HPENHANCECHAR))
    (create SCREENDRIVER
	    TYPELIST _[FUNCTION (LAMBDA NIL
		(QUOTE (ANNARBOR]
	    XSIZE _(FUNCTION [LAMBDA NIL 80])
	    YSIZE _(FUNCTION [LAMBDA NIL 40])
	    CLEAR _[FUNCTION (LAMBDA NIL
		(PRIN3 (QUOTE %[H%[J]
	    CLEARLINE _[FUNCTION (LAMBDA (N)
		(RPTQ (OR N 1)
		      (PRIN3 (QUOTE %[K]
	    CLEARREST _[FUNCTION (LAMBDA NIL
		(PRIN3 (QUOTE %[J]
	    INSERT _ NIL
	    INSERTLINE _ NIL
	    DELETE _ NIL
	    DELETELINE _[FUNCTION (LAMBDA (N)
		(RPTQ (OR N 1)
		      (PRIN3 (QUOTE ))
		      (PRIN3 (QUOTE M]
	    SETHIGHLIGHT _[FUNCTION (LAMBDA NIL
		(PRIN3 (QUOTE %[7m]
	    CLEARHIGHLIGHT _[FUNCTION (LAMBDA NIL
		(PRIN3 (QUOTE %[0m]
	    SETLOCK _(FUNCTION NILL)
	    CLEARLOCK _(FUNCTION NILL)
	    SETCURSOR _[FUNCTION (LAMBDA (X Y)
		(PRIN3 (QUOTE %[))
		(PRIN3 (ADD1 Y))
		(PRIN3 (QUOTE ;))
		(PRIN3 (ADD1 X))
		(PRIN3 (QUOTE H]
	    READCURSOR _ NIL])

(CreateD2Driver
  [LAMBDA NIL                                               (* this driver generated automatically from termcap 
							    information)
    (create SCREENDRIVER
	    TYPELIST _[FUNCTION (LAMBDA NIL                 (* return a list of terminal types 
							    (as processed by DISPLAYTERMTYPE and DISPLAYTERMP that 
							    this is a driver for))
		NIL
		(QUOTE (D2 dm2500 datamedia2500 2500]
	    XSIZE _(FUNCTION [LAMBDA NIL                    (* return the width of the screen in characters)
		80])
	    YSIZE _(FUNCTION [LAMBDA NIL                    (* return the number of lines on the screen.)
		24])
	    CLEAR _(FUNCTION [LAMBDA NIL                    (* home, unlock, and clear the whole screen)
		(\SCREENPUT ""])
	    CLEARLINE _(FUNCTION [LAMBDA NIL                (* clear the rest of the current line)
		(\SCREENPUT ""])
	    INSERT _(FUNCTION [LAMBDA NIL                   (* set insert mode)
		(\SCREENPUT ""])
	    INSERTLINE _[FUNCTION (LAMBDA (N)               (* insert a new line before the current line)
		(RPTQ (OR N 1)
		      (\SCREENPUT "
")
		      (DELAYFOR 15]
	    DELETE _[FUNCTION (LAMBDA (N)                   (* delete N characters at the current cursor position)
		(RPTQ (OR N 1)
		      (\SCREENPUT "")
		      (DELAYFOR 10 T]
	    DELETELINE _[FUNCTION (LAMBDA (N)               (* delete this line and the next N-1 lines, scrolling up
							    the bottom of the screen)
		(RPTQ (OR N 1)
		      (\SCREENPUT "")
		      (DELAYFOR 10 T]
	    SETHIGHLIGHT _(FUNCTION [LAMBDA NIL             (* set some sort of highlight mode)
		(\SCREENPUT ""])
	    CLEARHIGHLIGHT _(FUNCTION [LAMBDA NIL           (* clear the highlight mode)
		(\SCREENPUT ""])
	    SETLOCK _(FUNCTION [LAMBDA NIL

          (* set a memory lock, to prevent the lines above the cursor from rolling off the screen. If your terminal can't 
	  support this, a nop will probably be ok)


		NIL])
	    CLEARLOCK _(FUNCTION [LAMBDA NIL                (* clear the memory lock. a nop is ok if set lock is not
							    supported)
		NIL])
	    SETCURSOR _[FUNCTION (LAMBDA (X Y)              (* position the cursor to X,Y)
		(\SCREENPUT "")
		(\SCREENPUT (LOGXOR 96 X))
		(\SCREENPUT (LOGXOR 96 Y]
	    OVERSTRIKEP _(FUNCTION [LAMBDA NIL              (* return T if this terminal overstrikes rather than 
							    superceeds)
		NIL])
	    \INFOALIST _(QUOTE ((TERMCAP 

"D2|dm2500|datamedia2500|2500:al=15^P\n^X^]^X^]:bs:ce=^W:cl=^^^^\177:cm=^L%%r%%n%%.%%.:co#80:dc=10*\b:dl=10*^P^Z^X^]:dm=^P:ed=^X^]:ei=10\377\377^X^]:ho=^B:ic10*^\:im=^P:li#24:nc:nd=^\:pc=\377:so=^N:se=^X^]:up=^Z"
					 )
				 (TYPE (QUOTE (D2 dm2500 datamedia2500 2500)))
				 (DELETENEXT %% %)
				 (al (\SCREENPUT "
")
				     (DELAYFOR 15))
				 (bs)
				 (ce (\SCREENPUT ""))
				 (cl (\SCREENPUT ""))
				 (cm (\SCREENPUT "")
				     (\SCREENPUT (LOGXOR 96 X))
				     (\SCREENPUT (LOGXOR 96 Y)))
				 (co 80)
				 (dc (\SCREENPUT "")
				     (DELAYFOR 10 T))
				 (dl (\SCREENPUT "")
				     (DELAYFOR 10 T))
				 (dm (\SCREENPUT ""))
				 (ed (\SCREENPUT ""))
				 (ei (\SCREENPUT "")
				     (DELAYFOR 10))
				 (ho (\SCREENPUT ""))
				 (ic 10*^\)
				 (im (\SCREENPUT ""))
				 (li 24)
				 (nc)
				 (nd (\SCREENPUT ""))
				 (pc (\SCREENPUT ""))
				 (so (\SCREENPUT ""))
				 (se (\SCREENPUT ""))
				 (up (\SCREENPUT ""])

(CreateV2Driver
  [LAMBDA NIL                                               (* this driver generated automatically from termcap 
							    information)
    (create SCREENDRIVER
	    TYPELIST _[FUNCTION (LAMBDA NIL                 (* return a list of terminal types 
							    (as processed by DISPLAYTERMTYPE and DISPLAYTERMP that 
							    this is a driver for))
		NIL
		(QUOTE (V2 vi200 visual]
	    XSIZE _(FUNCTION [LAMBDA NIL                    (* return the width of the screen in characters)
		80])
	    YSIZE _(FUNCTION [LAMBDA NIL                    (* return the number of lines on the screen.)
		24])
	    CLEAR _(FUNCTION [LAMBDA NIL                    (* home, unlock, and clear the whole screen)
		(\SCREENPUT "v"])
	    CLEARLINE _(FUNCTION [LAMBDA NIL                (* clear the rest of the current line)
		(\SCREENPUT "x")
		(DELAYFOR 8 T])
	    CLEARREST _(FUNCTION [LAMBDA NIL                (* clear the rest of the current line)
		(\SCREENPUT "y"])
	    INSERT _(FUNCTION [LAMBDA NIL                   (* set insert mode)
		(\SCREENPUT "i"])
	    INSERTLINE _[FUNCTION (LAMBDA (N)               (* insert a new line before the current line)
		(RPTQ (OR N 1)
		      (\SCREENPUT "L")
		      (DELAYFOR 4 T]
	    DELETE _[FUNCTION (LAMBDA (N)                   (* delete N characters at the current cursor position)
		(RPTQ (OR N 1)
		      (\SCREENPUT "O")
		      (DELAYFOR 8 T]
	    DELETELINE _[FUNCTION (LAMBDA (N)               (* delete this line and the next N-1 lines, scrolling up
							    the bottom of the screen)
		(RPTQ (OR N 1)
		      (\SCREENPUT "M")
		      (DELAYFOR 8 T]
	    SETHIGHLIGHT _(FUNCTION [LAMBDA NIL             (* set some sort of highlight mode)
		NIL])
	    CLEARHIGHLIGHT _(FUNCTION [LAMBDA NIL           (* clear the highlight mode)
		NIL])
	    SETLOCK _(FUNCTION [LAMBDA NIL

          (* set a memory lock, to prevent the lines above the cursor from rolling off the screen. If your terminal can't 
	  support this, a nop will probably be ok)


		NIL])
	    CLEARLOCK _(FUNCTION [LAMBDA NIL                (* clear the memory lock. a nop is ok if set lock is not
							    supported)
		NIL])
	    SETCURSOR _[FUNCTION (LAMBDA (X Y)              (* position the cursor to X,Y)
		(\SCREENPUT "Y")
		(\SCREENPUT (IPLUS 32 Y))
		(\SCREENPUT (IPLUS 32 X]
	    OVERSTRIKEP _(FUNCTION [LAMBDA NIL              (* return T if this terminal overstrikes rather than 
							    superceeds)
		NIL])
	    \INFOALIST _(QUOTE ((TERMCAP 

"V2|vi200|visual:al=4*\EL:am:bs:cd=\Ey:ce=8*\Ex:cl=\Ev:cm=\EY%%+\040%%+\040:co#80:dc=8*\EO:dl=8*\EM:ho=\EH:is=\E3\Eb\Ej\E\\\El\EG\Ed\Ek:ks=\E=:ke=\E>:im=\Ei:ei=\Ej:ic=\Ei\040\b\Ej:k0=\E?p:k1=\E?q:k2=\E?r:k3=\E?s:k4=\E?t:k5=\E?u:k6=\E?v:k7=\E?w:k8=\E?x:k9=\E?y:kl=\ED:kr=\EC:ku=\EA:kd=\EB:kh=\EH:li#24:nd=\EC:pt:sr=\EI:up=\EA:vs=\Ed:ve=\Ec"
					 )
				 (TYPE (QUOTE (V2 vi200 visual)))
				 (DELETENEXT %% %)
				 (al (\SCREENPUT "L")
				     (DELAYFOR 4 T))
				 (am)
				 (bs)
				 (cd (\SCREENPUT "y"))
				 (ce (\SCREENPUT "x")
				     (DELAYFOR 8 T))
				 (cl (\SCREENPUT "v"))
				 (cm (\SCREENPUT "Y")
				     (\SCREENPUT (IPLUS 32 Y))
				     (\SCREENPUT (IPLUS 32 X)))
				 (co 80)
				 (dc (\SCREENPUT "O")
				     (DELAYFOR 8 T))
				 (dl (\SCREENPUT "M")
				     (DELAYFOR 8 T))
				 (ho (\SCREENPUT "H"))
				 (is (\SCREENPUT "3bj\lGdk"))
				 (ks (\SCREENPUT "="))
				 (ke (\SCREENPUT ">"))
				 (im (\SCREENPUT "i"))
				 (ei (\SCREENPUT "j"))
				 (ic (\SCREENPUT "i j"))
				 (k0 (\SCREENPUT "?p"))
				 (k1 (\SCREENPUT "?q"))
				 (k2 (\SCREENPUT "?r"))
				 (k3 (\SCREENPUT "?s"))
				 (k4 (\SCREENPUT "?t"))
				 (k5 (\SCREENPUT "?u"))
				 (k6 (\SCREENPUT "?v"))
				 (k7 (\SCREENPUT "?w"))
				 (k8 (\SCREENPUT "?x"))
				 (k9 (\SCREENPUT "?y"))
				 (kl (\SCREENPUT "D"))
				 (kr (\SCREENPUT "C"))
				 (ku (\SCREENPUT "A"))
				 (kd (\SCREENPUT "B"))
				 (kh (\SCREENPUT "H"))
				 (li 24)
				 (nd (\SCREENPUT "C"))
				 (pt)
				 (sr (\SCREENPUT "I"))
				 (up (\SCREENPUT "A"))
				 (vs (\SCREENPUT "d"))
				 (ve (\SCREENPUT "c"])

(CreatekbDriver
  [LAMBDA NIL                                               (* this driver generated automatically from termcap 
							    information)
    (create SCREENDRIVER
	    TYPELIST _[FUNCTION (LAMBDA NIL                 (* return a list of terminal types 
							    (as processed by DISPLAYTERMTYPE and DISPLAYTERMP that 
							    this is a driver for))
		NIL
		(QUOTE (kb h19 heath h19b heathkit]
	    XSIZE _(FUNCTION [LAMBDA NIL                    (* return the width of the screen in characters)
		80])
	    YSIZE _(FUNCTION [LAMBDA NIL                    (* return the number of lines on the screen.)
		24])
	    CLEAR _(FUNCTION [LAMBDA NIL                    (* home, unlock, and clear the whole screen)
		(\SCREENPUT "E"])
	    CLEARLINE _(FUNCTION [LAMBDA NIL                (* clear the rest of the current line)
		(\SCREENPUT "K"])
	    CLEARREST _(FUNCTION [LAMBDA NIL                (* clear the rest of the current line)
		(\SCREENPUT "J"])
	    INSERT _(FUNCTION [LAMBDA NIL                   (* set insert mode)
		(\SCREENPUT "@"])
	    INSERTLINE _[FUNCTION (LAMBDA (N)               (* insert a new line before the current line)
		(RPTQ (OR N 1)
		      (\SCREENPUT "L"]
	    DELETE _[FUNCTION (LAMBDA (N)                   (* delete N characters at the current cursor position)
		(RPTQ (OR N 1)
		      (\SCREENPUT "N"]
	    DELETELINE _[FUNCTION (LAMBDA (N)               (* delete this line and the next N-1 lines, scrolling up
							    the bottom of the screen)
		(RPTQ (OR N 1)
		      (\SCREENPUT "M"]
	    SETHIGHLIGHT _(FUNCTION [LAMBDA NIL             (* set some sort of highlight mode)
		(\SCREENPUT "p"])
	    CLEARHIGHLIGHT _(FUNCTION [LAMBDA NIL           (* clear the highlight mode)
		(\SCREENPUT "q"])
	    SETLOCK _(FUNCTION [LAMBDA NIL

          (* set a memory lock, to prevent the lines above the cursor from rolling off the screen. If your terminal can't 
	  support this, a nop will probably be ok)


		NIL])
	    CLEARLOCK _(FUNCTION [LAMBDA NIL                (* clear the memory lock. a nop is ok if set lock is not
							    supported)
		NIL])
	    SETCURSOR _[FUNCTION (LAMBDA (X Y)              (* position the cursor to X,Y)
		(\SCREENPUT "Y")
		(\SCREENPUT (IPLUS 32 Y))
		(\SCREENPUT (IPLUS 32 X]
	    OVERSTRIKEP _(FUNCTION [LAMBDA NIL              (* return T if this terminal overstrikes rather than 
							    superceeds)
		NIL])
	    \INFOALIST _(QUOTE ((TERMCAP 

"kb|h19|heath|h19b|heathkit:al=\EL:am:bs:cd=\EJ:ce=\EK:cl=\EE:cm=\EY%%+\040%%+\040:co#80:dc=\EN:dl=\EM:dn=\EB:ei=\EO:ho=\EH:im=\E@:li#24:mi:nd=\EC:as=\EF:ae=\EG:ms:pt:se=\Eq:so=\Ep:up=\EA:vs=\Ex4:ve=\Ey4:kb=^h:ku=\EA:kd=\EB:kl=\ED:kr=\EC:kh=\EH:kn#8:k1=\ES:k2=\ET:k3=\EU:k4=\EV:k5=\EW:l6=blue:l7=red:l8=white:k6=\EP:k7=\EQ:k8=\ER"
					 )
				 (TYPE (QUOTE (kb h19 heath h19b heathkit)))
				 (DELETENEXT %% %)
				 (al (\SCREENPUT "L"))
				 (am)
				 (bs)
				 (cd (\SCREENPUT "J"))
				 (ce (\SCREENPUT "K"))
				 (cl (\SCREENPUT "E"))
				 (cm (\SCREENPUT "Y")
				     (\SCREENPUT (IPLUS 32 Y))
				     (\SCREENPUT (IPLUS 32 X)))
				 (co 80)
				 (dc (\SCREENPUT "N"))
				 (dl (\SCREENPUT "M"))
				 (dn (\SCREENPUT "B"))
				 (ei (\SCREENPUT "O"))
				 (ho (\SCREENPUT "H"))
				 (im (\SCREENPUT "@"))
				 (li 24)
				 (mi)
				 (nd (\SCREENPUT "C"))
				 (as (\SCREENPUT "F"))
				 (ae (\SCREENPUT "G"))
				 (ms)
				 (pt)
				 (se (\SCREENPUT "q"))
				 (so (\SCREENPUT "p"))
				 (up (\SCREENPUT "A"))
				 (vs (\SCREENPUT "x4"))
				 (ve (\SCREENPUT "y4"))
				 (kb (\SCREENPUT ""))
				 (ku (\SCREENPUT "A"))
				 (kd (\SCREENPUT "B"))
				 (kl (\SCREENPUT "D"))
				 (kr (\SCREENPUT "C"))
				 (kh (\SCREENPUT "H"))
				 (kn 8)
				 (k1 (\SCREENPUT "S"))
				 (k2 (\SCREENPUT "T"))
				 (k3 (\SCREENPUT "U"))
				 (k4 (\SCREENPUT "V"))
				 (k5 (\SCREENPUT "W"))
				 (l6 (\SCREENPUT "blue"))
				 (l7 (\SCREENPUT "red"))
				 (l8 (\SCREENPUT "white"))
				 (k6 (\SCREENPUT "P"))
				 (k7 (\SCREENPUT "Q"))
				 (k8 (\SCREENPUT "R"])

(CreateHP2640Driver
  [LAMBDA NIL                                               (* DD: "18-JUL-82 14:30")
    (DECLARE (GLOBALVARS RUBOUTS HPENCHANCECHAR))
    (create SCREENDRIVER
	    TYPELIST _[FUNCTION (LAMBDA NIL
		(QUOTE (HP2640]
	    XSIZE _(FUNCTION [LAMBDA NIL 80])
	    YSIZE _(FUNCTION [LAMBDA NIL 24])
	    CLEAR _(FUNCTION [LAMBDA NIL
		(SCREENOP (QUOTE CLEARLOCK))
		(PRIN3 (QUOTE HJ))
		(PRIN3 RUBOUTS])
	    CLEARLINE _[FUNCTION (LAMBDA (N)
		(RPTQ (OR N 1)
		      (PRIN3 (QUOTE K))
		      (PRIN3 RUBOUTS]
	    CLEARREST _(FUNCTION [LAMBDA NIL
		(PRIN3 (QUOTE J))
		(PRIN3 RUBOUTS])
	    INSERT _ NIL
	    INSERTLINE _ NIL
	    DELETE _ NIL
	    DELETELINE _[FUNCTION (LAMBDA (N)
		(RPTQ (OR N 1)
		      (PRIN3 (QUOTE ))
		      (PRIN3 (QUOTE M))
		      (PRIN3 RUBOUTS]
	    SETHIGHLIGHT _(FUNCTION [LAMBDA NIL
		(PRIN3 (QUOTE &d))
		(PRIN3 HPENHANCECHAR])
	    CLEARHIGHLIGHT _(FUNCTION [LAMBDA NIL
		(PRIN3 (QUOTE &d@))
		(PRIN3 RUBOUTS])
	    SETLOCK _[FUNCTION (LAMBDA NIL
		(PRIN3 (QUOTE l]
	    CLEARLOCK _[FUNCTION (LAMBDA NIL
		(PRIN3 (QUOTE m]
	    SETCURSOR _[FUNCTION (LAMBDA (X Y)
		(PRIN3 (QUOTE &a))
		(PRIN3 X)
		(PRIN3 (QUOTE c))
		(PRIN3 Y)
		(PRIN3 (QUOTE R]
	    READCURSOR _ NIL
	    PAD _(FUNCTION (LAMBDA (N)
		(RPTQ N (\SCREENPUT 127])

(CreateSDDriver
  [LAMBDA NIL                                               (* this driver generated automatically from termcap 
							    information)
    (create SCREENDRIVER
	    TYPELIST _[FUNCTION (LAMBDA NIL                 (* return a list of terminal types 
							    (as processed by DISPLAYTERMTYPE and DISPLAYTERMP that 
							    this is a driver for))
		NIL
		(QUOTE (SD supdup]
	    XSIZE _(FUNCTION [LAMBDA NIL                    (* return the width of the screen in characters)
		80])
	    YSIZE _(FUNCTION [LAMBDA NIL                    (* return the number of lines on the screen.)
		24])
	    CLEAR _(FUNCTION [LAMBDA NIL                    (* home, unlock, and clear the whole screen)
		(\SCREENPUT ""])
	    CLEARLINE _(FUNCTION [LAMBDA NIL                (* clear the rest of the current line)
		(\SCREENPUT ""])
	    CLEARREST _(FUNCTION [LAMBDA NIL                (* clear the rest of the current line)
		(\SCREENPUT ""])
	    INSERTLINE _[FUNCTION (LAMBDA (N)               (* insert a new line before the current line)
		(RPTQ (OR N 1)
		      (\SCREENPUT ""]
	    DELETELINE _[FUNCTION (LAMBDA (N)               (* delete this line and the next N-1 lines, scrolling up
							    the bottom of the screen)
		(RPTQ (OR N 1)
		      (\SCREENPUT ""]
	    SETHIGHLIGHT _(FUNCTION [LAMBDA NIL             (* set some sort of highlight mode)
		(\SCREENPUT ""])
	    CLEARHIGHLIGHT _(FUNCTION [LAMBDA NIL           (* clear the highlight mode)
		(\SCREENPUT ""])
	    SETLOCK _(FUNCTION [LAMBDA NIL

          (* set a memory lock, to prevent the lines above the cursor from rolling off the screen. If your terminal can't 
	  support this, a nop will probably be ok)


		NIL])
	    CLEARLOCK _(FUNCTION [LAMBDA NIL                (* clear the memory lock. a nop is ok if set lock is not
							    supported)
		NIL])
	    SETCURSOR _(FUNCTION [LAMBDA (X Y)              (* position the cursor to X,Y)
		(\SCREENPUT "")
		(\SCREENPUT Y)
		(\SCREENPUT X])
	    OVERSTRIKEP _(FUNCTION [LAMBDA NIL              (* return T if this terminal overstrikes rather than 
							    superceeds)
		NIL])
	    \INFOALIST _(QUOTE ((TERMCAP 

"SD|supdup:co#80:li#24:am:vb=\177\23:nd=\177\20:cl=\177\22:so=\177\31:se=\177\32:pt:ce=\177\05:ec=\177\06:cd=\177\04:bs:up=\177\15:cm=\177\21%%.%%.:al=\177\25\01:dl=\177\26\01:ns"
					 )
				 (TYPE (QUOTE (SD supdup)))
				 (DELETENEXT %% %)
				 (co 80)
				 (li 24)
				 (am)
				 (vb (\SCREENPUT ""))
				 (nd (\SCREENPUT ""))
				 (cl (\SCREENPUT ""))
				 (so (\SCREENPUT ""))
				 (se (\SCREENPUT ""))
				 (pt)
				 (ce (\SCREENPUT ""))
				 (ec (\SCREENPUT ""))
				 (cd (\SCREENPUT ""))
				 (bs)
				 (up (\SCREENPUT ""))
				 (cm (\SCREENPUT "")
				     (\SCREENPUT Y)
				     (\SCREENPUT X))
				 (al (\SCREENPUT ""))
				 (dl (\SCREENPUT ""))
				 (ns])

(Created1Driver
  [LAMBDA NIL                                               (* this driver generated automatically from termcap 
							    information)
    (create SCREENDRIVER
	    TYPELIST _[FUNCTION (LAMBDA NIL                 (* return a list of terminal types 
							    (as processed by DISPLAYTERMTYPE and DISPLAYTERMP that 
							    this is a driver for))
		NIL
		(QUOTE (d1 vt100 vt-100 pt100 pt-100]
	    XSIZE _(FUNCTION [LAMBDA NIL                    (* return the width of the screen in characters)
		80])
	    YSIZE _(FUNCTION [LAMBDA NIL                    (* return the number of lines on the screen.)
		24])
	    CLEAR _(FUNCTION [LAMBDA NIL                    (* home, unlock, and clear the whole screen)
		(\SCREENPUT "[;H[2J")
		(DELAYFOR 50])
	    CLEARLINE _(FUNCTION [LAMBDA NIL                (* clear the rest of the current line)
		(\SCREENPUT "[K")
		(DELAYFOR 3])
	    CLEARREST _(FUNCTION [LAMBDA NIL                (* clear the rest of the current line)
		(\SCREENPUT "[J")
		(DELAYFOR 50])
	    SETHIGHLIGHT _(FUNCTION [LAMBDA NIL             (* set some sort of highlight mode)
		(\SCREENPUT "[7m")
		(DELAYFOR 2])
	    CLEARHIGHLIGHT _(FUNCTION [LAMBDA NIL           (* clear the highlight mode)
		(\SCREENPUT "[m")
		(DELAYFOR 2])
	    SETLOCK _(FUNCTION [LAMBDA NIL

          (* set a memory lock, to prevent the lines above the cursor from rolling off the screen. If your terminal can't 
	  support this, a nop will probably be ok)


		NIL])
	    CLEARLOCK _(FUNCTION [LAMBDA NIL                (* clear the memory lock. a nop is ok if set lock is not
							    supported)
		NIL])
	    SETCURSOR _(FUNCTION [LAMBDA (X Y)              (* position the cursor to X,Y)
		(\SCREENPUT "[")
		(PRINTNUM (QUOTE (FIX 2))
			  (ADD1 Y))
		(\SCREENPUT ";")
		(PRINTNUM (QUOTE (FIX 2))
			  X)
		(\SCREENPUT "H")
		(DELAYFOR 5])
	    OVERSTRIKEP _(FUNCTION [LAMBDA NIL              (* return T if this terminal overstrikes rather than 
							    superceeds)
		NIL])
	    \INFOALIST _(QUOTE ((TERMCAP 

"d1|vt100|vt-100|pt100|pt-100:co#80:li#24:am:cl=50\E[;H\E[2J:bs:cm=5\E[%%i%%2;%%2H:nd=2\E[C:up=2\E[A:ce=3\E[K:cd=50\E[J:so=2\E[7m:se=2\E[m:us=2\E[4m:ue=2\E[m:is=\E>\E[?3l\E[?4l\E[?5l\E[?7h\E[?8h:ks=\E[?1h\E=:ke=\E[?1l\E>:if=/usr/lib/tabset/vt100:ku=\EOA:kd=\EOB:kr=\EOC:kl=\EOD:kh=\E[H:k1=\EOP:k2=\EOQ:k3=\EOR:k4=\EOS:pt:sr=5\EM"
					 )
				 (TYPE (QUOTE (d1 vt100 vt-100 pt100 pt-100)))
				 (DELETENEXT %% %)
				 (co 80)
				 (li 24)
				 (am)
				 (cl (\SCREENPUT "[;H[2J")
				     (DELAYFOR 50))
				 (bs)
				 (cm (\SCREENPUT "[")
				     (PRINTNUM (QUOTE (FIX 2))
					       (ADD1 Y))
				     (\SCREENPUT ";")
				     (PRINTNUM (QUOTE (FIX 2))
					       X)
				     (\SCREENPUT "H")
				     (DELAYFOR 5))
				 (nd (\SCREENPUT "[C")
				     (DELAYFOR 2))
				 (up (\SCREENPUT "[A")
				     (DELAYFOR 2))
				 (ce (\SCREENPUT "[K")
				     (DELAYFOR 3))
				 (cd (\SCREENPUT "[J")
				     (DELAYFOR 50))
				 (so (\SCREENPUT "[7m")
				     (DELAYFOR 2))
				 (se (\SCREENPUT "[m")
				     (DELAYFOR 2))
				 (us (\SCREENPUT "[4m")
				     (DELAYFOR 2))
				 (ue (\SCREENPUT "[m")
				     (DELAYFOR 2))
				 (is (\SCREENPUT ">[?3l[?4l[?5l[?7h[?8h"))
				 (ks (\SCREENPUT "[?1h="))
				 (ke (\SCREENPUT "[?1l>"))
				 (if (\SCREENPUT "/usr/lib/tabset/vt100"))
				 (ku (\SCREENPUT "OA"))
				 (kd (\SCREENPUT "OB"))
				 (kr (\SCREENPUT "OC"))
				 (kl (\SCREENPUT "OD"))
				 (kh (\SCREENPUT "[H"))
				 (k1 (\SCREENPUT "OP"))
				 (k2 (\SCREENPUT "OQ"))
				 (k3 (\SCREENPUT "OR"))
				 (k4 (\SCREENPUT "OS"))
				 (pt)
				 (sr (\SCREENPUT "M")
				     (DELAYFOR 5])

(CreateD0Driver
  [LAMBDA NIL                                               (* this driver generated automatically from termcap 
							    information)
    (create SCREENDRIVER
	    TYPELIST _[FUNCTION (LAMBDA NIL                 (* return a list of terminal types 
							    (as processed by DISPLAYTERMTYPE and DISPLAYTERMP that 
							    this is a driver for))
		NIL
		(QUOTE (D0 dm1520 1520]
	    XSIZE _(FUNCTION [LAMBDA NIL                    (* return the width of the screen in characters)
		80])
	    YSIZE _(FUNCTION [LAMBDA NIL                    (* return the number of lines on the screen.)
		24])
	    CLEAR _(FUNCTION [LAMBDA NIL                    (* home, unlock, and clear the whole screen)
		(\SCREENPUT ""])
	    CLEARLINE _(FUNCTION [LAMBDA NIL                (* clear the rest of the current line)
		(\SCREENPUT ""])
	    CLEARREST _(FUNCTION [LAMBDA NIL                (* clear the rest of the current line)
		(\SCREENPUT ""])
	    SETHIGHLIGHT _(FUNCTION [LAMBDA NIL             (* set some sort of highlight mode)
		NIL])
	    CLEARHIGHLIGHT _(FUNCTION [LAMBDA NIL           (* clear the highlight mode)
		NIL])
	    SETLOCK _(FUNCTION [LAMBDA NIL

          (* set a memory lock, to prevent the lines above the cursor from rolling off the screen. If your terminal can't 
	  support this, a nop will probably be ok)


		NIL])
	    CLEARLOCK _(FUNCTION [LAMBDA NIL                (* clear the memory lock. a nop is ok if set lock is not
							    supported)
		NIL])
	    SETCURSOR _(FUNCTION [LAMBDA (X Y)              (* position the cursor to X,Y)
		(\SCREENPUT "")
		(\SCREENPUT (IPLUS 32 X))
		(\SCREENPUT Y])
	    OVERSTRIKEP _(FUNCTION [LAMBDA NIL              (* return T if this terminal overstrikes rather than 
							    superceeds)
		NIL])
	    \INFOALIST _(QUOTE ((TERMCAP 

"D0|dm1520|1520:am:bs:cd=^K:ce=^]:cl=^L:cm=^^%%r%%+\040%%.:co#80:ho=^Y:ku=^_:kd=^J:kl=^H:kr=^\:kh=^Y:li#24:nd=^\:up=^_:xn:ma=^\\040^_^P^YH:pt"
					 )
				 (TYPE (QUOTE (D0 dm1520 1520)))
				 (DELETENEXT %% %)
				 (am)
				 (bs)
				 (cd (\SCREENPUT ""))
				 (ce (\SCREENPUT ""))
				 (cl (\SCREENPUT ""))
				 (cm (\SCREENPUT "")
				     (\SCREENPUT (IPLUS 32 X))
				     (\SCREENPUT Y))
				 (co 80)
				 (ho (\SCREENPUT ""))
				 (ku (\SCREENPUT "
"))
				 (kd (\SCREENPUT "
"))
				 (kl (\SCREENPUT ""))
				 (kr (\SCREENPUT ""))
				 (kh (\SCREENPUT ""))
				 (li 24)
				 (nd (\SCREENPUT ""))
				 (up (\SCREENPUT "
"))
				 (xn)
				 (ma (\SCREENPUT " 
H"))
				 (pt])

(CreateH8Driver
  [LAMBDA NIL                                               (* this driver generated automatically from termcap 
							    information)
    (create SCREENDRIVER
	    TYPELIST _[FUNCTION (LAMBDA NIL                 (* return a list of terminal types 
							    (as processed by DISPLAYTERMTYPE and DISPLAYTERMP that 
							    this is a driver for))
		NIL
		(QUOTE (H8 h1520]
	    XSIZE _(FUNCTION [LAMBDA NIL                    (* return the width of the screen in characters)
		80])
	    YSIZE _(FUNCTION [LAMBDA NIL                    (* return the number of lines on the screen.)
		24])
	    CLEAR _(FUNCTION [LAMBDA NIL                    (* home, unlock, and clear the whole screen)
		(\SCREENPUT "~"])
	    CLEARLINE _(FUNCTION [LAMBDA NIL                (* clear the rest of the current line)
		(\SCREENPUT "~"])
	    CLEARREST _(FUNCTION [LAMBDA NIL                (* clear the rest of the current line)
		(\SCREENPUT "~"])
	    INSERTLINE _[FUNCTION (LAMBDA (N)               (* insert a new line before the current line)
		(RPTQ (OR N 1)
		      (\SCREENPUT "~"]
	    DELETELINE _[FUNCTION (LAMBDA (N)               (* delete this line and the next N-1 lines, scrolling up
							    the bottom of the screen)
		(RPTQ (OR N 1)
		      (\SCREENPUT "~"]
	    SETHIGHLIGHT _(FUNCTION [LAMBDA NIL             (* set some sort of highlight mode)
		(\SCREENPUT "~
"])
	    CLEARHIGHLIGHT _(FUNCTION [LAMBDA NIL           (* clear the highlight mode)
		(\SCREENPUT "~"])
	    SETLOCK _(FUNCTION [LAMBDA NIL

          (* set a memory lock, to prevent the lines above the cursor from rolling off the screen. If your terminal can't 
	  support this, a nop will probably be ok)


		NIL])
	    CLEARLOCK _(FUNCTION [LAMBDA NIL                (* clear the memory lock. a nop is ok if set lock is not
							    supported)
		NIL])
	    SETCURSOR _(FUNCTION [LAMBDA (X Y)              (* position the cursor to X,Y)
		(\SCREENPUT "~")
		(\SCREENPUT X)
		(\SCREENPUT Y)
		(\SCREENPUT " "])
	    OVERSTRIKEP _(FUNCTION [LAMBDA NIL              (* return T if this terminal overstrikes rather than 
							    superceeds)
		NIL])
	    \INFOALIST _(QUOTE ((TERMCAP 

"H8|h1520:al=~^Z:am:bs:cd=~^X:ce=~^O:cl=~\034:cm=~^Q%%r%%.%%.\200:co#80:dl=~^S:do=~^K:hz:li#24:nd=^P:se=~^Y:so=~\037:up=~^L:ho=~^R"
					 )
				 (TYPE (QUOTE (H8 h1520)))
				 (DELETENEXT %% %)
				 (al (\SCREENPUT "~"))
				 (am)
				 (bs)
				 (cd (\SCREENPUT "~"))
				 (ce (\SCREENPUT "~"))
				 (cl (\SCREENPUT "~"))
				 (cm (\SCREENPUT "~")
				     (\SCREENPUT X)
				     (\SCREENPUT Y)
				     (\SCREENPUT " "))
				 (co 80)
				 (dl (\SCREENPUT "~"))
				 (do (\SCREENPUT "~"))
				 (hz)
				 (li 24)
				 (nd (\SCREENPUT ""))
				 (se (\SCREENPUT "~"))
				 (so (\SCREENPUT "~
"))
				 (up (\SCREENPUT "~"))
				 (ho (\SCREENPUT "~"])
)

(PUTPROPS Create2621k45Driver SCREENDRIVERS T)

(PUTPROPS CreateAAdriver SCREENDRIVERS T)

(PUTPROPS CreateD2Driver SCREENDRIVERS T)

(PUTPROPS CreateV2Driver SCREENDRIVERS T)

(PUTPROPS CreatekbDriver SCREENDRIVERS T)

(PUTPROPS CreateHP2640Driver SCREENDRIVERS T)

(PUTPROPS CreateSDDriver SCREENDRIVERS T)

(PUTPROPS Created1Driver SCREENDRIVERS T)

(PUTPROPS CreateD0Driver SCREENDRIVERS T)

(PUTPROPS CreateH8Driver SCREENDRIVERS T)
[MAPCAR (QUOTE (Create2621k45Driver CreateAAdriver CreateD2Driver CreateV2Driver CreatekbDriver 
				    CreateHP2640Driver CreateSDDriver Created1Driver CreateD0Driver 
				    CreateH8Driver))
	(FUNCTION (LAMBDA (A)
			  (AND (GETD A)
			       (APPLY* A]

(RPAQ PROTOTYPEDRIVER (CreatePrototypeDriver))

(RPAQ \SPEEDBLOCK (CREATE SGTTYB))

(RPAQQ HPENHANCECHAR B)

(RPAQ RUBOUTS (PACKC (QUOTE (127 127 127 127 127))))
(DISPLAYTERMP)
(DECLARE: DONTCOPY
  (FILEMAP (NIL (3126 21491 (BUILDDRIVER 3138 . 5444) (CHECKIFSCREENDRIVER 5448 . 6125) (COMPILESCREENOP
 6129 . 7431) (CSPEED 7435 . 7869) (DELAYFOR 7873 . 8237) (DISPLAYTERMP 8241 . 9959) (DISPLAYTERMTYPE 
9963 . 10631) (GETSCREENOPHANDLER 10635 . 10875) (GETSCREENOPINFO 10879 . 11070) (KNOWNTERMTYPES 11074
 . 11445) (PARSECHARSEQUENCE 11449 . 13211) (PARSECURSORPOS 13215 . 15649) (PARSETERMCAP 15653 . 17986
) (PREPAREDELETENEXT 17990 . 18987) (SCREENOP 18991 . 19446) (SCREENOPCOMPILED 19450 . 19746) (
SEGMENTSTRING 19750 . 20377) (SETSCREENOPINFO 20381 . 20577) (\SCREENPUT 20581 . 21488)) (27716 29033 
(COMPILESCREENOP 27728 . 29030)) (30603 33677 (CreatePrototypeDriver 30615 . 33674)) (34052 67500 (
Create2621k45Driver 34064 . 39269) (CreateAAdriver 39273 . 40348) (CreateD2Driver 40352 . 44068) (
CreateV2Driver 44072 . 48608) (CreatekbDriver 48612 . 53057) (CreateHP2640Driver 53061 . 54418) (
CreateSDDriver 54422 . 57552) (Created1Driver 57556 . 61612) (CreateD0Driver 61616 . 64369) (
CreateH8Driver 64373 . 67497)))))
STOP
