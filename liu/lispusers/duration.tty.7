

              Functions and I.S.OPRS for "Time-Limited" Evaluations

File:		<lispusers>Duration.tty
Revised:	Feb 26, 1983, by JonL White


    Often one needs to loop over some code, stopping when a certain interval 
of time has passed.  A primitive notion of an "alarmclock", which wakes up 
and signals the looping process to stop would be quite useful;  however, this
would presume some pre-emptive scheduling of processes, and thus might not 
be as generally useful in Interlisp-D as the following facilities.  
    Three new functions are provided -- SETUPTIMER, SETUPTIMER.DATE, 
and TIMEREXPRED? -- a macro TIMERP,  and several new CLISP words which 
effectively function as I.S.OPRS --  "during", "forDuration", "untilDate",
"timerUnits", "usingTimer", and "resourceName"  (reasonable variations on 
upper/lower case are permissible).    As of 2/26/83, these facilites have 
been tested out on the D machines, and on Interlisp-10; they are expected to 
work on Interlisp/VAX.


                         TIMERs and Timer Units

    A new object called a TIMER is introduced, which encodes a future clock
time at which a signal is desired  Actually, it should come as no surprise 
that, for now, a TIMER is merely a FIXP;  but it's possible that, in the 
future, some more structure may be involved.  At any rate, the macro TIMERP
provides an adequate test for 'being a timer'.   A TIMER is constructed by 
the  functions SETUPTIMER and SETUPTIMER.DATE, and is created with a basic 
clock "unit" selected from among {SECONDS, MILLISECONDS, or TICKS}.  The first
two timer units provide a machine/system independent interface, and the latter
provides access to the "real", basic strobe unit of the machine's clock on 
which the program is running.  [The folllowing are acceptable abbreviations
for the time unit names:  SECS for SECONDS; MS and MILLISECS for MILLISECONDS;
and TICS for TICKS].
    As of now, the TICKS units for Interlisp-10 and Interlisp/VAX are 
milliseconds,  but for the D series machines it is:  Dorado and Dolphin have 
about 0.5952 microseconds per tick (1680 ticks per millisecond);   Dandelion 
has about 28.78 microseconds per tick (34.746 ticks per millisecond).
    The advantage of using TICKS rather than one of the uniform interfaces is
primarily speed; e.g., on a Dolphin, it may take as much as 400 microseconds to
interface the milliseconds clock (a software facility actually based over the 
real clock), whereas reading the real clock itself should take less than about 
ten microseconds.  Of course, the disadvantge of the TICKS unit is its short 
roll-over interval -- about 20 minutes, compared to about two weeks for the
MILLISECONDS unit -- and also the dependency on particular machine parameters.


               SETUPTIMER,  SETUPTIMER.DATE,  and  TIMEREXPRED?

(SETUPTIMER <time-interval> <old-timer> <timer-units> <interval-units>) 
    SETUPTIMER has one required and three optional arguments.  The first
    argument must be a integer specifying how long an interval is desired,
    and the third argument (defaults to MILLISECONDS) specifies the units
    of measure for the interval.  The time-interval is added to the current
    internal clock time, measured in the specified units, and then stored in 
    the timer specified by <old-timer> (NIL defaults to allocate new storage)  
    [of course, since "timers" are currently fixp values, then Interlisp/VAX 
    (and often Interlisp-10) do not actually allocate new cells in order to
    cons up a new timer; thus this argument is often moot and would be  
    ignored].   The fourth argument, specifies the units in which the second
    argument is expressed; NIL defaults to mean same as the timer-units 
    (obtained from the third argument). 
        The result is a TIMER, which may be tested with TIMEREXPRED?
    function.
 (SETUPTIMER.DATE <datetime-string> <old-timer>)
    The first argument to SETUPTIMER.DATE is a Date/Time string such
    as would be returned by GDATE (or such as would be input to IDATE);
    a timer is constructed, with timer units in SECONDS, to "go off" at that
    specified date and time.  The second argument is used the same as in
    the SETUPTIMER function.

   [Implementation note 2/26/83:  Both SETUPTIMER and SETUPTIMER.DATE have 
    compiler macro properties which cause them to "open-code" into a call on 
    the appropriate clock function.   (CLOCK 0) and (SETUPTIMER 0) do the same 
    thing; similarly, (SETUPTIMER 0 <...> 'TICKS) provides a way to read the 
    hardware clock.  SETUPTIMER.DATE operates by first subtracting (IDATE) from
    (IDATE <datetime-string>), so there may be some consing involved, even if 
    the <old-timer> argument is provided.]

(TIMEREXPIRED? <timer> <ClockValue.or.timerUnits>)
    When a TIMER's "time has come", then TIMEREXPIRED? will be non-NIL on it; 
    generally this means comparing the TIMER's stored value with the current 
    value of the corresponding clock. 
         However, it is permissible to provide the clock value directly, as the
    second argument.  This is useful when one has two different timers in hand
    and wishes to see which one will "go off" sooner; if X and Y are TIMERs, 
    then (TIMEREXPIRED? X Y) means that X is set for a **later** time than Y.
    Of course, from the Implementation note on SETUPTIMER, one can see that X 
    and Y could also just be the output of any of the clock functions, and
    TIMEREXPIRED? would be somewhat equivalent to GREATERP for them.

   [Implementation note 2/26/83:  It must be noted that timer storage is not 
    open-ended -- on the D machines it is 32 bits, on the PDP10 is is 36 bits, 
    and on the VAX it is 31 bits.  Thus, (TIMEREXPIRED? X Y), where Y is 
    an integer and N is the number of bits of storage, is really 
            (ILESSP (MOD (IDIFFERENCE Y X) 2^N)
                    2^<N-1>)
    The upshot of this is that no "edge-effects" will be noticed due to the finite
    nature of the storage box, but the effective "roll-over" period will be 
    2^<N-1> units rather than 2^N.]



                            New I.S.OPRS

    In this paragraph, each new CLISP word is introduced in a "canonical" form,
with equivalent canonical spelling variations enclosed in parentheses;  in
general, the all-caps version, or the all-lower-case version, or the 
"capitalization of the second syllable" version is acceptable too.  The basic 
CLISP word functioning like an I.S.OPRS is "forDuration" (and "during"), which 
specifies an interval of time during which the statement will be executed;  
also, "untilDate" specifies an interval by specifying its endpoint.   Since a 
call to SETUPTIMER is implicit in this facililty, one may specify which clock 
to use with the CLISP word "timerUnits";  one may wish to provide an "empty" 
timer to use as storage for the timer, so that no consing will be done 
when going around the loop, hence the word "usingTimer" will specify this 
storage.  The word "resourceName" will specify a GLOBALRESOURCES (q.v.) name 
to be used as the timer storage (a "resourceName" of T will be converted to 
a common internal name used by this package).

    One may think of these CLISP words as being equivalent to the "FOR" words
(such as "for", "find", etc), except that if any of them are used, then one of
them must be the first item in the list.   I.e., 
    (during LONGTIME for I to 500 do . . . )
    (usingTimer \Temp.box  find C suchthat (WINNER C)  forDuration 5HOURS)
are acceptable, but
    (for I to 500 during LONGTIME do . . . )
is not.  It is likely that the implementation of these I.S.OPRS will be 
extended someday so that this restriction will go away.

Example usages:

    (during 6MONTHS  timerUnits 'SECS
      until (TENANT-VACATED? HouseHolder)
        do (DISMISS <for-about-a-day>)
           (HARRASS HouseHolder)
      finally (if (NOT (TENANT-VACATED? HouseHolder))
                  then (EVICT-TENANT HouseHolder)))

This humorous little example shows that how is is possible to have two
termination condition: 1) when the time interval of MONTHS has elapsed,
or 2) when the predicate (TENANT-VACATED? HouseHolder) becomes
true.  As with the other I.S.OPRS formats, the "finally" clause is executed
regardless of which termination condition caused it.   
    Note also that SECS is an acceptable spelling of SECONDS;  also MS and 
MILLISECS are acceptable for MILLISECONDS.  [Since the millisecond clock
will "roll over" about every two weeks, "6MONTHS" wouldn't be an appropriate
interval if the timer units were the default case, namely MILLISECONDS.] 

    (do (forDuration (CONSTANT (ITIMES 10 24 60 60 1000))   
           do (CARRY.ON.AS.USUAL)
           finally (PROMPTPRINT "Have you had your 10-day check-up?")))

This infinite loop breaks out with a warning message every 10 days.   One
could still question whether the millisecond clock, which is used by default,
is appropriate for this loop. 

    (SETQ \RandomTimer (SETUPTIMER 0))
    (untilDate "31-DEC-83 23:59:59"  usingTimer \RandomTimer 
      do (if (WINNING?) then (RETURN))
      finally (ERROR "You've been losing this whole year!"))

Here we see a usage of an explicit date for the time interval; also, the user
has squirreled away some storage (as the value of \RandomTimer) for use by 
the call to SETUPTIMER in this loop.

    (FORDURATION SOMEINTERVAL resourcename '\INNERLOOPBOX 
      timerunits 'TICKS 
        do (CRITICAL.INNER.LOOP))

Here we incidentally see that the CLISP words in all lower case, or in all
upper case, are acceptable.  The facililty of critical interest, however, is 
"resourcename";  for this loop, the user doesn't want any consing to take 
place, so \INNERLOOPBOX will be defined as a GLOBALRESOURCES which "caches" a 
timer cell (if it isn't already so defined), and wraps the entire statement 
in a GLOBALRESOURCE call.  Furthermore, he has specified a time unit of TICkS,
for lower overhead in this critical inner loop.
    In fact specifying a resourcename of "T" would have been the same as
specifying it to be "\ForDurationOfBox" -- just a simpler way to specify
that a globalresource is wanted, but without having to think up a name.


 