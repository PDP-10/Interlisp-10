SCREENOP	display interface for simple terminals

SCREENOP is an interface for simple display hacking on semi-smart
terminals.  The basic paradigm is to give the terminal operations
to perform at the level of "move cursor" "clear line" and so on.

SCREENOP is in a preliminary and incomplete state, its primary purpose
being support of LED.

MAKING SCREENOP RECOGNISE "YOUR" TERMINAL
-----------------------------------------

	SYSTEMTERMTYPES is an ALIST whose CAR's are your system's raw types.

	For UNIX, this is (MKATOM (GETENV 'TERM)) for tops-20 and tenex
	it is the terminal number returned by the appropriate MTOPR jsys.

	(DISPLAYTERMTYPE) reads the raw type and translates it into a
			  canonical form.
	
	The "translation" of the raw type is 
		(SETQ X (FASSOC raw-type SYSTEMTERMTYPES))
		(COND ((LISTP (CDR X)) (EVAL (CDR X)))
		      (T (CDR X)))

	You should edit SYSTEMTERMTYPES to translate your raw type info into
	something known to the rest of screenop.  You can set up
	SYSTEMTERMTYPES before loading SCREENOP, and your types will take
	precedence over the default translations.


	(DISPLAYTERMP)	gets the translated type from (DISPLAYTERMTYPE) and
			searches the list of known screen drivers for the
			first driver whose (SCREENOP 'TYPELIST) includes
			the translated type.

	(DISPLAYTERMP type)
			uses "type" rather than (DISPLAYTERMTYPE), so you
			can direct use of any of the drivers that have been
			loaded.  (KNOWNTERMTYPES) returns a list of all the
			acceptable names.

	DISPLAYTERMP	(the variable) is the value of the last call to
			(DISPLAYERMP), and should be used as the test
			of a display terminal being in use.

	an entry on AFTERSYSOUTFORMS performs (DISPLAYTERMP), so normally
	one can safely assume DISPLAYTERMP is accurate.


	Whenever DISPLAYTERMP selects a terminal type, each element
	of DISPLAYTERMPFORMS is evaluated.  The initial list consists
	of (PREPAREDELETENEXT) which attempts to set up rubout processing
	appropriately for the terminal you are using.


USING SCREENOP
---------------

	A file which is to use screenop should include
	(DECLARE: EVAL@COMPILE DONTEVAL@LOA (CHECKIMPORTS SCREENOP T))
	(FILES (SYSLOAD COMPILED) SCREENOP)

	you then simply call (SCREENOP 'ACTION arg1 arg2 ..)


ADDING A NEW DRIVER
-------------------

	Under Interlisp-VAX, a screendriver is build automatically
from termcap information by BUILDDRIVER.  You could call BUILDDRIVER
with a TERMCAP-like string and let it do the work for you under other
operating systems.

The auxiliary file SCREENOP.TC contains TERMCAP strings for a large number
of terminal types.  You can build a driver from one of these by calling
the function (BUILDDRIVER x) where x is the termcap string describing
your terminal.  

The auxiliary file SCREENOP.TCD contains a copy of UNIX' documentation
for termcap strings (rank with TECO commands in their cryptic-ness),
which should allow a bright fellow such as yourself to construct an
appropriate string.


Othewise:
	All the information particular to a terminal is imbedded in
a record of type SCREENDRIVER.  All the elements of a SCREENDRIVER
record are functions that are applied with appropriate arguments.

I recommend copying one of the existing drivers and modifying it
to use your terminal's magic control codes.  The recommended tweaks
to add a driver are:

	1) Copy an existing driver, or the prototype driver
	   (COPYDEF 'CreatePrototypeDriver 'CreateNewDriver 'SCREENDRIVERS)
	   ... and tweak it to drive your screen.

	2) add an entry on SYSTEMTERMTYPES that will translate your
	system's type code for that terminal into something that will
	match your driver's TYPELIST entry.

	For Support of LED, only a subset of the defined functions
	have to be supported. See the driver for HAZELTINE terminals
	as an example of the simplest thing that will support LED.
