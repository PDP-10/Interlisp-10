(FILECREATED "24-MAY-83 12:14:36" {PHYLUM}<LISPCORE>SOURCES>RS232LOGIN.;16 16629        changes to:  (FNS RS232LOGIN \RS232LOGIN.SENDPAGESIZE)      previous date: "22-MAY-83 00:25:26" {PHYLUM}<LISPCORE>SOURCES>RS232LOGIN.;15)(* Copyright (c) 1983 by Xerox Corporation)(PRETTYCOMPRINT RS232LOGINCOMS)(RPAQQ RS232LOGINCOMS ((COMS (* Until system standard)			     (P (OR (GETD (QUOTE PROMPTFORWORD))				    (ERROR "LISP.SYSOUT too old"))))		       (FILES (SYSLOAD)			      RS232)		       (* LOGIN facilities)		       (DECLARE: EVAL@COMPILE DONTCOPY (P (OR (GETMACROPROP (QUOTE 									     RS232INITIALIZECHECK)									    COMPILERMACROPROPS)							      (LOADFROM (QUOTE RS232))))				 (RECORDS LOGINSYSTEMTYPE))		       (VARS RS232HOSTNAMES.ALIST RS232SYSTEMTYPES.ALIST)		       (FNS RS232.PROMPT&LOGIN \RS232.PROMPT&LOGIN.AUX RS232LOGIN 			    \RS232LOGIN.MSGDALLY \RS232LOGIN.SENDPAGESIZE \RS232.P&L.FINDGOODNAMES)		       (INITVARS (\RS232LOGIN.LASTHOSTNAME NIL)				 (\RS232LOGIN.LASTHOSTSYSTEMTYPE NIL)				 (\RS232LOGIN.TIMER (SETUPTIMER 0))				 (\RS232STRPTR (ALLOCSTRING 0)))		       (GLOBALVARS RS232HOSTNAMES.ALIST RS232SYSTEMTYPES.ALIST 				   \RS232LOGIN.LASTHOSTNAME \RS232LOGIN.LASTHOSTSYSTEMTYPE 				   \RS232LOGIN.STOP? \RS232LOGIN.TIMER \RS232STRPTR)		       (INITVARS (\RS232CHAT7? T)				 (\RS232CHAT.PrintEOLsequence (CONCAT (CHARACTER (CHARCODE CR))								      (CHARACTER (CHARCODE LF))))				 (\RS232CHAT.IgnoreCharcodes (LIST (CHARCODE NULL))))		       (GLOBALVARS \RS232CHAT7? \RS232CHAT.KeybdEOLsequence 				   \RS232CHAT.PrintEOLsequence)		       (SPECVARS \RS232CHAT.IgnoreCharcodes)))(* Until system standard)(OR (GETD (QUOTE PROMPTFORWORD))    (ERROR "LISP.SYSOUT too old"))(FILESLOAD (SYSLOAD)	   RS232)(* LOGIN facilities)(DECLARE: EVAL@COMPILE DONTCOPY (OR (GETMACROPROP (QUOTE RS232INITIALIZECHECK)		  COMPILERMACROPROPS)    (LOADFROM (QUOTE RS232)))[DECLARE: EVAL@COMPILE (TYPERECORD LOGINSYSTEMTYPE (ATTNCHAR LOGINPATTERN PAGESIZEPATTERN MINIMALLINEBUFFERSIZE))])(RPAQQ RS232HOSTNAMES.ALIST ((NIL . TENEX)			     (MAXC . TENEX)			     (PARC-MAXC . TENEX)			     (SCORE . TOPS20)			     (SU-SCORE . TOPS20)			     (SAIL . WAITS)			     (SU-AI . WAITS)			     (SRI-KL . TOPS20)			     (SRIKL . TOPS20)			     (SRI-AI . TOPS20)			     (SRIAI . TOPS20)			     (ECL . TOPS20)			     (ECLA . TOPS20)			     (ECLD . TOPS20)			     (MIT-MC . ITS)			     (MC . ITS)			     (SUMEX-AIM . TENEX)			     (SUMEX . AIM)))(RPAQQ RS232SYSTEMTYPES.ALIST ((TENEX LOGINSYSTEMTYPE 3 "LOGIN ˜ ™" "LENGTH ™WIDTH ˜" 512)			       (TOPS20 LOGINSYSTEMTYPE 3 "LOGIN ˜™" "TERMINAL WIDTH ˜TERMINAL LENGTH ™" 512)			       (TOPS-20 LOGINSYSTEMTYPE 3 "LOGIN ˜™" "TERMINAL WIDTH ˜TERMINAL LENGTH ™" 512)			       (ITS LOGINSYSTEMTYPE 26 ":LOGIN ˜™" ":TCTYP LINELENGTH ˜ PAGESIZE ™" 512)			       (WAITS LOGINSYSTEMTYPE 3 "LOGIN ˜™" NIL 1536)			       (TOPS10 LOGINSYSTEMTYPE 3 "LOGIN ˜™" NIL 512)			       (TOPS-10 LOGINSYSTEMTYPE 3 "LOGIN ˜™" NIL 512)))(DEFINEQ(RS232.PROMPT&LOGIN  (LAMBDA (TypeScriptStream)                                 (* JonL "28-APR-83 19:27")    (SETQ \RS232LOGIN.STOP?)    (EVAL.IN.TTY.PROCESS (LIST (QUOTE \RS232.PROMPT&LOGIN.AUX)			       (KWOTE TypeScriptStream)))))(\RS232.PROMPT&LOGIN.AUX  (LAMBDA (TypeScriptStream)                                 (* JonL " 7-MAY-83 19:37")    (PROG (HOST HOSTTYPE (HSTmsg " HostSYSTEMTYPE = "))          (AND (\RS232CHECK.BLOCK)	       \RS232LOGIN.STOP?	       (RETURN (QUOTE \RS232LOGIN.STOP?)))          (DSPRESET PROMPTWINDOW)          (\RS232INSURE.LINEBUFFER 256)          (SETQ HOST (MKATOM (PROMPTFORWORD "{Login thru RS232} Hostname: " \RS232LOGIN.LASTHOSTNAME					    (FUNCTION \RS232.P&L.FINDGOODNAMES)					    PROMPTWINDOW NIL NIL NIL NIL \RS232STRPTR)))      A   (AND (\RS232CHECK.BLOCK)	       \RS232LOGIN.STOP?	       (RETURN (QUOTE \RS232LOGIN.STOP?)))          (if (NULL (SETQ HOSTTYPE (CDR (ASSOC HOST RS232HOSTNAMES.ALIST))))	      then (\RS232INSURE.LINEBUFFER 256)		   (SETQ HOSTTYPE (MKATOM (PROMPTFORWORD HSTmsg NIL (FUNCTION 							   \RS232.P&L.FINDGOODNAMES)							 PROMPTWINDOW NIL NIL NIL NIL \RS232STRPTR)))		   (if (NOT (ASSOC HOSTTYPE RS232SYSTEMTYPES.ALIST))		       then (SETQ HSTmsg 			    "Sorry, I don't know that SYSTEMTYPE;  try again. HostSYSTEMTYPE = ")			    (GO A))		   (push RS232HOSTNAMES.ALIST (CONS HOST HOSTTYPE)))          (RETURN (RS232LOGIN HOST NIL NIL HOSTTYPE TypeScriptStream PROMPTWINDOW)))))(RS232LOGIN  (LAMBDA (HOST UserName PASSWORD HostSYSTEMTYPE TypeScriptStream PROMPTFORWORDstream)                                                             (* JonL "24-MAY-83 11:41")                                                             (* Returns NIL if successful, error code 							     (as a litatom) if not.)    (RS232INITIALIZECHECK)    (SETQ \RS232LOGIN.STOP?)    (OR (type? STREAM TypeScriptStream)	(SETQ TypeScriptStream (if (NULL TypeScriptStream)				   then (GETSTREAM T (QUOTE OUTPUT))				 elseif (EQ TypeScriptStream (QUOTE NONE))				   then NIL				 elseif (OR (WINDOWP TypeScriptStream)					    (DISPLAYSTREAMP TypeScriptStream)					    (EQ TypeScriptStream T))				   then (GETSTREAM TypeScriptStream (QUOTE OUTPUT))				 elseif (LITATOM TypeScriptStream)				   then (OPENSTREAM TypeScriptStream (QUOTE OUTPUT))				 else (\ILLEGAL.ARG TypeScriptStream))))    (OR (type? LOGINSYSTEMTYPE HostSYSTEMTYPE)	((LAMBDA (TEMP)	    (if (SETQ TEMP (CDR (ASSOC HostSYSTEMTYPE RS232SYSTEMTYPES.ALIST)))		then                                         (* HostSYSTEMTYPE can be given by symbolic name.)		     (SETQ HostSYSTEMTYPE TEMP)	      elseif (AND (NOT (NULL HOST))			  (SETQ TEMP (CDR (ASSOC HOST RS232HOSTNAMES.ALIST)))			  (SETQ TEMP (CDR (ASSOC TEMP RS232SYSTEMTYPES.ALIST))))		then                                         (* AH, we already know what kind of SYSTEMTYPE this HOST							     is)		     (SETQ HostSYSTEMTYPE TEMP)	      elseif (AND (NOT (NULL HOST))			  (SETQ TEMP (CDR (ASSOC HOST RS232SYSTEMTYPES.ALIST))))		then                                         (* Perhaps HOST name was just the symbolic 							     HostSYSTEMTYPE)		     (SETQ HOST)		     (SETQ HostSYSTEMTYPE TEMP)	      else (ERROR "We really must know what the HostSYSTEMTYPE is" HostSYSTEMTYPE)))))    (OR (NULL PASSWORD)	(STRINGP PASSWORD)	(SETQ PASSWORD (AND (LITATOM PASSWORD)			    (MKSTRING PASSWORD))))    (PROG ((PWHashEntry (CAR (LISTP (AND HOST (GETHASH HOST LOGINPASSWORDS)))))	   (LoginName (USERNAME NIL NIL T)))          (AND (\RS232CHECK.BLOCK)	       \RS232LOGIN.STOP?	       (RETURN (QUOTE \RS232LOGIN.STOP?)))          (if (NULL UserName)	      then (SETQ UserName (COND		       ((CAR PWHashEntry))		       (T (\RS232INSURE.LINEBUFFER 256)			  (FRESHLINE PROMPTFORWORDstream)			  (MKATOM (PROMPTFORWORD (if HOST						     then (CONCAT "Login ID for " HOST ":")						   else "Login ID:")						 LoginName NIL PROMPTFORWORDstream NIL NIL NIL NIL 						 \RS232STRPTR))))))          (AND (\RS232CHECK.BLOCK)	       \RS232LOGIN.STOP?	       (RETURN (QUOTE \RS232LOGIN.STOP?)))          (if (NULL PASSWORD)	      then (SETQ PASSWORD (OR (CDR PWHashEntry)				      (PROMPTFORWORD " (password)" NIL NIL PROMPTFORWORDstream T))))          (if (AND PASSWORD HOST)	      then                                           (* Update the LOGINPASSWORDS table if user has supplied 							     new information, but no cacheing possible if HOST not 							     supplied.)		   (if (NLISTP (SETQ PWHashEntry (CAR PWHashEntry)))		       then (PUTHASH HOST (LIST (CONS UserName PASSWORD))				     LOGINPASSWORDS)		     elseif (OR (NEQ UserName (CAR PWHashEntry))				(NOT (STREQUAL PASSWORD (CDR PWHashEntry))))		       then (RPLACA PWHashEntry UserName)			    (RPLACD PWHashEntry PASSWORD))))    (PROG ((Host'sAttnChar (fetch (LOGINSYSTEMTYPE ATTNCHAR) of HostSYSTEMTYPE))	   (WINDOW (AND (PROG1 TypeScriptStream              (* Comment PPLossage))			(DISPLAYSTREAMP (fetch (STREAMOFDISPLAYSTREAM DISPLAYSTREAM) of 										 TypeScriptStream))			(WFROMDS (\GETDISPLAYSTREAMFROMSTREAM TypeScriptStream))))	   (3SECS.tics (ITIMES 3 \RCLKSECOND))	   (5SECS.tics (ITIMES 5 \RCLKSECOND))	   CHAR MESSAGE PAGESIZE PAGEPATTERN)          (\RS232INSURE.LINEBUFFER (fetch (LOGINSYSTEMTYPE MINIMALLINEBUFFERSIZE) of HostSYSTEMTYPE))          (AND WINDOW (TOTOPW WINDOW))          (RS232CLEARBUFFER (QUOTE BOTH))          (MAPC (LOADTIMECONSTANT (CONS (QUOTE \RS232INSURE.LINEBUFFER)					(\ONPATHS.CCODE (QUOTE (\RS232CHECK.BLOCK \RS232BOUTSTRING 										  RS232WRITECHARS 										  \DSPPRINTCHAR 										  RS232WRITEBYTE 										  RS232READBYTE 									     \RS232.READAFEWBYTES 										 RS232FORCEOUTPUT))							(QUOTE (\RS232INSURE.LINEBUFFER CHCON1 NCHARS 											CHARCODEP 											DSPBACKUP 											ERROR 										       \LISPERROR 										     \ILLEGAL.ARG 											RAID BLOCK 											\CLOCK0 HELP 											\DAYTIME0 										     \ILLEGAL.ARG 											SHOULDNT 										   \GETBASESTRING 											DISMISS 											CLOCK0 										     \STOPSCROLL? 										     BITMAPCREATE 										     DSPBACKCOLOR 										       FONTCREATE 										       \SHOWCARET 											CREATEW OPENW 											MKSTRING 											ERRORX 									  \CanonicalizeTimerUnits))							65535)))		(FUNCTION \FRESHENUPFN))          (to 6	     do (AND (\RS232CHECK.BLOCK)		     \RS232LOGIN.STOP?		     (GO STOPLOGIN))		(if Host'sAttnChar		    then (AND TypeScriptStream (BOUT TypeScriptStream Host'sAttnChar))			 (RS232WRITEBYTE Host'sAttnChar T))		(during 5SECS.tics until (SETQ CHAR (RS232PEEKBYTE)) timerUnits (QUOTE TICS)		   usingBox \RS232LOGIN.TIMER)	     repeatuntil CHAR)          (if (NULL CHAR)	      then                                           (* Sigh, 6 intervals of 5 seconds have gone by, and no 							     communication from the remove host.)		   (if TypeScriptStream		       then (\RS232BOUTSTRING TypeScriptStream (MKSTRING (QUOTE NoResponseFromHost))))		   (RETURN (QUOTE NoResponseFromHost))	    elseif \RS232LOGIN.STOP?	      then (GO STOPLOGIN))                           (* Wait until Host Responds)          (do                                                (* Gobble up any replies, waiting for a quiescent 							     interval of at least 5 seconds)	      (\RS232LOGIN.MSGDALLY 5SECS.tics NIL TypeScriptStream WINDOW) repeatuntil									     (NULL (RS232PEEKBYTE)))          (AND (\RS232CHECK.BLOCK)	       \RS232LOGIN.STOP?	       (GO STOPLOGIN))          (bind LASTWASCR for X instring (fetch (LOGINSYSTEMTYPE LOGINPATTERN) of HostSYSTEMTYPE)	     do (SELCHARQ X			  ((#^X)			    (RS232WRITECHARS UserName))			  ((#^Y)			    (if (AND (NOT (NULL PASSWORD))				     (if LASTWASCR					 then (RS232FORCEOUTPUT)                                                              (* Dally, because some losing OS's won't be ready to 							     receive PW until after they have typed out their prompt)					      (SETQ MESSAGE (\RS232LOGIN.MSGDALLY						  3SECS.tics T TypeScriptStream (NOT (NULL WINDOW))))					      (AND (SETQ PAGEPATTERN (OR (STRPOS "ASSWORD" MESSAGE)									 (STRPOS "assword" MESSAGE)))						   (EQ (U-CASE (NTHCHAR MESSAGE (SUB1 PAGEPATTERN)))						       (QUOTE P)))				       else T))				then (RS232WRITECHARS PASSWORD)))			  (RS232WRITEBYTE X))		(SETQ LASTWASCR (AND (OR (EQ X (CHARCODE CR))					 (EQ X (CHARCODE ESC)))				     X)))          (RS232FORCEOUTPUT)          (do                                                (* Gobble up any replies, waiting for a quiescent 							     interval of at least 5 seconds)	      (\RS232LOGIN.MSGDALLY 5SECS.tics NIL TypeScriptStream WINDOW) repeatuntil									     (NULL (RS232PEEKBYTE)))          (SETQ \RS232LOGIN.LASTHOSTNAME HOST)          (SETQ \RS232LOGIN.LASTHOSTSYSTEMTYPE HostSYSTEMTYPE)          (RS232CLEARBUFFER (QUOTE INPUT))          (if WINDOW	      then (\RS232LOGIN.SENDPAGESIZE WINDOW HostSYSTEMTYPE 3SECS.tics))                                                             (* Standard normal exit.)          (RETURN NIL)      STOPLOGIN          (RETURN (QUOTE \RS232LOGIN.STOP?)))))(\RS232LOGIN.MSGDALLY  (LAMBDA (WAIT?.tics FORCETRUNC7? TypeScriptStream WINDOWP)                                                             (* JonL "22-MAY-83 00:22")    (\RS232INSURE.LINEBUFFER 256)                            (* Note that \RS232INSURE.LINEBUFFER sets up 							     \RS232STRPTR)    (PROG ((MESSAGE (RS232READSTRING NIL NIL NIL (OR (FIXP WAIT?.tics)						     \RCLKSECOND)				     (QUOTE TICKS)				     \RS232STRPTR)))          (if (STRINGP MESSAGE)	      then (if (OR FORCETRUNC7? (AND \RS232CHAT7? (ILESSP 7 (fetch (RS232CHARACTERISTICS									     BITSPERCHAR)								       of RS232INIT))))		       then (bind C (J _ 0) for I from 1 to (ffetch (STRINGP LENGTH) of MESSAGE)			       do (SETQ C (LOADBYTE (NTHCHARCODE MESSAGE I)						    0 7))				  (if (OR (AND WINDOWP (EQ C (CHARCODE LF)))					  (FMEMB C \RS232CHAT.IgnoreCharcodes))				      then                   (* Flush LF's since the CR will generate it on a display							     stream)					   NIL				    else (RPLCHARCODE MESSAGE (add J 1)						      C))			       finally (freplace (STRINGP LENGTH) of MESSAGE with J)))		   (AND (type? STREAM TypeScriptStream)			(\RS232BOUTSTRING TypeScriptStream MESSAGE)))          (RETURN MESSAGE))))(\RS232LOGIN.SENDPAGESIZE  (LAMBDA (WINDOW HostSYSTEMTYPE DALLY.tics)                 (* JonL "24-MAY-83 11:34")    (PROG ((PAGESIZE (WINDOWPROP WINDOW (QUOTE PAGESIZE)))	   (PAGEPATTERN (fetch (LOGINSYSTEMTYPE PAGESIZEPATTERN) of HostSYSTEMTYPE))	   (OUTSTRM (GETSTREAM WINDOW (QUOTE OUTPUT)))	   MSG)          (if (AND PAGESIZE PAGEPATTERN)	      then (RS232CLEARBUFFER (QUOTE INPUT))		   (if (SETQ MSG (fetch (LOGINSYSTEMTYPE ATTNCHAR) of HostSYSTEMTYPE))		       then (RS232WRITEBYTE MSG T)			    (\RS232LOGIN.MSGDALLY DALLY.tics NIL OUTSTRM T)			    (RS232CLEARBUFFER (QUOTE INPUT)))		   (RESETFORM (RADIX 10)			      (for X instring PAGEPATTERN				 do (SELCHARQ X					      ((#^X #^Y)						(RS232WRITECHARS (MKSTRING								   (if (EQ X (CHARCODE #^X))								       then                                                              (* #^X is the LINELENGTH (or the number of "X" 							     positions))									    (CADR PAGESIZE)								     else (CAR PAGESIZE)))))					      (RS232WRITEBYTE X))))		   (RS232FORCEOUTPUT)		   (\RS232LOGIN.MSGDALLY NIL NIL OUTSTRM T)))))(\RS232.P&L.FINDGOODNAMES  (LAMBDA (MSG)                                              (* JonL " 3-JAN-83 06:25")    (MAPCONC (if (STREQUAL MSG "{Login thru RS232} Hostname = ")		 then RS232HOSTNAMES.ALIST	       else RS232SYSTEMTYPES.ALIST)	     (FUNCTION (LAMBDA (X)		 (SETQ X (CAR X))		 (AND (STRPOSL (LOADTIMECONSTANT (MAKEBITTABLE (CHARCODE (-))							       T))			       X)		      (LIST X))))))))(RPAQ? \RS232LOGIN.LASTHOSTNAME NIL)(RPAQ? \RS232LOGIN.LASTHOSTSYSTEMTYPE NIL)(RPAQ? \RS232LOGIN.TIMER (SETUPTIMER 0))(RPAQ? \RS232STRPTR (ALLOCSTRING 0))(DECLARE: DOEVAL@COMPILE DONTCOPY(ADDTOVAR GLOBALVARS RS232HOSTNAMES.ALIST RS232SYSTEMTYPES.ALIST \RS232LOGIN.LASTHOSTNAME 	  \RS232LOGIN.LASTHOSTSYSTEMTYPE \RS232LOGIN.STOP? \RS232LOGIN.TIMER \RS232STRPTR))(RPAQ? \RS232CHAT7? T)(RPAQ? \RS232CHAT.PrintEOLsequence (CONCAT (CHARACTER (CHARCODE CR))					   (CHARACTER (CHARCODE LF))))(RPAQ? \RS232CHAT.IgnoreCharcodes (LIST (CHARCODE NULL)))(DECLARE: DOEVAL@COMPILE DONTCOPY(ADDTOVAR GLOBALVARS \RS232CHAT7? \RS232CHAT.KeybdEOLsequence \RS232CHAT.PrintEOLsequence))(DECLARE: DOEVAL@COMPILE DONTCOPY(SPECVARS \RS232CHAT.IgnoreCharcodes))(PUTPROPS RS232LOGIN COPYRIGHT ("Xerox Corporation" 1983))(DECLARE: DONTCOPY  (FILEMAP (NIL (3094 15754 (RS232.PROMPT&LOGIN 3104 . 3350) (\RS232.PROMPT&LOGIN.AUX 3352 . 4627) (RS232LOGIN 4629 . 12778) (\RS232LOGIN.MSGDALLY 12780 . 14136) (\RS232LOGIN.SENDPAGESIZE 14138 . 15320) (\RS232.P&L.FINDGOODNAMES 15322 . 15752)))))STOP