(DEFINE-FILE-INFO §READTABLE "XCL" §PACKAGE "INTERLISP")(filecreated "29-Oct-86 13:24:08" {eris}<lispcore>library>nschat.\;17 42823        |previous| |date:| " 7-Oct-86 21:25:37" {eris}<lispcore>library>nschat.\;16); Copyright (c) 1984, 1985, 1986 by Xerox Corporation.  All rights reserved.(prettycomprint nschatcoms)(rpaqq nschatcoms ((courierprograms gap)                   (fns nschat.3270.host nschat.attentionfn nschat.errorhandler nschat.host.filter                         nschat.open nschat.open.3270 nschat.open.dialout nschat.open.ttyhost                         nschat.services spp.input.event)                   (initvars (nschat.options.menu))                   (declare\: eval@compile dontcopy (files (source)                                                           sppdecls)                          (records nschat.service)                          (constants (|\\NS.WKS.Courier| 5)                                 (|GAP.RemoteSystemAdministration| 1)                                 (|GAP.RemoteSystemExecutive| 2)                                 (|GAP.InteractiveTerminalService| 3))                          (globalvars nschat.options.menu))                   (declare\: donteval@load docopy (addvars (chat.protocoltypes (ns . nschat.host.filter                                                                                 ))))))(courierprogram gap (3 3)    types      ((|WaitTime| cardinal)       (|CharLength| (enumeration (|five| 0)                            (|six| 1)                            (|seven| 2)                            (|eight| 3)))       (|Parity| (enumeration (|none| 0)                        (|odd| 1)                        (|even| 2)                        (|one| 3)                        (|zero| 4)))       (|StopBits| (enumeration (|one| 0)                          (|two| 1)))       (|FlowControl| (record (|type| (enumeration (|none| 0)                                             (|xOnXOff| 1)))                             (|xOn| unspecified)                             (|xOff| unspecified)))       (|SessionHandle| (array 2 unspecified))       (|SessionParameterObject| (choice (|xerox800| 0 nil)                                        (|xerox850| 1 unspecified)                                        (|xerox860| 2 unspecified)                                        (|system6| 3 (record (|sendBlockSize| cardinal)                                                            (|receiveBlockSize| cardinal)))                                        (|cmcll| 4 (record (|sendBlockSize| cardinal)                                                          (|receiveBlockSize| cardinal)))                                        (|ibm2770| 5 (record (|sendBlockSize| cardinal)                                                            (|receiveBlockSize| cardinal)))                                        (|ibm2770Host| 6 (record (|sendBlockSize| cardinal)                                                                (|receiveBlockSize| cardinal)))                                        (|ibm6670| 7 (record (|sendBlockSize| cardinal)                                                            (|receiveBlockSize| cardinal)))                                        (|ibm6670Host| 8 (record (|sendBlockSize| cardinal)                                                                (|receiveBlockSize| cardinal)))                                        (|ibm3270| 9 nil)                                        (|ibm3270Host| 10 nil)                                        (|OldTtyHost| 11 (record (|charLength| |CharLength|)                                                                (|parity| |Parity|)                                                                (|stopBits| |StopBits|)                                                                (|frameTimeout| cardinal)))                                        (|OldTty| 12 (record (|charLength| |CharLength|)                                                            (|parity| |Parity|)                                                            (|stopBits| |StopBits|)                                                            (|frameTimeout| cardinal)))                                        (|other| 13 nil)                                        (|unknown| 14 nil)                                        (|ibm2780| 15 (record (|sendBlockSize| cardinal)                                                             (|receiveBlockSize| cardinal)))                                        (|ibm2780Host| 16 (record (|sendBlockSize| cardinal)                                                                 (|receiveBlockSize| cardinal)))                                        (|ibm3780| 17 (record (|sendBlockSize| cardinal)                                                             (|receiveBlockSize| cardinal)))                                        (|ibm3780Host| 18 (record (|sendBlockSize| cardinal)                                                                 (|receiveBlockSize| cardinal)))                                        (|siemens9750| 19 nil)                                        (|siemens9750Host| 20 nil)                                        (|ttyHost| 21 (record (|charLength| |CharLength|)                                                             (|parity| |Parity|)                                                             (|stopBits| |StopBits|)                                                             (|frameTimeout| cardinal)                                                             (|flowControl| |FlowControl|)))                                        (|tty| 22 (record (|charLength| |CharLength|)                                                         (|parity| |Parity|)                                                         (|stopBits| |StopBits|)                                                         (|frameTimeout| cardinal)                                                         (|flowControl| |FlowControl|)))))       (|TransportObject| (choice (|rs232c| 0 (record (|CommParams| |CommParamObject|)                                                     (|preemptOthers| |ReserveType|)                                                     (|preemptMe| |ReserveType|)                                                     (|phoneNumber| string)                                                     (|line| (choice (|alreadyReserved|                                                                      0                                                                      (record (|resource| |Resource|)                                                                             ))                                                                    (|reserveNeeded|                                                                     1                                                                     (record (|lineNumber| cardinal))                                                                     )))))                                 (|bsc| 1 (record (|localTerminalID| string)                                                 (|localSecurityID| string)                                                 (|lineControl| |LineControl|)                                                 (|authenticateProc| unspecified)))                                 (|teletype| 2 nil)                                 (|polledBSCController| 3 (record (|hostControllerName| string)                                                                 (|controllerAddress|                                                                         |ControllerAddress|)                                                                 (|portsOnController| cardinal)))                                 (|sdlcController| 4 (record (|hostControllerName| string)                                                            (|controllerAddress| |ControllerAddress|)                                                            (|portsOnController| cardinal)))                                 (|polledBSCTerminal| 5 (record (|hostControllerName| string)                                                               (|terminalAddress| |TerminalAddress|))                                        )                                 (|sdlcTerminal| 6 (record (|hostControllerName| string)                                                          (|terminalAddress| |TerminalAddress|)))                                 (|service| 7 (record (|id| longcardinal)))                                 (|unused| 8 nil)                                 (|polledBSCPrinter| 9 (record (|hostControllerName| string)                                                              (|printerAddress| |TerminalAddress|)))                                 (|sdlcPrinter| 10 (record (|hostControllerName| string)                                                          (|printerAddress| |TerminalAddress|)))))       (|Sequence.TransportObject| (sequence |TransportObject|))       (|BidReply| (enumeration (|wack| 0)                          (|nack| 1)                          (|default| 2)))       (|ExtendedBoolean| (enumeration (|true| 0)                                 (|false| 1)                                 (|default| 2)))       (|DeviceType| (enumeration (|undefined| 0)                            (|terminal| 1)                            (|printer| 2)))       (|AccessDetail| (choice (|directConn| 0 (record (|duplex| (enumeration (|full| 0)                                                                        (|half| 1)))                                                      (|lineType| |LineType|)                                                      (|lineSpeed| |LineSpeed|)))                              (|dialConn| 1 (record (|duplex| (enumeration (|full| 0)                                                                     (|half| 1)))                                                   (|lineType| |LineType|)                                                   (|lineSpeed| |LineSpeed|)                                                   (|dialMode| (enumeration (|manual| 0)                                                                      (|auto| 1)))                                                   (|dialerNumber| cardinal)                                                   (|retryCount| cardinal)))))       (|CommParamObject| (record (|accessDetail| |AccessDetail|)))       (|LineType| (enumeration (|bitSynchronous| 0)                          (|byteSynchronous| 1)                          (|asynchronous| 2)                          (|autoRecognition| 3)))       (|LineSpeed| (enumeration (|bps50| 0)                           (|bps75| 1)                           (|bps110| 2)                           (|bps135p5| 3)                           (|bps150| 4)                           (|bps300| 5)                           (|bps600| 6)                           (|bps1200| 7)                           (|bps2400| 8)                           (|bps3600| 9)                           (|bps4800| 10)                           (|bps7200| 11)                           (|bps9600| 12)                           (|bps19200| 13)                           (|bps28800| 14)                           (|bps38400| 15)                           (|bps48000| 16)                           (|bps56000| 17)                           (|bps57600| 18)))       (|LineControl| (enumeration (|primary| 0)                             (|secondary| 1)))       (|ControllerAddress| cardinal)       (|TerminalAddress| cardinal)       (|credentials| (authentication . credentials))       (|verifier| (authentication . verifier))       (|Duplexity| (enumeration (|full| 0)                           (|half| 1)))       (|PortClientType| (enumeration (|unassigned| 0)                                (|outOfService| 1)                                (|its| 2)                                (|irs| 3)                                (|gws| 4)                                (|ibm3270Host| 5)                                (|ttyEmulation| 6)                                (|rbs| 7)                                (|fax| 8)                                (|mailGateway| 9)                                (|phototypesetter| 10)))       (|PortDialerType| (enumeration (|none| 0)                                (|vadic| 1)                                (|hayes| 2)                                (|ventel| 3)                                (|rs366| 4)))       (|PortEchoingLocation| (enumeration (|application| 0)                                     (|ciu| 1)                                     (|terminal| 2)))       (|ReserveType| (enumeration (|preemptNever| 0)                             (|preemptAlways| 1)                             (|preemptInactive| 2)))       (|RS232CData| (record (|cIUPort| boolean)                            (|owningClientType| |PortClientType|)                            (|preemptionAllowed| boolean)                            (|lineNumber| cardinal)                            (|dialerNumber| cardinal)                            (|duplexity| |Duplexity|)                            (|dialingHardware| |PortDialerType|)                            (|charLength| |CharLength|)                            (|echoing| |PortEchoingLocation|)                            (|flowControl| |FlowControl|)                            (|lineSpeed| |LineSpeed|)                            (|parity| |Parity|)                            (|stopBits| |StopBits|)                            (|portActsAsDCE| boolean)                            (|accessControl| nsname)                            (|validLineSpeeds| (sequence |LineSpeed|))))       (|RS232CBack| (record (|owningCIU| string)                            (|owningECS| string)                            (|owningClient| string)                            (|portNumber| cardinal)))       (|IBMDeviceType| (enumeration (|unused| 0)                               (|model1| 1)                               (|model2| 2)                               (|model3| 3)                               (|model4| 4)                               (|model5| 5)                               (|printer| 6)                               (|other| 7)))       (|IBM3270Languages| (enumeration (|USenglish| 0)                                  (|Austrian| 1)                                  (|AustrianAlt| 2)                                  (|German| 3)                                  (|GermanAlt| 4)                                  (|Belgian| 5)                                  (|Brazilian| 6)                                  (|CanadianFrench| 7)                                  (|Danish| 8)                                  (|DanishAlt| 9)                                  (|Norwegian| 10)                                  (|NorwegianAlt| 11)                                  (|Finnish| 12)                                  (|FinnishAlt| 13)                                  (|Swedish| 14)                                  (|SwedishAlt| 15)                                  (|French| 16)                                  (|International| 17)                                  (|Italian| 18)                                  (|JapaneseEnglish| 19)                                  (|JapaneseKana| 20)                                  (|Portuguese| 21)                                  (|Spanish| 22)                                  (|SpanishAlt| 23)                                  (|SpanishSpeaking| 24)                                  (|UKenglish| 25)                                  (|unused1| 26)                                  (|unused2| 27)                                  (|unused3| 28)                                  (|unused4| 29)                                  (|unused5| 30)                                  (|unused6| 31)))       (|ControllerLinkType| (enumeration (|sdlc| 0)                                    (|bsc| 1)))       (|IBM3270Device| (record (|model| |IBMDeviceType|)                               (|accessControl| nsname)))       (|IBM3270Controller| (record (|controllerAddress| cardinal)                                   (|portsOnController| cardinal)                                   (|linkType| |ControllerLinkType|)                                   (|language| |IBM3270Languages|)                                   (|devices| (sequence |IBM3270Device|))))       (|IBM3270HostData| (sequence |IBM3270Controller|))       (|IBM3270HostBack| (record (|path| nsname))))    procedures      ((|Reset| 0)       (|Create| 2 (|SessionParameterObject| |Sequence.TransportObject| |WaitTime| |credentials|                           |verifier|)              returns              (|SessionHandle|)              reports              (|badAddressFormat| |controllerAlreadyExists| |controllerDoesNotExist|                      |dialingHardwareProblem| |illegalTransport| |inconsistentParams|                      |mediumConnectFailed| |noCommunicationHardware| |noDialingHardware|                      |terminalAddressInUse| |terminalAddressInvalid| |tooManyGateStreams|                      |transmissionMediumUnavailable| |serviceTooBusy| |userNotAuthenticated|                      |userNotAuthorized| |serviceNotFound|)              implementedby make.ns.chat.connection))    errors      ((|unimplemented| 0)       (|noCommunicationHardware| 1)       (|illegalTransport| 2)       (|mediumConnectFailed| 3)       (|badAddressFormat| 4)       (|noDialingHardware| 5)       (|dialingHardwareProblem| 6)       (|transmissionMediumUnavailable| 7)       (|inconsistentParams| 8)       (|tooManyGateStreams| 9)       (|bugInGAPCode| 10)       (|gapNotExported| 11)       (|gapCommunicationError| 12)       (|controllerAlreadyExists| 13)       (|controllerDoesNotExist| 14)       (|terminalAddressInUse| 15)       (|terminalAddressInvalid| 16)))(defineq(nschat.3270.host  (lambda (ibm.virtual.host)                                 (* |ejs:| " 3-May-86 18:24")                    (* * |Retrieves| |the| nsname |of| |the| |physical| |host| |on| |which| |the|           |virtual| |host| |lives|)    (courier.fetch (gap . |IBM3270HostBack|)           |path|           (cadr (ch.retrieve.item ibm.virtual.host 'ibm3270.host.back '(gap . |IBM3270HostBack|))))))(nschat.attentionfn  (lambda (stream attnbyte)                                  (* |bvm:| "11-Mar-85 13:00")    (selectq attnbyte        (208 -1)        (209 (notify.event (streamprop stream '|MediumUpEvent|)))        (cond           ((or xiptraceflg nswizardflg)            (|printout| promptwindow t "Attention byte: " |.I1.8| attnbyte))))    t))(nschat.errorhandler  (lambda (stream errcode)                                   (* |ejs:| "18-Dec-84 20:43")    (selectq errcode        (eom (spp.cleareom stream))        (attention (spp.clearattention stream)                   (nschat.attentionfn stream (bin stream)))        (end (add.chat.message stream "[Connection closed by remote host]")             -1)        (cond           ((spp.openp stream)                               (* |non-fatal| |error?|)            (add.chat.message stream (concat "[SPP error " errcode "]"))            (bin stream))           (t (\\eof.action stream))))))(nschat.host.filter  (lambda (name)                                             (* |lmm| "15-Jan-85 22:19")                    (* * |Return| nschat.open |if| name |is| |an| ns |host| |with| \a |telnet|           |server.|)    (and \\nsflg (strpos ":" name)         (setq name (ch.lookup.object name))         (list (mkatom name)               (function nschat.open)))))(nschat.open  (lambda (host)                                             (* |ejs:| "27-May-86 09:26")                    (* * |Return| \a |pair| |of| spp |streams| |for| \a |chat| |connection,| |or|           nil. |Add| chat |specific| |operations| |to| |the| stream |via| streamprop.)    (prog ((|MediumUpEvent| (create.event))           service.options port service outstream stream handle failure)      lp  (setq service.options (nschat.services host service))          (cond             ((not (setq service (cond                                    ((eqlength service.options 1)                                     (|printout| promptwindow t "Connecting to " (caar                                                                                       service.options                                                                                       )                                            " on " host t)                                     (cadar service.options))                                    (t (menu (|create| menu items _ service.options title _                                                     "Specific NS Service?" whenselectedfn _                                                    (function (lambda (item menu mouse)                                                                (cadr item)))))))))              (cond                 (stream (closef? stream)))              (return))             ((null (setq port (let ((port (lookup.ns.server (apply* (|fetch| (nschat.service                                                                                |PhysicalHostFunction|                                                                                     )                                                                            |of| service)                                                                    host))))                                    (cond                                       (port (|replace| (nsaddress nssocket)                                                    |of| port |with| |\\NS.WKS.Courier|)                                             port)))))              (setq failure "Name not found"))             ((null (setq stream (courier.open port nil t 'nschat nil                                        '(eom.on.forceout t errorhandler nschat.errorhandler                                                 attentionfn nschat.attentionfn))))                                                             (* n\o |response|)              )             (t (streamprop stream '|MediumUpEvent| |MediumUpEvent|)                (streamprop stream 'eofpfn (function nschat.eofpfn))                (spp.dstype stream 192)                (cond                   ((nlistp (setq handle (apply* (|fetch| (nschat.service |OpenFunction|)                                                        |of| service)                                                stream host (|fetch| (nschat.service |ServiceID|)                                                                   |of| service)))))                   ((eq (car handle)                        'error)                    (setq failure (selectq (cadr handle)                                      ((reject 20)                     (* w\e |ought| |to| |figure| |out| |exactly| |what| |error| 20 |is.|          |Incomplete| |program| |declaration|)                                           (printout promptwindow t "Service not supported" t)                                           (go lp))                                      (substring (cdr handle)                                             2 -2))))                   (t (streamprop stream 'setdisplaytype (function nill))                      (streamprop stream 'loginfo (function nill))                      (streamprop stream 'flush&wait (function nill))                      (streamprop stream 'sendscreenparams (function nill))                      (streamprop stream 'readpevent (spp.input.event stream))                      (setq outstream (sppoutputstream stream))                      (await.event |MediumUpEvent| 15000)                      (cond                         ((neq service |GAP.InteractiveTerminalService|)                          (spp.sendattention outstream 209)))                      (return (cons stream outstream))))))          (closef? stream)          (|printout| promptwindow t "Could not chat to " host " because: " (or failure "No Response"                                                                                )))))(nschat.open.3270  (lambda (stream ibm3270.virtual.host)                      (* |bvm:| " 7-Oct-86 21:24")    (let ((authenticator (ch.getauthenticator t))          (controller (car (cadr (ch.retrieve.item ibm3270.virtual.host 'ibm3270hostdata                                        '(gap . |IBM3270HostData|))))))         (cond            ((and controller stream)             (courier.call stream 'gap '|Create| `(|ibm3270Host|)                    (selectq (courier.fetch (gap . |IBM3270Controller|)                                    |linkType| controller)                        (|sdlc| `((|sdlcTerminal| (,(concat (|fetch| (nsname nsobject)                                                                   |of|                                                                   (parse.nsname ibm3270.virtual.host                                                                          ))                                                           "#"                                                           (octalstring (courier.fetch (gap . |IBM3270Controller|                                                                                        )                                                                               |controllerAddress|                                                                                controller))                                                           "B") 1))))                        (|bsc| `((|polledBSCTerminal| (,(concat (|fetch| (nsname nsobject)                                                                       |of|                                                                       (parse.nsname                                                                               ibm3270.virtual.host))                                                               "#"                                                               (octalstring (courier.fetch                                                                             (gap . |IBM3270Controller|                                                                              )                                                                             |controllerAddress|                                                                              controller))                                                               "B") 5))))                        (error "Unknown 3270 controller link type" (courier.fetch (gap . |IBM3270Controller|                                                                                   )                                                                          |linkType| controller)))                    15000                    (car authenticator)                    (cadr authenticator)                    'returnerrors))))))(nschat.open.dialout  (lambda (stream host)                                      (* |bvm:| " 7-Oct-86 21:12")    (declare (globalvars chat.phone.numbers))    (let ((rs232cdata (cadr (ch.retrieve.item host 'rs232cdata '(gap . |RS232CData|))))          (authenticator (ch.getauthenticator t))          phonenumber)         (cond            ((null rs232cdata)             (|printout| promptwindow t host " does not appear support dialout service" t)             (closef stream)             (error!))            (t (resetlst (resetsave nil (list (function (lambda (cstream)                                                          (and resetstate (closef cstream))))                                              stream))                      (or (eq (courier.fetch (gap . |RS232CData|)                                     |dialingHardware| |of| rs232cdata)                              '|none|)                          (setq phonenumber (chat.choose.phone.number)))                      (courier.call                       stream                       'gap                       '|Create|                       `(|tty| ,(list (progn (courier.fetch (gap . |RS232CData|)                                                    |charLength| |of| rs232cdata)                                             '|seven|)                                      (progn (courier.fetch (gap . |RS232CData|)                                                    |parity| |of| rs232cdata)                                             '|even|)                                      (courier.fetch (gap . |RS232CData|)                                             |stopBits| |of| rs232cdata)                                      100                                      (courier.fetch (gap . |RS232CData|)                                             |flowControl| |of| rs232cdata)))                       (cond                          (phonenumber `((|rs232c| (((|dialConn| (|full| |asynchronous|                                                                        ,(courier.fetch (gap . |RS232CData|                                                                                         )                                                                                |lineSpeed| |of|                                                                                 rs232cdata) |auto|                                                                        ,(courier.fetch (gap . |RS232CData|                                                                                         )                                                                                |dialerNumber| |of|                                                                                 rs232cdata) 1)))                                                    |preemptInactive| |preemptInactive| ,phonenumber                                                    (|reserveNeeded| (,(courier.fetch (gap . |RS232CData|                                                                                       )                                                                              |lineNumber| |of|                                                                               rs232cdata)))))                                         (|teletype|)))                          (t `((|rs232c| (((|directConn| (|full| |asynchronous|                                                                ,(courier.fetch (gap . |RS232CData|)                                                                        |lineSpeed| |of| rs232cdata))                                                  ))                                          |preemptInactive| |preemptInactive| nil                                          (|reserveNeeded| (,(courier.fetch (gap . |RS232CData|)                                                                    |lineNumber| |of| rs232cdata)))))                               (|teletype|))))                       15000                       (car authenticator)                       (cadr authenticator)                       'returnerrors)))))))(nschat.open.ttyhost  (lambda (stream host service)                              (* |bvm:| " 7-Oct-86 21:12")    (let ((authenticator (ch.getauthenticator)))         (courier.call stream 'gap '|Create| '(|ttyHost| (|seven| |even| |two| 100 (|none| 0 0)))                `((|service| (,service))                  (|teletype|)) 15000 (car authenticator)                (cadr authenticator)                'returnerrors))))(nschat.services  (lambda (host allflg)                                      (* |bvm:| " 7-Oct-86 21:18")    (let* ((properties (cadr (ch.list.properties host)))           (services (and (not allflg)                          (append (cond                                     ((|for| service |in| (constant (list (ch.property 'file.service)                                                                          (ch.property 'print.service                                                                                 )                                                                          (ch.property '                                                                                clearinghouse.service                                                                                 )                                                                          (ch.property '                                                                       external.communication.service                                                                                 )                                                                          (ch.property '                                                                                 gateway.service)                                                                          (ch.property '                                                                             internet.routing.service                                                                                 )                                                                          (ch.property 'mail.service)                                                                          (ch.property '                                                                                 remote.batch.service                                                                                 )                                                                          10024))                                             |thereis|                                             (fmemb service properties))                                      (constant `(("Remote System Administration"                                                   ,(|create| nschat.service |ServiceID| _                                                            |GAP.RemoteSystemAdministration|                                                            |PhysicalHostFunction| _                                                           (function cl:identity)                                                           |OpenFunction| _ (function                                                                              nschat.open.ttyhost))                                                    "Connect to a server executive")))))                                 (cond                                    ((fmemb (constant (ch.property 'workstation))                                            properties)                                     (constant `(("Remote System Executive"                                                  ,(|create| nschat.service |ServiceID| _                                                           |GAP.RemoteSystemExecutive|                                                           |PhysicalHostFunction| _                                                          (function cl:identity)                                                          |OpenFunction| _ (function                                                                             nschat.open.ttyhost))                                                   "Connect to a remote exec on another workstation"))                                            )))                                 (cond                                    ((fmemb (constant (ch.property 'interactive.terminal.service))                                            properties)                                     (constant `(("Interactive Terminal Service"                                                  ,(|create| nschat.service |ServiceID| _                                                           |GAP.InteractiveTerminalService|                                                           |PhysicalHostFunction| _                                                          (function cl:identity)                                                          |OpenFunction| _ (function                                                                             nschat.open.ttyhost))                                                   "Connect to a terminal-based mail reader")))))                                 (cond                                    ((fmemb (constant (ch.property 'rs232cdata))                                            properties)                                     (constant `(("RS232 Dialout"                                                  ,(|create| nschat.service |ServiceID| _                                                          'dialout |PhysicalHostFunction| _                                                          (function cl:identity)                                                          |OpenFunction| _ (function                                                                             nschat.open.dialout))                                                   "Connect to a dialout facility")))))                                 (cond                                    ((fmemb (constant (ch.property 'ibm3270.host))                                            properties)                                     (constant `(("IBM3270 Emulation Service"                                                  ,(|create| nschat.service |ServiceID| _                                                          'ibm3270 |PhysicalHostFunction| _                                                          (function nschat.3270.host)                                                          |OpenFunction| _ (function nschat.open.3270                                                                            ))                                                   "Connect to an IBM3270 Emulator Port")))))))))          (cond             (services)             (t (|printout| promptwindow t host " does not have any registered NSCHAT services." t                        "Please choose a service from the menu." t)                (constant `(("Remote System Administration" ,(|create| nschat.service |ServiceID| _                                                                     |GAP.RemoteSystemAdministration|                                                                     |PhysicalHostFunction| _                                                                    (function cl:identity)                                                                    |OpenFunction| _                                                                    (function nschat.open.ttyhost))                                    "Connect to a server executive")                            ("Remote System Executive" ,(|create| nschat.service |ServiceID| _                                                                |GAP.RemoteSystemExecutive|                                                                |PhysicalHostFunction| _                                                               (function cl:identity)                                                               |OpenFunction| _                                                               (function nschat.open.ttyhost))                                    "Connect to a remote exec on another workstation")                            ("Interactive Terminal Service" ,(|create| nschat.service |ServiceID| _                                                                     |GAP.InteractiveTerminalService|                                                                     |PhysicalHostFunction| _                                                                    (function cl:identity)                                                                    |OpenFunction| _                                                                    (function nschat.open.ttyhost))                                    "Connect to a terminal-based mail reader")                            ("RS232 Dialout" ,(|create| nschat.service |ServiceID| _ 'dialout                                                      |PhysicalHostFunction| _ (function cl:identity)                                                     |OpenFunction| _ (function nschat.open.dialout))                                    "Connect to a dialout facility")                            ("IBM3270 Emulation Service" ,(|create| nschat.service |ServiceID| _                                                                 'ibm3270 |PhysicalHostFunction| _                                                                 (function nschat.3270.host)                                                                 |OpenFunction| _                                                                 (function nschat.open.3270))                                    "Connect to an IBM3270 Emulator Port"))))))))(spp.input.event  (lambda (stream)                                           (* |ejs:| " 2-Jul-85 13:38")                    (* * |Returns| |the| sppinputevent |of| |the| |associated| |connection| |for|           stream\, |if| stream |is| |open| |for| input)    (cond       ((eq (|fetch| (stream access)                   |of| stream)            'input)        (|fetch| (sppcon sppinputevent)               |of|               (|fetch| (sppstream spp.connection)                      |of| stream)))       (t (error "FILE NOT OPEN" stream))))))(rpaq? nschat.options.menu )(declare\: eval@compile dontcopy (filesload (source)       sppdecls)(declare\: eval@compile(record nschat.service (|ServiceID| |PhysicalHostFunction| |OpenFunction|)))(declare\: eval@compile (rpaqq |\\NS.WKS.Courier| 5)(rpaqq |GAP.RemoteSystemAdministration| 1)(rpaqq |GAP.RemoteSystemExecutive| 2)(rpaqq |GAP.InteractiveTerminalService| 3)(constants (|\\NS.WKS.Courier| 5)       (|GAP.RemoteSystemAdministration| 1)       (|GAP.RemoteSystemExecutive| 2)       (|GAP.InteractiveTerminalService| 3)))(declare\: doeval@compile dontcopy(globalvars nschat.options.menu)))(declare\: donteval@load docopy (addtovar chat.protocoltypes (ns . nschat.host.filter)))(putprops nschat copyright ("Xerox Corporation" 1984 1985 1986))(declare\: dontcopy  (filemap (nil (18185 41988 (nschat.3270.host 18195 . 18625) (nschat.attentionfn 18627 . 18995) (nschat.errorhandler 18997 . 19625) (nschat.host.filter 19627 . 20025) (nschat.open 20027 . 24656) (nschat.open.3270 24658 . 27502) (nschat.open.dialout 27504 . 31671) (nschat.open.ttyhost 31673 . 32112) (nschat.services 32114 . 41409) (spp.input.event 41411 . 41986)))))stop