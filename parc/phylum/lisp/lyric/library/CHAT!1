(DEFINE-FILE-INFO §PACKAGE "INTERLISP" §READTABLE "INTERLISP" §BASE 10)(FILECREATED "26-Jan-87 22:24:19" {ERIS}<LISPCORE>LIBRARY>CHAT.;41 67090        changes to%:  (VARS CHATCOMS)                    (VARIABLES CHAT.TTY.PROCESS CHAT.ALLHOSTS CHAT.AUTOCRLF CHAT.CONTROLCHAR                            CHAT.DISPLAYTYPES CHAT.DRIVERTYPES CHAT.EMACSCOMMANDS CHAT.EMULATORTYPE                            CHAT.FONT CHAT.HOSTMENU CHAT.IN.EMACS? CHAT.INTERRUPTS CHAT.KEYACTIONS                            CHAT.METACHAR CHAT.PROTOCOLTYPES CHAT.REOPENMENU CHAT.WAIT.TIME                            CHAT.WINDOW.REGION CHAT.WINDOW.SIZE CHATDEBUGFLG CHATMENU CHATWINDOW                            CHATWINDOWLST CLOSECHATWINDOWFLG DEFAULTCHATHOST NETWORKLOGINFO)      previous date%: " 4-Dec-86 23:29:39" {ERIS}<LISPCORE>LIBRARY>CHAT.;40)(* "Copyright (c) 1982, 1983, 1984, 1985, 1986, 1987 by Xerox Corporation.  All rights reserved.")(PRETTYCOMPRINT CHATCOMS)(RPAQQ CHATCOMS        [(COMS                                                (* ; "CHAT typein")              (FNS CHAT CHAT.CHOOSE.EMULATOR CHAT.SET.EMULATOR CHAT.CHANGE.EMULATOR CHAT.INIT                    FIND.CHAT.PROTOCOL CHAT.TYPEIN CHAT.BIN CHAT.CLOSE CHAT.DEACTIVATE.WINDOW                    CHAT.CLOSEFN CHAT.CLOSE.CONNECTION CHAT.LOGIN)              (VARIABLES CHAT.TTY.PROCESS))        (COMS                                                (* ; "CHAT streams")              (FNS ADD.CHAT.MESSAGE CHAT.LOGINFO CHAT.SENDSCREENPARAMS CHAT.SETDISPLAYTYPE                    CHAT.LOGINFO CHAT.FLUSH&WAIT CHAT.ENDOFSTREAMOP CHAT.OPTIONMENU))        (COMS                                                (* ; "CHAT typeout")              (FNS CHAT.TYPEOUT CHAT.TYPEOUT.CLOSE CHAT.DID.RESHAPE CHAT.SCREENPARAMS))        (COMS                                                (* ; "window stuff")              (FNS GETCHATWINDOW CHAT.BUTTONFN CHAT.HOLD CHAT.MENU CHAT.CLEAR.FROM.MENU                    CHAT.TAKE.INPUT CHAT.TAKE.INPUT1 DO.CHAT.OPTION CHAT.RECONNECT CHAT.RECONNECT.OFF                    CHAT.RESHAPEWINDOW CHAT.TTYENTRYFN CHAT.TTYEXITFN CHAT.TYPESCRIPT CHAT.TYPESCRIPT1                   ))        [COMS                                                (* ; "for dialouts")              (FNS CHAT.CHOOSE.PHONE.NUMBER)              (INITVARS (CHAT.PHONE.NUMBER.MENU)                     (CHAT.PHONE.NUMBERS '(Other]        (COMS                                                (* ; "for EMACS")              (FNS CHAT.EMACS.MOVE CHAT.SWITCH.EMACS))        (COMS (FNS CHAT.ICONFN)              (BITMAPS TTYKBD TTYKBDMASK)              (VARS TTYKBDICONSPECREGION)              (INITVARS (TTYKBDICONSPEC)))        (VARIABLES CHAT.ALLHOSTS CHAT.AUTOCRLF CHAT.CONTROLCHAR CHAT.DISPLAYTYPES CHAT.DRIVERTYPES                CHAT.EMACSCOMMANDS CHAT.EMULATORTYPE CHAT.FONT CHAT.HOSTMENU CHAT.IN.EMACS?                CHAT.INTERRUPTS CHAT.KEYACTIONS CHAT.METACHAR CHAT.PROTOCOLTYPES CHAT.REOPENMENU                CHAT.WAIT.TIME CHAT.WINDOW.REGION CHAT.WINDOW.SIZE CHATDEBUGFLG CHATMENU CHATWINDOW                CHATWINDOWLST CLOSECHATWINDOWFLG DEFAULTCHATHOST NETWORKLOGINFO)        (ADDVARS (CHATMENUITEMS))        (DECLARE%: EVAL@COMPILE DONTCOPY (LOCALVARS . T)               (FILES (SOURCE)                      CHATDECLS)               (RECORDS EMACSCOMMANDS)               (GLOBALVARS CHATMENUITEMS))        (INITVARS (INVERTWINDOWFN 'INVERTW))        (COMS (FNS \SPAWN.CHAT)              (DECLARE%: DONTEVAL@LOAD DOCOPY (ADDVARS (BackgroundMenuCommands (CHAT '(\SPAWN.CHAT)                                                           "Runs a new CHAT process; prompts for host"                                                                                     )))                     (P (SETQ BackgroundMenu))                     (FILES DMCHAT)                                                             (* ;                                                          "need DMCHAT since its the default emulator")                     (INITRECORDS CHAT.STATE])(* ; "CHAT typein")(DEFINEQ(CHAT  (LAMBDA (HOST LOGOPTION INITSTREAM WINDOW FROMMENU)        (* lmm "24-Oct-86 17:06")    (PROG (CONNECTION STREAMS OPENFN RESULT PROCESS HOSTS DISPLAYTYPE)          (OR HOST (COND                      (FROMMENU (COND                                   ((OR CHAT.HOSTMENU (PROGN (SETQ HOSTS CHAT.ALLHOSTS)                                                             (COND                                                                (DEFAULTCHATHOST (pushnew HOSTS                                                                                       DEFAULTCHATHOST                                                                                        )))                                                             HOSTS))                                    (SETQ HOST (MENU (OR CHAT.HOSTMENU (SETQ CHAT.HOSTMENU                                                                        (create MENU                                                                               ITEMS _                                                                               (APPEND HOSTS                                                                                      '(Other))                                                                               TITLE _ "Host")))))                                    (COND                                       ((EQ HOST 'Other)                                        (SETQ HOST NIL))                                       ((NULL HOST)                                        (RETURN))))))                      (T (SETQ HOST DEFAULTCHATHOST))))      TOP (COND             ((NOT HOST)              (TTY.PROCESS (THIS.PROCESS))              (COND                 ((NOT (SETQ HOST (MKATOM (PROMPTFORWORD "Host: " NIL "Enter name of host to chat to, or <cr> to abort" (COND                                                                 (FROMMENU (COND                                                                              (WINDOW (                                                                                      GETPROMPTWINDOW                                                                                       WINDOW))                                                                              (T PROMPTWINDOW))))                                                 NIL NIL (CHARCODE (CR))))))                  (GO FAIL)))))          (COND             ((NOT (SETQ OPENFN (FIND.CHAT.PROTOCOL HOST)))                                                         (* ; "Don't know how to talk to this host")              (SETQ RESULT (CONCAT "Unknown Chat host: " HOST))              (COND                 (FROMMENU (printout (COND                                        (WINDOW (GETPROMPTWINDOW WINDOW))                                        (T PROMPTWINDOW))                                  T RESULT))))             ((NOT (SETQ STREAMS (APPLY* (PROGN (SETQ HOST (CAR OPENFN))                                                             (* Value returned was                                                             (CanonicalHostName OpenFn))                                                (CADR OPENFN))                                        HOST)))              (SETQ RESULT "Failed"))             (T (SETQ DISPLAYTYPE (CHAT.CHOOSE.EMULATOR HOST))                (SETQ WINDOW (GETCHATWINDOW HOST WINDOW (fetch (CHATDISPLAYTYPE DPYNAME) of                                                                                           DISPLAYTYPE                                                               )))                (CHAT.INIT STREAMS WINDOW HOST DISPLAYTYPE)                (COND                   ((NOT (FMEMB HOST CHAT.ALLHOSTS))                    (SETQ CHAT.ALLHOSTS (CONS HOST CHAT.ALLHOSTS))                    (SETQ CHAT.HOSTMENU)))                (LET ((PROC (ADD.PROCESS (LIST 'CHAT.TYPEIN (KWOTE HOST)                                               (KWOTE WINDOW)                                               (KWOTE LOGOPTION)                                               (KWOTE INITSTREAM))                                   'NAME                                   (PACK* "CHAT#" HOST)                                   'RESTARTABLE                                   'NO)))                     (PROCESSPROP PROC 'KEYACTION (LET ((KEY (KEYACTIONTABLE \DEFAULTKEYACTION)))                                                       (for PAIR in (CURRENTINTERRUPTS KEY)                                                          when (LEQ (CAR PAIR)                                                                    255)                                                          do (INTCHAR (CAR PAIR)                                                                    NIL NIL KEY))                                                             (* ;                                                              " turn off all interrupts in charset 0")                                                       (for PAIR in CHAT.INTERRUPTS                                                          do (INTCHAR (CAR PAIR)                                                                    NIL NIL KEY))                                                       (for PAIR in CHAT.KEYACTIONS                                                          do (KEYACTION (CAR PAIR)                                                                    (CDR PAIR)                                                                    KEY))                                                       KEY))                     (if CHAT.TTY.PROCESS                         then (TTY.PROCESS PROC)))                (RETURN HOST)))      FAIL          (COND             ((AND WINDOW (WINDOWPROP WINDOW 'CHATHOST))              (WINDOWPROP WINDOW 'BUTTONEVENTFN (FUNCTION CHAT.RECONNECT))))          (RETURN RESULT))))(CHAT.CHOOSE.EMULATOR  (LAMBDA (HOST)                                             (* lmm "20-Oct-86 16:28")                                                  (* ;;                                "Returns a record of type CHATDISPLAYTYPE to be used for this session")    (COND       ((FIXP CHAT.DISPLAYTYPES)        (COND           (CHAT.EMULATORTYPE (create CHATDISPLAYTYPE                                     HOST _ NIL                                     DPYNAME _ CHAT.EMULATORTYPE                                     DPYCODE _ CHAT.DISPLAYTYPES))))       ((LISTP CHAT.DISPLAYTYPES)        (OR (FASSOC HOST CHAT.DISPLAYTYPES)            (FASSOC NIL CHAT.DISPLAYTYPES)))       (T (ERROR "Please set CHAT.DISPLAYTYPES to be a list of (HOST TTY-TYPE-# EMULATORTYPE)")          NIL))))(CHAT.SET.EMULATOR  (LAMBDA (CHAT.STATE WINDOW NEWEMULATOR)                    (* lmm "20-Oct-86 18:03")    (LET ((TYPEOUTPROC (fetch (CHAT.STATE TYPEOUTPROC) of CHAT.STATE)))         (COND            (NEWEMULATOR (DEL.PROCESS TYPEOUTPROC)                   (CLEARW WINDOW)                   (ADD.PROCESS `(CHAT.TYPEOUT ,WINDOW ',NEWEMULATOR ',CHAT.STATE)))))))(CHAT.CHANGE.EMULATOR  (LAMBDA (CHAT.STATE)    (LET* ((WINDOW (fetch (CHAT.STATE WINDOW) of CHAT.STATE))           (TYPEOUTPROC (fetch (CHAT.STATE TYPEOUTPROC) of CHAT.STATE))           (NEWEMULATOR (MENU (create MENU                                     ITEMS _ (for ENTRY in CHAT.DRIVERTYPES collect (CAR ENTRY))                                     CENTERFLG _ T                                     TITLE _ "Available terminals"))))          (COND             (NEWEMULATOR (DEL.PROCESS TYPEOUTPROC)                    (CLEARW WINDOW)                    (ADD.PROCESS `(CHAT.TYPEOUT %, WINDOW (QUOTE %, NEWEMULATOR)                                         %, CHAT.STATE)))))))(CHAT.INIT  (LAMBDA (STREAMS WINDOW HOST DISPLAYTYPE)                  (* ejs%: "14-Jun-85 15:09")    (LET* ((INSTREAM (CAR STREAMS))           (OUTSTREAM (CDR STREAMS))           (DPYNAME (fetch (CHATDISPLAYTYPE DPYNAME) of DISPLAYTYPE))           (STATE (create CHAT.STATE                         RUNNING? _ T                         CHATINEMACS _ CHAT.IN.EMACS?                         INSTREAM _ INSTREAM                         OUTSTREAM _ OUTSTREAM                         WINDOW _ WINDOW                         DSP _ (WINDOWPROP WINDOW 'DSP))))          (WINDOWPROP WINDOW 'CHATSTATE STATE)          (COND             ((EQ DPYNAME 'TEDIT)              (replace (CHAT.STATE TEXTSTREAM) of STATE with (TEDITSTREAM.INIT WINDOW                                                                    (FUNCTION TEDITCHAT.MENUFN))))             (T (WINDOWPROP WINDOW 'CURSORMOVEDFN NIL)                (WINDOWPROP WINDOW 'RESHAPEFN (FUNCTION CHAT.RESHAPEWINDOW))                (WINDOWPROP WINDOW 'BUTTONEVENTFN (FUNCTION CHAT.BUTTONFN))                (WINDOWPROP WINDOW 'REPAINTFN NIL)                (WINDOWPROP WINDOW 'NEWREGIONFN NIL)                (WINDOWPROP WINDOW 'WINDOWENTRYFN 'GIVE.TTY.PROCESS)                (WINDOWPROP WINDOW 'RIGHTBUTTONFN NIL)                (WINDOWPROP WINDOW 'CURSOROUTFN NIL)                (WINDOWPROP WINDOW 'SCROLLFN NIL)))          (WINDOWADDPROP WINDOW 'CLOSEFN (FUNCTION CHAT.CLOSEFN))          (WINDOWPROP WINDOW 'ICONWINDOW NIL)          (WINDOWPROP WINDOW 'ICONFN (FUNCTION CHAT.ICONFN))          (STREAMPROP INSTREAM 'OLDEOSOP (fetch ENDOFSTREAMOP of INSTREAM))          (STREAMPROP INSTREAM 'DISPLAYTYPE DISPLAYTYPE)          (replace ENDOFSTREAMOP of INSTREAM with (FUNCTION CHAT.ENDOFSTREAMOP)))))(FIND.CHAT.PROTOCOL  (LAMBDA (NAME)                                             (* ejs%: "13-Nov-84 16:24")                    (* * Find a protocol for use by CHAT by calling the filter fns on           CHAT.PROTOCOLS. The fns should return a CHAT.PROTOCOL that can be used to           contact NAME or NIL.)    (for PAIR in CHAT.PROTOCOLTYPES bind RESULT when (SETQ RESULT (APPLY* (CDR PAIR)                                                                         NAME))       do (RETURN RESULT))))(CHAT.TYPEIN  (LAMBDA (HOST WINDOW LOGOPTION INITSTREAM)                 (* lmm "14-Oct-86 11:28")    (DECLARE (SPECVARS STREAM))                              (* ; "so that menu can change it")    (PROG ((THISPROC (THIS.PROCESS))           (DEFAULTSTREAM T)           (STATE (WINDOWPROP WINDOW 'CHATSTATE))           CHATSTREAM INSTREAM WINDOWSTREAM STREAM CH DISPLAYTYPE DISPLAYNAME CHATPROMPTWINDOW            LOCALECHOSTREAM)          (SETQ CHATSTREAM (fetch (CHAT.STATE OUTSTREAM) of STATE))          (SETQ INSTREAM (fetch (CHAT.STATE INSTREAM) of STATE))          (PROCESSPROP THISPROC 'TTYENTRYFN (FUNCTION CHAT.TTYENTRYFN))          (PROCESSPROP THISPROC 'WINDOW WINDOW)          (SETQ WINDOWSTREAM (WINDOWPROP WINDOW 'DSP))          (DSPFONT (OR CHAT.FONT (DEFAULTFONT 'DISPLAY))                 WINDOWSTREAM)          (DSPRESET WINDOWSTREAM)          (WINDOWPROP WINDOW 'PROCESS (THIS.PROCESS))          (WINDOWPROP WINDOW 'CHATHOST (CONS HOST LOGOPTION))          (RESETSAVE NIL (LIST (FUNCTION (LAMBDA (WINDOW STATE)                                           (AND RESETSTATE (fetch (CHAT.STATE RUNNING?) of STATE)                                                (CHAT.CLOSE WINDOW T))))                               WINDOW STATE))     (* ;     "If an error occurs, process is killed, or HARDRESET happens, this will flush the connection etc")          (COND             ((SETQ DISPLAYTYPE (STREAMPROP INSTREAM 'DISPLAYTYPE))              (SETQ DISPLAYNAME (fetch (CHATDISPLAYTYPE DPYNAME) of DISPLAYTYPE))))          (replace (CHAT.STATE TYPEOUTPROC) of STATE with (ADD.PROCESS `(CHAT.TYPEOUT %, WINDOW                                                                               (QUOTE %, DISPLAYNAME)                                                                               (QUOTE %, STATE))                                                                 'NAME                                                                 'CHAT.TYPEOUT))          (COND             (DISPLAYTYPE (CHAT.SETDISPLAYTYPE INSTREAM (fetch (CHATDISPLAYTYPE DPYCODE) of                                                                                           DISPLAYTYPE                                                               ))))          (CHAT.SCREENPARAMS STATE INSTREAM WINDOW)          (AND (NEQ LOGOPTION 'NONE)               (CHAT.LOGIN HOST LOGOPTION WINDOW STATE))          (COND             (INITSTREAM (NLSETQ (SETQ STREAM (COND                                                 ((STRINGP INITSTREAM)                                                  (OPENSTRINGSTREAM INITSTREAM))                                                 (T (OPENSTREAM INITSTREAM 'INPUT)))))))          (TTYDISPLAYSTREAM WINDOWSTREAM)         (* ;                                            "So that \TTYBACKGROUND flashes the caret where we expect")          (bind OUTPUTSTREAM while (EQ (fetch (CHAT.STATE RUNNING?) of STATE)                                       T)             do (COND                   ((NULL STREAM)                    (SETQ STREAM DEFAULTSTREAM)))                (SETQ OUTPUTSTREAM (if (fetch (CHAT.STATE LOCALECHO) of STATE)                                       then (OR LOCALECHOSTREAM (SETQ LOCALECHOSTREAM                                                                 (CL:MAKE-BROADCAST-STREAM                                                                  CHATSTREAM                                                                  (GETSTREAM WINDOW 'OUTPUT))))                                     else CHATSTREAM))                (COND                   ((EQ STREAM T)                            (* ;; "Handle terminal specially")                    (OR (TTY.PROCESSP)                        (\WAIT.FOR.TTY))                    (COND                       ((\SYSBUFP)                        (do (SETQ CH (\GETKEY))                            (COND                               ((ILEQ CH \MAXTHINCHAR)                                (BOUT OUTPUTSTREAM (COND                                                      ((EQ CH CHAT.CONTROLCHAR)                                                             (* ; "Controlify it")                                                       (LOGAND (CHAT.BIN CHATSTREAM STATE)                                                              31))                                                      ((EQ CH CHAT.METACHAR)                                                             (* ; "Prefix meta, turn on 200q bit")                                                       (LOGOR (CHAT.BIN CHATSTREAM STATE)                                                              128))                                                      (T CH))))                               ((EQ (LRSH CH 8)                                    1)                       (* ; "META char set => ascii meta")                                (BOUT OUTPUTSTREAM (LOGOR 128 (LOGAND CH 127))))                               (T                 (* ; "Not in charset zero, not a meta.  Most hosts don't understand.(PRINTCCODE CH CHATSTREAM) (CHARSET CHATSTREAM 0)")                                  (FLASHWINDOW WINDOW))) repeatwhile (\SYSBUFP))                        (FORCEOUTPUT CHATSTREAM))))                   (T (until (EOFP STREAM) do (BOUT OUTPUTSTREAM (\BIN STREAM)))                      (FORCEOUTPUT CHATSTREAM)                      (CLOSEF STREAM)                      (SETQ STREAM)                      (COND                         ((SETQ CHATPROMPTWINDOW (GETPROMPTWINDOW WINDOW NIL NIL T))                                                  (* ;                                              "Indicate completion of Input if came from menu command")                          (CLEARW CHATPROMPTWINDOW)))))                (\TTYBACKGROUND))                          (* ;; "Get here if we close connection.")          (SELECTQ (fetch (CHAT.STATE RUNNING?) of STATE)              (CLOSE (CHAT.CLOSE WINDOW))              (ABORT (CHAT.CLOSE WINDOW T))              (NIL                                           (* ; "Already dead."))              (SHOULDNT (CONCAT "Unknown state in CHAT: " (fetch (CHAT.STATE RUNNING?) of STATE))))          (BLOCK))))(CHAT.BIN  (LAMBDA (OUTSTREAM STATE)                                  (* rda%: "20-Aug-84 23:09")    (until (\SYSBUFP) bind (FIRSTTIME _ T) do (COND                                                 (FIRSTTIME (FORCEOUTPUT OUTSTREAM)                                                        (SETQ FIRSTTIME NIL)))                                              (\TTYBACKGROUND))    (\GETKEY)))(CHAT.CLOSE  (LAMBDA (WINDOW ABORTED CLOSING)                           (* lmm "24-Oct-86 16:39")                                                  (* ;; "Close chat connection that is using WINDOW.  Also serves as the CLOSEFN of this window, when CLOSING is NIL")    (DECLARE (GLOBALVARS HIGHLIGHTSHADE))    (PROG ((CHATSTATE (WINDOWPROP WINDOW 'CHATSTATE))           (ACTIVE? (OPENWP WINDOW))           ICON PROC FILE KEEP)          (DETACHALLWINDOWS WINDOW)                          (* ; "Restore REPLACE mode for BITBLT")          (DSPOPERATION 'REPLACE WINDOW)                     (* ; "Turn scrolling back on")          (DSPSCROLL 'ON WINDOW)          (COND             (CHATSTATE (DEL.PROCESS (fetch (CHAT.STATE TYPEOUTPROC) of CHATSTATE))                    (COND                       ((SETQ FILE (fetch (CHAT.STATE TYPESCRIPTSTREAM) of CHATSTATE))                        (COND                           (ACTIVE? (TERPRI WINDOW)                                  (PRIN1 "Closing " WINDOW)                                  (PRINT (CLOSEF FILE)                                         WINDOW))                           (T (CLOSEF FILE)))))                    (AND ACTIVE? (\CHECKCARET WINDOW))                    (replace (CHAT.STATE RUNNING?) of (WINDOWPROP WINDOW 'CHATSTATE NIL) with NIL)                    (OR ABORTED (PROGN (ALLOW.BUTTON.EVENTS)                                       (CHAT.CLOSE.CONNECTION (fetch (CHAT.STATE INSTREAM)                                                                 of CHATSTATE)                                              (fetch (CHAT.STATE OUTSTREAM) of CHATSTATE)))))             (T (RETURN)))          (SETQ CHATWINDOWLST (DREMOVE WINDOW CHATWINDOWLST))          (SETQ PROC (WINDOWPROP WINDOW 'PROCESS NIL))                                                  (* ;; "Save the process running, if any;  don't do anything with it until after we close the window, if we're going to, so that windows don't flip around excessively")          (WINDOWPROP WINDOW 'CLOSEFN NIL)        (* ;              "Clear all CLOSE functions so that next time this chatwindow is reused it will be clean")          (COND             (ACTIVE?                                       (* ; "Change title to indicate closure")                    (CHAT.DEACTIVATE.WINDOW WINDOW)                    (COND                       ((AND (NOT (SETQ KEEP (WINDOWPROP WINDOW 'KEEPCHAT NIL)))                             (NOT CLOSING)                             (OR CLOSECHATWINDOWFLG (NEQ WINDOW CHATWINDOW)))                        (CLOSEW WINDOW)))                    (COND                       ((EQ KEEP 'NEW)            (* ;                             "Invoked via the New command -- start up a new connection in this window")                        (ADD.PROCESS (LIST (FUNCTION CHAT)                                           NIL NIL NIL WINDOW T))))                    (COND                       (PROC                      (* ;                                      "Do this last, because if we are PROC, DEL.PROCESS won't return")                             (DEL.PROCESS PROC))))             ((AND (SETQ ICON (WINDOWPROP WINDOW 'ICONWINDOW))                   (OPENWP ICON))                 (* ;                                               "Shade the icon if the chat window is currently closed")              (ICONW.SHADE ICON HIGHLIGHTSHADE)   (* ;                                             "And arrange for middle-button to offer Reconnect option")              (WINDOWPROP ICON 'OLDBUTTONEVENTFN (WINDOWPROP ICON 'BUTTONEVENTFN                                                        (FUNCTION CHAT.RECONNECT))))))))(CHAT.DEACTIVATE.WINDOW  (LAMBDA (WINDOW)                                           (* bvm%: " 4-Sep-85 19:41")    (LET ((TITLE (WINDOWPROP WINDOW 'TITLE)))         (WINDOWPROP WINDOW 'TITLE (CONCAT (SUBSTRING TITLE 1 (IPLUS (OR (STRPOS ", height" TITLE)                                                                         0)                                                                     -1))                                          ", closed"))         (WINDOWPROP WINDOW 'BUTTONEVENTFN (FUNCTION CHAT.RECONNECT))         (WINDOWPROP WINDOW 'EXPANDFN NIL))))(CHAT.CLOSEFN  (LAMBDA (WINDOW)                                           (* lmm "24-Oct-86 16:39")                                                  (* ;; "Close this chat connection making sure that the window gets closed.  Used as CLOSEFN of the chat window.")    (CHAT.CLOSE WINDOW NIL T)))(CHAT.CLOSE.CONNECTION  (LAMBDA (INSTREAM OUTSTREAM)                               (* rda%: "23-Aug-84 15:25")                    (* * Close the streams for a connection if they are open.)    (COND       ((OPENP INSTREAM)        (CLOSEF INSTREAM)))    (COND       ((OPENP OUTSTREAM)        (CLOSEF OUTSTREAM)))))(CHAT.LOGIN  (LAMBDA (HOST OPTION WINDOW CHATSTATE)                     (* lmm " 7-Jan-86 11:55")                                                  (* ;;              "Login to HOST.  If a job already exists on HOST, Attach to it unless OPTION overrides.")    (PROG ((OSTYPE (GETOSTYPE HOST))           (LOGINFO (GETHOSTINFO HOST 'LOGINFO))           (STATE (WINDOWPROP WINDOW 'CHATSTATE))           NAME/PASS COM INSTREAM OUTSTREAM)          (OR LOGINFO (RETURN))          (SETQ INSTREAM (fetch (CHAT.STATE INSTREAM) of STATE))          (SETQ NAME/PASS (\INTERNAL/GETPASSWORD HOST NIL NIL NIL NIL OSTYPE))          (SETQ COM (COND                       (OPTION)                       ((ASSOC 'ATTACH LOGINFO)                        (OR (CHAT.LOGINFO INSTREAM HOST (CAR NAME/PASS))                            'LOGIN))                       (T                         (* ;                              "Don't know how to do anything but login, so silly to try anything else")                          'LOGIN)))          (COND             ((NULL (SETQ LOGINFO (ASSOC COM LOGINFO)))              (printout PROMPTWINDOW T "Login option " COM " not implemented for this type of host"))             (T (SETQ OUTSTREAM (fetch (CHAT.STATE OUTSTREAM) of STATE))                (for X in (CDR LOGINFO) do (SELECTQ X                                               (CR (BOUT OUTSTREAM (CHARCODE CR))                                                   (FORCEOUTPUT OUTSTREAM))                                               (LF (BOUT OUTSTREAM (CHARCODE LF))                                                   (FORCEOUTPUT OUTSTREAM))                                               (USERNAME (PRIN3 (CAR NAME/PASS)                                                                OUTSTREAM))                                               (PASSWORD (PRIN3 (\DECRYPT.PWD (CDR NAME/PASS))                                                                OUTSTREAM))                                               (WAIT    (* ; "Some systems do not permit typeahead")                                                     (COND                                                        ((NOT (CHAT.FLUSH&WAIT INSTREAM))                                                             (* ; "Couldn't sync, so wait longer.")                                                         (DISMISS CHAT.WAIT.TIME)))                                                     (DISMISS CHAT.WAIT.TIME))                                               (PRIN3 X OUTSTREAM)))                (FORCEOUTPUT OUTSTREAM)))))))(DEFGLOBALVAR CHAT.TTY.PROCESS T)(* ; "CHAT streams")(DEFINEQ(ADD.CHAT.MESSAGE  (LAMBDA (STREAM MSG)                                       (* rda%: "22-Aug-84 18:07")    (STREAMPROP STREAM 'MESSAGE (CONCAT (OR (STREAMPROP STREAM 'MESSAGE)                                            "")                                       MSG))))(CHAT.LOGINFO  (LAMBDA (INSTREAM HOST NAME)                               (* rda%: "22-Aug-84 17:04")                    (* * Invoke the LOGINFO method for INSTREAM, if any.)    (PROG ((FN (STREAMPROP INSTREAM 'LOGINFO)))          (RETURN (COND                     ((FNTYP FN)                      (APPLY* FN HOST NAME)))))))(CHAT.SENDSCREENPARAMS  (LAMBDA (INSTREAM HEIGHT WIDTH)                            (* ejs%: "13-Nov-84 15:33")                    (* * Invoke the SENDSCREENPARAMS method for INSTREAM, if any.)    (PROG ((FN (STREAMPROP INSTREAM 'SENDSCREENPARAMS)))          (RETURN (COND                     ((FNTYP FN)                      (APPLY* FN INSTREAM HEIGHT WIDTH)))))))(CHAT.SETDISPLAYTYPE  (LAMBDA (INSTREAM CODE)                                    (* ejs%: "13-Nov-84 15:35")                    (* * Invoke the SETDISPLAYTYPE method for INSTREAM.)    (PROG ((FN (STREAMPROP INSTREAM 'SETDISPLAYTYPE)))          (RETURN (AND (NUMBERP CODE)                       (COND                          ((FNTYP FN)                           (APPLY* FN INSTREAM CODE))))))))(CHAT.LOGINFO  (LAMBDA (INSTREAM HOST NAME)                               (* rda%: "22-Aug-84 17:04")                    (* * Invoke the LOGINFO method for INSTREAM, if any.)    (PROG ((FN (STREAMPROP INSTREAM 'LOGINFO)))          (RETURN (COND                     ((FNTYP FN)                      (APPLY* FN HOST NAME)))))))(CHAT.FLUSH&WAIT  (LAMBDA (INSTREAM)                                         (* rda%: "21-Aug-84 13:48")                    (* * Invoke the FLUSH&WAIT method for INSTREAM)    (PROG ((FN (STREAMPROP INSTREAM 'FLUSH&WAIT)))          (RETURN (COND                     ((FNTYP FN)                      (APPLY* FN INSTREAM)))))))(CHAT.ENDOFSTREAMOP  (LAMBDA (STREAM)                                           (* rda%: "24-Aug-84 22:52")                    (* * Return -1 to indicate EOS to CHAT, and restore the streams EOS op incase           it's needed for other things.)    (replace ENDOFSTREAMOP of STREAM with (OR (STREAMPROP STREAM 'EOSOP)                                              (FUNCTION \EOSERROR)))    -1))(CHAT.OPTIONMENU  (LAMBDA (INSTREAM)                                         (* ejs%: "23-Jun-85 17:04")                    (* * Apply the menu-building method for INSTREAM, if any.)    (LET* ((FN (STREAMPROP INSTREAM 'OPTIONMENU))           (MENU (COND                    ((FNTYP FN)                     (APPLY* FN INSTREAM))                    ((type? MENU FN)                     FN))))          (AND MENU (FETCH (MENU ITEMS)                           MENU))))))(* ; "CHAT typeout")(DEFINEQ(CHAT.TYPEOUT  (LAMBDA (WINDOW DPYNAME CHAT.STATE)                        (* edited%: "20-Sep-85 12:23")    (bind (CNT _ 1)          HANDLECHARFN MSG CH INSTREAM OUTSTREAM TYPESCRIPTSTREAM CRPENDING TERM.STATE       first (SETQ INSTREAM (fetch (CHAT.STATE INSTREAM) of CHAT.STATE))             (SETQ HANDLECHARFN (CADR (FASSOC DPYNAME CHAT.DRIVERTYPES)))             (replace (CHAT.STATE TERM.STATE) of CHAT.STATE with (SETQ TERM.STATE                                                                  (APPLY* (CADDR (FASSOC DPYNAME                                                                                      CHAT.DRIVERTYPES                                                                                        ))                                                                         CHAT.STATE)))             (COND                ((EQ DPYNAME 'TEDIT)                 (SETQ OUTSTREAM (WINDOWPROP WINDOW 'TEXTSTREAM)))                (T (SETQ OUTSTREAM (WINDOWPROP WINDOW 'DSP))))                                                              (* ; "TERM.HOME CHAT.STATE")       while (IGEQ (SETQ CH (BIN INSTREAM))                   0) do (while (fetch (CHAT.STATE HELD) of CHAT.STATE) do (BLOCK))                         (\CHECKCARET OUTSTREAM)                         (COND                            ((SETQ MSG (STREAMPROP INSTREAM 'MESSAGE))                             (PRIN1 MSG OUTSTREAM)                             (STREAMPROP INSTREAM 'MESSAGE NIL)))                                                   (* ;                    "Print any protocol related msgs that might have come along while we where asleep")                         (SPREADAPPLY* HANDLECHARFN (SETQ CH (LOGAND CH (MASK.1'S 0 7)))                                CHAT.STATE TERM.STATE)                         (COND                            ((SETQ TYPESCRIPTSTREAM (fetch (CHAT.STATE TYPESCRIPTSTREAM) of                                                                                            CHAT.STATE                                                           ))                             (COND                                ((SELCHARQ CH                                      (CR (PROG1 CRPENDING (SETQ CRPENDING T)))                                      (LF (COND                                             (CRPENDING (\OUTCHAR TYPESCRIPTSTREAM (CHARCODE EOL))                                                  (* ;                                    "Have the typescript put turn crlf into whatever it likes for eol")                                                    (SETQ CRPENDING NIL))                                             (T T)))                                      (PROGN (COND                                                (CRPENDING (\BOUT TYPESCRIPTSTREAM (CHARCODE CR))                                                       (SETQ CRPENDING NIL)))                                             T))                                 (\BOUT TYPESCRIPTSTREAM CH)))))                         (COND                            (CHATDEBUGFLG (COND                                             ((OR (EQ CHATDEBUGFLG T)                                                  (IGREATERP (add CNT 1)                                                         CHATDEBUGFLG))                                              (BLOCK)                                              (SETQ CNT 1)))))       finally (SELECTQ CH                   (-1 (CHAT.TYPEOUT.CLOSE WINDOW OUTSTREAM CHAT.STATE 'CLOSE "closed"))                   (-2 (CHAT.TYPEOUT.CLOSE WINDOW OUTSTREAM CHAT.STATE 'ABORT "aborted"))                   (CHAT.TYPEOUT.CLOSE WINDOW OUTSTREAM CHAT.STATE 'CLOSE "closed somehow"))             (COND                ((NOT (OPENWP WINDOW))                 (DEL.PROCESS (WINDOWPROP WINDOW 'PROCESS)))))))(CHAT.TYPEOUT.CLOSE  (LAMBDA (WINDOW OUTSTREAM CHAT.STATE NEWSTATE MSG)         (* bvm%: " 5-Sep-85 15:29")    (COND       ((OPENWP WINDOW)        (printout OUTSTREAM T "[Connection " MSG " by remote host]" T)))    (replace (CHAT.STATE RUNNING?) of CHAT.STATE with NEWSTATE)))(CHAT.DID.RESHAPE  (LAMBDA (CHAT.STATE)    (DECLARE (USEDFREE INSTREAM DSP))                        (* ejs%: "12-May-85 15:23")                                                             (* Invoked in the type-out process                                                              when window is reshaped)    (with CHAT.STATE CHAT.STATE (CHAT.SCREENPARAMS CHAT.STATE INSTREAM DSP)          (TERM.RESET.DISPLAY.PARMS CHAT.STATE))))(CHAT.SCREENPARAMS  (LAMBDA (CHAT.STATE INSTREAM WINDOW)                       (* ejs%: "12-May-85 15:51")                    (* * Sends screen width, height to partner and updates title.          If INSTREAM is NIL then only update title.)    (PROG ((HEIGHT (IMIN (IQUOTIENT (WINDOWPROP WINDOW 'HEIGHT)                                (IABS (DSPLINEFEED NIL (WINDOWPROP WINDOW 'DSP))))                         127))           (WIDTH (IMIN (LINELENGTH NIL WINDOW)                        127))           (TITLE (WINDOWPROP WINDOW 'TITLE))           EMACSMODE TITLEMIDDLE)          (COND             (INSTREAM (CHAT.SENDSCREENPARAMS INSTREAM HEIGHT WIDTH)))          (WINDOWPROP WINDOW 'TITLE (CONCAT (SUBSTRING TITLE 1 (SUB1 (OR (SETQ TITLEMIDDLE                                                                          (STRPOS ", height" TITLE))                                                                         0)))                                           ", height = " HEIGHT ", width = " WIDTH                                           (COND                                              ((OR (SETQ EMACSMODE (fetch (CHAT.STATE CHATINEMACS)                                                                      of CHAT.STATE))                                                   (AND TITLEMIDDLE (NOT (FIXP (NTHCHAR TITLE -1)))))                                               (CONCAT ", Emacs " (COND                                                                     (EMACSMODE "ON")                                                                     (T "OFF"))))                                              (T ""))))))))(* ; "window stuff")(DEFINEQ(GETCHATWINDOW  (LAMBDA (HOST WINDOW DPYTYPE)                              (* bvm%: " 5-Sep-85 12:04")                    (* Return a window, possibly new, to run a chat connection to HOST.          Uses WINDOW if possible)    (PROG ((TITLE (CONCAT (L-CASE DPYTYPE T)                         " Chat connection to " HOST))           DSP STATE)          (COND             ((AND (OR (WINDOWP WINDOW)                       (WINDOWP (SETQ WINDOW CHATWINDOW)))                   (OR (NOT (SETQ STATE (WINDOWPROP WINDOW 'CHATSTATE)))                       (COND                          ((NOT (fetch (CHAT.STATE RUNNING?) of STATE))                                                             (* Connection in CHATWINDOW is dead)                           (CHAT.CLOSE WINDOW NIL T)                           T))))                             (* Old window not in use.                                                             This shouldn't happen, but...)              (WINDOWPROP WINDOW 'TITLE TITLE)              (SETQ DSP (WINDOWPROP WINDOW 'DSP)))             (T (SETQ DSP (WINDOWPROP (SETQ WINDOW (LET ((SIZE (LISTP CHAT.WINDOW.SIZE)))                                                        (DECODE.WINDOW.ARG (AND (NULL CHATWINDOWLST)                                                                                CHAT.WINDOW.REGION)                                                               (CAR SIZE)                                                               (CDR SIZE)                                                               TITLE)))                                 'DSP))                (DSPSCROLL T DSP)                (OR CHATWINDOW (SETQ CHATWINDOW WINDOW))))          (push CHATWINDOWLST WINDOW)          (RETURN WINDOW))))(CHAT.BUTTONFN  (LAMBDA (WINDOW)                                           (* ejs%: "12-May-85 17:59")    (COND       ((LASTMOUSESTATE LEFT)        (PROG (CHAT.STATE CHAT.PROC)              (COND                 ((AND (SETQ CHAT.STATE (WINDOWPROP WINDOW 'CHATSTATE))                       (fetch (CHAT.STATE CHATINEMACS) of CHAT.STATE)                       (SETQ CHAT.PROC (fetch (CHAT.STATE TYPEOUTPROC) of CHAT.STATE)))                  (PROCESS.APPLY CHAT.PROC (FUNCTION CHAT.EMACS.MOVE)                         (LIST CHAT.STATE)))                 (T (CHAT.HOLD WINDOW)))))       ((LASTMOUSESTATE MIDDLE)        (CHAT.MENU WINDOW)))))(CHAT.HOLD  (LAMBDA (WINDOW)                                           (* ejs%: "12-May-85 16:33")                    (* * Toggle HOLD while button is down)    (PROG ((STATE (WINDOWPROP WINDOW 'CHATSTATE)))          (TOTOPW WINDOW)          (OR STATE (RETURN))          (COND             ((NOT (fetch (CHAT.STATE HELD) of STATE))              (replace (CHAT.STATE HELD) of STATE with T)              (UNINTERRUPTABLY                  (UNTILMOUSESTATE UP))))          (replace (CHAT.STATE HELD) of STATE with NIL))))(CHAT.MENU  [LAMBDA (WINDOW)                                           (* lmm "20-Oct-86 18:03")    (DECLARE (GLOBALVARS CHATMENU CHAT.REOPENMENU)           (SPECVARS WINDOW STATE))                          (* ; "Called by MIDDLE")    (PROG ((STATE (WINDOWPROP WINDOW 'CHATSTATE))           COMMAND)          [COND             ((NOT STATE)                                    (* ;                                                             "No Connection here;  try to reestablish")              (RETURN (COND                         ((LASTMOUSESTATE MIDDLE)                          (CHAT.RECONNECT WINDOW))                         (T (TOTOPW WINDOW]          (replace (CHAT.STATE HELD) of STATE with T)          (\CHECKCARET WINDOW)          (SELECTQ [SETQ COMMAND                    (MENU                     (create                      MENU                      ITEMS _                      (APPEND CHATMENUITEMS                             [AND (CDR CHAT.DRIVERTYPES)                                  (for X in CHAT.DRIVERTYPES                                     collect `(,(CONCAT (CAR X)                                                       " Mode")                                               '(LAMBDA (STATE WINDOW)                                                  (CHAT.SET.EMULATOR STATE WINDOW                                                         ',(CAR X]                             (STREAMPROP (fetch (CHAT.STATE INSTREAM) of STATE)                                    'OPTIONS)                             [if (fetch (CHAT.STATE LOCALECHO) of STATE)                                 then '(("Local Echo OFF" 'ECHO "Turn off local echoing"))                               else '(("Local Echo ON" 'ECHO "Turn on local echoing"]                             '((Close 'Close "Closes the connection and returns")                               (Suspend 'Suspend "Closes the connection but leaves window up")                               (New 'New "Closes this connection and prompts for a new host")                               (Freeze 'Freeze "Holds typeout in this window until you bug it again")                               (Clear (FUNCTION CHAT.CLEAR.FROM.MENU)                                      "Clears window, sets roll mode")                               ("Dribble" (FUNCTION CHAT.TYPESCRIPT)                                      "Starts a typescript of window typeout")                               ("Input" (FUNCTION CHAT.TAKE.INPUT)                                      "Allows input from a file")                               ("Emacs" (FUNCTION CHAT.SWITCH.EMACS)                                      "Toggle EMACS positioning"]              (ECHO (replace (CHAT.STATE LOCALECHO) of STATE with (NOT (fetch (CHAT.STATE LOCALECHO)                                                                          of STATE))))              (Close (replace (CHAT.STATE RUNNING?) of STATE with 'CLOSE)                                                             (* ;                                                              "Ask CHAT.TYPEIN to shut things down.")                     )              (New (replace (CHAT.STATE RUNNING?) of STATE with 'CLOSE)                   (WINDOWPROP WINDOW 'KEEPCHAT 'NEW))              (Suspend (replace (CHAT.STATE RUNNING?) of STATE with 'CLOSE)                       (WINDOWPROP WINDOW 'KEEPCHAT T))              (Freeze                                        (* ; "Leave in HELD state")                      (RETURN))              (NIL)              (APPLY* COMMAND STATE WINDOW))          (replace (CHAT.STATE HELD) of STATE with NIL])(CHAT.CLEAR.FROM.MENU  (LAMBDA (STATE WINDOW)                                     (* AJB "24-May-85 17:42")    (DSPRESET WINDOW)    (TERM.RESET.DISPLAY.PARMS STATE)    (TERM.HOME STATE)))(CHAT.TAKE.INPUT  (LAMBDA (STATE WINDOW)                                     (* bvm%: " 1-Jun-84 17:43")    (PROCESS.APPLY (WINDOWPROP WINDOW 'PROCESS)           (FUNCTION CHAT.TAKE.INPUT1)           (LIST WINDOW))))(CHAT.TAKE.INPUT1  [LAMBDA (WINDOW)                                           (* ; "Edited  4-Dec-86 22:53 by lmm")    (DECLARE (USEDFREE STREAM))                              (* ; "In CHAT.TYPEIN")    (PROG ((PWINDOW (GETPROMPTWINDOW WINDOW))           FILE)          (CLEARW PWINDOW)          (COND             ((AND STREAM (NEQ STREAM T))              (printout PWINDOW "Can't, still reading " (FULLNAME STREAM)))             (T (SETQ FILE (PROMPTFORWORD "Take input from file (cr to return): " NIL NIL PWINDOW))                (LET ((*LAST-CONDITION* NIL))                     (COND                        ((NULL FILE)                         (CLEARW))                        [[NLSETQ (SETQ FILE (OPENSTREAM FILE 'INPUT]                         (CLEARW PWINDOW)                         (printout PWINDOW "Reading " (FULLNAME (SETQ STREAM FILE]                        (T (CLEARW PWINDOW)                           (PRIN1 *LAST-CONDITION* PWINDOW])(DO.CHAT.OPTION  (LAMBDA (CHAT.STATE WINDOW)                                (* ejs%: "12-May-85 15:52")                    (* * Pop up a menu of protocol specific options.)    (PROG ((MENU (CHAT.OPTIONMENU (fetch (CHAT.STATE INSTREAM) of CHAT.STATE))))          (COND             (MENU (MENU MENU))             (T (printout PROMPTWINDOW "This protocol has no options."))))))(CHAT.RECONNECT  (LAMBDA (WINDOW)                                           (* bvm%: " 4-Sep-85 19:52")    (LET* ((MAINW (OR (WINDOWPROP WINDOW 'ICONFOR)                      WINDOW))           (STATE (WINDOWPROP MAINW 'CHATHOST))           FN)          (COND             ((NULL STATE)              (APPLY* (CHAT.RECONNECT.OFF WINDOW)                     WINDOW))             ((NOT (LASTMOUSESTATE MIDDLE))              (APPLY* (OR (WINDOWPROP WINDOW 'OLDBUTTONEVENTFN)                          (FUNCTION TOTOPW))                     WINDOW))             ((MENU (OR CHAT.REOPENMENU (SETQ CHAT.REOPENMENU (create MENU                                                                     ITEMS _                                                                     '((ReConnect T                                                               "Will reestablish this Chat connection"                                                                              ))))))              (CHAT.RECONNECT.OFF WINDOW)                    (* Don't let this command get issued                                                              twice)              (TTY.PROCESS (ADD.PROCESS (LIST 'CHAT (KWOTE (CAR STATE))                                              (KWOTE (CDR STATE))                                              NIL MAINW T))))))))(CHAT.RECONNECT.OFF  (LAMBDA (WINDOW)                                           (* bvm%: " 4-Sep-85 19:51")                    (* * Removes CHAT.RECONNECT as the buttonfn for WINDOW and returns new buttonfn)    (LET ((FN (OR (WINDOWPROP WINDOW 'OLDBUTTONEVENTFN NIL)                  (FUNCTION TOTOPW))))         (WINDOWPROP WINDOW 'BUTTONEVENTFN FN)         FN)))(CHAT.RESHAPEWINDOW  (LAMBDA (WINDOW OLDIMAGE IMAGEREGION OLDSCREENREGION)      (* ejs%: "14-Jun-85 15:08")                                                             (* RESHAPEFN for the chat window)    (RESHAPEBYREPAINTFN WINDOW OLDIMAGE IMAGEREGION)                    (* Note%: Don't pass OLDSCREENREGION to RESHAPEBYREPAINTFN or it may try to           leave the image fixed and move the coordinate system.          Our code assumes that the bottom of the window is zero.          If someone gets ambitious, can figure out how to change the rest of Chat code           so it does not make that assumption)    (LET* ((CHAT.STATE (WINDOWPROP WINDOW 'CHATSTATE))           (CHAT.PROC (AND CHAT.STATE (fetch (CHAT.STATE TYPEOUTPROC) of CHAT.STATE))))          (COND             ((AND (PROCESSP CHAT.PROC)                   (NOT (RELPROCESSP CHAT.PROC)))              (PROCESS.APPLY CHAT.PROC (FUNCTION CHAT.DID.RESHAPE)                     (LIST CHAT.STATE)))))))(CHAT.TTYENTRYFN  (LAMBDA (PROCESS)                                          (* lmm "14-Oct-86 11:28")    (PROG ((WINDOW (PROCESSPROP PROCESS 'WINDOW))           STATE)          (COND             ((AND WINDOW (SETQ STATE (WINDOWPROP WINDOW 'CHATSTATE)))              (replace (CHAT.STATE HELD) of STATE with NIL))))))(CHAT.TTYEXITFN  (LAMBDA (PROCESS NEWPROCESS)                               (* lmm "14-Oct-86 11:26")    NIL))(CHAT.TYPESCRIPT  (LAMBDA (STATE)                                            (* ejs%: "12-May-85 16:08")    (PROG ((PROC (fetch (CHAT.STATE TYPEOUTPROC) of STATE)))          (COND             (PROC (PROCESS.APPLY PROC (FUNCTION CHAT.TYPESCRIPT1)                          (LIST STATE)))))))(CHAT.TYPESCRIPT1  (LAMBDA (CHAT.STATE)                                       (* bvm%: " 4-Sep-85 23:11")                    (* Called in context of type-out proc to change the dribble file)    (with CHAT.STATE CHAT.STATE (PROG ((PWINDOW (GETPROMPTWINDOW WINDOW))                                       FILE OLDFILE)                                      (CLEARW PWINDOW)                                      (COND                                         ((NEQ (SETQ FILE (MKATOM (RESETFORM (TTY.PROCESS (                                                                                         THIS.PROCESS                                                                                           ))                                                                         (PROMPTFORWORD                                                                  "Typescript to file (cr to close): "                                                                                 NIL NIL PWINDOW))))                                               T)                                          (CLEARW PWINDOW)                                          (COND                                             ((OR (NULL FILE)                                                  (NLSETQ (SETQ FILE (OPENSTREAM FILE 'OUTPUT                                                                            'NEW))))                                              (COND                                                 (TYPESCRIPTSTREAM (printout PWINDOW (CLOSEF                                                                                      TYPESCRIPTSTREAM                                                                                            )                                                                          " closed.  ")))                                              (replace TYPESCRIPTSTREAM of CHAT.STATE                                                 with (SETQ TYPESCRIPTSTREAM FILE))                                              (AND FILE (printout PWINDOW "Opened " (FULLNAME FILE)))                                              )                                             (T (printout PWINDOW "Could not open " FILE))))))))))(* ; "for dialouts")(DEFINEQ(CHAT.CHOOSE.PHONE.NUMBER  (LAMBDA NIL                                                (* ejs%: "12-Jun-85 18:30")                                                             (* Prompt user for phone number)    (DECLARE (GLOBALVARS CHAT.PHONE.NUMBER.MENU CHAT.PHONE.NUMBERS))    (COND       ((IGREATERP (LENGTH CHAT.PHONE.NUMBERS)               (CONSTANT (LENGTH '(Other))))        (OR CHAT.PHONE.NUMBER.MENU (SETQ CHAT.PHONE.NUMBER.MENU                                    (create MENU                                           ITEMS _ CHAT.PHONE.NUMBERS                                           TITLE _ "Phone Number  ")))))    (LET ((NUMBER (COND                     (CHAT.PHONE.NUMBER.MENU (MENU CHAT.PHONE.NUMBER.MENU))                     (T 'Other)))          NEWNUMBER)         (COND            ((EQ NUMBER 'Other)             (RESETFORM (TTYDISPLAYSTREAM PROMPTWINDOW)                    (SETQ NUMBER (PROMPTFORWORD                                         "Please enter a phone number in the form (800)555-1212: ")))             (push CHAT.PHONE.NUMBERS                   (LIST NUMBER (SETQ NEWNUMBER                                 (LET* ((LIST (for CHAR in (CHCON NUMBER) collect CHAR                                                 when (AND (IGEQ CHAR (CHARCODE 0))                                                           (ILEQ CHAR (CHARCODE 9)))))                                        (STRING (ALLOCSTRING (LENGTH LIST))))                                       (for I from 1 to (NCHARS STRING) as C in LIST                                          do (RPLCHARCODE STRING I C))                                       STRING))))             (SETQ CHAT.PHONE.NUMBER.MENU NIL)             NEWNUMBER)            (T NUMBER))))))(RPAQ? CHAT.PHONE.NUMBER.MENU )(RPAQ? CHAT.PHONE.NUMBERS '(Other))(* ; "for EMACS")(DEFINEQ(CHAT.EMACS.MOVE  (LAMBDA (CHAT.STATE)                                       (* ejs%: "12-May-85 15:44")                    (* * This function is invoked in the context of the typeout process, so that we           can easily see where we are on the display, and so that we don't hang up the           mouse if connection gets in trouble)    (with CHAT.STATE CHAT.STATE (PROG ((CLOC (CURSORPOSITION NIL WINDOW))                                       DROW CCOLUMN)                    (* * The characters are FONTHEIGHT high by FONTWIDTH wide)                                      (COND                                         ((IGEQ XPOS FONTWIDTH)                                                             (* Go back to column 0)                                          (BOUT OUTSTREAM (fetch EMCOL0 of CHAT.EMACSCOMMANDS))))                                      (SETQ DROW (IDIFFERENCE (IQUOTIENT YPOS FONTHEIGHT)                                                        (IQUOTIENT (fetch YCOORD of CLOC)                                                               FONTHEIGHT)))                    (* * Positive DROW means go DOWN)                                      (COND                                         ((ILESSP DROW 0)    (* Go up DROW rows)                                          (COND                                             ((NEQ DROW -1)                                              (BOUT OUTSTREAM (fetch EMARG of CHAT.EMACSCOMMANDS))                                              (PRIN3 (MKSTRING (IMINUS DROW))                                                     OUTSTREAM)))                                          (BOUT OUTSTREAM (fetch EMUP of CHAT.EMACSCOMMANDS)))                                         ((IGREATERP DROW 0) (* Go down DROW rows)                                          (COND                                             ((NEQ DROW 1)                                              (BOUT OUTSTREAM (fetch EMARG of CHAT.EMACSCOMMANDS))                                              (PRIN3 (MKSTRING DROW)                                                     OUTSTREAM)))                                          (BOUT OUTSTREAM (fetch EMDOWN of CHAT.EMACSCOMMANDS))))                                      (SETQ CCOLUMN (IQUOTIENT (fetch XCOORD of CLOC)                                                           FONTWIDTH))                                      (COND                                         ((IGREATERP CCOLUMN 0)                                                             (* Now go to the correct column)                                          (COND                                             ((NEQ CCOLUMN 1)                                              (BOUT OUTSTREAM (fetch EMARG of CHAT.EMACSCOMMANDS))                                              (PRIN3 (MKSTRING CCOLUMN)                                                     OUTSTREAM)))                                          (BOUT OUTSTREAM (fetch EMFORWARD of CHAT.EMACSCOMMANDS))))                                      (FORCEOUTPUT OUTSTREAM)))))(CHAT.SWITCH.EMACS  (LAMBDA (CHATSTATE WINDOW)                                 (* ejs%: "12-May-85 17:05")                    (* * Toggles the value of CHAT.IN.EMACS?)    (replace (CHAT.STATE CHATINEMACS) of CHATSTATE with (NOT (fetch (CHAT.STATE CHATINEMACS)                                                                of CHATSTATE)))                                                             (* Now update title to show Emacs                                                              state)    (CHAT.SCREENPARAMS CHATSTATE NIL WINDOW))))(DEFINEQ(CHAT.ICONFN  (LAMBDA (WINDOW OLDICON)                                   (* bvm%: " 4-Sep-85 19:23")    (DECLARE (GLOBALVARS TTYKBDICONSPEC TTYKBD TTYKBDMASK TTYKBDICONSPECREGION))    (COND       ((TTY.PROCESSP (WINDOWPROP WINDOW 'PROCESS))        (TTY.PROCESS T)))    (COND       ((FNTYP 'TITLEDICONW)        (OR OLDICON (TITLEDICONW (OR TTYKBDICONSPEC                                     (SETQ TTYKBDICONSPEC                                      (create TITLEDICON                                             ICON _ TTYKBD                                             MASK _ TTYKBDMASK                                             TITLEREG _ TTYKBDICONSPECREGION)))                           (CAR (WINDOWPROP WINDOW 'CHATHOST))                           (FONTCREATE 'HELVETICA 8))))))))(RPAQQ TTYKBD #*(64 64)@@@OOOOOOOOOO@@@@@AOOOOOOOOOOH@@@@COOOOOOOOOOL@@@@CH@@@@@@@@CL@@@@CH@@@@@@@@AL@@@@CHOOOOOOOOAL@@@@CIOOOOOOOOIL@@@@CIH@@@@@@AIL@@@@CIH@@@@@@AIL@@@@CIH@@@@@@AIL@@@@CIH@@@@@@AIL@@@@CIHAIBBGLAIL@@@@CIHBEBEA@AIL@@@@CIHBABEA@AIL@@@@CIHBANGA@AIL@@@@CIHBABHI@AIL@@@@CIHBEBHI@AIL@@@@CIHAIBHI@AIL@@@@CIH@@@@@@AIL@@@@CIH@@@@@@AIL@@@@CIH@@@@@@AIL@@@@CIH@@@@@@AIL@@@@CIH@@@@@@AIL@@@@CIH@@@@@@AIL@@@@CIOOOOOOOOIL@@@@CHOOOOOOOOAL@@@@OH@@@@@@@@AO@@@AOH@@@@@@@@AOH@@CL@@@@@@@@@@CL@@GHGCILNGCILNAN@@O@@@@@@@@@@@@O@ANALNGCILNGCILGHCL@@@@@@@@@@@@CLGHFGCILNGCILNGANO@@@@@@@@@@@@@@ON@@@@@@@@@@@@@@GN@@@@@@@@@@@@@@GOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@COOOOOOOOOOOOOOLGOOOOOOOOOOOOOONOOOOOOOOOOOOOOOOO@@@@@@@@@@@@@@ON@@@@@@@@@@@@@@GN@@@@@@@@@@@@@@GN@@@@@@@@@@@@@@GN@@@@@@@@@@@@@@GN@@@@@@@@@@@@@@GN@@@@@@@@@@@@@@GN@@@@@@@@@@@@@@GN@@@@@@@@@@@@@@GN@@@@@@@@@@@@@@GN@@@@@@@@@@@@@@GN@@@@@@@@@@@@@@GN@@@@@@@@@@@@@@GO@@@@@@@@@@@@@@OOOOOOOOOOOOOOOOOGOOOOOOOOOOOOOONCOOOOOOOOOOOOOOL)(RPAQQ TTYKBDMASK #*(64 64)@@@OOOOOOOOOO@@@@@AOOOOOOOOOOH@@@@COOOOOOOOOOL@@@@COOOOOOOOOOL@@@@COOOOOOOOOOL@@@@COOOOOOOOOOL@@@@COOOOOOOOOOL@@@@COOOOOOOOOOL@@@@COOOOOOOOOOL@@@@COOOOOOOOOOL@@@@COOOOOOOOOOL@@@@COOOOOOOOOOL@@@@COOOOOOOOOOL@@@@COOOOOOOOOOL@@@@COOOOOOOOOOL@@@@COOOOOOOOOOL@@@@COOOOOOOOOOL@@@@COOOOOOOOOOL@@@@COOOOOOOOOOL@@@@COOOOOOOOOOL@@@@COOOOOOOOOOL@@@@COOOOOOOOOOL@@@@COOOOOOOOOOL@@@@COOOOOOOOOOL@@@@COOOOOOOOOOL@@@@COOOOOOOOOOL@@@@OOOOOOOOOOOO@@@AOOOOOOOOOOOOH@@COOOOOOOOOOOOL@@GOOOOOOOOOOOON@@OOOOOOOOOOOOOO@AOOOOOOOOOOOOOOHCOOOOOOOOOOOOOOLGOOOOOOOOOOOOOONOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@COOOOOOOOOOOOOOLGOOOOOOOOOOOOOONOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOGOOOOOOOOOOOOOONCOOOOOOOOOOOOOOL)(RPAQQ TTYKBDICONSPECREGION (4 3 56 14))(RPAQ? TTYKBDICONSPEC )(DEFGLOBALVAR CHAT.ALLHOSTS NIL)(CL:DEFVAR CHAT.AUTOCRLF T)(DEFGLOBALVAR CHAT.CONTROLCHAR 193)(CL:DEFVAR CHAT.DISPLAYTYPES '((NIL 10 DM2500)) )(DEFGLOBALVAR CHAT.DRIVERTYPES NIL)(DEFGLOBALVAR CHAT.EMACSCOMMANDS '(21 16 14 6 1) )(DEFGLOBALVAR CHAT.EMULATORTYPE 'DM2500 )(DEFGLOBALVAR CHAT.FONT NIL)(DEFGLOBALVAR CHAT.HOSTMENU NIL)(CL:DEFVAR CHAT.IN.EMACS? NIL)(DEFGLOBALVAR CHAT.INTERRUPTS NIL)(DEFGLOBALVAR CHAT.KEYACTIONS NIL)(DEFGLOBALVAR CHAT.METACHAR 195)(CL:DEFVAR CHAT.PROTOCOLTYPES NIL)(DEFGLOBALPARAMETER CHAT.REOPENMENU NIL)(DEFGLOBALVAR CHAT.WAIT.TIME 2000)(DEFGLOBALVAR CHAT.WINDOW.REGION NIL)(DEFGLOBALVAR CHAT.WINDOW.SIZE NIL)(DEFGLOBALVAR CHATDEBUGFLG NIL)(DEFGLOBALPARAMETER CHATMENU NIL)(DEFGLOBALVAR CHATWINDOW NIL)(DEFGLOBALVAR CHATWINDOWLST NIL)(DEFGLOBALVAR CLOSECHATWINDOWFLG NIL)(DEFGLOBALVAR DEFAULTCHATHOST NIL)(DEFGLOBALPARAMETER NETWORKLOGINFO '((TENEX (LOGIN "LOGIN " USERNAME " " PASSWORD " ")                                            (ATTACH "ATTACH " USERNAME " " PASSWORD " ")                                            (WHERE "WHERE " USERNAME CR "ATTACH " USERNAME " "                                                    PASSWORD CR))                                     (TOPS20 (LOGIN "LOGIN " USERNAME CR PASSWORD CR)                                            (ATTACH "ATTACH " USERNAME "lama " CR PASSWORD CR)                                            (WHERE "LOGIN " USERNAME CR PASSWORD CR))                                     (UNIX (LOGIN WAIT CR WAIT USERNAME CR WAIT PASSWORD CR))                                     (IFS (LOGIN "Login " USERNAME " " PASSWORD CR)                                          (ATTACH))                                     (NS (LOGIN))                                     (VMS (LOGIN USERNAME CR PASSWORD CR))) )(ADDTOVAR CHATMENUITEMS )(DECLARE%: EVAL@COMPILE DONTCOPY (DECLARE%: DOEVAL@COMPILE DONTCOPY(LOCALVARS . T))(FILESLOAD (SOURCE)       CHATDECLS)(DECLARE%: EVAL@COMPILE(RECORD EMACSCOMMANDS (EMARG EMUP EMDOWN EMFORWARD EMCOL0)))(DECLARE%: DOEVAL@COMPILE DONTCOPY(GLOBALVARS CHATMENUITEMS)))(RPAQ? INVERTWINDOWFN 'INVERTW)(DEFINEQ(\SPAWN.CHAT  (LAMBDA NIL                                                (* bvm%: "22-Apr-84 22:41")                                                             (* From the Background Menu, runs CHAT                                                              as a process)    (AND (THIS.PROCESS)         (TTY.PROCESS (ADD.PROCESS '(CHAT NIL NIL NIL NIL T)))))))(DECLARE%: DONTEVAL@LOAD DOCOPY (ADDTOVAR BackgroundMenuCommands (CHAT '(\SPAWN.CHAT) "Runs a new CHAT process; prompts for host"))(SETQ BackgroundMenu)(FILESLOAD DMCHAT)(/DECLAREDATATYPE 'CHAT.STATE       '(FLAG FLAG FLAG FLAG FLAG FLAG (BITS 1)              POINTER POINTER POINTER POINTER POINTER POINTER WORD WORD WORD WORD WORD WORD WORD WORD               WORD POINTER POINTER POINTER POINTER POINTER POINTER POINTER POINTER POINTER POINTER               POINTER POINTER)       '((CHAT.STATE 0 (FLAGBITS . 0))         (CHAT.STATE 0 (FLAGBITS . 16))         (CHAT.STATE 0 (FLAGBITS . 32))         (CHAT.STATE 0 (FLAGBITS . 48))         (CHAT.STATE 0 (FLAGBITS . 64))         (CHAT.STATE 0 (FLAGBITS . 80))         (CHAT.STATE 0 (BITS . 96))         (CHAT.STATE 0 POINTER)         (CHAT.STATE 2 POINTER)         (CHAT.STATE 4 POINTER)         (CHAT.STATE 6 POINTER)         (CHAT.STATE 8 POINTER)         (CHAT.STATE 10 POINTER)         (CHAT.STATE 12 (BITS . 15))         (CHAT.STATE 13 (BITS . 15))         (CHAT.STATE 14 (BITS . 15))         (CHAT.STATE 15 (BITS . 15))         (CHAT.STATE 16 (BITS . 15))         (CHAT.STATE 17 (BITS . 15))         (CHAT.STATE 18 (BITS . 15))         (CHAT.STATE 19 (BITS . 15))         (CHAT.STATE 20 (BITS . 15))         (CHAT.STATE 22 POINTER)         (CHAT.STATE 24 POINTER)         (CHAT.STATE 26 POINTER)         (CHAT.STATE 28 POINTER)         (CHAT.STATE 30 POINTER)         (CHAT.STATE 32 POINTER)         (CHAT.STATE 34 POINTER)         (CHAT.STATE 36 POINTER)         (CHAT.STATE 38 POINTER)         (CHAT.STATE 40 POINTER)         (CHAT.STATE 42 POINTER)         (CHAT.STATE 44 POINTER))       '46))(PUTPROPS CHAT COPYRIGHT ("Xerox Corporation" 1982 1983 1984 1985 1986 1987))(DECLARE%: DONTCOPY  (FILEMAP (NIL (4154 29337 (CHAT 4164 . 10213) (CHAT.CHOOSE.EMULATOR 10215 . 11041) (CHAT.SET.EMULATOR 11043 . 11434) (CHAT.CHANGE.EMULATOR 11436 . 12163) (CHAT.INIT 12165 . 13997) (FIND.CHAT.PROTOCOL 13999 . 14551) (CHAT.TYPEIN 14553 . 21103) (CHAT.BIN 21105 . 21522) (CHAT.CLOSE 21524 . 25394) (CHAT.DEACTIVATE.WINDOW 25396 . 25986) (CHAT.CLOSEFN 25988 . 26308) (CHAT.CLOSE.CONNECTION 26310 . 26648) (CHAT.LOGIN 26650 . 29335)) (29407 32506 (ADD.CHAT.MESSAGE 29417 . 29703) (CHAT.LOGINFO 29705 . 30054) (CHAT.SENDSCREENPARAMS 30056 . 30444) (CHAT.SETDISPLAYTYPE 30446 . 30866) (CHAT.LOGINFO 30868 . 31217) (CHAT.FLUSH&WAIT 31219 . 31567) (CHAT.ENDOFSTREAMOP 31569 . 32002) (CHAT.OPTIONMENU 32004 . 32504)) (32536 38994 (CHAT.TYPEOUT 32546 . 36522) (CHAT.TYPEOUT.CLOSE 36524 . 36829) (CHAT.DID.RESHAPE 36831 . 37302) (CHAT.SCREENPARAMS 37304 . 38992)) (39024 53683 (GETCHATWINDOW 39034 . 40860) (CHAT.BUTTONFN 40862 . 41549) (CHAT.HOLD 41551 . 42127) (CHAT.MENU 42129 . 45965) (CHAT.CLEAR.FROM.MENU 45967 . 46170) (CHAT.TAKE.INPUT 46172 . 46404) (CHAT.TAKE.INPUT1 46406 . 47394) (DO.CHAT.OPTION 47396 . 47806) (CHAT.RECONNECT 47808 . 49190) (CHAT.RECONNECT.OFF 49192 . 49580) (CHAT.RESHAPEWINDOW 49582 . 50608) (CHAT.TTYENTRYFN 50610 . 50957) (CHAT.TTYEXITFN 50959 . 51083) (CHAT.TYPESCRIPT 51085 . 51399) (CHAT.TYPESCRIPT1 51401 . 53681)) (53713 55562 (CHAT.CHOOSE.PHONE.NUMBER 53723 . 55560)) (55667 59529 (CHAT.EMACS.MOVE 55677 . 58922) (CHAT.SWITCH.EMACS 58924 . 59527)) (59530 60362 (CHAT.ICONFN 59540 . 60360)) (64880 65283 (\SPAWN.CHAT 64890 . 65281)))))STOP