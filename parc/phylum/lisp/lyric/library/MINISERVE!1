(DEFINE-FILE-INFO §READTABLE "INTERLISP" §PACKAGE "INTERLISP")(FILECREATED "17-Apr-87 11:37:51" {ERIS}<LISPCORE>LIBRARY>MINISERVE.;3 15948        changes to%:  (FNS \GET.PUP#.FROM.NS# \NSTIMESERVER \HANDLE.NS.TIMEREQ)                    (VARS MINISERVECOMS)      previous date%: "12-Jun-84 15:43:13" {ERIS}<LISPCORE>LIBRARY>MINISERVE.;1)(* "Copyright (c) 1984, 1987 by Xerox Corporation.  All rights reserved.")(PRETTYCOMPRINT MINISERVECOMS)(RPAQQ MINISERVECOMS [(FNS STARTMINISERVER)                      (FNS \NSTIMESERVER \HANDLE.NS.TIMEREQ)                      (FNS \PUPTIMESERVER \HANDLE.PUP.ALTOTIMEREQ)                      (DECLARE%: EVAL@COMPILE DONTCOPY (RECORDS TIMEPUPCONTENTS TIMEXIP)                             (CONSTANTS \TIMESOCKET \XIPT.EXCHANGE \EXTYPE.TIME \XIPT.OLDTIME                                     \TIMEVERSION \TIMEOP.TIMEREQUEST \TIMEOP.TIMERESPONSE                                     \NSTIMELENGTH)                             (CONSTANTS \PUPSOCKET.MISCSERVICES \PT.ALTOTIMEREQUEST                                     \PT.ALTOTIMERESPONSE \PUPOVLEN \TIMEPUPLENGTH)                             (GLOBALVARS \BeginDST \EndDST \TimeZoneComp))                      (COMS (* PUPIDSERVER)                            (FNS \PUP.ID.SERVER \HANDLE.PUP.LOOKUP \GET.PUP#.FROM.NS#)                            (INITVARS NS.TO.PUP.ALIST NS.TO.PUP.FILE)                            (DECLARE%: EVAL@COMPILE DONTCOPY (GLOBALVARS NS.TO.PUP.ALIST                                                                     NS.TO.PUP.FILE)                                   (FILES (LOADCOMP)                                          LLNS])(DEFINEQ(STARTMINISERVER  [LAMBDA NIL                                                (* ; "Edited 16-Apr-87 18:52 by raf")    (ADD.PROCESS '(\PUPTIMESERVER) 'RESTARTABLE 'HARDRESET)    (ADD.PROCESS '(\NSTIMESERVER) 'RESTARTABLE 'HARDRESET)    (ADD.PROCESS '(\PUP.ID.SERVER) 'RESTARTABLE 'HARDRESET)    T]))(DEFINEQ(\NSTIMESERVER  [LAMBDA (TRACEFLG)                                         (* edited%: "15-May-85 18:54")    (RESETLST (PROG ((SOC (OPENNSOCKET \TIMESOCKET T))                     XIP EVENT)                    (RESETSAVE NIL (LIST 'CLOSENSOCKET SOC))                    (SETQ EVENT (NSOCKETEVENT SOC))                    (do (COND                           ((SETQ XIP (GETXIP SOC))                            (\HANDLE.NS.TIMEREQ SOC XIP TRACEFLG))                           (T (AWAIT.EVENT EVENT])(\HANDLE.NS.TIMEREQ  [LAMBDA (SOC XIP TRACEFLG)                                 (* jl " 7-Nov-85 12:21")    (PROG ((BUF (fetch (XIP XIPCONTENTS)                       of XIP))           TIME)          (COND             ([NOT (AND (OR (EQ (fetch (XIP XIPTYPE)                                       of XIP)                                \XIPT.EXCHANGE)                            (EQ (fetch (XIP XIPTYPE)                                       of XIP)                                123))                        (EQ (fetch (TIMEBODY TIMEOP)                                   of BUF)                            \TIMEOP.TIMEREQUEST)                        (COND                           [(EQ \MACHINETYPE \DANDELION)                            (NOT (EQP 0 (fetch (IOPAGE DLTODVALID)                                               of \IOPAGE]                           (T T))                        (NOT (EQUAL \MY.NSHOSTNUMBER (fetch (XIP XIPSOURCEHOST)                                                            of XIP]              (RELEASE.XIP XIP))             (T                     (* * PUT STUFF IN XIP)                (COND                   (TRACEFLG (printout TRACEFLG "Serving time to " .PPVTL (fetch (XIP XIPSOURCEHOST)                                                                                 of XIP)                                    T)))                (SETQ TIME (LISP.TO.ALTO.DATE (IDATE)))                (replace (XIP XIPLENGTH)                       of XIP with (IPLUS \XIPOVLEN (UNFOLD 15 BYTESPERWORD)))                    (* * USED NO TO WORK WITH THAT %: (replace          (PACKETEXCHANGEXIP PACKETEXCHANGETYPE) of XIP with \EXTYPE.RESPONSE))                (replace (TIMEBODY TIMEOP)                       of BUF with \TIMEOP.TIMERESPONSE)                (replace (TIMEBODY TIMEVERSION)                       of BUF with \TIMEVERSION)                (COND                   ((ILESSP \TimeZoneComp 0)                    (replace (TIMEBODY TIMEZONESIGN)                           of BUF with 1))                   (T (replace (TIMEBODY TIMEZONESIGN)                             of BUF with 0)))                (replace (TIMEBODY TIMEZONEHOURS)                       of BUF with (ABS \TimeZoneComp))                (replace (TIMEBODY TIMEZONEMINUTES)                       of BUF with 0)                (replace (TIMEBODY TIMEBEGINDST)                       of BUF with \BeginDST)                (replace (TIMEBODY TIMEENDDST)                       of BUF with \EndDST)                (replace (TIMEBODY TIMEVALUEHI)                       of BUF with (fetch (FIXP HINUM)                                          of TIME))                (replace (TIMEBODY TIMEVALUELO)                       of BUF with (fetch (FIXP LONUM)                                          of TIME))                (replace (TIMEBIG OVER1)                       of BUF with 0)                (replace (TIMEBIG OVER2)                       of BUF with 65535)                (replace (TIMEBIG OVER3)                       of BUF with 65535)                (SWAPXIPADDRESSES XIP)                (replace (XIP XIPSOURCEHOST)                       of XIP with (\LOCALNSHOSTNUMBER))                (replace (XIP XIPSOURCENET)                       of XIP with (\LOCALNSNETNUMBER))                (replace EPREQUEUE of XIP with 'FREE)                (SENDXIP SOC XIP]))(DEFINEQ(\PUPTIMESERVER  [LAMBDA NIL                                                (* bvm%: "23-Jan-84 16:21")    (PROG ((PUPSOC (OPENPUPSOCKET \PUPSOCKET.MISCSERVICES T))           EVENT PUP)          (RESETSAVE NIL (LIST 'CLOSEPUPSOCKET PUPSOC))          (SETQ EVENT (PUPSOCKETEVENT PUPSOC))      LP  (COND             ((SETQ PUP (GETPUP PUPSOC))              (SELECTC (fetch (PUP PUPTYPE)                              of PUP)                  (\PT.ALTOTIMEREQUEST                        (\HANDLE.PUP.ALTOTIMEREQ PUPSOC PUP))                  NIL)              (BLOCK))             (T                                              (* Wait for a Pup)                (AWAIT.EVENT EVENT)))          (GO LP])(\HANDLE.PUP.ALTOTIMEREQ  [LAMBDA (MISCSOC PUP)                                      (* bvm%: "16-NOV-83 10:48")                    (* * Alto time request)    (PROG [(DATA (fetch (PUP PUPCONTENTS)                        of PUP))           (TIME (ALTO.TO.LISP.DATE (IDATE]          (SWAPPUPPORTS PUP)          (replace TIMEPUPVALUEHI of DATA with (\HINUM TIME))          (replace TIMEPUPVALUELO of DATA with (\LONUM TIME))          (COND             ((MINUSP \TimeZoneComp)              (replace TIMEPUPEASTP of DATA with T)              (replace TIMEPUPHOURS of DATA with (IMINUS \TimeZoneComp)))             (T (replace TIMEPUPEASTP of DATA with NIL)                (replace TIMEPUPHOURS of DATA with \TimeZoneComp)))          (replace TIMEPUPMINUTES of DATA with 0)          (replace TIMEPUPBEGINDST of DATA with \BeginDST)          (replace TIMEPUPENDDST of DATA with \EndDST)          (replace (PUP PUPTYPE)                 of PUP with \PT.ALTOTIMERESPONSE)          (replace (PUP PUPLENGTH)                 of PUP with (CONSTANT (IPLUS \PUPOVLEN \TIMEPUPLENGTH)))          (SENDPUP MISCSOC PUP)          (\RELEASE.ETHERPACKET PUP]))(DECLARE%: EVAL@COMPILE DONTCOPY (DECLARE%: EVAL@COMPILE(BLOCKRECORD TIMEPUPCONTENTS ((TIMEPUPVALUEHI WORD)                              (TIMEPUPVALUELO WORD)                              (TIMEPUPEASTP FLAG)                              (TIMEPUPHOURS BITS 7)                              (TIMEPUPMINUTES BITS 8)                              (TIMEPUPBEGINDST WORD)                              (TIMEPUPENDDST WORD))          (* format of alto time response)                             )(ACCESSFNS TIMEXIP ((TIMEBODY (fetch (PACKETEXCHANGEXIP PACKETEXCHANGEBODY)                                     of DATUM)))                   [BLOCKRECORD TIMEBODY ((TIMEVERSION WORD) (* Protocol version)                                          (TIMEOP WORD)      (* What kind of request/response)                                          (TIMEVALUE FIXP)                                          (TIMEZONESIGN WORD)(* 0 = west of prime meridian, 1 =                                                              east)                                          (TIMEZONEHOURS WORD)                                                             (* Hours from prime meridian)                                          (TIMEZONEMINUTES WORD)                                                             (* Minutes |...|)                                          (TIMEBEGINDST WORD)(* Day of year when DST starts)                                          (TIMEENDDST WORD)  (* Day of year when DST stops)                                          )                          (BLOCKRECORD TIMEBODY ((NIL 2 WORD)                                                 (TIMEVALUEHI WORD)                                                 (TIMEVALUELO WORD]))(DECLARE%: EVAL@COMPILE (RPAQQ \TIMESOCKET 8)(RPAQQ \XIPT.EXCHANGE 4)(RPAQQ \EXTYPE.TIME 1)(RPAQQ \XIPT.OLDTIME 123)(RPAQQ \TIMEVERSION 2)(RPAQQ \TIMEOP.TIMEREQUEST 1)(RPAQQ \TIMEOP.TIMERESPONSE 2)(RPAQQ \NSTIMELENGTH 24)(CONSTANTS \TIMESOCKET \XIPT.EXCHANGE \EXTYPE.TIME \XIPT.OLDTIME \TIMEVERSION \TIMEOP.TIMEREQUEST        \TIMEOP.TIMERESPONSE \NSTIMELENGTH))(DECLARE%: EVAL@COMPILE (RPAQQ \PUPSOCKET.MISCSERVICES 4)(RPAQQ \PT.ALTOTIMEREQUEST 134)(RPAQQ \PT.ALTOTIMERESPONSE 135)(RPAQQ \PUPOVLEN 22)(RPAQQ \TIMEPUPLENGTH 10)(CONSTANTS \PUPSOCKET.MISCSERVICES \PT.ALTOTIMEREQUEST \PT.ALTOTIMERESPONSE \PUPOVLEN \TIMEPUPLENGTH))(DECLARE%: DOEVAL@COMPILE DONTCOPY(GLOBALVARS \BeginDST \EndDST \TimeZoneComp)))(* PUPIDSERVER)(DEFINEQ(\PUP.ID.SERVER  [LAMBDA (TRACEFLG)                                         (* bvm%: "28-OCT-83 15:59")                    (* * Server that provides pup numbers given NS numbers.          Works off alist NS.TO.PUP.ALIST)    (RESETLST (PROG ((SOC (OPENNSOCKET \NS.WKS.PUPLOOKUP T))                     XIP EVENT)                    (RESETSAVE NIL (LIST 'CLOSENSOCKET SOC))                    (COND                       (TRACEFLG (printout TRACEFLG "Pup ID server started at " (DATE)                                        T)))                RETRY                    [COND                       ((NLISTP NS.TO.PUP.ALIST)                        (COND                           (NS.TO.PUP.FILE (SETQ NS.TO.PUP.ALIST (READFILE NS.TO.PUP.FILE)))                           ((GETD 'NetDirNameLookup)         (* For use with GATEWAY, we are ok)                            )                           (T (ERROR                               "NS.TO.PUP.ALIST is empty, and there is no NS.TO.PUP.FILE to read from"                                     )                              (GO RETRY]                    (SETQ EVENT (NSOCKETEVENT SOC))                LP  (COND                       ((SETQ XIP (GETXIP SOC))                        (\HANDLE.PUP.LOOKUP SOC XIP TRACEFLG))                       (T (AWAIT.EVENT EVENT)))                    (GO LP])(\HANDLE.PUP.LOOKUP  [LAMBDA (NSOC XIP TRACEFILE)                               (* bvm%: "12-Jun-84 15:14")                    (* * Handle requests for Pup lookup from NS hosts.          This is designed to be called both from withing GATEWAY and in the standalone           PUPIDSERVER)    (DECLARE (GLOBALVARS \10MBLOCALNDB))    (PROG (BUF PUP# NSHOST#)          (COND             ((OR (NEQ (fetch (XIP XIPTYPE)                              of XIP)                       \XIPT.PUPLOOKUP)                  (NEQ (fetch (PACKETEXCHANGEXIP PACKETEXCHANGETYPE)                              of XIP)                       \EXTYPE.REQUEST))              (RELEASE.XIP XIP))             (T (SETQ NSHOST# (\LOADNSHOSTNUMBER (fetch (PACKETEXCHANGEXIP PACKETEXCHANGEBODY)                                                        of XIP)))                    (* Note%: The following only handles 32 bit host numbers at the moment!)                [COND                   [(SETQ PUP# (\GET.PUP#.FROM.NS# NSHOST#))                    [AND \10MBLOCALNDB (push (ffetch (NDB NDBTRANSLATIONS)                                                    of \10MBLOCALNDB)                                             (CONS (fetch PUPHOST# of PUP#)                                                   (LIST NSHOST# (CLOCK 0]                                                             (* Add pup/ns translation to our table)                    (replace (XIP XIPLENGTH)                           of XIP with (IPLUS \XIPOVLEN (UNFOLD 6 BYTESPERWORD)))                    (* Data%: 2 words for ID, 1 for PACKETEXCHANGETYPE, 1 for PUP#.          That's only 4, but Mesa 10.0 seems to want 6 words, the last 2 being zero)                    (replace (PACKETEXCHANGEXIP PACKETEXCHANGETYPE)                           of XIP with \EXTYPE.RESPONSE)                    (SETQ BUF (fetch (PACKETEXCHANGEXIP PACKETEXCHANGEBODY)                                     of XIP))                    (\PUTBASE BUF 0 PUP#)                    (\PUTBASE BUF 1 0)                    (\PUTBASE BUF 2 0)                    (COND                       (TRACEFILE (PRINTNSHOSTNUMBER NSHOST# TRACEFILE)                              (printout TRACEFILE " = " (PORTSTRING PUP#)                                     T]                   (T (RETURN (RELEASE.XIP XIP)))                   (NIL                     (* This is what to do for a negative response.          However, the current state of the world is that we can't reliably give negative           responses (someone else might know better)%, so skip this)                        (replace (PACKETEXCHANGEXIP PACKETEXCHANGETYPE)                               of XIP with \EXTYPE.NEGATIVE)                        (replace (XIP XIPLENGTH)                               of XIP with (IPLUS \XIPOVLEN (UNFOLD 3 BYTESPERWORD)))                        (COND                           (TRACEFILE (printout TRACEFILE "No pup number for ")                                  (PRINTNSHOSTNUMBER NSHOST# TRACEFILE)                                  (TERPRI TRACEFILE]                (SWAPXIPADDRESSES XIP)                (replace (XIP XIPSOURCEHOST)                       of XIP with (\LOCALNSHOSTNUMBER))                (replace (XIP XIPSOURCENET)                       of XIP with (\LOCALNSNETNUMBER))                (replace EPREQUEUE of XIP with 'FREE)                (SENDXIP NSOC XIP])(\GET.PUP#.FROM.NS#  [LAMBDA (NSHOST#)                                          (* ; "Edited 17-Apr-87 11:36 by raf")    (CDR (SASSOC NSHOST# NS.TO.PUP.ALIST]))(RPAQ? NS.TO.PUP.ALIST NIL)(RPAQ? NS.TO.PUP.FILE NIL)(DECLARE%: EVAL@COMPILE DONTCOPY (DECLARE%: DOEVAL@COMPILE DONTCOPY(GLOBALVARS NS.TO.PUP.ALIST NS.TO.PUP.FILE))(FILESLOAD (LOADCOMP)       LLNS))(PUTPROPS MINISERVE COPYRIGHT ("Xerox Corporation" 1984 1987))(DECLARE%: DONTCOPY  (FILEMAP (NIL (1684 2022 (STARTMINISERVER 1694 . 2020)) (2023 6017 (\NSTIMESERVER 2033 . 2555) (\HANDLE.NS.TIMEREQ 2557 . 6015)) (6018 7943 (\PUPTIMESERVER 6028 . 6762) (\HANDLE.PUP.ALTOTIMEREQ 6764 . 7941)) (10567 15643 (\PUP.ID.SERVER 10577 . 11975) (\HANDLE.PUP.LOOKUP 11977 . 15466) (\GET.PUP#.FROM.NS# 15468 . 15641)))))STOP