(DEFINE-FILE-INFO §READTABLE "INTERLISP" §PACKAGE "INTERLISP")(FILECREATED "17-Mar-87 10:54:41" {ERIS}<TEDIT>TEDITPAGE.;48 83315        changes to%:  (FNS TEDIT.SINGLE.PAGEFORMAT)      previous date%: " 2-Jan-87 12:25:16" {ERIS}<TEDIT>TEDITPAGE.;47)(* "Copyright (c) 1984, 1985, 1986, 1987 by Xerox Corporation.  All rights reserved.")(PRETTYCOMPRINT TEDITPAGECOMS)(RPAQQ TEDITPAGECOMS        ((FILES TEDITDECLS)        (DECLARE%: EVAL@COMPILE DONTCOPY (CONSTANTS (\SCRATCHLEN 64))               (FILES (LOADCOMP)                      TEDITDECLS))        [COMS                     (* ;; "Page-numbering font specification/default")                                  (* ;; "(Must come before calls to TEDIT.SINGLE.PAGEFORMAT below.)")              (GLOBALVARS TEDIT.DEFAULT.FOLIO.LOOKS)              (INITVARS (TEDIT.DEFAULT.FOLIO.LOOKS (\TEDIT.PARSE.CHARLOOKS.LIST '(FAMILY MODERN SIZE                                                                                         10 WEIGHT                                                                                         MEDIUM SLOPE                                                                                         REGULAR]        [VARS (MAXPAGE# 65535)              (MINPAGE# 1)              (TEDIT.PAGE.FRAMES (LIST (TEDIT.SINGLE.PAGEFORMAT NIL NIL NIL NIL NIL 72 72 72 72 NIL 1                                              )                                       (TEDIT.SINGLE.PAGEFORMAT T 72 756 NIL 'LEFT 72 72 72 72 NIL 1)                                       (TEDIT.SINGLE.PAGEFORMAT T 540 756 NIL 'RIGHT 72 72 72 72 NIL                                               1]        (COMS                                                (* ;                                                              "Creation, GET, and PUT of page frames.")              (FNS TEDIT.GET.PAGEFRAMES TEDIT.PARSE.PAGEFRAMES TEDIT.PUT.PAGEFRAMES                    TEDIT.UNPARSE.PAGEFRAMES))        (COMS                                                (* ; "For setting up page layouts")              (FNS TEDIT.SINGLE.PAGEFORMAT TEDIT.COMPOUND.PAGEFORMAT TEDIT.PAGEFORMAT))        (COMS                                                (* ;                                "Perform page layout, based on a regular expression of typed regions.")              (FNS TEDIT.FORMAT.HARDCOPY TEDIT.FORMATBOX TEDIT.FORMATHEADING TEDIT.FORMATPAGE                    TEDIT.FORMATTEXTBOX TEDIT.FORMATFOLIO \TEDIT.FORMAT.FOUNDBOX?)                                                             (* ;                                       "Aux function to capture page headings during line formatting.")              (FNS TEDIT.HARDCOPY.PAGEHEADING))        [COMS                                                (* ; "Handle varying paper sizes")              (FNS SCALEPAGEUNITS SCALEPAGEXUNITS SCALEPAGEYUNITS \TEDIT.PAPERHEIGHT                    \TEDIT.PAPERWIDTH)              (GLOBALVARS TEDIT.PAPER.SIZES)              (VARS (TEDIT.PAPER.SIZES '((A0 2384 3370)                                         (A1 1684 2384)                                         (A2 1191 1684)                                         (A3 842 1191)                                         (A4 595 842)                                         (A5 420 595)                                         (B0 2835 4008)                                         (B1 2004 2835)                                         (B2 1417 2004)                                         (B3 1001 1417)                                         (B4 709 1001)                                         (B5 499 709]        (COMS                                                (* ; "Page numbering option support")              (FNS ROMANNUMERALS))))(FILESLOAD TEDITDECLS)(DECLARE%: EVAL@COMPILE DONTCOPY (DECLARE%: EVAL@COMPILE (RPAQQ \SCRATCHLEN 64)(CONSTANTS (\SCRATCHLEN 64)))(FILESLOAD (LOADCOMP)       TEDITDECLS))(* ;; "Page-numbering font specification/default")(* ;; "(Must come before calls to TEDIT.SINGLE.PAGEFORMAT below.)")(DECLARE%: DOEVAL@COMPILE DONTCOPY(GLOBALVARS TEDIT.DEFAULT.FOLIO.LOOKS))(RPAQ? TEDIT.DEFAULT.FOLIO.LOOKS (\TEDIT.PARSE.CHARLOOKS.LIST '(FAMILY MODERN SIZE 10 WEIGHT MEDIUM                                                                       SLOPE REGULAR)))(RPAQQ MAXPAGE# 65535)(RPAQQ MINPAGE# 1)(RPAQ TEDIT.PAGE.FRAMES (LIST (TEDIT.SINGLE.PAGEFORMAT NIL NIL NIL NIL NIL 72 72 72 72 NIL 1)                              (TEDIT.SINGLE.PAGEFORMAT T 72 756 NIL 'LEFT 72 72 72 72 NIL 1)                              (TEDIT.SINGLE.PAGEFORMAT T 540 756 NIL 'RIGHT 72 72 72 72 NIL 1)))(* ; "Creation, GET, and PUT of page frames.")(DEFINEQ(TEDIT.GET.PAGEFRAMES  [LAMBDA (FILE)                                             (* jds "18-Jun-84 02:55")                    (* Read a bunch of page frames from the file, and return it.)    (TEDIT.PARSE.PAGEFRAMES (READ FILE])(TEDIT.PARSE.PAGEFRAMES  [LAMBDA (PAGELIST PARENT)                                  (* jds "31-Jul-84 15:30")                                                             (* Take an external pageframe and                                                              internalize it.)    (PROG (FRAMETYPE PAGEFRAME)          (COND             ((type? PAGEREGION PAGELIST)              (RETURN PAGELIST))             ((NEQ 'LIST (SETQ FRAMETYPE (pop PAGELIST)))              [SETQ PAGEFRAME (create PAGEREGION                                     REGIONFILLMETHOD _ FRAMETYPE                                     REGIONTYPE _ (pop PAGELIST)                                     REGIONLOCALINFO _ (pop PAGELIST)                                     REGIONSPEC _ (OR (pop PAGELIST)                                                      (LIST 0 0 0 0]              (replace REGIONSUBBOXES of PAGEFRAME with (for ALIST in (pop PAGELIST)                                                           collect (TEDIT.PARSE.PAGEFRAMES ALIST                                                                           PAGEFRAME)))              (RETURN PAGEFRAME))             (T (RETURN (for FRAMESPEC in (CAR PAGELIST) collect (TEDIT.PARSE.PAGEFRAMES FRAMESPEC                                                                         NIL])(TEDIT.PUT.PAGEFRAMES  [LAMBDA (FILE PAGEFRAMES)                                  (* jds "13-Nov-86 20:10")                    (* Put out a description of a set of page-layout frames)    (PROG (STR)          (\DWOUT FILE 0)                                    (* The length of this run of looks)          (\SMALLPOUT FILE \PieceDescriptorPAGEFRAME)        (* Mark this as a set of page frames)          (PRIN2 (TEDIT.UNPARSE.PAGEFRAMES PAGEFRAMES)                 FILE *TEDIT-FILE-READTABLE*])(TEDIT.UNPARSE.PAGEFRAMES  [LAMBDA (PAGEFRAME)                                        (* jds "31-Jul-84 15:00")                    (* Take an internal page frame, and create an equivalent list structure.)    (COND       [(LISTP PAGEFRAME)        (LIST 'LIST (for FRAME in PAGEFRAME collect (TEDIT.UNPARSE.PAGEFRAMES FRAME]       (T (LIST (fetch REGIONFILLMETHOD of PAGEFRAME)                (fetch REGIONTYPE of PAGEFRAME)                (fetch REGIONLOCALINFO of PAGEFRAME)                (fetch REGIONSPEC of PAGEFRAME)                (for SUBREGION in (fetch REGIONSUBBOXES of PAGEFRAME) collect (                                                                             TEDIT.UNPARSE.PAGEFRAMES                                                                               SUBREGION]))(* ; "For setting up page layouts")(DEFINEQ(TEDIT.SINGLE.PAGEFORMAT  [LAMBDA (PAGE#S? PX PY PFONT PQUAD LEFT RIGHT TOP BOTTOM COLS COLWIDTH INTERCOL HEADINGS UNITS                  PAGEPROPS PAPERSIZE)                        (* ; "Edited 30-Dec-86 20:11 by jds")                    (* Given a description in the args, create a pageframe to describe a single           kind of page.)    (PROG* ((LANDSCAPE? (LISTGET PAGEPROPS 'LANDSCAPE?))            (PAPERWIDTH (\TEDIT.PAPERWIDTH PAPERSIZE LANDSCAPE?))            (PAPERHEIGHT (\TEDIT.PAPERHEIGHT PAPERSIZE LANDSCAPE?))            [PAGEREGION (create PAGEREGION                               REGIONFILLMETHOD _ 'PAGE                               REGIONSPEC _                               (create REGION                                      LEFT _ 0                                      BOTTOM _ 0                                      WIDTH _ PAPERWIDTH                                      HEIGHT _ PAPERHEIGHT)                               REGIONLOCALINFO _ (CONS 'PAPERSIZE (CONS PAPERSIZE PAGEPROPS]            PAGEWIDTH SUBREGIONS FOLIO FOLIOLEFT SCALEFACTOR HEADINGREGIONS)           (SELECTQ UNITS               ((POINTS NIL)                     (* If units are in printers points, the default, do no scaling)                    (SETQ SCALEFACTOR 1))               (PICAS                                        (* The units are in picas--12pts per.                                                             Scale all values.)                      (SETQ SCALEFACTOR 12))               (INCHES                     (* The units are in inches, at 72.27pts per.          Set the scale factor)                       (SETQ SCALEFACTOR 72))               (MICAS                                        (* The units are MICAS, at 2540 to the                                                              inch.)                      (SETQ SCALEFACTOR 0.02834646))               (CM                                           (* Units are in CM, at 72.27/2.54pts                                                              per.)                   (SETQ SCALEFACTOR (CONSTANT (FQUOTIENT 72 2.54))))               (\ILLEGAL.ARG UNITS))                         (* We need to do the scaling.)           (SETQ PX (SCALEPAGEXUNITS PX SCALEFACTOR PAPERSIZE))           (SETQ PY (SCALEPAGEYUNITS PY SCALEFACTOR PAPERSIZE))           [AND LEFT (SETQ LEFT (FIXR (FTIMES LEFT SCALEFACTOR]           [AND RIGHT (SETQ RIGHT (FIXR (FTIMES RIGHT SCALEFACTOR]           [AND TOP (SETQ TOP (FIXR (FTIMES TOP SCALEFACTOR]           [AND BOTTOM (SETQ BOTTOM (FIXR (FTIMES BOTTOM SCALEFACTOR]           [AND COLWIDTH (SETQ COLWIDTH (FIXR (FTIMES COLWIDTH SCALEFACTOR]           [AND INTERCOL (SETQ INTERCOL (FIXR (FTIMES INTERCOL SCALEFACTOR]           [SETQ HEADINGS (for HDG in HEADINGS collect (LIST (CAR HDG)                                                             (SCALEPAGEXUNITS (CADR HDG)                                                                    SCALEFACTOR PAPERSIZE)                                                             (SCALEPAGEYUNITS (CADDR HDG)                                                                    SCALEFACTOR PAPERSIZE]           (SETQ PAGEWIDTH (IDIFFERENCE (IDIFFERENCE PAPERWIDTH RIGHT)                                  LEFT))           (COND              [PAGE#S? (SELECTQ PQUAD                           (LEFT                     (* If the page number is flush left, set up the region to start where he           specified.)                                 (SETQ FOLIOLEFT PX))                           (RIGHT                     (* If it's flush right, set up the region to END there)                                  (SETQ FOLIOLEFT (IDIFFERENCE PX 288)))                           ((CENTERED NIL)                     (* Otherwise, center the page number around the point he specifies)                                (SETQ FOLIOLEFT (IDIFFERENCE PX 144)))                           (SHOULDNT))                     [SETQ SUBREGIONS                      (LIST (SETQ FOLIO                             (create PAGEREGION                                    REGIONFILLMETHOD _ 'FOLIO                                    REGIONSPEC _                                    (create REGION                                           LEFT _ FOLIOLEFT                                           BOTTOM _ PY                                           WIDTH _ 288                                           HEIGHT _ 36]                     (replace REGIONLOCALINFO of FOLIO with (LIST 'PARALOOKS                                                                  (LIST 'QUAD (OR PQUAD 'CENTERED))                                                                  'CHARLOOKS                                                                  (\TEDIT.UNPARSE.CHARLOOKS.LIST                                                                   (\TEDIT.PARSE.CHARLOOKS.LIST                                                                    PFONT TEDIT.DEFAULT.FOLIO.LOOKS))                                                                  'FORMATINFO                                                                  (LISTGET PAGEPROPS 'FOLIOINFO]              (T (SETQ SUBREGIONS NIL)))           [COND              (HEADINGS                                      (* There are page headings specified                                                              for this page.)                     [SETQ HEADINGREGIONS (for HEADING in HEADINGS                                             collect                     (* Run thru the list of headings, building a box for each.          By default, a heading will have the same width right margin as the left margin           that was specified.)                                                   (create PAGEREGION                                                          REGIONFILLMETHOD _ 'HEADING                                                          REGIONSPEC _                                                          (create REGION                                                                 LEFT _ (CADR HEADING)                                                                 BOTTOM _ (CADDR HEADING)                                                                 WIDTH _ (IMAX (IDIFFERENCE                                                                                PAPERWIDTH                                                                                (CADR HEADING))                                                                               72)                                                                 HEIGHT _ 36)                                                          REGIONLOCALINFO _ (LIST 'HEADINGTYPE                                                                                  (CAR HEADING]                     (SETQ SUBREGIONS (APPEND SUBREGIONS HEADINGREGIONS]           [COND              [(OR (NULL COLS)                   (IEQP COLS 1))                    (* There is a single column, so treat it as just one text region bounded by the           page margins.)               (SETQ SUBREGIONS                (NCONC1 SUBREGIONS                       (create PAGEREGION                              REGIONFILLMETHOD _ 'TEXT                              REGIONSPEC _                              (create REGION                                     LEFT _ LEFT                                     BOTTOM _ BOTTOM                                     WIDTH _ PAGEWIDTH                                     HEIGHT _ (IDIFFERENCE (IDIFFERENCE PAPERHEIGHT TOP)                                                     BOTTOM]              (T                     (* There are several columns. We need to create a text box for each col.)                 [COND                    [(NULL COLWIDTH)                    (* He wants us to fill in the column width, given margins and intercolumn           spacing.)                     (COND                        [INTERCOL (SETQ COLWIDTH (FIXR (FQUOTIENT (IDIFFERENCE PAGEWIDTH                                                                         (ITIMES INTERCOL                                                                                (SUB1 COLS)))                                                              COLS]                        (T                                   (* Can't default both of them.)                           (SHOULDNT "Can't default both Col width and spacing"]                    ((NULL INTERCOL)                    (* Or else he wants to give us just the col width and have us calc the spacing.)                     (SETQ INTERCOL (FIXR (FQUOTIENT (IDIFFERENCE PAGEWIDTH (ITIMES COLWIDTH COLS))                                                 (SUB1 COLS]                 (for COL from 1 to COLS as CLEFT from LEFT by (IPLUS COLWIDTH INTERCOL)                    do (SETQ SUBREGIONS                        (NCONC1 SUBREGIONS                               (create PAGEREGION                                      REGIONFILLMETHOD _ 'TEXT                                      REGIONSPEC _                                      (create REGION                                             LEFT _ CLEFT                                             BOTTOM _ BOTTOM                                             WIDTH _ COLWIDTH                                             HEIGHT _ (IDIFFERENCE (IDIFFERENCE PAPERHEIGHT TOP)                                                             BOTTOM]           (replace REGIONSUBBOXES of PAGEREGION with SUBREGIONS)           (RETURN PAGEREGION])(TEDIT.COMPOUND.PAGEFORMAT  [LAMBDA (FIRST VERSO RECTO)                                (* jds "27-Jul-84 10:15")    (create PAGEREGION           REGIONFILLMETHOD _ 'SEQUENCE           REGIONSUBBOXES _ (LIST FIRST (create PAGEREGION                                               REGIONFILLMETHOD _ 'ALTERNATE                                               REGIONSUBBOXES _ (LIST (OR VERSO FIRST)                                                                      (OR RECTO VERSO FIRST))                                               REGIONSPEC _ (LIST 0 0 0 0)))           REGIONSPEC _ (LIST 0 0 0 0])(TEDIT.PAGEFORMAT  [LAMBDA (STREAM FORMAT)                                    (* jds " 9-Jan-86 15:28")                    (* * Programmatic interface for page formatting)    (PROG ((TEXTOBJ (TEXTOBJ STREAM)))          (COND             ([OR (type? PAGEREGION FORMAT)                  (AND (LISTP FORMAT)                       (type? PAGEREGION (CAR FORMAT]                    (* It's in one of the two forms acceptable to the page formatter--either a real           tree of layout info, or a list of first/left/right infos)              (replace TXTPAGEFRAMES of TEXTOBJ with FORMAT)              (replace \DIRTY of TEXTOBJ with T))             ((LISTP FORMAT)                    (* It's likely to be a list acceptable to the parser.          Try it that way.)              (replace TXTPAGEFRAMES of TEXTOBJ with FORMAT)              (replace \DIRTY of TEXTOBJ with T))             (T (\ILLEGAL.ARG FORMAT]))(* ; "Perform page layout, based on a regular expression of typed regions.")(DEFINEQ(TEDIT.FORMAT.HARDCOPY  [LAMBDA (STREAM FILE DONTSEND BREAKPAGETITLE SERVER PRINTOPTIONS IMAGETYPE FIRSTPG#)                                                             (* ; "Edited  2-Jan-87 11:59 by jds")(* ;;; "Format a document for hardcopy")    (RESETLST (PROG ((TEXTOBJ (TEXTOBJ STREAM))                     (FORCENEXTPAGE NIL)                     [FORMATTINGSTATE (create PAGEFORMATTINGSTATE                                             PAGE# _ (COND                                                        ((NUMBERP FIRSTPG#))                                                        (T NIL))                                             FIRSTPAGE _ T                                             STATE _ FIRSTPG#                                             MINPAGE# _ NIL                                             MAXPAGE# _ 65535                                             CHNO _ 1                                             PAGEHEADINGS _ (LIST NIL NIL)                                             PAGE#GENERATOR _ (AND (LISTP FIRSTPG#)                                                                   (CDR FIRSTPG#))                                             PAGE#TEXT _ (AND (LISTP FIRSTPG#)                                                              (CAR FIRSTPG#]                     TEXTLEN THISLINE LINE REGION LINES NCHNO PRSTREAM PAGEFRAMES SCRATCHFILE WASOPEN                      BEFOREFN AFTERFN)                    (SETQ PAGEFRAMES (OR (fetch TXTPAGEFRAMES of TEXTOBJ)                                         TEDIT.PAGE.FRAMES))                    [COND                       ((LISTP PAGEFRAMES)                   (* ;                                                   "If it's a list, pack it into a real set of specs.")                        (SETQ PAGEFRAMES (TEDIT.COMPOUND.PAGEFORMAT (CAR PAGEFRAMES)                                                (CADR PAGEFRAMES)                                                (CADDR PAGEFRAMES]                    (SETQ TEXTLEN (fetch TEXTLEN of TEXTOBJ))                    (SETQ THISLINE (fetch THISLINE of TEXTOBJ))                    (replace PRESSREGION of FORMATTINGSTATE with TEDIT.DEFAULTPAGEREGION)                                                             (* ;                                                              "Print in the usual region on the page")                    [SETQ BREAKPAGETITLE (COND                                            (BREAKPAGETITLE)                                            ((LISTGET PRINTOPTIONS 'DOCUMENT.NAME))                                            ([OR (NOT (fetch TXTFILE of TEXTOBJ))                                                 (type? STRINGP (fetch TXTFILE of TEXTOBJ))                                                 (type? STREAM (fetch FULLNAME                                                                  of (fetch TXTFILE of TEXTOBJ)))                                                 (type? STRINGP (fetch FULLNAME                                                                   of (fetch TXTFILE of TEXTOBJ]                                                             (* ;                         "This isn't a real file, so print a generic name on the document break page.")                                             "TEdit Hardcopy Output")                                            (T               (* ;                                           "It's a real file, so use the file name on the break page.")                                               (fetch FULLNAME of (fetch TXTFILE of TEXTOBJ]                    (SETQ BEFOREFN (TEXTPROP TEXTOBJ 'BEFOREHARDCOPYFN))                    [COND                       (BEFOREFN                             (* ;                                           "Let the guy do any pre-hardcopy processing he wants to do")                              (COND                                 ((EQ 'DON'T (APPLY* BEFOREFN TEXTSTREAM TEXTOBJ))                                                             (* ;                                                      "If it says not to do the hardcopy, then don't.")                                  (RETURN]                    [SETQ SCRATCHFILE (OR FILE (PRINTER.SCRATCH.FILE (TEXTSTREAM STREAM]                    (RESETLST (SETQ AFTERFN (TEXTPROP TEXTOBJ 'AFTERHARDCOPYFN))                           (AND AFTERFN (RESETSAVE NIL (LIST AFTERFN TEXTSTREAM)))                                                             (* ;                                            "Set up to do the user's cleanup on the way out, as well.")                           (TEDIT.PROMPTPRINT TEXTOBJ "Formatting for print..." T)                           [COND                              ((AND FILE (OPENP FILE)                                    (IMAGESTREAMTYPE FILE))  (* ;              "The file he handed us is already an image-type file.  Just append the new stuff to it.")                               (SETQ WASOPEN T)                               (SETQ PRSTREAM FILE))                              (T                             (* ;                                                     "T'wasn't an image stream, so let's open us one.")                                 (RESETSAVE (SETQ PRSTREAM (OPENIMAGESTREAM                                                            SCRATCHFILE                                                            [OR IMAGETYPE                                                                (SETQ IMAGETYPE                                                                 (CAR (PRINTERPROP (PRINTERTYPE                                                                                    SERVER)                                                                             'CANPRINT]                                                            (LIST 'FONT (FONTCREATE 'GACHA 10)                                                                  'BREAKPAGEFILENAME BREAKPAGETITLE))                                             )                                        '(AND RESETSTATE (DELFILE (CLOSEF? OLDVALUE]                                                             (* ;                                                 "So we close and delete the file in case of trouble.")                           (STREAMPROP PRSTREAM 'FORMATTINGSTATE FORMATTINGSTATE)                                                             (* ;                                 "So that subsidiary people can find out the state of the formatting.")                           (DSPRIGHTMARGIN 65535 PRSTREAM)                           (while (ILEQ (fetch CHNO of FORMATTINGSTATE)                                        TEXTLEN)                              do (for REGION inside PAGEFRAMES                                    do (TEDIT.FORMATBOX TEXTOBJ PRSTREAM (fetch CHNO of                                                                                       FORMATTINGSTATE                                                                                )                                              REGION FORMATTINGSTATE IMAGETYPE)))                           [COND                              ((NOT WASOPEN)                 (* ;                                             "Only if we created the image stream should we close it.")                               (SETQ PRSTREAM (CLOSEF PRSTREAM))                               (OR DONTSEND (SEND.FILE.TO.PRINTER PRSTREAM SERVER                                                   (APPEND PRINTOPTIONS (LIST 'DOCUMENT.NAME                                                                               BREAKPAGETITLE]                           (OR FILE (DELFILE SCRATCHFILE)))                    (TEDIT.PROMPTPRINT TEXTOBJ (CONCAT (MKSTRING (fetch (PAGEFORMATTINGSTATE                                                                                PAGECOUNT)                                                                    of FORMATTINGSTATE))                                                      "pg done."])(TEDIT.FORMATBOX  [LAMBDA (TEXTOBJ PRSTREAM CH# REGION FORMATTINGSTATE SERVERTYPE)                                                             (* jds " 3-Apr-86 14:13")                    (* Grab text from the TEXTOBJ, starting with CH#, and use it to fill REGION on           a page. Return a list of line descriptors which, taken together, fill the           region.)    (PROG ((REGIONSPEC (fetch (PAGEREGION REGIONSPEC) of REGION))           (TEXTLEN (fetch TEXTLEN of TEXTOBJ))           CHNO NCHNO LINES SUBREGIONSPEC)          (SELECTQ (fetch REGIONFILLMETHOD of REGION)              (TEXT                     (* A normal text region. Fill it with text formatted the usual way.)                    [COND                       ((\TEDIT.FORMAT.FOUNDBOX? REGION FORMATTINGSTATE)                                                             (* Only format if we're not looking                                                              for something else.)                        (SETQ LINES (TEDIT.FORMATTEXTBOX TEXTOBJ PRSTREAM CH# REGION FORMATTINGSTATE])              (FOLIO                     (* A Page Number. Fill it in according to the instructions)                     [COND                        ((\TEDIT.FORMAT.FOUNDBOX? REGION FORMATTINGSTATE)                                                             (* Only format if we're not looking                                                              for something else.)                         (SETQ LINES (TEDIT.FORMATFOLIO TEXTOBJ PRSTREAM FORMATTINGSTATE REGION])              (HEADING                     (* A Page heading. Fill it in from a text source we saved for the occasion.)                       [COND                          ((\TEDIT.FORMAT.FOUNDBOX? REGION FORMATTINGSTATE)                                                             (* Only format if we're not looking                                                              for something else.)                           (SETQ LINES (TEDIT.FORMATHEADING TEXTOBJ PRSTREAM FORMATTINGSTATE REGION])              (PAGE                     (* This box is really a PAGE FRAME. Fill it in and do whatever other processing           is needful for end of page.)                    (SETQ LINES NIL)                    (* This will send along its own lines to the printer.)                    (\TEDIT.FORMAT.FOUNDBOX? REGION FORMATTINGSTATE)                    (* So that if this is the box he's looking for, we'll spot it and stop           searching)                    (TEDIT.FORMATPAGE TEXTOBJ PRSTREAM CH# REGION FORMATTINGSTATE))              ((RECURSIVE SEQUENCE ALTERNATE SELECTION REPEAT)                     (* This box is really a list of boxes. Fill them.)                   (\TEDIT.FORMAT.FOUNDBOX? REGION FORMATTINGSTATE)                    (* So that if this is the box he's looking for, we'll spot it and stop           searching)                   (SELECTQ (fetch REGIONFILLMETHOD of REGION)                       ((SEQUENCE RECURSIVE)                 (* Just run thru filling in the                                                              sub-boxes in order.)                            (bind SUBREGIONSPEC for SUBREGION in (fetch (PAGEREGION REGIONSUBBOXES)                                                                    of REGION)                               while (ILEQ (fetch (PAGEFORMATTINGSTATE CHNO) of FORMATTINGSTATE)                                           TEXTLEN)                               do [SETQ SUBREGIONSPEC (create REGION                                                         using (fetch REGIONSPEC of SUBREGION)                                                               LEFT _                                                               (IPLUS (fetch LEFT                                                                         of (fetch REGIONSPEC                                                                               of SUBREGION))                                                                      (fetch LEFT of REGIONSPEC))                                                               BOTTOM _                                                               (IPLUS (fetch BOTTOM                                                                         of (fetch REGIONSPEC                                                                               of SUBREGION))                                                                      (fetch BOTTOM of REGIONSPEC]                                  (TEDIT.FORMATBOX TEXTOBJ PRSTREAM (fetch (PAGEFORMATTINGSTATE                                                                            CHNO) of FORMATTINGSTATE)                                         (create PAGEREGION using SUBREGION REGIONSPEC _                                                                   SUBREGIONSPEC)                                         FORMATTINGSTATE)))                       (ALTERNATE                            (* Run through the sub-boxes                                                              repeatedly in sequence.)                                  (while (ILEQ (fetch (PAGEFORMATTINGSTATE CHNO) of FORMATTINGSTATE)                                               TEXTLEN)                                     do (bind SUBREGIONSPEC for SUBREGION                                           in (fetch (PAGEREGION REGIONSUBBOXES) of REGION)                                           while (ILEQ (fetch (PAGEFORMATTINGSTATE CHNO) of                                                                                       FORMATTINGSTATE                                                              )                                                       TEXTLEN)                                           do [SETQ SUBREGIONSPEC                                               (create REGION                                                  using (fetch REGIONSPEC of SUBREGION)                                                        LEFT _ (IPLUS (fetch LEFT                                                                         of (fetch REGIONSPEC                                                                               of SUBREGION))                                                                      (fetch LEFT of REGIONSPEC))                                                        BOTTOM _ (IPLUS (fetch BOTTOM                                                                           of (fetch REGIONSPEC                                                                                 of SUBREGION))                                                                        (fetch BOTTOM of REGIONSPEC]                                              (TEDIT.FORMATBOX TEXTOBJ PRSTREAM (fetch (                                                                                  PAGEFORMATTINGSTATE                                                                                        CHNO)                                                                                   of FORMATTINGSTATE                                                                                       )                                                     (create PAGEREGION using SUBREGION REGIONSPEC _                                                                               SUBREGIONSPEC)                                                     FORMATTINGSTATE))))                       (SELECTION                            (* Do one or another box, depending on                                                              some criterion.))                       (SHOULDNT))                           (* For now, draw a box around it, too.)                   )              NIL)          (for LINE in LINES when LINE do                    (* Run thru the lines displaying them                                                              all.)                                          (BLOCK)                                          (COND                                             ((OR (NOT (fetch (PAGEFORMATTINGSTATE MINPAGE#)                                                          of FORMATTINGSTATE))                                                  (IGEQ (fetch (PAGEFORMATTINGSTATE PAGE#)                                                           of FORMATTINGSTATE)                                                        (fetch (PAGEFORMATTINGSTATE MINPAGE#)                                                           of FORMATTINGSTATE)))                    (* We're beyond the min page number -- go ahead and print the line)                                              (\TEDIT.HARDCOPY.DISPLAYLINE (fetch (TEXTSTREAM TEXTOBJ                                                                                         )                                                                              of (fetch LTEXTOBJ                                                                                    of LINE))                                                     LINE                                                     (fetch CACHE of LINE)                                                     REGION PRSTREAM)))                                          [COND                                             ((EQ TEXTOBJ (fetch (TEXTSTREAM TEXTOBJ)                                                             of (fetch LTEXTOBJ of LINE)))                    (* This line refers back to the main text, so update the current-char pointer.)                                              (SETQ CHNO (ADD1 (fetch CHARLIM of LINE]                                          (push (fetch (PAGEFORMATTINGSTATE PAGELINECACHE)                                                   of FORMATTINGSTATE)                                                LINE)                                          (replace LTEXTOBJ of LINE with NIL))          (COND             (CHNO (replace (PAGEFORMATTINGSTATE CHNO) of FORMATTINGSTATE with CHNO])(TEDIT.FORMATHEADING  [LAMBDA (TEXTOBJ PRSTREAM FORMATTINGSTATE PAGEREGION)      (* jds " 1-Mar-85 15:31")                    (* Grab text from the TEXTOBJ, starting with CH#, and use it to fill REGION on           a page. Return a list of line descriptors which, taken together, fill the           region.)    (PROG ((CHNO 1)           [REGION (for VALUE in (fetch (PAGEREGION REGIONSPEC) of PAGEREGION)                      collect (FIXR (FTIMES (DSPSCALE NIL PRSTREAM)                                           VALUE]           (LOCALINFO (fetch (PAGEREGION REGIONLOCALINFO) of PAGEREGION))           HEADINGSTREAM HEADINGTEXTOBJ PRECONDITIONS TEXTLEN THISLINE LINE YBOT (FORCENEXTPAGE                                                                                  NIL)           LINES HEADING)          [COND             ((SETQ PRECONDITIONS (LISTGET LOCALINFO 'PRECONDITIONS))                    (* There are preconditions for this heading to appear.          Check them.)              (COND                 ((for FORM inside PRECONDITIONS thereis (NOT (EVAL FORM)))                    (* One of the predicates returned NIL, so don't display this heading.)                  (RETURN]          (COND             ([NOT (SETQ HEADING (LISTGET (fetch PAGEHEADINGS of FORMATTINGSTATE)                                        (LISTGET LOCALINFO 'HEADINGTYPE]                                                             (* There's no text for this heading.                                                             Punt.)              (RETURN)))          [SETQ HEADINGTEXTOBJ (fetch (TEXTSTREAM TEXTOBJ) of (SETQ HEADINGSTREAM                                                               (OPENTEXTSTREAM                                                                "" NIL NIL NIL                                                                (LIST 'PARALOOKS (fetch PPARALOOKS                                                                                    of (CAR HEADING]          (\TEDIT.INSERT.PIECES HEADINGTEXTOBJ 1 HEADING)          (for PC in HEADING do (add (fetch TEXTLEN of HEADINGTEXTOBJ)                                     (fetch PLEN of PC)))          (SETQ TEXTLEN (fetch TEXTLEN of HEADINGTEXTOBJ))          (SETQ LINES (while (AND (ILESSP CHNO TEXTLEN)                                  (NOT FORCENEXTPAGE))                         collect (SETQ THISLINE (create THISLINE))                               (SETQ FORCENEXTPAGE (\TEDIT.HARDCOPY.FORMATLINE HEADINGTEXTOBJ                                                          (fetch WIDTH of REGION)                                                          CHNO THISLINE (SETQ LINE (create                                                                                        LINEDESCRIPTOR                                                                                          ))                                                          PRSTREAM T))                               (replace CACHE of LINE with THISLINE)                                                              (* Mark this line as having cached                                                              print info.)                               (replace LTEXTOBJ of LINE with HEADINGSTREAM)                                                              (* And remember the document it came                                                              from.)                               (add (fetch LEFTMARGIN of LINE)                                    (fetch LEFT of REGION))  (* Format the next possible line)                               [COND                                  [YBOT                      (* We're into it; take account of this                                                              line's height)                                        (SETQ YBOT (IDIFFERENCE YBOT (fetch LHEIGHT of LINE]                                  (T                     (* Just starting out; find the line's position with respect to the top of the           region to be filled.)                                     (SETQ YBOT (IDIFFERENCE (fetch BOTTOM of REGION)                                                       (fetch DESCENT of LINE]                                                              (* This line is good;                                                             use it.)                               (replace YBOT of LINE with YBOT)                               (replace YBASE of LINE with (IPLUS YBOT (fetch DESCENT of LINE)))                               (SETQ CHNO (ADD1 (fetch CHARLIM of LINE)))                                                              (* Keep track of the next character...)                               LINE))          (RETURN LINES])(TEDIT.FORMATPAGE  [LAMBDA (TEXTOBJ PRSTREAM CH# REGION FORMATTINGSTATE)      (* ; "Edited  2-Jan-87 12:14 by jds")                    (* ;; "Format a whole page -- run thru the page's sub-boxes filling them in by type:")                    (* ;; "   FOLIO -- page number")                    (* ;; "   PAGEHEADING -- running heads/footers")                    (* ;; "   TEXT -- plain running text.")    (PROG ((FORCENEXTPAGE NIL)           (CHNO CH#)           (PAGE# (fetch (PAGEFORMATTINGSTATE PAGE#) of FORMATTINGSTATE))           (PAGEPROPS (fetch (PAGEREGION REGIONLOCALINFO) of REGION))           (PAGEREGION (\TEDIT.SCALEREGION (fetch (PAGEREGION REGIONSPEC) of REGION)                              (DSPSCALE NIL PRSTREAM)))           TEXTLEN THISLINE LINE LINES NCHNO TPAGE)          (SETQ TEXTLEN (fetch TEXTLEN of TEXTOBJ))          (SETQ THISLINE (fetch THISLINE of TEXTOBJ))        (* ;                                                              "Print in the usual region on the page")          (COND             (PAGE#                                          (* ;                                  "IF we've already got a starting page number, don't set another one")                    )             ((SETQ TPAGE (LISTGET PAGEPROPS 'STARTINGPAGE#))(* ;                                     "If this page template specifies a starting page number, use it.")              (SETQ PAGE# TPAGE)              (replace (PAGEFORMATTINGSTATE PAGE#) of FORMATTINGSTATE with TPAGE))             (T (SETQ PAGE# 1)                (replace (PAGEFORMATTINGSTATE PAGE#) of FORMATTINGSTATE with PAGE#)))          (COND             ((LISTGET PAGEPROPS 'LANDSCAPE?)                (* ; "This is a landscape page.")              (DSPPUSHSTATE PRSTREAM)              (DSPROTATE 90 PRSTREAM)              (DSPTRANSLATE 0 -21590 PRSTREAM)))          (DSPCLIPPINGREGION PAGEREGION PRSTREAM)            (* ;                                                "Set the clipping region to the whole sheet of paper.")          [while [AND (ILEQ CHNO TEXTLEN)                      (EQ 'PAGEHEADING (fetch FMTPARATYPE of (fetch PPARALOOKS                                                                of (\CHTOPC CHNO                                                                          (fetch PCTB of TEXTOBJ]             do                                              (* ;                                                 "Go thru any leading page heading paras on the page.")                (\TEDIT.HARDCOPY.FORMATLINE TEXTOBJ 1 CHNO THISLINE (SETQ LINE (create LINEDESCRIPTOR                                                                                      ))                       PRSTREAM)                (SETQ CHNO (ADD1 (fetch CHARLIM of LINE]          (replace (PAGEFORMATTINGSTATE CHNO) of FORMATTINGSTATE with CHNO)          (for SUBREGION in (fetch (PAGEREGION REGIONSUBBOXES) of REGION)             while (ILEQ (fetch (PAGEFORMATTINGSTATE CHNO) of FORMATTINGSTATE)                         TEXTLEN) do                         (* ;                                                              "Now format the subregions of the page.")                                     (TEDIT.FORMATBOX TEXTOBJ PRSTREAM (fetch (PAGEFORMATTINGSTATE                                                                               CHNO) of                                                                                       FORMATTINGSTATE                                                                              )                                            SUBREGION FORMATTINGSTATE))          (COND             ((LISTGET PAGEPROPS 'LANDSCAPE?)                (* ; "This is a landscape page.")              (DSPPOPSTATE PRSTREAM)))          (COND             ((AND (OR (NOT (fetch (PAGEFORMATTINGSTATE MINPAGE#) of FORMATTINGSTATE))                       (IGEQ PAGE# (fetch (PAGEFORMATTINGSTATE MINPAGE#) of FORMATTINGSTATE)))                   (OR (NOT (fetch (PAGEFORMATTINGSTATE MAXPAGE#) of FORMATTINGSTATE))                       (ILESSP PAGE# (fetch (PAGEFORMATTINGSTATE MAXPAGE#) of FORMATTINGSTATE)))                   (ILEQ (fetch (PAGEFORMATTINGSTATE CHNO) of FORMATTINGSTATE)                         TEXTLEN))                           (* ; "There is more to print....")              (DSPNEWPAGE PRSTREAM)                          (* ; "Force the new page")              )             ((AND (fetch (PAGEFORMATTINGSTATE MAXPAGE#) of FORMATTINGSTATE)                   (IGEQ PAGE# (fetch (PAGEFORMATTINGSTATE MAXPAGE#) of FORMATTINGSTATE)))                                                             (* ;                                   "We've run past the last page it wants formatted.  Stop the world.")              (replace (PAGEFORMATTINGSTATE CHNO) of FORMATTINGSTATE with TEXTLEN)))          (add (fetch (PAGEFORMATTINGSTATE PAGE#) of FORMATTINGSTATE)               1)          (add (fetch (PAGEFORMATTINGSTATE PAGECOUNT) of FORMATTINGSTATE)               1)          (replace (PAGEFORMATTINGSTATE FIRSTPAGE) of FORMATTINGSTATE with NIL)          (replace (PAGEFORMATTINGSTATE PAGE#TEXT) of FORMATTINGSTATE             with (pop (fetch (PAGEFORMATTINGSTATE PAGE#GENERATOR) of FORMATTINGSTATE])(TEDIT.FORMATTEXTBOX  [LAMBDA (TEXTOBJ PRSTREAM CH# PAGEREGION FORMATTINGSTATE)  (* jds "15-Apr-86 11:31")                    (* Grab text from the TEXTOBJ, starting with CH#, and use it to fill REGION on           a page. Return a list of line descriptors which, taken together, fill the           region.)    (PROG* ((CHNO CH#)            [REGION (for VALUE in (fetch (PAGEREGION REGIONSPEC) of PAGEREGION)                       collect (FIXR (FTIMES (DSPSCALE NIL PRSTREAM)                                            VALUE]            (COLUMNBOTTOM (fetch BOTTOM of REGION))            (FIRSTLINE T)            (BREAKAFTERLASTPARA NIL)            (STREAMSCALE (DSPSCALE NIL PRSTREAM))            (FORCENEXTPAGE NIL)            (FOOTNOTELINES NIL)            (PAGEFOOTNOTES NIL)            TEXTLEN THISLINE LINE YBOT LINES ORPHAN LASTLINE PREVLINE LHEIGHT FMTSPEC SPECIALYPOS             NEWPAGETYPE)           (SETQ TEXTLEN (fetch TEXTLEN of TEXTOBJ))           (SETQ FOOTNOTELINES (fetch PAGEFOOTNOTELINES of FORMATTINGSTATE))                                                             (* Account for lines carried over from                                                              prior columns)           [while (AND (ILEQ COLUMNBOTTOM (fetch (REGION TOP) of REGION))                       (SETQ LINE (pop FOOTNOTELINES))) do                     (* Move as many potential footnote lines into this column as will fit.)                                                           (add COLUMNBOTTOM (fetch LHEIGHT                                                                                of LINE))                     (* And move the bottom of the column up to account for them)                                                           (COND                                                              ((IGREATERP COLUMNBOTTOM                                                                      (fetch (REGION TOP)                                                                         of REGION))                    (* If we ran out of room for footnotes, put this line back on the queue)                                                               (push FOOTNOTELINES LINE))                                                              (T (SETQ PAGEFOOTNOTES (NCONC1                                                                                         PAGEFOOTNOTES                                                                                             LINE]           (replace PAGEFOOTNOTELINES of FORMATTINGSTATE with FOOTNOTELINES)                                                             (* Remember any remaining footnotes)           [SETQ LINES            (while (AND (ILEQ CHNO TEXTLEN)                        (NOT FORCENEXTPAGE))               collect (SETQ LINE (OR (pop (fetch (PAGEFORMATTINGSTATE PAGELINECACHE) of                                                                                       FORMATTINGSTATE                                                  ))                                      (create LINEDESCRIPTOR)))                     (* Grab a line descriptor from the recycling list, or create a new one.)                     (SETQ THISLINE (OR (fetch (LINEDESCRIPTOR CACHE) of LINE)                                        (create THISLINE)))                     (* And a recycled or new THISLINE cache for char widths &c)                     (BLOCK)                                 (* Allow other things to happen while                                                              we format....)                     (SETQ FORCENEXTPAGE (\TEDIT.HARDCOPY.FORMATLINE TEXTOBJ (fetch (REGION WIDTH)                                                                                of REGION)                                                CHNO THISLINE LINE PRSTREAM))                                                              (* Format the line, noting any                                                              form-feeds)                     (COND                        ((fetch LMARK of LINE)                    (* This line is a placeholder for a page heading.          All it tells us is what character to skip to so we can continue.)                         (SETQ CHNO (ADD1 (fetch CHARLIM of LINE)))                         NIL)                        [(LISTGET (fetch FMTUSERINFO of (fetch LFMTSPEC of LINE))                                'FOOTNOTE)                   (* This paragraph is a footnote para.)                         (SETQ FOOTNOTELINES (\TEDIT.FORMAT.FOOTNOTE TEXTOBJ LINE))                                                             (* Grab the lines of this footnote)                         (for LINE in FOOTNOTELINES as CL:REST on FOOTNOTELINES                            do (add COLUMNBOTTOM (fetch LHEIGHT of LINE))                               (COND                                  ((IGREATERP COLUMNBOTTOM (OR YBOT (fetch (REGION TOP) of REGION)))                                   (replace PAGEFOOTNOTELINES of FORMATTINGSTATE                                      with (APPEND (fetch PAGEFOOTNOTELINES of FORMATTINGSTATE)                                                  CL:REST]                        (T                     (* This line must not represent a special item, e.g.          a page heading. If it does, ignore it.)                           (replace CACHE of LINE with THISLINE)                                                             (* Mark this line as having cached                                                              print info.)                           (replace LTEXTOBJ of LINE with (fetch STREAMHINT of TEXTOBJ))                                                             (* And remember the document it came                                                              from.)                           (SETQ FMTSPEC (fetch LFMTSPEC of LINE))                           (add (fetch LEFTMARGIN of LINE)                                (OR (AND (fetch FMTSPECIALX of FMTSPEC)                                         (NOT (ZEROP (fetch FMTSPECIALX of FMTSPEC)))                                         (fetch FMTSPECIALX of (fetch LFMTSPEC of LINE)))                                    (fetch LEFT of REGION))) (* Format the next possible line)                           (SETQ SPECIALYPOS NIL)                    (* So that only the first line of a specially-placed paragraph is guaranteed to           appear in the current box.)                           [COND                              [(AND (fetch FMTSPECIALY of FMTSPEC)                                    (NOT (ZEROP (fetch FMTSPECIALY of FMTSPEC)))                                    (fetch 1STLN of LINE))                    (* There is a special Y location for this paragraph.          Move there)                               (SETQ SPECIALYPOS (SETQ YBOT (fetch FMTSPECIALY of FMTSPEC]                              [YBOT                          (* We're into it; take account of this                                                              line's height)                                    (COND                                       ((fetch FMTBASETOBASE of FMTSPEC)                                        [SETQ LHEIGHT                                         (IPLUS (fetch DESCENT of LINE)                                                (fetch FMTBASETOBASE of FMTSPEC)                                                (COND                                                   ((fetch 1STLN of LINE)                                                    (IPLUS (OR (fetch LEADBEFORE of FMTSPEC)                                                               0)                                                           (OR (fetch LEADAFTER                                                                  of (fetch LFMTSPEC of PREVLINE))                                                               0)))                                                   (T 0]                                        (SETQ YBOT (IDIFFERENCE (fetch YBASE of PREVLINE)                                                          LHEIGHT)))                                       (T (SETQ YBOT (IDIFFERENCE YBOT (fetch LHEIGHT of LINE]                              (T                     (* Just starting out; find the line's position with respect to the top of the           region to be filled.)                                 (SETQ YBOT (IDIFFERENCE (fetch (REGION TOP) of REGION)                                                   (IPLUS (fetch LTRUEASCENT of LINE)                                                          (fetch DESCENT of LINE]                           (COND                              ((AND (ILESSP YBOT COLUMNBOTTOM)                                    (NOT SPECIALYPOS))       (* This line hangs off the bottom;                                                             (and isn't the first line of a                                                              specially-placed paragraph) punt it.)                               (SETQ FORCENEXTPAGE T)                               (SETQ ORPHAN LINE)            (* Remember this potential orphan)                               NIL)                              ((AND (NOT FIRSTLINE)                                    (fetch 1STLN of LINE)                                    (SETQ NEWPAGETYPE (OR (fetch FMTNEWPAGEBEFORE                                                             of (fetch LFMTSPEC of LINE))                                                          BREAKAFTERLASTPARA)))                    (* We're supposed to put this line at the start of a new page/column          (any box, later))                               (SETQ FORCENEXTPAGE 'USERBREAK)                               (SETQ ORPHAN NIL)                               (COND                                  ((NEQ NEWPAGETYPE T)                    (* This isn't simply go to a new box; we need to set up the search for it.)                                   (replace (PAGEFORMATTINGSTATE STATE) of FORMATTINGSTATE                                      with 'SEARCHING)                                   (replace (PAGEFORMATTINGSTATE REQUIREDREGIONTYPE) of                                                                                       FORMATTINGSTATE                                      with NEWPAGETYPE)))                               NIL)                              (T                             (* This line is good;                                                             use it.)                                 (COND                                    ((AND (fetch FMTNEWPAGEAFTER of (fetch LFMTSPEC of LINE)))                    (* We're supposed to put this line at the start of a new page/column          (any box, later))                                     (SETQ BREAKAFTERLASTPARA T)))                                 (replace YBOT of LINE with YBOT)                                 (replace YBASE of LINE with (IPLUS YBOT (fetch DESCENT of LINE)))                                 (SETQ FIRSTLINE NIL)                    (* Note that we have put text out on this page/column/box, for first line           checking.)                                 (SETQ CHNO (ADD1 (fetch CHARLIM of LINE)))                                                             (* Keep track of the next character...)                                 (SETQ PREVLINE LINE)                                 LINE]           (SETQ LINES (DREMOVE NIL LINES))                    (* Remove any NILs from the line list; they're artifacts of running across page           headings in-stream)           [COND              (LINES                     (* Only worry about widows and orphans if there are really lines to worry about)                     (SETQ LASTLINE (CAR (FLAST LINES)))     (* Find the last line in this box                                                             (column or page))                     [COND                        ((AND ORPHAN (fetch LSTLN of ORPHAN)                              (NOT (fetch 1STLN of ORPHAN)))                    (* There was an overhanging line, and it was the last line of the paragraph.          Remove the penultimate line.)                         (DREMOVE LASTLINE LINES)                         (SETQ LASTLINE (CAR (FLAST LINES]                     [COND                        ((AND LASTLINE (fetch 1STLN of LASTLINE)                              (NOT (fetch LSTLN of LASTLINE))                              (ILESSP (fetch CHARLIM of LASTLINE)                                     TEXTLEN))                    (* The last line on the page is a widow.          Remove it, too.)                         (DREMOVE LASTLINE LINES)                         (SETQ LASTLINE (CAR (FLAST LINES]                     (COND                        ((AND (NEQ FORCENEXTPAGE 'USERBREAK)                              (ILEQ CHNO TEXTLEN))                    (* Only do widow/orphan detection if this is NOT a page break the user asked           for. And this isn't the end of the document.)                         (for LASTLINE in (REVERSE LINES) while (fetch FMTHEADINGKEEP                                                                   of (fetch LFMTSPEC of LASTLINE))                            do                     (* Run thru, removing any trailing headings.          However, assure that there's at least one line on a page.) finally (COND            [[AND LASTLINE (NOT (fetch FMTHEADINGKEEP of (fetch LFMTSPEC of LASTLINE]                    (* OK we found a line that DOESN'T need to be kept with the other paragraphs.          Chop off the list starting AFTER it.)             (SETQ LINES (LDIFF LINES (CDR (MEMB LASTLINE LINES]            (T (TEDIT.PROMPTPRINT TEXTOBJ (CONCAT "WARNING:  Page full of headings on page "                                                 (fetch (PAGEFORMATTINGSTATE PAGE#) of                                                                                       FORMATTINGSTATE                                                        ]           (RETURN (COND                      (LINES)                      (ORPHAN                     (* If there's only one line left for this box, return it anyhow.)                             (LIST ORPHAN])(TEDIT.FORMATFOLIO  [LAMBDA (TEXTOBJ PRSTREAM FORMATTINGSTATE REGIONSPEC)      (* ; "Edited 30-Dec-86 20:12 by jds")                    (* ;; "Print a page number (called a %"folio%" in the biz) at the location and with the alignment specified in the REGIONSPEC.")    (PROG ([REGION (for VALUE in (fetch (PAGEREGION REGIONSPEC) of REGIONSPEC)                      collect (FIXR (FTIMES (DSPSCALE NIL PRSTREAM)                                           VALUE]           (FOLIOINFO (fetch (PAGEREGION REGIONLOCALINFO) of REGIONSPEC))           (FORCENEXTPAGE NIL)           (CHNO 1)           FOLIOTEXTOBJ FOLIOSTREAM TEXTLEN THISLINE LINE YBOT PARALOOKS CHARLOOKS NOFIRSTPAGE PAGE#            FOLIOFORMAT PRETEXT POSTTEXT INFOLIST)          (SETQ PARALOOKS (LISTGET FOLIOINFO 'PARALOOKS))          (SETQ CHARLOOKS (OR (LISTGET FOLIOINFO 'CHARLOOKS)                              TEDIT.DEFAULT.FOLIO.LOOKS))          (SETQ NOFIRSTPAGE (LISTGET FOLIOINFO 'NOFIRSTPAGE))          (SETQ INFOLIST (LISTGET FOLIOINFO 'FORMATINFO))    (* ;                                                              "A LIST OF (FORMAT PRETEXT POSTTEXT)")          (SETQ FOLIOFORMAT (CAR INFOLIST))          (SETQ PRETEXT (CADR INFOLIST))          (SETQ POSTTEXT (CADDR INFOLIST))          [SETQ PAGE# (COND                         ((fetch (PAGEFORMATTINGSTATE PAGE#TEXT) of FORMATTINGSTATE)                          (MKSTRING (fetch (PAGEFORMATTINGSTATE PAGE#TEXT) of FORMATTINGSTATE)))                         (T (SELECTQ FOLIOFORMAT                                (LOWERROMAN (ROMANNUMERALS (fetch (PAGEFORMATTINGSTATE PAGE#)                                                              of FORMATTINGSTATE)))                                (UPPERROMAN (ROMANNUMERALS (fetch (PAGEFORMATTINGSTATE PAGE#)                                                              of FORMATTINGSTATE)                                                   T))                                (MKSTRING (fetch (PAGEFORMATTINGSTATE PAGE#) of FORMATTINGSTATE]          [COND             (PRETEXT (SETQ PAGE# (CONCAT PRETEXT PAGE#]          [COND             (POSTTEXT (SETQ PAGE# (CONCAT PAGE# POSTTEXT]          [SETQ FOLIOTEXTOBJ (TEXTOBJ (SETQ FOLIOSTREAM (OPENTEXTSTREAM PAGE# NIL NIL NIL                                                               (LIST 'PARALOOKS PARALOOKS                                                                     'LOOKS CHARLOOKS]          (SETQ TEXTLEN (fetch TEXTLEN of FOLIOTEXTOBJ))          (COND             ((OR (NOT (fetch (PAGEFORMATTINGSTATE FIRSTPAGE) of FORMATTINGSTATE))                  (NOT NOFIRSTPAGE))                         (* ;        "If this isn't the first page, OR we want a page # on the first page, go ahead and format it.")              (RETURN (while (AND (ILEQ CHNO TEXTLEN)                                  (NOT FORCENEXTPAGE))                         collect (SETQ THISLINE (create THISLINE))                               (SETQ FORCENEXTPAGE (\TEDIT.HARDCOPY.FORMATLINE FOLIOTEXTOBJ                                                          (fetch WIDTH of REGION)                                                          CHNO THISLINE (SETQ LINE (create                                                                                        LINEDESCRIPTOR                                                                                          ))                                                          PRSTREAM))                               (replace CACHE of LINE with THISLINE)                               (replace LTEXTOBJ of LINE with FOLIOSTREAM)                               (add (fetch LEFTMARGIN of LINE)                                    (fetch LEFT of REGION))  (* ; "Format the next possible line")                               (SETQ CHNO (ADD1 (fetch CHARLIM of LINE)))                                                              (* ;                                                              "Keep track of the next character...")                               [COND                                  [YBOT                      (* ;                                                  "We're into it;  take account of this line's height")                                        (SETQ YBOT (IDIFFERENCE YBOT (fetch LHEIGHT of LINE]                                  (T                         (* ;    "Just starting out;  find the line's position with respect to the top of the region to be filled.")                                     (SETQ YBOT (fetch BOTTOM of REGION]                               (COND                                  ((ILESSP YBOT (fetch BOTTOM of REGION))                                                             (* ;                                                           "This line hangs off the bottom;  punt it.")                                   NIL)                                  (T                         (* ; "This line is good;  use it.")                                     (replace YBOT of LINE with YBOT)                                     (replace YBASE of LINE with (IPLUS YBOT (fetch DESCENT                                                                                of LINE)))                                     LINE])(\TEDIT.FORMAT.FOUNDBOX?  [LAMBDA (PAGEREGION FORMATTINGSTATE)                       (* jds " 3-Apr-86 14:29")                    (* * Return T if we're either not looking to begin in a new box, or we are and           we've found it.)                    (* * This is part of generalizing the "go to a new page" code to allow going to           an arbitrary new formatting box.)    (SELECTQ (fetch (PAGEFORMATTINGSTATE STATE) of FORMATTINGSTATE)        (FORMATTING                                          (* we're just munching along                                                              formatting. Keep going.)                    T)        (SEARCHING                     (* We're searching for a page box of the right type.          Decide if this is it or not.)                   (COND                      ((EQ (fetch (PAGEFORMATTINGSTATE REQUIREDREGIONTYPE) of FORMATTINGSTATE)                           (fetch (PAGEREGION REGIONTYPE) of PAGEREGION))                    (* What we're looking for matches what we've got.          Turn off the search and return T)                       (replace (PAGEFORMATTINGSTATE STATE) of FORMATTINGSTATE with 'FORMATTING)                       T)))        T]))(* ; "Aux function to capture page headings during line formatting.")(DEFINEQ(TEDIT.HARDCOPY.PAGEHEADING  [LAMBDA (TEXTOBJ TEXTSTREAM LINE PARALOOKS CHNO IMAGESTREAM)                                                             (* jds "14-Jan-85 11:22")                    (* Capture the text for this page heading.          Then set LINE%:CHARLIM so it will move the document ahead to the next real           text.)    (PROG ((PC (fetch (TEXTSTREAM PIECE) of TEXTSTREAM))           (LEN 0)           (FORMATTINGSTATE (STREAMPROP IMAGESTREAM 'FORMATTINGSTATE))           (HEADINGTYPE (fetch FMTPARASUBTYPE of PARALOOKS))           NPC PIECES)          (SETQ NPC PC)          (SETQ PIECES (repeatuntil [OR (NOT PC)                                        (AND (fetch PPARALAST of PC)                                             (OR (NOT NPC)                                                 (NEQ (fetch FMTPARATYPE of (fetch PPARALOOKS                                                                               of NPC))                                                      'PAGEHEADING)                                                 (NEQ HEADINGTYPE (fetch FMTPARASUBTYPE                                                                     of (fetch PPARALOOKS                                                                           of NPC]                          collect                            (* GRAB THE PIECES FOR THIS HEADING.)                                (SETQ PC NPC)                                (add LEN (fetch PLEN of PC))                                (SETQ NPC (fetch NEXTPIECE of PC))                                (\TEDIT.COPYTEXTSTREAM.PIECEMAPFN PC TEXTOBJ TEXTOBJ TEXTOBJ)))          (replace LMARK of LINE with T)          (replace CHARLIM of LINE with (SUB1 (IPLUS CHNO LEN)))                    (* Set the line's CHARLIM to be the last character in the page heading.)          (LISTPUT (fetch PAGEHEADINGS of FORMATTINGSTATE)                 (fetch FMTPARASUBTYPE of PARALOOKS)                 PIECES]))(* ; "Handle varying paper sizes")(DEFINEQ(SCALEPAGEUNITS  [LAMBDA (VALUE FACTOR PAPERSIZE)                           (* jds "14-Jun-85 15:34")                    (* Scale a page-relative value into points%: Scale VALUE by FACTOR, then allow           for negative values to mean "come in from the other side by that much")    (AND VALUE (PROG [(TVAL (FIXR (FTIMES VALUE FACTOR)))                      (OTHEREDGE (SELECTQ PAPERSIZE                                     ((NIL LETTER)                                           612)                                     (LEGAL 612)                                     (fetch (TEDITPAPERSIZE TPSWIDTH) of (ASSOC PAPERSIZE                                                                                 TEDIT.PAPER.SIZES]                     [COND                        ((ILESSP TVAL 0)                    (* He specified this value as an offset from the opposite edge.          Convert it.)                         (SETQ TVAL (IPLUS OTHEREDGE TVAL]                     (RETURN TVAL])(SCALEPAGEXUNITS  [LAMBDA (VALUE FACTOR PAPERSIZE)                           (* jds "14-Jun-85 16:42")                    (* Scale a page-relative value into points%: Scale VALUE by FACTOR, then allow           for negative values to mean "come in from the other side by that much")    (AND VALUE (PROG ((TVAL (FIXR (FTIMES VALUE FACTOR)))                      OTHEREDGE)                     [COND                        ((ILESSP TVAL 0)                    (* He specified this value as an offset from the opposite edge.          Convert it.)                         (SETQ OTHEREDGE (\TEDIT.PAPERWIDTH PAPERSIZE))                         (SETQ TVAL (IPLUS OTHEREDGE TVAL]                     (RETURN TVAL])(SCALEPAGEYUNITS  [LAMBDA (VALUE FACTOR PAPERSIZE)                           (* jds "14-Jun-85 16:43")                    (* Scale a page-relative value into points%: Scale VALUE by FACTOR, then allow           for negative values to mean "come in from the other side by that much")    (AND VALUE (PROG ((TVAL (FIXR (FTIMES VALUE FACTOR)))                      OTHEREDGE)                     [COND                        ((ILESSP TVAL 0)                    (* He specified this value as an offset from the opposite edge.          Convert it.)                         (SETQ OTHEREDGE (\TEDIT.PAPERHEIGHT PAPERSIZE))                         (SETQ TVAL (IPLUS OTHEREDGE TVAL]                     (RETURN TVAL])(\TEDIT.PAPERHEIGHT  [LAMBDA (PAPERSIZE LANDSCAPE?)                             (* ; "Edited 29-Dec-86 15:06 by jds")(* ;;; "Compute the HEIGHT of a sheet of paper, according to PAPERSIZE, in points.")    (COND       (LANDSCAPE?                                           (* ;                  "The paper is landscape, so its height is the WIDTH of the same paper size, normal.")              (\TEDIT.PAPERWIDTH PAPERSIZE NIL))       (T                                                    (* ;                                                            "Not landscape, so look up the size spec:")          (SELECTQ PAPERSIZE              ((NIL LETTER Letter)                    792)              ((Legal |8.5x14| LEGAL)                    1008)              ((A4 a4)                    842)              (fetch (TEDITPAPERSIZE TPSHEIGHT) of (ASSOC PAPERSIZE TEDIT.PAPER.SIZES])(\TEDIT.PAPERWIDTH  [LAMBDA (PAPERSIZE LANDSCAPE?)                             (* ; "Edited 29-Dec-86 13:59 by jds")(* ;;; "Compute the WIDTH of a sheet of paper, according to PAPERSIZE and LANDSCAPE?")    (COND       (LANDSCAPE?                                           (* ;                      "It's landscape paper, so look at the HEIGHT of the corresponding normal paper.")              (\TEDIT.PAPERHEIGHT PAPERSIZE NIL))       (T                                                    (* ;                                                            "Not landscape, so look up the size spec:")          (SELECTQ PAPERSIZE              ((NIL Letter LETTER |8.5x11|)                  (* ; "letter size paper, 8.5inx11in")                   612)              ((Legal LEGAL |8.5x14|)                    612)              ((A4 a4)                                       (* ; "A4 ISO-size paper, 210mmx297mm")                   595)              ((LETTERLANDSCAPE |11X8.5| 11X8®)                    792)              ((LEGALLANDSCAPE |14X8.5| 14X8®)                    1008)              (fetch (TEDITPAPERSIZE TPSWIDTH) of (ASSOC PAPERSIZE TEDIT.PAPER.SIZES]))(DECLARE%: DOEVAL@COMPILE DONTCOPY(GLOBALVARS TEDIT.PAPER.SIZES))(RPAQQ TEDIT.PAPER.SIZES ((A0 2384 3370)                          (A1 1684 2384)                          (A2 1191 1684)                          (A3 842 1191)                          (A4 595 842)                          (A5 420 595)                          (B0 2835 4008)                          (B1 2004 2835)                          (B2 1417 2004)                          (B3 1001 1417)                          (B4 709 1001)                          (B5 499 709)))(* ; "Page numbering option support")(DEFINEQ(ROMANNUMERALS  [LAMBDA (NUMBER UCFLG)                                     (* jds "12-Jul-85 13:19")                    (* * Take a NUMBER, and render it as a string of roman numerals.          If UCFLG, then the numerals will be upper-case;          otherwise, they are lower-case.)    (PROG ((CHARS NIL))          [while (NOT (ZEROP NUMBER)) do (COND                                            ((IGEQ NUMBER 1000)                                             (push CHARS 'm)                                             (add NUMBER -1000))                                            ((IGEQ NUMBER 900)                                             (push CHARS 'c)                                             (push CHARS 'm)                                             (add NUMBER -900))                                            ((IGEQ NUMBER 500)                                             (push CHARS 'd)                                             (add NUMBER -500))                                            ((IGEQ NUMBER 400)                                             (push CHARS 'c)                                             (push CHARS 'd)                                             (add NUMBER -400))                                            ((IGEQ NUMBER 100)                                             (push CHARS 'c)                                             (add NUMBER -100))                                            ((IGEQ NUMBER 90)                                             (push CHARS 'x)                                             (push CHARS 'c)                                             (add NUMBER -90))                                            ((IGEQ NUMBER 50)                                             (push CHARS 'l)                                             (add NUMBER -50))                                            ((IGEQ NUMBER 40)                                             (push CHARS 'x)                                             (push CHARS 'l)                                             (add NUMBER -40))                                            ((IGEQ NUMBER 10)                                             (push CHARS 'x)                                             (add NUMBER -10))                                            ((IGEQ NUMBER 9)                                             (push CHARS 'i)                                             (push CHARS 'x)                                             (add NUMBER -9))                                            ((IGEQ NUMBER 5)                                             (push CHARS 'v)                                             (add NUMBER -5))                                            ((IGEQ NUMBER 4)                                             (push CHARS 'i)                                             (push CHARS 'v)                                             (add NUMBER -4))                                            (T (push CHARS 'i)                                               (add NUMBER -1]          (RETURN (COND                     [UCFLG                                  (* The caller wants his roman numerals                                                              upper case)                            (U-CASE (CONCATLIST (REVERSE CHARS]                     (T (CONCATLIST (REVERSE CHARS]))(PUTPROPS TEDITPAGE COPYRIGHT ("Xerox Corporation" 1984 1985 1986 1987))(DECLARE%: DONTCOPY  (FILEMAP (NIL (4830 7954 (TEDIT.GET.PAGEFRAMES 4840 . 5093) (TEDIT.PARSE.PAGEFRAMES 5095 . 6522) (TEDIT.PUT.PAGEFRAMES 6524 . 7053) (TEDIT.UNPARSE.PAGEFRAMES 7055 . 7952)) (7999 19657 (TEDIT.SINGLE.PAGEFORMAT 8009 . 17998) (TEDIT.COMPOUND.PAGEFORMAT 18000 . 18634) (TEDIT.PAGEFORMAT 18636 . 19655)) (19743 72002 (TEDIT.FORMAT.HARDCOPY 19753 . 28134) (TEDIT.FORMATBOX 28136 . 38823) (TEDIT.FORMATHEADING 38825 . 43970) (TEDIT.FORMATPAGE 43972 . 49646) (TEDIT.FORMATTEXTBOX 49648 . 65082) (TEDIT.FORMATFOLIO 65084 . 70674) (\TEDIT.FORMAT.FOUNDBOX? 70676 . 72000)) (72081 74245 (TEDIT.HARDCOPY.PAGEHEADING 72091 . 74243)) (74289 79027 (SCALEPAGEUNITS 74299 . 75341) (SCALEPAGEXUNITS 75343 . 76097) (SCALEPAGEYUNITS 76099 . 76854) (\TEDIT.PAPERHEIGHT 76856 . 77793) (\TEDIT.PAPERWIDTH 77795 . 79025)) (79634 83219 (ROMANNUMERALS 79644 . 83217)))))STOP