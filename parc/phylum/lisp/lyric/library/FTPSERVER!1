(DEFINE-FILE-INFO §PACKAGE "INTERLISP" §READTABLE "INTERLISP" §BASE 10)(FILECREATED "26-Feb-87 21:17:39" {ERIS}<LISPCORE>LIBRARY>FTPSERVER.;4 24558        changes to%:  (VARS FTPSERVERCOMS)      previous date%: "16-Dec-86 17:56:54" {ERIS}<LISPCORE>LIBRARY>FTPSERVER.;3)(* "Copyright (c) 1983, 1984, 1986, 1987 by Xerox Corporation.  All rights reserved.")(PRETTYCOMPRINT FTPSERVERCOMS)(RPAQQ FTPSERVERCOMS ((FNS \FTPSERVER.TOP FTPSERVER \GETFILETYPE \SFTP.COMMANDLOOP \SFTP.RETRIEVE                            \SFTP.ENUMERATE \SFTP.STORE \SFTP.VERSION)                      (FNS \SFTP.OPENFILE.FROM.PLIST \SFTP.PLIST.FROM.FILE \SFTP.SENDPLIST                            \SFTP.PROTOCOL.ERROR \SFTP.MARK.ERROR \SFTP.READPLIST \SFTP.TIMEOUTFN                            \SFTP.ERRORHANDLER \SFTP.WHENCLOSED)                      [COMS * `((VARS (\SFTP.VERSION ',(DATE]                      [INITVARS (FTPSERVER.DEFAULT.HOST 'DSK)                             (FTPSERVER.DEFAULT.PROPS '(TYPE CREATIONDATE WRITEDATE READDATE LENGTH                                                              AUTHOR]                      (DECLARE%: DONTCOPY (MACROS .IFDESIRED.)                             (FILES (LOADCOMP)                                    DPUPFTP BSP))))(DEFINEQ(\FTPSERVER.TOP  [LAMBDA (FTPDEBUGLOG)                                      (* bvm%: "16-Nov-84 11:46")    (PROG (PUPSOC SOCKET INSTREAM EVENT SAVER)          (COND             (FTPDEBUGLOG [COND                             ((OR (EQ FTPDEBUGLOG T)                                  (LISTP FTPDEBUGLOG))                              (SETQ FTPDEBUGLOG (GETSTREAM (CREATEW (LISTP FTPDEBUGLOG)                                                                  "FTP Server traffic")                                                       'OUTPUT))                              (WINDOWPROP FTPDEBUGLOG 'PAGEFULLFN (FUNCTION NILL))                              (DSPSCROLL 'ON FTPDEBUGLOG)                              (DSPFONT '(GACHA 8) FTPDEBUGLOG))                             (T (SETQ FTPDEBUGLOG (GETSTREAM FTPDEBUGLOG 'OUTPUT]                    (printout FTPDEBUGLOG "FTP Server started at " (DATE)                           T T)))          (RESETSAVE NIL (SETQ SAVER (LIST [FUNCTION (LAMBDA (SOC)                                                       (AND SOC (CLOSERTPSOCKET SOC 0]                                           NIL)))      TOP (SETQ SOCKET (OPENRTPSOCKET NIL '(SERVER RETURN) (OPENPUPSOCKET \PUPSOCKET.FTP T)                              NIL))          (RPLACA (CDR SAVER)                 SOCKET)          (SETQ EVENT (fetch RTPEVENT of SOCKET))          (until (EQ (fetch RTPSTATE of SOCKET)                     \STATE.OPEN) do (AWAIT.EVENT EVENT))          [COND             ((SETQ INSTREAM (CREATEBSPSTREAM SOCKET NIL (FUNCTION \SFTP.ERRORHANDLER)                                    (IMIN \FTP.IDLE.TIMEOUT MAX.SMALLP)                                    (FUNCTION \SFTP.TIMEOUTFN)                                    (FUNCTION \SFTP.WHENCLOSED)))              (NLSETQ (RESETLST (RESETSAVE NIL (LIST 'CLOSEBSPSTREAM INSTREAM 0))                             (RPLACA (CDR SAVER)                                    NIL)                             (COND                                (FTPDEBUGLOG (printout FTPDEBUGLOG T "Connection open with "                                                    (PORTSTRING (fetch FRNPORT of SOCKET)                                                           (\MAKENUMBER (fetch FRNSOCKETHI                                                                           of SOCKET)                                                                  (fetch FRNSOCKETLO of SOCKET)))                                                    T)                                       (RESETSAVE FTPDEBUGFLG T)))                             (\SFTP.COMMANDLOOP INSTREAM (BSPOUTPUTSTREAM INSTREAM)                                    FTPDEBUGLOG]          (GO TOP])(FTPSERVER  [LAMBDA (FTPDEBUGLOG)                                      (* bvm%: "16-Nov-84 10:52")    (ADD.PROCESS (LIST (FUNCTION \FTPSERVER.TOP)                       (KWOTE FTPDEBUGLOG))           'NAME           'FTPSERVER           'RESTARTABLE           'HARDRESET])(\GETFILETYPE  [LAMBDA (FILE FILEOPENP)                                   (* bvm%: "16-Nov-84 11:57")    (RESETLST (PROG (STREAM)                    [COND                       [FILEOPENP (SETQ STREAM (GETSTREAM FILE 'INPUT]                       (T (RESETSAVE NIL (LIST 'CLOSEF (SETQ STREAM (OPENSTREAM FILE 'INPUT]                    (RETURN (\INFER.FILE.TYPE STREAM])(\SFTP.COMMANDLOOP  [LAMBDA (INS OUTS FTPDEBUGLOG)    (DECLARE (SPECVARS FTPDEBUGLOG))                         (* bvm%: "29-Feb-84 12:53")    (bind MARK repeatwhile (SELECTC (SETQ MARK (FTPGETMARK INS))                               ((MARK# VERSION)                                     (\SFTP.VERSION INS OUTS))                               ((MARK# RETRIEVE)                                     (\SFTP.RETRIEVE INS OUTS))                               ((MARK# NEW-STORE)                                     (\SFTP.STORE INS OUTS))                               ((MARK# STORE)                                     (\SFTP.STORE INS OUTS T))                               ((MARK# NEW-ENUMERATE)                                     (\SFTP.ENUMERATE INS OUTS T))                               ((MARK# ENUMERATE)                                     (\SFTP.ENUMERATE INS OUTS))                               ((MARK# EOC)                                     T)                               ((MARK# COMMENT)                                     (OR (\FTP.FLUSH.TO.EOC INS FTPDEBUGLOG)                                        (\SFTP.PROTOCOL.ERROR INS OUTS)))                               ((LIST (MARK# YES)                                      (MARK# NO)                                      (MARK# HERE-IS-PLIST)                                      (MARK# HERE-IS-FILE))                                     (\SFTP.PROTOCOL.ERROR INS OUTS))                               (0                            (* timedout)                                  NIL)                               (PROGN (FTPPUTMARK OUTS (MARK# NO))                                      (FTPPUTCODE OUTS \NO.UNIMPLEMENTED)                                      (PRIN3 "Unimplemented command " OUTS)                                      (PRIN3 (MKSTRING MARK)                                             OUTS)                                      (.EOC. OUTS)                                      T])(\SFTP.RETRIEVE  [LAMBDA (INS OUTS)                                         (* bvm%: "16-Nov-84 16:08")                                                             (* Do the RETRIEVE command.                                                             Plist comes next)    (RESETLST (PROG (PLIST FILE)                    (SETQ PLIST (OR (\SFTP.READPLIST INS OUTS)                                    (RETURN)))                    (OR (EQ (FTPGETMARK INS)                            (MARK# EOC))                        (RETURN (\SFTP.PROTOCOL.ERROR INS OUTS)))                    (SETQ FILE (OR (\SFTP.OPENFILE.FROM.PLIST PLIST 'INPUT OUTS)                                   (RETURN T)))                    (RESETSAVE NIL (LIST 'CLOSEF FILE))                    (\SFTP.SENDPLIST (\SFTP.PLIST.FROM.FILE FILE NIL (for PAIR in PLIST                                                                        when (EQ (CAR PAIR)                                                                                 'DESIRED-PROPERTY)                                                                        collect (CADR PAIR))                                            T)                           OUTS)                    (SELECTC (FTPGETMARK INS)                        ((MARK# NO)                          (* no, user doesn't want file)                             (\FTP.FLUSH.TO.EOC INS FTPDEBUGLOG))                        ((MARK# YES)                              (FTPGETCODE INS)                             (\FTP.FLUSH.TO.EOC INS FTPDEBUGLOG)                             (FTPPUTMARK OUTS (MARK# HERE-IS-FILE))                             (COPYBYTES FILE OUTS)                             (FTPPUTMARK OUTS (MARK# YES))                             (FTPPUTCODE OUTS 0)                             (PRIN3 "File sent ok" OUTS))                        (RETURN (\SFTP.PROTOCOL.ERROR INS OUTS)))                    (* At this point we would normally advance to the next file, but we're not           doing *'s yet)                    (.EOC. OUTS)                    (RETURN T])(\SFTP.ENUMERATE  [LAMBDA (INS OUTS NEWP)                                    (* ; "Edited 16-Dec-86 17:46 by lmm")                                                             (* ;                                                         "Do the ENUMERATE command.  Plist comes next")    (PROG (PLIST FILE DESIREDPROPS GENERATOR PATTERN SCRATCH FOUNDSOME)          (SETQ PLIST (OR (\SFTP.READPLIST INS OUTS)                          (RETURN)))          (OR (EQ (FTPGETMARK INS)                  (MARK# EOC))              (RETURN (\SFTP.PROTOCOL.ERROR INS OUTS)))          [SETQ DESIREDPROPS (for PAIR in PLIST when (EQ (CAR PAIR)                                                         'DESIRED-PROPERTY)                                collect (MKATOM (CADR PAIR]          (SETQ GENERATOR (OR (\SFTP.OPENFILE.FROM.PLIST PLIST 'ENUMERATE OUTS (OR DESIREDPROPS                                                                               FTPSERVER.DEFAULT.PROPS                                                                                   ))                              (RETURN T)))          (SETQ PATTERN (DIRECTORY.MATCH.SETUP (CAR GENERATOR)))          (SETQ GENERATOR (CDR GENERATOR))          (SETQ SCRATCH (from 1 to 127 collect NIL))      LP  (COND             ((SETQ FILE (\GENERATENEXTFILE GENERATOR NIL SCRATCH))              [COND                 ((COND                     [(LISTP FILE)                      (DIRECTORY.MATCH PATTERN (SETQ FILE (CONCATCODES FILE]                     (T T))                  [COND                     ((OR (NOT NEWP)                          (NOT FOUNDSOME))                      (FTPPUTMARK OUTS (MARK# HERE-IS-PLIST]                  (SETQ FOUNDSOME T)                  (\FTP.PRINTPLIST OUTS (\SFTP.PLIST.FROM.FILE (MKATOM FILE)                                               NIL DESIREDPROPS NIL GENERATOR]              (GO LP))             ((NULL FOUNDSOME)              (FTPPUTMARK OUTS (MARK# NO))              (FTPPUTCODE OUTS \NO.FILE.NOT.FOUND T)              (PRIN3 "File not found" OUTS)))          (.EOC. OUTS)          (RETURN T])(\SFTP.STORE  [LAMBDA (INS OUTS OLDSTYLE)                                (* bvm%: "16-Nov-84 16:06")                                                             (* Do the STORE command.                                                             Plist comes next)    (RESETLST (PROG (PLIST FILE SUCCESS SAVER)                    (SETQ PLIST (OR (\SFTP.READPLIST INS OUTS)                                    (RETURN)))                    (OR (EQ (FTPGETMARK INS)                            (MARK# EOC))                        (RETURN (\SFTP.PROTOCOL.ERROR INS OUTS)))                    (SETQ FILE (OR (\SFTP.OPENFILE.FROM.PLIST PLIST 'OUTPUT OUTS)                                   (RETURN T)))                    (RESETSAVE NIL (SETQ SAVER (LIST [FUNCTION (LAMBDA (STREAM)                                                                 (DELFILE (CLOSEF STREAM]                                                     FILE)))                    (COND                       (OLDSTYLE (FTPPUTMARK OUTS (MARK# YES))                              (FTPPUTCODE OUTS 0)                              (.EOC. OUTS))                       (T (\SFTP.SENDPLIST (\SFTP.PLIST.FROM.FILE FILE T                                                  (for PAIR in PLIST when (EQ (CAR PAIR)                                                                              'DESIRED-PROPERTY)                                                     collect (CADR PAIR))                                                  T)                                 OUTS)))                    (SELECTC (FTPGETMARK INS)                        ((MARK# NO)                          (* no, user doesn't want file)                             (FTPGETCODE INS T)                             (\FTP.FLUSH.TO.EOC INS FTPDEBUGLOG))                        ((MARK# HERE-IS-FILE)                              (SETQ SUCCESS (OR (NLSETQ (COPYBYTES INS FILE))                                               (PROGN (\FTP.FLUSH.TO.MARK INS)                                                      NIL)))                             (SELECTC (FTPGETMARK INS)                                 ((MARK# YES)                                       (FTPGETCODE INS)                                      (\FTP.FLUSH.TO.EOC INS FTPDEBUGLOG)                                      [COND                                         ((NULL SUCCESS)                                          (\SFTP.MARK.ERROR OUTS))                                         (T (FTPPUTMARK OUTS (MARK# YES))                                            (FTPPUTCODE OUTS 0)                                            (PRIN3 "File stored ok" OUTS)                                            (CLOSEF FILE)                                            (RPLACA SAVER (FUNCTION NILL])                                 ((MARK# NO)                 (* Store failed)                                      (FTPGETCODE INS T)                                      (\FTP.FLUSH.TO.EOC INS FTPDEBUGLOG))                                 (\SFTP.PROTOCOL.ERROR INS OUTS)))                        (\SFTP.PROTOCOL.ERROR INS OUTS))                    (.EOC. OUTS)                    (RETURN T])(\SFTP.VERSION  [LAMBDA (INS OUTS)                                         (* bvm%: "19-AUG-83 22:33")    (\FTP.FLUSH.TO.EOC INS FTPDEBUGLOG)    (FTPPUTMARK OUTS (MARK# VERSION))    (FTPPUTCODE OUTS \FTP.VERSION)    (PRIN3 "Interlisp-D Ftp Server of " OUTS)    (PRIN3 \SFTP.VERSION OUTS)    (.EOC. OUTS]))(DEFINEQ(\SFTP.OPENFILE.FROM.PLIST  [LAMBDA (PLIST ACCESS OUTS DESIREDPROPS)                   (* ; "Edited 16-Dec-86 17:41 by lmm")                                                             (* ;                                         "Opens file from user's PLIST, or answers NO and returns NIL")    (PROG (FILE FILENAME PIECES ERROR MYPLIST)          (for PAIR in PLIST do (SELECTQ (CAR PAIR)                                    (SERVER-FILENAME                                          (SETQ FILENAME (CADR PAIR)))                                    (DEVICE [push PIECES 'HOST (COND                                                                  ((EQ (NTHCHARCODE (CADR PAIR)                                                                              -1)                                                                       (CHARCODE %:))                                                                   (SUBSTRING (CADR PAIR)                                                                          1 -2))                                                                  (T (CADR PAIR])                                    (DIRECTORY (push PIECES 'DIRECTORY (CADR PAIR)))                                    (NAME-BODY (push PIECES 'BODY (CADR PAIR)))                                    (VERSION (push PIECES 'VERSION (if (STRING.EQUAL (CADR PAIR)                                                                              "H")                                                                       then ""                                                                     else (CADR PAIR))))                                    (TYPE [push MYPLIST (LIST 'TYPE (MKATOM (U-CASE (CADR PAIR])                                    (CREATION-DATE (push MYPLIST (LIST 'CREATIONDATE (CADR PAIR))))                                    (END-OF-LINE-CONVENTION                                          [push MYPLIST (LIST 'EOLCONVENTION (U-CASE (CADR PAIR])                                    (SIZE [push MYPLIST (LIST 'LENGTH (MKATOM (CADR PAIR])                                    NIL))          (SETQ FILENAME (COND                            [(NULL FILENAME)                             (PACKFILENAME.STRING (NCONC PIECES (LIST 'HOST FTPSERVER.DEFAULT.HOST]                            ((NULL (FILENAMEFIELD FILENAME 'HOST))                             (PACKFILENAME.STRING 'HOST FTPSERVER.DEFAULT.HOST 'BODY FILENAME))                            (T FILENAME)))          (RETURN (COND                     ([NLSETQ (SETQ FILE (COND                                            [(EQ ACCESS 'ENUMERATE)                                             (SETQ FILENAME (DIRECTORY.FILL.PATTERN FILENAME))                                             (CONS FILENAME (\GENERATEFILES FILENAME DESIREDPROPS                                                                   'SORT]                                            (T (OPENSTREAM FILENAME ACCESS NIL NIL                                                      (CONS 'SEQUENTIAL MYPLIST]                      FILE)                     (T (\SFTP.MARK.ERROR OUTS)                        (.EOC. OUTS)                        NIL])(\SFTP.PLIST.FROM.FILE  [LAMBDA (FILE NEW DESIREDPROPS FILEOPENP GENERATOR)        (* bvm%: "16-Nov-84 12:32")                    (* Generates a PLIST from FILE. NEW is true if file is being written anew           DESIREDPROPS may restrict what we send)    (PROG ([PIECES (UNPACKFILENAME.STRING (COND                                             ((type? STREAM FILE)                                              (FULLNAME FILE))                                             (T FILE]           INFOFN INFOHANDLE HOST DIR NAME EXT VERSION AUTHOR TYPE PLIST)          (COND             (GENERATOR (SETQ INFOFN (FUNCTION \GENERATEFILEINFO))                    (SETQ INFOHANDLE GENERATOR))             (T (SETQ INFOFN (FUNCTION GETFILEINFO))                (SETQ INFOHANDLE FILE)))          (for TAIL on PIECES by (CDDR TAIL)             do (SELECTQ (CAR TAIL)                    (HOST [COND                             ((EQ (MKATOM (CADR TAIL))                                  FTPSERVER.DEFAULT.HOST)                              (RPLACA (CDR TAIL)))                             (T (SETQ HOST (CADR TAIL])                    (DIRECTORY (SETQ DIR (CADR TAIL)))                    (NAME (SETQ NAME (CADR TAIL)))                    (EXTENSION (SETQ EXT (CADR TAIL)))                    (VERSION (SETQ VERSION (CADR TAIL)))                    NIL))          [SETQ PLIST (NCONC (.IFDESIRED. SERVER-FILENAME (PACKFILENAME.STRING PIECES))                             (.IFDESIRED. NAME-BODY (COND                                                       (EXT (CONCAT NAME "." EXT))                                                       (T NAME)))                             (.IFDESIRED. VERSION VERSION)                             (.IFDESIRED. END-OF-LINE-CONVENTION 'CR)                             (AND DIR (.IFDESIRED. DIRECTORY DIR))                             (AND HOST (.IFDESIRED. DEVICE HOST]          [COND             ((NOT NEW)              (SETQ PLIST (NCONC PLIST [.IFDESIRED. TYPE (SETQ TYPE (OR (APPLY* INFOFN INFOHANDLE                                                                               'TYPE)                                                                        (\GETFILETYPE FILE FILEOPENP]                                 (AND (EQ TYPE 'BINARY)                                      (LIST (LIST 'BYTE-SIZE 8)))                                 (.IFDESIRED. CREATION-DATE (APPLY* INFOFN INFOHANDLE 'CREATIONDATE))                                 (.IFDESIRED. WRITE-DATE (APPLY* INFOFN INFOHANDLE 'WRITEDATE))                                 (.IFDESIRED. READ-DATE (APPLY* INFOFN INFOHANDLE 'READDATE))                                 (.IFDESIRED. SIZE (APPLY* INFOFN INFOHANDLE 'LENGTH))                                 (.IFDESIRED. AUTHOR (APPLY* INFOFN INFOHANDLE 'AUTHOR]          (RETURN PLIST])(\SFTP.SENDPLIST  [LAMBDA (PLIST OUTS)                                       (* bvm%: "20-AUG-83 00:07")    (FTPPUTMARK OUTS (MARK# HERE-IS-PLIST))    (\FTP.PRINTPLIST OUTS PLIST)    (.EOC. OUTS])(\SFTP.PROTOCOL.ERROR  [LAMBDA (INS OUTS)                                         (* bvm%: "19-AUG-83 18:14")    (FTPPUTMARK OUTS (MARK# NO))    (FTPPUTCODE OUTS \NO.PROTOCOL.ERROR)    (PRIN3 "Protocol Error - Aborting connection" OUTS)    (CLOSEBSPSTREAM INS 0)    NIL])(\SFTP.MARK.ERROR  [LAMBDA (OUTS)                                             (* bvm%: "29-Feb-84 13:50")                    (* Put out a NO mark followed by appropriate error code and message for last           error. Caller supplies EOC)    (PROG ((ERN (ERRORN)))          (FTPPUTMARK OUTS (MARK# NO))          (FTPPUTCODE OUTS (SELECTQ (CAR ERN)                               (5 \NO.DISK.ERROR)                               (9 \NO.FILE.PROTECTED)                               (22 \NO.STORAGE.FULL)                               (23 \NO.FILE.NOT.FOUND)                               \NO.FILE.PROTECTED))          (PRIN3 (CONCAT (ERRORSTRING (CAR ERN))                        ": "                        (CADR ERN))                 OUTS])(\SFTP.READPLIST  [LAMBDA (INS OUTS)                                         (* bvm%: "20-AUG-83 18:47")                    (* Read plist from user, return NIL, aborting connection, on error)    (PROG [(PLIST (NLSETQ (READPLIST INS]          (RETURN (COND                     ((NULL PLIST)                      (\SFTP.PROTOCOL.ERROR INS OUTS))                     (T (COND                           (FTPDEBUGFLG (PRIN2 (CAR PLIST)                                               FTPDEBUGLOG)))                        (CAR PLIST])(\SFTP.TIMEOUTFN  [LAMBDA (STREAM)                                           (* bvm%: "20-AUG-83 17:45")    (COND       ((BSPOPENP STREAM 'INPUT)        (replace IOTIMEOUTFN of (fetch BSPSOC of STREAM) with NIL)        (CLOSEBSPSTREAM STREAM])(\SFTP.ERRORHANDLER  [LAMBDA (INSTREAM ERRCODE)                                 (* bvm%: "20-AUG-83 00:31")    (SELECTQ ERRCODE        (MARK.ENCOUNTERED              (COND                ((fetch FTPOPENP of INSTREAM)                 (STREAMOP 'ENDOFSTREAMOP INSTREAM INSTREAM))                (T -1)))        (ERROR!])(\SFTP.WHENCLOSED  [LAMBDA (STREAM)                                           (* bvm%: "16-Nov-84 10:31")    (AND (FIND.PROCESS 'FTPSERVER)         (PROCESS.EVAL 'FTPSERVER '(PROGN (AND FTPDEBUGLOG (printout FTPDEBUGLOG T                                                                   "Connection closed" T)                                               (RESET]))(RPAQQ \SFTP.VERSION "26-Feb-87 21:19:16")(RPAQ? FTPSERVER.DEFAULT.HOST 'DSK)(RPAQ? FTPSERVER.DEFAULT.PROPS '(TYPE CREATIONDATE WRITEDATE READDATE LENGTH AUTHOR))(DECLARE%: DONTCOPY (DECLARE%: EVAL@COMPILE [PUTPROPS .IFDESIRED. MACRO ((PROP . LISTFORM)                             (AND (OR (NULL DESIREDPROPS)                                      (FMEMB 'PROP DESIREDPROPS))                                  (PROG ((PROPVAL . LISTFORM))                                        (RETURN (AND PROPVAL (LIST (LIST 'PROP PROPVAL])(FILESLOAD (LOADCOMP)       DPUPFTP BSP))(PUTPROPS FTPSERVER COPYRIGHT ("Xerox Corporation" 1983 1984 1986 1987))(DECLARE%: DONTCOPY  (FILEMAP (NIL (1288 14805 (\FTPSERVER.TOP 1298 . 4092) (FTPSERVER 4094 . 4385) (\GETFILETYPE 4387 . 4775) (\SFTP.COMMANDLOOP 4777 . 6829) (\SFTP.RETRIEVE 6831 . 9000) (\SFTP.ENUMERATE 9002 . 11195) (\SFTP.STORE 11197 . 14478) (\SFTP.VERSION 14480 . 14803)) (14806 23867 (\SFTP.OPENFILE.FROM.PLIST 14816 . 18096) (\SFTP.PLIST.FROM.FILE 18098 . 21005) (\SFTP.SENDPLIST 21007 . 21219) (\SFTP.PROTOCOL.ERROR 21221 . 21510) (\SFTP.MARK.ERROR 21512 . 22290) (\SFTP.READPLIST 22292 . 22851) (\SFTP.TIMEOUTFN 22853 . 23133) (\SFTP.ERRORHANDLER 23135 . 23481) (\SFTP.WHENCLOSED 23483 . 23865)))))STOP