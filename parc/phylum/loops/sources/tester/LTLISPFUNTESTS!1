(FILECREATED "18-Mar-85 12:04:27" {PHYLUM}<MITTAL>LISP>LTLISPFUNTESTS.;2 37259        changes to:  (INSTANCES LTFGetObjectRec LTP2)		   (VARS LTLispFunTestsInstances)      previous date: "15-Mar-85 15:36:27" {PHYLUM}<MITTAL>LISP>LTLISPFUNTESTS.;1)(* Copyright (c) 1985 by Xerox Corporation. All rights reserved.)(PRETTYCOMPRINT LTLISPFUNTESTSCOMS)(RPAQQ LTLISPFUNTESTSCOMS ((* File created by MITTAL)			   (* database of test instances for testing Loops Functions)			   (CLASSES)			   (METHODS)			   (FNS)			   (VARS)			   (INSTANCES * LTLispFunTestsInstances)))(* File created by MITTAL)(* database of test instances for testing Loops Functions)(DEFCLASSES)(RPAQQ LTLispFunTestsInstances (LTFSendSuper LTFGetInitialValue LTFPutNthValue LTFGetNthValue 					     LTFGetObjectNames LTFtype? LTFClass LTFGetObjectRec 					     LTFReplaceActiveValue LTFPutLocalState LTFGetLocalState 					     LTFRenameMethodFunction LTFMoveMethod LTFMoveVariable 					     LTFMoveClassVariable LTFRenameVariable LTFCalledFns 					     LTFRenameMethod LTFTryMethod LTFDoMethod LTFPutItOnly 					     LTFGetItOnly LTFPutIt LTFGetIt LTFPutMethodOnly 					     LTFGetMethodOnly LTFPutClassOnly LTFGetClassOnly 					     LTFPutClass LTFGetClass LTFPutClassValueOnly 					     LTFPutValueOnly LTFPushClassValue LTFPutClassValue 					     LTFAddValue LTFPushValue LTFGetClassValueOnly 					     LTFGetValueOnly LTFGetClassValue LTFDM LTFDC LTP84 LTP83 					     LTP82 LTP81 LTP2 LTP7 LTP6 LTP3 LTP37 LTP36 LTP35 LTP34 					     LTP33 LTP29 LTP28 LTP27 LTP26 LTP85 LTP8 LTP40 LTP39 					     LTP38 LTP32 LTP31 LTP30))[DEFINST LOOPSTestLispFunc (LTFSendSuper "M]SC@=MN")         (name #(LTFSendSuper NIL RememberName))	 (SetUp ? Tested? #(? NIL FlashTestBrowser) FailedExp ?)	 (TestExpr (ANDALL (ATEST (EQ (SEND ($ LSS1)					    SendSuper1)				      6)				  "_Super fielded by next higher class")			   (ATEST (EQ (SEND ($ LSS1)					    SendSuper2)				      22)				  "_Super fielded by next higher class, which uses another _Super")			   (ATEST (EQ (SEND ($ LSS1)					    SendSuper3)				      31)				  "_Super fielded by the second super class")			   (ATEST (EQ (SEND ($ LSS1)					    SendSuper4)				      6)				  	   "_Super fielded by the left super class but the right super class also has the method"))		   FailedExpr ? HowFailed ?)	 (Tested? #(? NIL InformTestBrowser) DoneOnce ?)	 (TestDesc "_Super: Invoked directly")	 (SubTest #((LTP84 LTP83)		    NIL MakeBackLink) Tested? ? Failed ?)	 (PreTest #((LTFSend)		    NIL MakeBackLink) Tested? ? Failed ?)	 (CasesUsed #((LSS1)		      NIL MakeBackLink))	 (SyntaxTest ? Tested? ? Failed ?)	 (AltTest ? Tested? ? Failed ?)	 (UsesObj #((LOOPSTestSuper LOOPSTestClass2 LOOPSTestClass1 LOOPSTestSS)		    NIL AllowRemove))	 (LispName SENDSUPER)][DEFINST LOOPSTestLispFunc (LTFGetInitialValue "M]SC@=MG")         (name #(LTFGetInitialValue NIL RememberName))	 (SetUp ? Tested? #(? NIL FlashTestBrowser) FailedExp ?)	 (TestExpr (AND (ATEST (EQUAL (GetInitialValue ($ LTCA6)						       (QUOTE GIV1))				      (QUOTE GIV1))			       "GetInitialValue when class has simple value")			(ATEST (EQUAL (GetInitialValue ($ LTCA6)						       (QUOTE GIV2))				      6)			       "GetInitialValue when class has active value"))		   FailedExpr ? HowFailed ?)	 (Tested? #(? NIL InformTestBrowser) DoneOnce ?)	 (TestDesc "GetInitialValue: instance has no values")	 (SubTest #((LTP82)		    NIL MakeBackLink) Tested? ? Failed ?)	 (PreTest #((LTFGetValue)		    NIL MakeBackLink) Tested? ? Failed ?)	 (CasesUsed #((LTCA6)		      NIL MakeBackLink))	 (SyntaxTest ? Tested? ? Failed ?)	 (AltTest ? Tested? ? Failed ?)	 (UsesObj #((LOOPSTestClass1)		    NIL AllowRemove))][DEFINST LOOPSTestLispFunc (LTFPutNthValue "DCR@@E")         (name #(LTFPutNthValue NIL RememberName))	 (SetUp (PROGN (PutNthValue ($ LVC2)				    1 10)		       (PutNthValue ($ LVC2)				    3 30)))	 (TestExpr (AND (EQ (GetNthValue ($ LVC2)					 1)			    10)			(EQ (GetNthValue ($ LVC2)					 3)			    30)))	 (TestDesc "PutNthValue")	 (PreTest #((LTFGetNthValue)		    NIL MakeBackLink))	 (CasesUsed #((LVC2)		      NIL MakeBackLink))	 (LispName PutNthValue)][DEFINST LOOPSTestLispFunc (LTFGetNthValue "DCR@@E")         (name #(LTFGetNthValue NIL RememberName))	 (SetUp ? Tested? #(? NIL FlashTestBrowser) FailedExp ?)	 (TestExpr (AND (EQ (GetNthValue ($ LVC1)					 1)			    1)			(EQ (GetNthValue ($ LVC1)					 3)			    3)			(ATEST (EQ (SEND ($ LVC1)					 Length)				   3)			       "Length of indexedVars is correct"))		   FailedExpr ? HowFailed ?)	 (Tested? #(? NIL InformTestBrowser) DoneOnce ? Ignored ?)	 (TestDesc "GetNthValue")	 (PreTestOf ?)	 (SubTest ? Tested? ? Failed ?)	 (PreTest ? Tested? ? Failed ?)	 (CasesUsed #((LVC1)		      NIL MakeBackLink))	 (SyntaxTest ? Tested? ? Failed ?)	 (AltTest ? Tested? ? Failed ?)	 (UsesObj #(NIL NIL AllowRemove))	 (LispName GetNthValue)][DEFINST LOOPSTestLispFunc (LTFGetObjectNames "NQR@@Av")         (name #(LTFGetObjectNames NIL RememberName))	 (TestDesc "GetObjectNames")	 (PreTestOf ?)	 (LispName GetObjectNames)][DEFINST LOOPSTestLispFunc (LTFtype? "O\R@@[i")         (name #(LTFtype? NIL RememberName))	 (SetUp ? Tested? #(? NIL FlashTestBrowser))	 [TestExpr (AND (type? class ($ LOOPSTestLispFunc))			(type? instance ($ LTFtype?))			(NULL (type? instance ($ LOOPSTestLispFunc)))			(NULL (type? class ($ LTFtype?)))			(NULL (type? instance (QUOTE (a b c]	 (Tested? #(? NIL InformTestBrowser))	 (TestDesc "type?")	 (PreTestOf ?)	 (SubTest ? Tested? ?)	 (PreTest ? Tested? ?)	 (SyntaxTest ? Tested? ?)	 (AltTest ? Tested? ?)	 (LispName type?)][DEFINST LOOPSTestLispFunc (LTFClass "O\R@@[h")         (name #(LTFClass NIL RememberName))	 (SetUp ? Tested? #(? NIL FlashTestBrowser))	 [TestExpr (AND (EQ (Class ($ LOOPSTestObject))			    ($ LOOPSTestMeta))			(EQ (Class ($ LTFClass))			    ($ LOOPSTestLispFunc))			(EQ (Class ($ LOOPSTestMeta))			    ($ MetaClass]	 (Tested? #(? NIL InformTestBrowser))	 (TestDesc "Class function:")	 (PreTestOf ?)	 (SubTest ? Tested? ?)	 (PreTest ? Tested? ?)	 (SyntaxTest ? Tested? ?)	 (AltTest ? Tested? ?)	 (LispName Class)][DEFINST LOOPSTestLispFunc (LTFGetObjectRec "O\R@@[!")         (name #(LTFGetObjectRec NIL RememberName))	 (SetUp ? Tested? #(? NIL FlashTestBrowser))	 [TestExpr (AND (EQ (GetObjectRec (QUOTE LOOPSTestObject))			    ($ LOOPSTestObject))			(EQ (GetObjectRec ($ LOOPSTestObject))			    ($ LOOPSTestObject))			(EQ (GetObjectRec (QUOTE LTFGetObjectRec))			    ($ LTFGetObjectRec))			[NULL (GetObjectRec (QUOTE (a b c]			(NULL (GetObjectRec (GENSYM]	 (Tested? #(? NIL InformTestBrowser))	 (TestDesc "GetObjectRec")	 (PreTestOf ?)	 (SubTest ? Tested? ?)	 (PreTest ? Tested? ?)	 (SyntaxTest ? Tested? ?)	 (AltTest ? Tested? ?)	 (LispName GetObjectRec)][DEFINST LOOPSTestLispFunc (LTFReplaceActiveValue "OKR@@El")         (name #(LTFReplaceActiveValue NIL RememberName))][DEFINST LOOPSTestLispFunc (LTFPutLocalState "OKR@@Ek")         (name #(LTFPutLocalState NIL RememberName))	 (ResetExp (ResetPutLocalStateVars))	 (SetUp (PROGN (ATEST (PutLocalState (GetValueOnly ($ LOOPSTestClass6)							   (QUOTE PLS1))					     (QUOTE PLS1)					     ($ LOOPSTestClass6)					     (QUOTE PLS1))			      "put into local state of active value")		       (ATEST (PutLocalState (GetValueOnly ($ LOOPSTestClass6)							   (QUOTE PLS3))					     (QUOTE PLS3)					     ($ LOOPSTestClass6)					     (QUOTE PLS3))			      "put into local state of nested active value")))	 (TestExpr (ANDALL (ATEST (EQUAL (GetLocalState (GetValueOnly ($ LOOPSTestClass6)								      (QUOTE PLS1))							($ LOOPSTestClass6)							(QUOTE PLS1))					 (QUOTE PLS1))				  "get local state of active value set by PutLocalState")			   (ATEST (EQUAL (GetLocalState (GetValueOnly ($ LOOPSTestClass6)								      (QUOTE PLS3))							($ LOOPSTestClass6)							(QUOTE PLS3))					 (QUOTE PLS3))				  "get local state of nested active value set by PutLocalState")))	 (TestDesc "PutLocalState")	 (PreTestOf ?)	 (PreTest #((LTFGetLocalState)		    NIL MakeBackLink))	 (UsesObj #((LOOPSTestClass6)		    NIL AllowRemove))	 (LispName PutLocalState)][DEFINST LOOPSTestLispFunc (LTFGetLocalState "OKR@@Ej")         (name #(LTFGetLocalState NIL RememberName))	 (SetUp ? Tested? #(? NIL FlashTestBrowser) FailedExp ?)	 (TestExpr (AND (ATEST (EQUAL (GetLocalState (GetValueOnly ($ LOOPSTestClass6)								   (QUOTE GLS1))						     ($ LOOPSTestClass6)						     (QUOTE GLS1))				      (QUOTE LTC6))			       "GetLocalState of active value")			(ATEST (EQUAL (GetLocalState (GetValueOnly ($ LOOPSTestClass6)								   (QUOTE GLS2))						     ($ LOOPSTestClass6)						     (QUOTE GLS2))				      (QUOTE LTC6))			       "GetLocalState of nested active value"))		   FailedExpr ? HowFailed ?)	 (Tested? #(? NIL InformTestBrowser) DoneOnce ?)	 (TestDesc "GetLocalState")	 (PreTestOf ?)	 (SubTest #((LTP81)		    NIL MakeBackLink) Tested? ? Failed ?)	 (PreTest #((LTFGetValueOnly)		    NIL MakeBackLink) Tested? ? Failed ?)	 (SyntaxTest ? Tested? ? Failed ?)	 (AltTest ? Tested? ? Failed ?)	 (UsesObj #((LOOPSTestCases LOOPSTestClass6)		    NIL AllowRemove))	 (LispName GetLocalState)][DEFINST LOOPSTestLispFunc (LTFRenameMethodFunction "OKR@@Ei")         (name #(LTFRenameMethodFunction NIL RememberName))][DEFINST LOOPSTestLispFunc (LTFMoveMethod "OKR@@Eh")         (name #(LTFMoveMethod NIL RememberName))	 (ResetExp (MoveMethod (QUOTE LOOPSTestClass2)			       (QUOTE LOOPSTestClass1)			       (QUOTE MMTest1)))	 (SetUp (MoveMethod (QUOTE LOOPSTestClass1)			    (QUOTE LOOPSTestClass2)			    (QUOTE MMTest1)))	 [TestExpr (AND [FMEMB (QUOTE LOOPSTestClass2.MMTest1)			       (CalledFns (QUOTE (LOOPSTestClass2]			(NOT (FMEMB (QUOTE LOOPSTestClass1.MMTest1)				    (CalledFns (QUOTE (LOOPSTestClass1]	 (TestDesc "Move Method across two classes")	 (PreTestOf ?)	 (SubTest #((LTP2)		    NIL MakeBackLink) Tested? ?)	 (PreTest #((LTFCalledFns)		    NIL MakeBackLink) Tested? ?)	 (CasesUsed #((LTC3)		      NIL MakeBackLink))	 (SyntaxTest ? Tested? ?)	 (AltTest ? Tested? ?)	 (UsesObj #((LOOPSTestClass1 LOOPSTestClass2)		    NIL AllowRemove))	 (LispName MoveMethod)][DEFINST LOOPSTestLispFunc (LTFMoveVariable "OKR@@E")         (name #(LTFMoveVariable NIL RememberName))	 (ResetExp (MoveVariable (QUOTE LOOPSTestClass3)				 (QUOTE LOOPSTestClass2)				 (QUOTE MVTest1)))	 (SetUp (MoveVariable (QUOTE LOOPSTestClass2)			      (QUOTE LOOPSTestClass3)			      (QUOTE MVTest1)))	 [TestExpr (AND (FMEMB (QUOTE MVTest1)			       (SEND ($ LOOPSTestClass3)				     List				     (QUOTE IVs)))			(NOT (FMEMB (QUOTE MVTest1)				    (SEND ($ LOOPSTestClass2)					  List					  (QUOTE IVs]	 (TestDesc "Move IV across classes")	 (SubTest #((LTP7 LTP6)		    NIL MakeBackLink) Tested? ?)	 (PreTest #((LTMListInClass)		    NIL MakeBackLink) Tested? ?)	 (SyntaxTest ? Tested? ?)	 (AltTest ? Tested? ?)	 (UsesObj #((LOOPSTestClass3 LOOPSTestClass2)		    NIL AllowRemove))	 (LispName MoveVariable)][DEFINST LOOPSTestLispFunc (LTFMoveClassVariable "OKR@@E")         (name #(LTFMoveClassVariable NIL RememberName))][DEFINST LOOPSTestLispFunc (LTFRenameVariable "OKR@@E")         (name #(LTFRenameVariable NIL RememberName))	 (ResetExp (RenameVariable (QUOTE LOOPSTestClass1)				   (QUOTE RVTest2)				   (QUOTE RVTest1)))	 (SetUp (RenameVariable (QUOTE LOOPSTestClass1)				(QUOTE RVTest1)				(QUOTE RVTest2)))	 [TestExpr (AND (FMEMB (QUOTE RVTest2)			       (SEND ($ LOOPSTestClass1)				     List				     (QUOTE IVs)))			(NOT (FMEMB (QUOTE RVTest1)				    (SEND ($ LOOPSTestClass1)					  List					  (QUOTE IVs]	 (TestDesc "Rename a IV in a class")	 (SubTest #((LTP3)		    NIL MakeBackLink) Tested? ?)	 (PreTest #((LTMListInClass)		    NIL MakeBackLink) Tested? ?)	 (SyntaxTest ? Tested? ?)	 (AltTest ? Tested? ?)	 (UsesObj #((LOOPSTestClass1)		    NIL AllowRemove))	 (StandBy (LTP4 LTP5))	 (LispName RenameVariable)][DEFINST LOOPSTestLispFunc (LTFCalledFns "OGR@@E")         (name #(LTFCalledFns NIL RememberName))	 [TestExpr (EQUAL (CalledFns (QUOTE (LOOPSTestClassCF)))			  (QUOTE (LOOPSTestClassCF.CF1 LOOPSTestClassCF.CF2]	 (TestDesc "CalledFns")	 (PreTestOf ?)	 (SubTest ? Tested? ?)	 (PreTest ? Tested? ?)	 (SyntaxTest ? Tested? ?)	 (AltTest ? Tested? ?)	 (UsesObj #((LOOPSTestClassCF)		    NIL AllowRemove))	 (LispName CalledFns)][DEFINST LOOPSTestLispFunc (LTFRenameMethod "OGR@@E")         (name #(LTFRenameMethod NIL RememberName))	 (ResetExp (RenameMethod (QUOTE LOOPSTestCases)				 (QUOTE RMTest2)				 (QUOTE RMTest1)))	 (SetUp (RenameMethod (QUOTE LOOPSTestCases)			      (QUOTE RMTest1)			      (QUOTE RMTest2)))	 [TestExpr (AND [FMEMB (QUOTE LOOPSTestCases.RMTest2)			       (CalledFns (QUOTE (LOOPSTestCases]			(NOT (FMEMB (QUOTE LOOPSTestCases.RMTest1)				    (CalledFns (QUOTE (LOOPSTestCases]	 (TestDesc "renaming of existing methods")	 (PreTestOf ?)	 (SubTest ? Tested? ?)	 (PreTest #((LTFCalledFns)		    NIL MakeBackLink) Tested? ?)	 (SyntaxTest ? Tested? ?)	 (AltTest ? Tested? ?)	 (UsesObj #((LOOPSTestCases)		    NIL AllowRemove))	 (LispName RenameMethod)][DEFINST LOOPSTestLispFunc (LTFTryMethod "OER@@EG")         (name #(LTFTryMethod NIL RememberName))][DEFINST LOOPSTestLispFunc (LTFDoMethod "OER@@EF")         (name #(LTFDoMethod NIL RememberName))][DEFINST LOOPSTestLispFunc (LTFPutItOnly "OER@@EE")         (name #(LTFPutItOnly NIL RememberName))][DEFINST LOOPSTestLispFunc (LTFGetItOnly "OER@@ED")         (name #(LTFGetItOnly NIL RememberName))][DEFINST LOOPSTestLispFunc (LTFPutIt "OER@@EC")         (name #(LTFPutIt NIL RememberName))][DEFINST LOOPSTestLispFunc (LTFGetIt "OER@@EB")         (name #(LTFGetIt NIL RememberName))][DEFINST LOOPSTestLispFunc (LTFPutMethodOnly "OER@@EA")         (name #(LTFPutMethodOnly NIL RememberName))][DEFINST LOOPSTestLispFunc (LTFGetMethodOnly "OER@@E@")         (name #(LTFGetMethodOnly NIL RememberName))][DEFINST LOOPSTestLispFunc (LTFPutClassOnly "OER@@E=")         (name #(LTFPutClassOnly NIL RememberName))][DEFINST LOOPSTestLispFunc (LTFGetClassOnly "OER@@E<")         (name #(LTFGetClassOnly NIL RememberName))][DEFINST LOOPSTestLispFunc (LTFPutClass "OER@@E;")         (name #(LTFPutClass NIL RememberName))	 (TestDesc "PutClass")	 (PreTestOf ?)	 (LispName PutClass)][DEFINST LOOPSTestLispFunc (LTFGetClass "OER@@E:")         (name #(LTFGetClass NIL RememberName))][DEFINST LOOPSTestLispFunc (LTFPutClassValueOnly "OER@@E9")         (name #(LTFPutClassValueOnly NIL RememberName))][DEFINST LOOPSTestLispFunc (LTFPutValueOnly "OER@@E8")         (name #(LTFPutValueOnly NIL RememberName))	 (ResetExp (PROGN (PutValueOnly ($ LTC9)					(QUOTE Var1)					NotSetValue)			  (PutValueOnly ($ LTC9)					(QUOTE Test1)					NotSetValue)))	 (SetUp (PROGN (ATEST (PutValueOnly ($ LTC9)					    (QUOTE Var1)					    7)			      "put ordinary value")		       (ATEST (PutValueOnly ($ LTC9)					    (QUOTE Test1)					    (create activeValue localState_5 getFn_NIL putFn_						    (QUOTE MakeBackLink)))			      "put active value")))	 (TestExpr (ANDALL (ATEST (EQ (GetValueOnly ($ LTC9)						    (QUOTE Var1))				      7)				  "get the ordinary value put by PutValueOnly")			   (ATEST (EQACTVAL (GetValueOnly ($ LTC9)							  (QUOTE Test1))					    (QUOTE (5 NIL MakeBackLink)))				  "get the active value put by PutValueOnly")))	 (TestDesc "PutValueOnly")	 (PreTestOf ?)	 (PreTest #((LTFGetValueOnly)		    NIL MakeBackLink))	 (CasesUsed #((LTC9)		      NIL MakeBackLink))	 (LispName PutValueOnly)][DEFINST LOOPSTestLispFunc (LTFPushClassValue "OER@@E7")         (name #(LTFPushClassValue NIL RememberName))][DEFINST LOOPSTestLispFunc (LTFPutClassValue "OER@@E6")         (name #(LTFPutClassValue NIL RememberName))	 (ResetExp (PutClassValue ($ LOOPSTestClass3)				  (QUOTE PCV1)				  NIL))	 (SetUp (PutClassValue ($ LOOPSTestClass3)			       (QUOTE PCV1)			       (QUOTE PCV)))	 (TestExpr (EQUAL (GetClassValue ($ LOOPSTestClass3)					 (QUOTE PCV1))			  (QUOTE PCV)))	 (TestDesc "PutClassValue: in a class")	 (SubTest #((LTP37 LTP36 LTP35 LTP34 LTP33)		    NIL MakeBackLink) Tested? ?)	 (PreTest #((LTFGetClassValue)		    NIL MakeBackLink) Tested? ?)	 (SyntaxTest ? Tested? ?)	 (AltTest ? Tested? ?)	 (UsesObj #((LOOPSTestClass3)		    NIL AllowRemove))	 (LispName PutClassValue)][DEFINST LOOPSTestLispFunc (LTFAddValue "OER@@E5")         (name #(LTFAddValue NIL RememberName))][DEFINST LOOPSTestLispFunc (LTFPushValue "OER@@E3")         (name #(LTFPushValue NIL RememberName))][DEFINST LOOPSTestLispFunc (LTFGetClassValueOnly "OER@@E1")         (name #(LTFGetClassValueOnly NIL RememberName))][DEFINST LOOPSTestLispFunc (LTFGetValueOnly "OER@@E0")         (name #(LTFGetValueOnly NIL RememberName))	 (SetUp ? Tested? #(? NIL FlashTestBrowser) FailedExp ?)	 (TestExpr (ANDALL (ATEST (EQUAL (GetValueOnly ($ LTC8)						       (QUOTE Var1))					 5)				  "getting ordinary value")			   (ATEST (EQACTVAL (GetValueOnly ($ LTC8)							  (QUOTE Test1))					    (QUOTE (NIL NIL MakeBackLink)))				  "getting active value"))		   FailedExpr ? HowFailed ?)	 (Tested? #(? NIL InformTestBrowser) DoneOnce ?)	 (TestDesc "GetValueOnly")	 (PreTestOf ?)	 (SubTest ? Tested? ? Failed ?)	 (PreTest ? Tested? ? Failed ?)	 (CasesUsed #((LTC8)		      NIL MakeBackLink))	 (SyntaxTest ? Tested? ? Failed ?)	 (AltTest ? Tested? ? Failed ?)	 (LispName GetValueOnly)][DEFINST LOOPSTestLispFunc (LTFGetClassValue "OER@@E/")         (name #(LTFGetClassValue NIL RememberName))	 (SetUp ? Tested? #(? NIL FlashTestBrowser))	 (TestExpr (EQUAL (GetClassValue ($ LOOPSTestCases)					 (QUOTE GCV1))			  (QUOTE GCV)))	 (Tested? #(? NIL InformTestBrowser))	 (TestDesc "GetClassValue: for a class")	 (PreTestOf ?)	 (SubTest #((LTP29 LTP28 LTP27 LTP26)		    NIL MakeBackLink) Tested? ?)	 (PreTest ? Tested? ?)	 (SyntaxTest ? Tested? ?)	 (AltTest ? Tested? ?)	 (UsesObj #((LOOPSTestCases)		    NIL AllowRemove))	 (LispName GetClassValue)][DEFINST LOOPSTestLispFunc (LTFDM "OER@@E.")         (name #(LTFDM NIL RememberName))][DEFINST LOOPSTestLispFunc (LTFDC "OER@@E-")         (name #(LTFDC NIL RememberName))	 (TestDesc "DC(Define Class)")	 (PreTestOf ?)	 (LispName DC)][DEFINST LOOPSTestPrimitive (LTP84 "M]SC@=MZ")         (name #(LTP84 NIL RememberName))	 (ResetExp (PutValue ($ LSS1)			     (QUOTE ssVar1)			     0))	 (SetUp (ATEST (SEND ($ LSS1)			     SendSuper5			     (QUOTE ssVar1))		       "Invoke the cascaded _Super scheme")		Tested? #(? NIL FlashTestBrowser) FailedExp ?)	 (TestExpr (EQ (GetValue ($ LSS1)				 (QUOTE ssVar1))		       30)		   FailedExpr ? HowFailed ?)	 (Tested? #(? NIL InformTestBrowser) DoneOnce ?)	 (TestDesc "Cascaded _Super: Invoked directly")	 (SubTest ? Tested? ? Failed ?)	 (PreTest #(NIL BuildPreTest MakeBackLink) Tested? ? Failed ?)	 (CasesUsed #((LSS1)		      NIL MakeBackLink))	 (SyntaxTest ? Tested? ? Failed ?)	 (AltTest ? Tested? ? Failed ?)	 (UsesObj #((LOOPSTestCases LOOPSTestClass2 LOOPSTestClass1 LOOPSTestSS)		    NIL AllowRemove))	 (SubTestOf #((LTFSendSuper)		      NIL MakeBackLink))][DEFINST LOOPSTestPrimitive (LTP83 "M]SC@=MO")         (name #(LTP83 NIL RememberName))	 (SetUp ? Tested? #(? NIL FlashTestBrowser) FailedExp ?)	 (TestExpr (ANDALL (ATEST (EQ (SEND ($ LSS2)					    SendSuper1)				      6)				  "_Super fielded by next higher class")			   (ATEST (EQ (SEND ($ LSS2)					    SendSuper2)				      22)				  "_Super fielded by next higher class, which uses another _Super")			   (ATEST (EQ (SEND ($ LSS2)					    SendSuper3)				      31)				  "_Super fielded by the second super class")			   (ATEST (EQ (SEND ($ LSS2)					    SendSuper4)				      6)				  	   "_Super fielded by the left super class but the right super class also has the method"))		   FailedExpr ? HowFailed ?)	 (Tested? #(? NIL InformTestBrowser) DoneOnce ?)	 (TestDesc "_Super: invoked from the super of a class")	 (SubTest #((LTP85)		    NIL MakeBackLink) Tested? ? Failed ?)	 (PreTest ? Tested? ? Failed ?)	 (CasesUsed #((LSS2)		      NIL MakeBackLink))	 (SyntaxTest ? Tested? ? Failed ?)	 (AltTest ? Tested? ? Failed ?)	 (UsesObj #((LOOPSTestSuper LOOPSTestClass2 LOOPSTestClass1 LOOPSTestSS)		    NIL AllowRemove))	 (SubTestOf #((LTFSendSuper)		      NIL MakeBackLink))][DEFINST LOOPSTestPrimitive (LTP82 "M]SC@=MJ")         (name #(LTP82 NIL RememberName))	 (SetUp ? Tested? #(? NIL FlashTestBrowser) FailedExp ?)	 (TestExpr (AND (ATEST (EQUAL (GetInitialValue ($ LTCA7)						       (QUOTE GIV1))				      (QUOTE GIV1))			       "GetInitialValue: simple value in class")			(ATEST (EQUAL (GetInitialValue ($ LTCA7)						       (QUOTE GIV2))				      6)			       "GetInitialValue: active value in class"))		   FailedExpr ? HowFailed ?)	 (Tested? #(? NIL InformTestBrowser) DoneOnce ?)	 (TestDesc "GetInitialValue: instance has values different from initial ones")	 (SubTest ? Tested? ? Failed ?)	 (PreTest ? Tested? ? Failed ?)	 (CasesUsed #((LTCA7)		      NIL MakeBackLink))	 (SyntaxTest ? Tested? ? Failed ?)	 (AltTest ? Tested? ? Failed ?)	 (UsesObj #((LOOPSTestClass1)		    NIL AllowRemove))	 (SubTestOf #((LTFGetInitialValue)		      NIL MakeBackLink))][DEFINST LOOPSTestPrimitive (LTP81 "M]SC@=ME")         (name #(LTP81 NIL RememberName))	 (SetUp ? Tested? #(? NIL FlashTestBrowser) FailedExp ?)	 (TestExpr (ATEST (EQUAL (GetLocalState (GetValueOnly ($ LTCF3)							      (QUOTE GLS3))						($ LTCF3)						(QUOTE GLS3))				 (QUOTE GLS3))			  "NotSetValue as local state inherits from class")		   FailedExpr ? HowFailed ?)	 (Tested? #(? NIL InformTestBrowser) DoneOnce ?)	 (TestDesc "GetLocalState: NotSetValue")	 (SubTest ? Tested? ? Failed ?)	 (PreTest ? Tested? ? Failed ?)	 (CasesUsed #((LTCF3)		      NIL MakeBackLink))	 (SyntaxTest ? Tested? ? Failed ?)	 (AltTest ? Tested? ? Failed ?)	 (UsesObj #((LOOPSTestClass6)		    NIL AllowRemove))	 (SubTestOf #((LTFGetLocalState)		      NIL MakeBackLink))][DEFINST LOOPSTestPrimitive (LTP2 "OLR@@E")         (name #(LTP2 NIL RememberName))	 (ResetExp (MoveMethod (QUOTE LOOPSTestSuper)			       (QUOTE LOOPSTestClass1)			       (QUOTE MMTest2)))	 (SetUp (MoveMethod (QUOTE LOOPSTestClass1)			    (QUOTE LOOPSTestSuper)			    (QUOTE MMTest2)))	 [TestExpr (AND [FMEMB (QUOTE LOOPSTestSuper.MMTest2)			       (CalledFns (QUOTE (LOOPSTestSuper]			(NOT (FMEMB (QUOTE LOOPSTestClass1.MMTest2)				    (CalledFns (QUOTE (LOOPSTestClass1]	 (TestDesc "MoveMethod up the class hierarchy")	 (SubTest ? Tested? ?)	 (PreTest #((LTFCalledFns)		    BuildPreTest MakeBackLink) Tested? ?)	 (SyntaxTest ? Tested? ?)	 (AltTest ? Tested? ?)	 (UsesObj #((LOOPSTestSuper LOOPSTestClass1)		    NIL AllowRemove))	 (SubTestOf #((LTFMoveMethod)		      NIL MakeBackLink))][DEFINST LOOPSTestPrimitive (LTP7 "OMR@@A|")         (name #(LTP7 NIL RememberName))	 (ResetExp (MoveVariable (QUOTE LOOPSTestCases)				 (QUOTE LOOPSTestClass2)				 (QUOTE MVTest3)))	 (SetUp (MoveVariable (QUOTE LOOPSTestClass2)			      (QUOTE LOOPSTestCases)			      (QUOTE MVTest3)))	 [TestExpr (AND (FMEMB (QUOTE MVTest3)			       (SEND ($ LOOPSTestCases)				     List				     (QUOTE IVs)))			(NOT (FMEMB (QUOTE MVTest3)				    (SEND ($ LOOPSTestClass2)					  List					  (QUOTE IVs]	 (TestDesc "MoveVariable up the hierarchy")	 (SubTest #((LTP8)		    NIL MakeBackLink) Tested? ?)	 (PreTest #((LTMListInClass)		    BuildPreTest MakeBackLink) Tested? ?)	 (SyntaxTest ? Tested? ?)	 (AltTest ? Tested? ?)	 (UsesObj #((LOOPSTestCases LOOPSTestClass2)		    NIL AllowRemove))	 (SubTestOf #((LTFMoveVariable)		      NIL MakeBackLink))][DEFINST LOOPSTestPrimitive (LTP6 "OMR@@A{")         (name #(LTP6 NIL RememberName))	 (ResetExp (MoveVariable (QUOTE LOOPSTestClass3)				 (QUOTE LOOPSTestClass2)				 (QUOTE MVTest2)))	 (SetUp (MoveVariable (QUOTE LOOPSTestClass2)			      (QUOTE LOOPSTestClass3)			      (QUOTE MVTest2)))	 [TestExpr (AND (EQUAL (QUOTE (Prop1 Prop2 doc))			       (SEND ($ LOOPSTestClass3)				     List				     (QUOTE IVProps)				     (QUOTE MVTest2)))			(NOT (FMEMB (QUOTE MVTest2)				    (SEND ($ LOOPSTestClass2)					  List					  (QUOTE IVs]	 (TestDesc "if MoveVariable moves the props too")	 (SubTest ? Tested? ?)	 (PreTest #((LTMListInClass)		    BuildPreTest MakeBackLink) Tested? ?)	 (SyntaxTest ? Tested? ?)	 (AltTest ? Tested? ?)	 (UsesObj #((LOOPSTestClass3 LOOPSTestClass2)		    NIL AllowRemove))	 (SubTestOf #((LTFMoveVariable)		      NIL MakeBackLink))][DEFINST LOOPSTestPrimitive (LTP3 "OMR@@Ax")         (name #(LTP3 NIL RememberName))	 (ResetExp (RenameVariable (QUOTE LOOPSTestClass1)				   (QUOTE RVTest4)				   (QUOTE RVTest3)				   T))	 (SetUp (RenameVariable (QUOTE LOOPSTestClass1)				(QUOTE RVTest3)				(QUOTE RVTest4)				T))	 [TestExpr (AND (FMEMB (QUOTE RVTest4)			       (SEND ($ LOOPSTestClass1)				     List				     (QUOTE CVs)))			(NOT (FMEMB (QUOTE RVTest3)				    (SEND ($ LOOPSTestClass1)					  List					  (QUOTE CVs]	 (TestDesc "Rename a CV in a class")	 (PreTest #((LTMListInClass)		    BuildPreTest MakeBackLink))	 (UsesObj #((LOOPSTestClass1)		    NIL AllowRemove))	 (SubTestOf #((LTFRenameVariable)		      NIL MakeBackLink))][DEFINST LOOPSTestPrimitive (LTP37 "OTR@@Ag")         (name #(LTP37 NIL RememberName))	 [ResetExp (PROGN (PutClassValue ($ LOOPSTestCases)					 (QUOTE PCV3)					 (QUOTE LTC)					 (QUOTE Prop1))			  (PutClassValue ($ LOOPSTestClass2)					 (QUOTE PCV3)					 NotSetValue					 (QUOTE Prop1]	 (SetUp (PutClassValue ($ LOOPSTestClass2)			       (QUOTE PCV3)			       (QUOTE LTP37)			       (QUOTE Prop1)))	 [TestExpr (AND (EQUAL (GetClassValue ($ LOOPSTestClass2)					      (QUOTE PCV3)					      (QUOTE Prop1))			       (QUOTE LTP37))			(EQUAL (GetClassValue ($ LOOPSTestCases)					      (QUOTE PCV3)					      (QUOTE Prop1))			       (QUOTE LTC]	 (TestDesc "PutClassValue: in a inherited prop, but CV is local")	 (SubTest ? Tested? ?)	 (PreTest ? Tested? ?)	 (SyntaxTest ? Tested? ?)	 (AltTest ? Tested? ?)	 (UsesObj #((LOOPSTestCases LOOPSTestClass2)		    NIL AllowRemove))	 (SubTestOf #((LTFPutClassValue)		      NIL MakeBackLink))][DEFINST LOOPSTestPrimitive (LTP36 "OTR@@Af")         (name #(LTP36 NIL RememberName))	 (ResetExp (PutClassValue ($ LOOPSTestCases)				  (QUOTE PCV3)				  (QUOTE LTC)))	 (SetUp (PutClassValue ($ LOOPSTestClass3)			       (QUOTE PCV3)			       (QUOTE LTP36)))	 [TestExpr (AND (EQUAL (GetClassValue ($ LOOPSTestClass3)					      (QUOTE PCV3))			       (QUOTE LTP36))			(EQUAL (GetClassValue ($ LOOPSTestCases)					      (QUOTE PCV3))			       (QUOTE LTP36]	 (TestDesc "PutClassValue: inherited CV in class")	 (SubTest #((LTP40)		    NIL MakeBackLink) Tested? ?)	 (PreTest ? Tested? ?)	 (SyntaxTest ? Tested? ?)	 (AltTest ? Tested? ?)	 (UsesObj #((LOOPSTestClass3 LOOPSTestCases)		    NIL AllowRemove))	 (SubTestOf #((LTFPutClassValue)		      NIL MakeBackLink))][DEFINST LOOPSTestPrimitive (LTP35 "OTR@@Ae")         (name #(LTP35 NIL RememberName))	 (ResetExp (PutClassValue ($ LOOPSTestClass3)				  (QUOTE PCV2)				  (QUOTE LTC3)))	 (SetUp (PutClassValue ($ LOOPSTestClass3)			       (QUOTE PCV2)			       (QUOTE LTP35)))	 (TestExpr (EQUAL (GetClassValue ($ LOOPSTestClass3)					 (QUOTE PCV2))			  (QUOTE LTP35)))	 (TestDesc "PutClassValue: local over inherited")	 (SubTest #((LTP39)		    NIL MakeBackLink) Tested? ?)	 (PreTest ? Tested? ?)	 (SyntaxTest ? Tested? ?)	 (AltTest ? Tested? ?)	 (UsesObj #((LOOPSTestClass3 LOOPSTestCases)		    NIL AllowRemove))	 (SubTestOf #((LTFPutClassValue)		      NIL MakeBackLink))][DEFINST LOOPSTestPrimitive (LTP34 "OTR@@Ad")         (name #(LTP34 NIL RememberName))	 (ResetExp (PutClassValue ($ LTCC1)				  (QUOTE PCV1)				  NIL))	 (SetUp (PutClassValue ($ LTCC1)			       (QUOTE PCV1)			       (QUOTE LTP34)))	 (TestExpr (EQUAL (GetClassValue ($ LTCC1)					 (QUOTE PCV1))			  (QUOTE LTP34)))	 (TestDesc "PutClassValue: in an instance")	 (SubTest #((LTP38)		    NIL MakeBackLink) Tested? ?)	 (PreTest ? Tested? ?)	 (CasesUsed #((LTCC1)		      NIL MakeBackLink))	 (SyntaxTest ? Tested? ?)	 (AltTest ? Tested? ?)	 (UsesObj #((LOOPSTestClass3)		    NIL AllowRemove))	 (SubTestOf #((LTFPutClassValue)		      NIL MakeBackLink))][DEFINST LOOPSTestPrimitive (LTP33 "OTR@@Ac")         (name #(LTP33 NIL RememberName))	 (ResetExp (PutClassValue ($ LOOPSTestClass3)				  (QUOTE PCV1)				  NIL				  (QUOTE Prop1)))	 (SetUp (PutClassValue ($ LOOPSTestClass3)			       (QUOTE PCV1)			       (QUOTE LTP33)			       (QUOTE Prop1)))	 (TestExpr (EQUAL (GetClassValue ($ LOOPSTestClass3)					 (QUOTE PCV1)					 (QUOTE Prop1))			  (QUOTE LTP33)))	 (TestDesc "PutClassValue: local prop")	 (SubTest ? Tested? ?)	 (PreTest ? Tested? ?)	 (SyntaxTest ? Tested? ?)	 (AltTest ? Tested? ?)	 (UsesObj #((LOOPSTestClass3)		    NIL AllowRemove))	 (SubTestOf #((LTFPutClassValue)		      NIL MakeBackLink))][DEFINST LOOPSTestPrimitive (LTP29 "OTR@@E")         (name #(LTP29 NIL RememberName))	 (TestExpr (EQUAL (GetClassValue ($ LOOPSTestClass1)					 (QUOTE GCV2))			  (QUOTE LTP29)))	 (TestDesc "GetClassValue: local over inherited")	 (SubTest #((LTP32)		    NIL MakeBackLink) Tested? ?)	 (PreTest ? Tested? ?)	 (SyntaxTest ? Tested? ?)	 (AltTest ? Tested? ?)	 (UsesObj #((LOOPSTestCases LOOPSTestClass1)		    NIL AllowRemove))	 (SubTestOf #((LTFGetClassValue)		      NIL MakeBackLink))][DEFINST LOOPSTestPrimitive (LTP28 "OTR@@E")         (name #(LTP28 NIL RememberName))	 (TestExpr (EQUAL (GetClassValue ($ LOOPSTestClass1)					 (QUOTE GCV1))			  (QUOTE GCV)))	 (TestDesc "GetClassValue: inherit in class")	 (SubTest #((LTP31)		    NIL MakeBackLink) Tested? ?)	 (PreTest ? Tested? ?)	 (SyntaxTest ? Tested? ?)	 (AltTest ? Tested? ?)	 (UsesObj #((LOOPSTestClass1 LOOPSTestCases)		    NIL AllowRemove))	 (SubTestOf #((LTFGetClassValue)		      NIL MakeBackLink))][DEFINST LOOPSTestPrimitive (LTP27 "OTR@@E")         (name #(LTP27 NIL RememberName))	 (TestExpr (EQUAL (GetClassValue ($ LOOPSTestCases)					 (QUOTE GCV1)					 (QUOTE Prop1))			  (QUOTE GCV1)))	 (TestDesc "GetClassValue: prop from a class")	 (SubTest ? Tested? ?)	 (PreTest ? Tested? ?)	 (SyntaxTest ? Tested? ?)	 (AltTest ? Tested? ?)	 (UsesObj #((LOOPSTestCases)		    NIL AllowRemove))	 (SubTestOf #((LTFGetClassValue)		      NIL MakeBackLink))][DEFINST LOOPSTestPrimitive (LTP26 "OTR@@E")         (name #(LTP26 NIL RememberName))	 (TestExpr (EQUAL (GetClassValue ($ LTC7)					 (QUOTE GCV1))			  (QUOTE GCV)))	 (TestDesc "GetClassValue: for an instance")	 (SubTest #((LTP30)		    NIL MakeBackLink) Tested? ?)	 (PreTest ? Tested? ?)	 (CasesUsed #((LTC7)		      NIL MakeBackLink))	 (SyntaxTest ? Tested? ?)	 (AltTest ? Tested? ?)	 (UsesObj #((LOOPSTestCases)		    NIL AllowRemove))	 (SubTestOf #((LTFGetClassValue)		      NIL MakeBackLink))][DEFINST LOOPSTestPrimitive (LTP85 "M]SC@=M[")         (name #(LTP85 NIL RememberName))	 (ResetExp (PutValue ($ LSS2)			     (QUOTE ssVar1)			     0))	 (SetUp (ATEST (SEND ($ LSS2)			     SendSuper5			     (QUOTE ssVar1))		       "Invoke the cascaded _Super scheme")		Tested? #(? NIL FlashTestBrowser) FailedExp ?)	 (TestExpr (EQ (GetValue ($ LSS2)				 (QUOTE ssVar1))		       30)		   FailedExpr ? HowFailed ?)	 (Tested? #(? NIL InformTestBrowser) DoneOnce ?)	 (TestDesc "Cascaded _Super: invoked indirectly")	 (SubTest ? Tested? ? Failed ?)	 (PreTest #(NIL BuildPreTest MakeBackLink) Tested? ? Failed ?)	 (CasesUsed #((LSS2)		      NIL MakeBackLink))	 (SyntaxTest ? Tested? ? Failed ?)	 (AltTest ? Tested? ? Failed ?)	 (UsesObj #((LOOPSTestCases LOOPSTestClass2 LOOPSTestClass1 LOOPSTestSS LOOPSTestSS2)		    NIL AllowRemove))	 (SubTestOf #((LTP83)		      NIL MakeBackLink))][DEFINST LOOPSTestPrimitive (LTP8 "ONR@@A")         (name #(LTP8 NIL RememberName))	 (ResetExp (MoveVariable (QUOTE LOOPSTestCases)				 (QUOTE LOOPSTestClass2)				 (QUOTE MVTest4)))	 (SetUp (MoveVariable (QUOTE LOOPSTestClass2)			      (QUOTE LOOPSTestCases)			      (QUOTE MVTest4)))	 [TestExpr (AND (EQUAL (QUOTE (Prop1 Prop2 doc))			       (SEND ($ LOOPSTestCases)				     List				     (QUOTE IVProps)				     (QUOTE MVTest4)))			(NOT (FMEMB (QUOTE MVTest4)				    (SEND ($ LOOPSTestClass2)					  List					  (QUOTE IVs]	 (TestDesc "if Move Variable moves props up the hierarchy")	 (SubTest ? Tested? ?)	 (PreTest #((LTMListInClass)		    BuildPreTest MakeBackLink) Tested? ?)	 (SyntaxTest ? Tested? ?)	 (AltTest ? Tested? ?)	 (UsesObj #((LOOPSTestClass2 LOOPSTestCases)		    NIL AllowRemove))	 (SubTestOf #((LTP7)		      NIL MakeBackLink))][DEFINST LOOPSTestPrimitive (LTP40 "OTR@@Ak")         (name #(LTP40 NIL RememberName))	 (ResetExp (PutClassValue ($ LOOPSTestCases)				  (QUOTE PCV3)				  (QUOTE LTC)				  (QUOTE Prop1)))	 (SetUp (PutClassValue ($ LOOPSTestClass3)			       (QUOTE PCV3)			       (QUOTE LTP40)			       (QUOTE Prop1)))	 [TestExpr (AND (EQUAL (GetClassValue ($ LOOPSTestClass3)					      (QUOTE PCV3)					      (QUOTE Prop1))			       (QUOTE LTP40))			(EQUAL (GetClassValue ($ LOOPSTestCases)					      (QUOTE PCV3)					      (QUOTE Prop1))			       (QUOTE LTP40]	 (TestDesc "PutClassValue:in a prop inherited in a class")	 (SubTest ? Tested? ?)	 (PreTest ? Tested? ?)	 (SyntaxTest ? Tested? ?)	 (AltTest ? Tested? ?)	 (UsesObj #((LOOPSTestCases LOOPSTestClass3)		    NIL AllowRemove))	 (SubTestOf #((LTP36)		      NIL MakeBackLink))][DEFINST LOOPSTestPrimitive (LTP39 "OTR@@Aj")         (name #(LTP39 NIL RememberName))	 (ResetExp (PutClassValue ($ LOOPSTestClass3)				  (QUOTE PCV2)				  (QUOTE LTC3)				  (QUOTE Prop1)))	 (SetUp (PutClassValue ($ LOOPSTestClass3)			       (QUOTE PCV2)			       (QUOTE LTP39)			       (QUOTE Prop1)))	 (TestExpr (EQUAL (GetClassValue ($ LOOPSTestClass3)					 (QUOTE PCV2)					 (QUOTE Prop1))			  (QUOTE LTP39)))	 (TestDesc "PutClassValue: local prop over inherited")	 (SubTest ? Tested? ?)	 (PreTest ? Tested? ?)	 (SyntaxTest ? Tested? ?)	 (AltTest ? Tested? ?)	 (UsesObj #((LOOPSTestClass3 LOOPSTestCases)		    NIL AllowRemove))	 (SubTestOf #((LTP35)		      NIL MakeBackLink))][DEFINST LOOPSTestPrimitive (LTP38 "OTR@@Ai")         (name #(LTP38 NIL RememberName))	 (ResetExp (PutClassValue ($ LTCC1)				  (QUOTE PCV1)				  NIL				  (QUOTE Prop1)))	 (SetUp (PutClassValue ($ LTCC1)			       (QUOTE PCV1)			       (QUOTE LTP38)			       (QUOTE Prop1)))	 (TestExpr (EQUAL (GetClassValue ($ LTCC1)					 (QUOTE PCV1)					 (QUOTE Prop1))			  (QUOTE LTP38)))	 (TestDesc "PutClassValue: prop via an instance")	 (SubTest ? Tested? ?)	 (PreTest ? Tested? ?)	 (CasesUsed #((LTCC1)		      NIL MakeBackLink))	 (SyntaxTest ? Tested? ?)	 (AltTest ? Tested? ?)	 (UsesObj #((LOOPSTestClass3)		    NIL AllowRemove))	 (SubTestOf #((LTP34)		      NIL MakeBackLink))][DEFINST LOOPSTestPrimitive (LTP32 "OTR@@E")         (name #(LTP32 NIL RememberName))	 (TestExpr (EQUAL (GetClassValue ($ LOOPSTestClass1)					 (QUOTE GCV2)					 (QUOTE Prop1))			  (QUOTE LTP29)))	 (TestDesc "GetClassValue: local prop over inherited")	 (SubTest ? Tested? ?)	 (PreTest ? Tested? ?)	 (SyntaxTest ? Tested? ?)	 (AltTest ? Tested? ?)	 (UsesObj #((LOOPSTestCases LOOPSTestClass1)		    NIL AllowRemove))	 (SubTestOf #((LTP29)		      NIL MakeBackLink))][DEFINST LOOPSTestPrimitive (LTP31 "OTR@@E")         (name #(LTP31 NIL RememberName))	 (TestExpr (EQUAL (GetClassValue ($ LOOPSTestClass1)					 (QUOTE GCV1)					 (QUOTE Prop1))			  (QUOTE GCV1)))	 (TestDesc "GetClassValue: inherit prop in class")	 (SubTest ? Tested? ?)	 (PreTest ? Tested? ?)	 (SyntaxTest ? Tested? ?)	 (AltTest ? Tested? ?)	 (UsesObj #((LOOPSTestClass1 LOOPSTestCases)		    NIL AllowRemove))	 (SubTestOf #((LTP28)		      NIL MakeBackLink))][DEFINST LOOPSTestPrimitive (LTP30 "OTR@@E")         (name #(LTP30 NIL RememberName))	 (TestExpr (EQUAL (GetClassValue ($ LTC7)					 (QUOTE GCV1)					 (QUOTE Prop1))			  (QUOTE GCV1)))	 (TestDesc "GetClassValue: prop in an instance")	 (SubTest ? Tested? ?)	 (PreTest ? Tested? ?)	 (CasesUsed #((LTC7)		      NIL MakeBackLink))	 (SyntaxTest ? Tested? ?)	 (AltTest ? Tested? ?)	 (UsesObj #((LOOPSTestCases)		    NIL AllowRemove))	 (SubTestOf #((LTP26)		      NIL MakeBackLink))](PUTPROPS LTLISPFUNTESTS COPYRIGHT ("Xerox Corporation" 1985))(DECLARE: DONTCOPY  (FILEMAP (NIL)))STOP