(FILECREATED " 2-AUG-83 10:20:06" {PHYLUM}<LISPCORE>SOURCES>PILOTFS.;1              changes to:  (VARS PILOTFSCOMS)      previous date: " 1-AUG-83 16:32:14" {PHYLUM}<GADOL>PILOTFS.;66)(* Copyright (c) 1983 by Xerox Corporation)(PRETTYCOMPRINT PILOTFSCOMS)(RPAQQ PILOTFSCOMS [(RECORDS PhysVolumeDscr SubVolumeDscr LogicalVolumeDscr VFMIndexDscr 			     VFMIntervalDscr KeyDscr Key)	(FNS DifferentFileId MakeCacheEntry PilotFSInit SetUpIntervalCache PFSFileSize 	     PFSFileIntervalSize PFSGetBuffer LvBasePageAddr LvGetPage LvPutPage VFMFindPageAddr 	     VFMInsertInterval VFMMoveKeys VFMFindInterval SetUpVFMPageSearch VFMStartingCacheLevel 	     VFMCompareKey MkStringPtr FirstFreeBit FindSuccessiveFreeBits FreeBitRunLength 	     VAMFindSpace VAMPageAddr VAMAllocateInterval VAMFreeInterval VAMAllocateSpace 	     VAMFreeSpace MKInterval AddToInterval GetPvName GetLvName GetLvNum SetMapBits 	     ClearMapBits)	(MACROS LOCF FADDR PageAddr)	(FNS DsplyPvPage DsplyVolumes DsplyLvPage BFKeyPtr DsplyPage DsplyCacheEntry DsplyWords 	     DsplySubVolEntry ScanFile)	(VARS SubVolumeEntrySize VFMCacheEntrySize VFMKeySize VFMLeafLevel VFMIndexSize)	(MACROS InsertHalfInterval InsertFullInterval LvPagePtr SubVolumeEntryPtr LowerDskAddr 		VFMIntervalPtr EQDskAddr LEQDskAddr MoveWords)	(FILES (SOURCE)	       DLIONIO	       (LOADFROM)	       {Phylum}<lispcore>sources>FileIO {phylum}<lispcore>sources>LLBFS)	(P (SETQ FIXEDFONT (FONTCREATE (QUOTE GACHA)				       10				       (QUOTE MRR)))	   (SETQ FIXEDBOLD (FONTCREATE (QUOTE GACHA)				       10				       (QUOTE BRR)))	   (IF (EQ (MACHINETYPE)		   (QUOTE DANDELION))	       then	       (PilotFSInit])[DECLARE: EVAL@COMPILE (BLOCKRECORD PhysVolumeDscr ((Seal WORD)                     (* Validation)			     (Version WORD)			     (NameLength WORD)			     (PvID 5 WORD)			     (BootingInfo 36 WORD)           (* Defines 4 PILOT file types)			     (Name 40 BYTE)                  (* Ascii name of the volume)			     (SubVolCount WORD)			     (SubVolMrkID 5 WORD)            (* Marker pages belong to this Pseudo File)			     (BadPageCount SWAPPEDFIXP)			     (MaxBadPages SWAPPEDFIXP)			     (OnLineCount WORD)			     (SubVolumes 78 WORD)            (* See SubVoluemDscr record for description of each of 							     six entries stored here)			     (Fill1 99 WORD)			     (LocalTimeParmValid WORD)			     (LocalTimeParm 2 WORD)			     (CheckSum WORD))			    (SYSTEM))(BLOCKRECORD SubVolumeDscr ((LvID 5 WORD)                    (* Logical Volume ID)			    (LvSize SWAPPEDFIXP)             (* Size for the complete voluem..may span packs some 							     day)			    (LvPage SWAPPEDFIXP)             (* Typically 0)			    (PvPage SWAPPEDFIXP)             (* Disk Address of the beginning of the volume See 							     LogicalVolumeDscr Record NIL)			    (NPages SWAPPEDFIXP)             (* Number of Pages of Volume in this Phisycal Volume)			    )			   (SYSTEM))(BLOCKRECORD LogicalVolumeDscr ((Seal WORD)                  (* Validation)				(Version WORD)				(LvID 5 WORD)                (* ID of This Volume)				(NameLength WORD)            (* Length of th ASCII name of this volume)				(Name 40 BYTE)               (* Volume name in AScII)				(Type WORD)				(VolumeSize SWAPPEDFIXP)     (* Number of pages in this volume)				(BootingInfo 54 WORD)        (* Defines 6 PILOT file types)				(TreeDepth WORD)				(Changing WORD)				(FreePageCount SWAPPEDFIXP)                                                             (* Number of free pages remaining)				(VAMStart SWAPPEDFIXP)				(VFMStart SWAPPEDFIXP)       (* Relative address of the staà of the volume file map)				(LowerBound SWAPPEDFIXP)				(RootFileID 45 WORD)				(VolumeRootDirectory 5 WORD)				(Padding WORD)				(IntervalCache 96 WORD)      (* One entry for each level of the B-Tree)				(Fill 6 WORD)				(VFMLowKey 7 WORD)				(CheckSum WORD))			       (SYSTEM))(BLOCKRECORD VFMIndexDscr ((Key 7 WORD)			   (PageNumber SWAPPEDFIXP)			   (EntrySize WORD))			  (SYSTEM))(BLOCKRECORD VFMIntervalDscr ((Key 7 WORD)                   (* Lower Bound Key)			      (PageNumber SWAPPEDFIXP)       (* Relative page number of page with lower bound key)			      (NextKey 7 WORD)               (* Upper bound of key range)			      )			     (SYSTEM))(BLOCKRECORD KeyDscr ((FileID 5 WORD)                        (* File ID part of the key)		      (FilePage SWAPPEDFIXP)                 (* Offset into file)		      )		     (SYSTEM))(DATATYPE Key ((FileId 5 WORD)	       (FilePage SWAPPEDFIXP)))](/DECLAREDATATYPE (QUOTE Key)		  (QUOTE (WORD WORD WORD WORD WORD SWAPPEDFIXP)))(DEFINEQ(DifferentFileId  [LAMBDA (Key1 Key2)                                        (* SDG "28-JUN-83 11:00")    (for I from 0 to 4 thereis (NEQ (\GETBASE Key1 I)				    (\GETBASE Key2 I])(MakeCacheEntry  [LAMBDA (CachePtr KeyPtr FilePage NextKeyPtr)              (* edited: " 9-JUN-83 10:22")    (\BLT (FADDR CachePtr (VFMIntervalDscr Key))	  KeyPtr VFMKeySize)    (replace (VFMIntervalDscr PageNumber) of CachePtr with FilePage)    (\BLT (FADDR CachePtr (VFMIntervalDscr NextKey))	  NextKeyPtr VFMKeySize])(PilotFSInit  [LAMBDA NIL                                                (* SDG "28-JUL-83 19:46")    (SETQ \PhysVolumePage (NCREATE (QUOTE VMEMPAGEP)))    (SETQ \PFSPage (NCREATE (QUOTE VMEMPAGEP)))    (\DL.XFERDISK 0 \PhysVolumePage)    (SETQ \PFSCurrentPage (LIST NIL NIL NIL))    (SETQ \LogicalVolumes (ARRAY 6 (QUOTE POINTER)))    (SETQ \PFSDevices (ARRAY 6 (QUOTE POINTER)))    (SETQ \VFMPage (NCREATE (QUOTE VMEMPAGEP)))    (SETQ \VolumeDsplyWindow NIL)    (for I from 1 to (fetch (PhysVolumeDscr SubVolCount) of \PhysVolumePage)       do (SETA \LogicalVolumes I (NCREATE (QUOTE VMEMPAGEP)))	  (\DL.XFERDISK (LvBasePageAddr I)			(LvPagePtr I))	  (SetUpIntervalCache I)	  (SETA \PFSDevices I (\PFSOpenDiskDevice I))	  (PROMPTPRINT (CONCAT "Opened local disk volume " "{" (fetch (FDEV DEVICENAME)								  of (ELT \PFSDevices I))			       "}"))       finally (QUOTE Initialized))    (DsplyVolumes])(SetUpIntervalCache  [LAMBDA (VolNum)                                           (* SDG " 9-JUN-83 12:58")    (PROG (LvPtr CachePtr LowKeyPtr VFMPagePtr)          (SETQ LvPtr (LvPagePtr VolNum))          (SETQ CachePtr (FADDR LvPtr (LogicalVolumeDscr IntervalCache)))          (SETQ VFMPagePtr (LvGetPage VolNum (fetch (LogicalVolumeDscr VFMStart) of LvPtr)))          (SETQ LowKeyPtr (FADDR LvPtr (LogicalVolumeDscr VFMLowKey)))          (for I from 0 to VFMKeySize do (\PUTBASE LowKeyPtr I 0))          (for Index from 0 to (SUB1 (fetch (LogicalVolumeDscr TreeDepth) of LvPtr))	     do (MakeCacheEntry CachePtr LowKeyPtr (fetch (VFMIndexDscr PageNumber) of VFMPagePtr)				(FADDR VFMPagePtr (VFMIndexDscr Key)))		(SETQ VFMPagePtr (LvGetPage VolNum (fetch (VFMIndexDscr PageNumber) of VFMPagePtr)))		(SETQ CachePtr (\ADDBASE CachePtr VFMCacheEntrySize])(PFSFileSize  [LAMBDA (VolNum KeyPtr)                                    (* SDG "27-JUN-83 14:24")    (PROG (PageAddr)          (SETQ PageAddr (fetch (KeyDscr FilePage) of KeyPtr))          [replace (KeyDscr FilePage) of KeyPtr with (SUB1 (fetch (KeyDscr FilePage)							      of (FADDR (VFMIntervalPtr VolNum 4)									(VFMIntervalDscr NextKey]          (VFMFindPageAddr VolNum KeyPtr)          (replace (KeyDscr FilePage) of KeyPtr with PageAddr)          (RETURN (fetch (KeyDscr FilePage) of (FADDR (VFMIntervalPtr VolNum 0)						      (VFMIntervalDscr Key])(PFSFileIntervalSize  [LAMBDA (Volnum KeyPtr)                                    (* SDG " 9-JUN-83 14:40")    (PROG (CacheIntervalPtr)          (SETQ CacheIntervalPtr (VFMIntervalPtr Volnum VFMLeafLevel))          [if (NULL KeyPtr)	      then (SETQ KeyPtr (FADDR CacheIntervalPtr (VFMIntervalDscr Key]          (RETURN (IDIFFERENCE (fetch (KeyDscr FilePage) of (FADDR CacheIntervalPtr (VFMIntervalDscr								     NextKey)))			       (fetch (KeyDscr FilePage) of KeyPtr])(PFSGetBuffer  [LAMBDA NIL                                                (* sg: " 8-JUN-83 16:30")    \PFSPage])(LvBasePageAddr  [LAMBDA (LVNum)                                            (* SDG " 7-JUN-83 09:12")    (fetch (SubVolumeDscr PvPage) of (SubVolumeEntryPtr LVNum])(LvGetPage  [LAMBDA (VolNum PageAddr)                                  (* SDG "19-JUN-83 16:20")    (PROG (Buffer)          (if (AND (EQ VolNum (CAR \PFSCurrentPage))		   (EQ PageAddr (CADR \PFSCurrentPage)))	      then (SETQ Buffer (CADDR \PFSCurrentPage))	    else [SETQ \PFSCurrentPage (LIST VolNum PageAddr (SETQ Buffer (PFSGetBuffer]		 (\DL.XFERDISK (IPLUS (LvBasePageAddr VolNum)				      PageAddr)			       Buffer))          (RETURN Buffer])(LvPutPage  [LAMBDA (VolNum PageAddr PagePtr)                          (* SDG "21-JUN-83 09:14")    (\DL.XFERDISK (IPLUS (LvBasePageAddr VolNum)			 PageAddr)		  PagePtr T)    (SETQ \PFSCurrentPage (LIST VolNum PageAddr PagePtr])(VFMFindPageAddr  [LAMBDA (VolNum KeyPtr)                                    (* SDG " 9-JUN-83 13:55")    (PROG (CacheIntervalPtr StartingLevel)          (SETQ StartingLevel (VFMStartingCacheLevel VolNum KeyPtr))          (SETQ CacheIntervalPtr (VFMFindInterval VolNum KeyPtr StartingLevel))          (if CacheIntervalPtr	      then [RETURN (IPLUS (fetch (VFMIntervalDscr PageNumber) of CacheIntervalPtr)				  (IDIFFERENCE (fetch (KeyDscr FilePage) of KeyPtr)					       (fetch (KeyDscr FilePage) of (FADDR CacheIntervalPtr										   (VFMIntervalDscr										     Key]	    else (RETURN NIL])(VFMInsertInterval  [LAMBDA (VolNum NewKey IntervalSize StartPage)             (* SDG "29-JUN-83 09:24")    (PROG (VFMCachePtr VFMPage VFMPagePtr FreeEntryIndex FreeEntryPtr VFMEntryPtr NextEntryPtr 		       WordsToMove)          (SETQ WordsToMove (ITIMES 2 VFMIndexSize))          (VFMFindPageAddr VolNum NewKey)          (SETQ VFMCachePtr (VFMIntervalPtr VolNum VFMLeafLevel))          [SETQ VFMPage (fetch (VFMIntervalDscr PageNumber) of (VFMIntervalPtr VolNum (ADD1 										     VFMLeafLevel]          (SETQ VFMPagePtr (LvGetPage VolNum VFMPage))          (SETQ FreeEntryIndex (\GETBASE VFMPagePtr 250))          (SETQ FreeEntryPtr (\ADDBASE VFMPagePtr FreeEntryIndex))          (if (ILEQ FreeEntryIndex (IDIFFERENCE 250 WordsToMove))	      then (SETQ VFMEntryPtr VFMPagePtr)		   (while (AND [NOT (EQUAL VFMEntryPtr (\ADDBASE VFMPagePtr (IDIFFERENCE 										   FreeEntryIndex 										     VFMIndexSize]			       (VFMCompareKey (FADDR VFMEntryPtr (VFMIndexDscr Key))					      NewKey					      (QUOTE <)))		      do (SETQ VFMEntryPtr (\ADDBASE VFMEntryPtr VFMIndexSize)))		   (COND		     ((DifferentFileId NewKey (FADDR VFMEntryPtr (VFMIndexDscr Key)))		       (InsertFullInterval))		     ([NEQ (fetch (KeyDscr FilePage) of NewKey)			   (fetch (KeyDscr FilePage) of (FADDR VFMEntryPtr (VFMIndexDscr Key]		       (InsertFullInterval))		     ((EQ [IPLUS (fetch (VFMIndexDscr PageNumber) of VFMEntryPtr)				 (IDIFFERENCE (fetch (KeyDscr FilePage) of NewKey)					      (fetch (KeyDscr FilePage) of (\ADDBASE VFMEntryPtr										     (MINUS 										     VFMIndexSize]			  StartPage)		       (replace (KeyDscr FilePage) of VFMEntryPtr with (IPLUS (fetch (KeyDscr 											 FilePage)										 of VFMEntryPtr)									      IntervalSize)))		     (T (InsertHalfInterval)))		   (MakeCacheEntry VFMCachePtr NewKey StartPage NextEntryPtr)		   (LvPutPage VolNum VFMPage VFMPagePtr)		   (RETURN VFMPagePtr])(VFMMoveKeys  [LAMBDA (VFMPagePtr StartPtr DestPtr)                      (* SDG "23-JUN-83 14:24")    (PROG (MoveSize)          (SETQ MoveSize (IDIFFERENCE DestPtr StartPtr))          (while (NOT (ZEROP MoveSize))	     do (\BLT DestPtr (\ADDBASE VFMPagePtr SIndex)		      StartPtr)		(SETQ MoveSize (IDIFFERENCE MoveSize VFMKeySize))		(SETQ DestPtr (\ADDBASE DestPtr VFMKeySize))		(SETQ StartPtr (\ADDBASE StartPtr VFMKeySize])(VFMFindInterval  [LAMBDA (VolNum KeyPtr StartingCacheLevel)                 (* SDG "10-JUN-83 13:19")    (PROG ((CacheLevel StartingCacheLevel)	   (VFMCacheIntervalPtr (VFMIntervalPtr VolNum StartingCacheLevel))	   LowKeyPtr HighKeyPtr VFMInterval VFMPage VFMIndex)          (if (EQUAL StartingCacheLevel VFMLeafLevel)	      then (RETURN VFMCacheIntervalPtr))          (SetUpVFMPageSearch)          (RETURN (while (VFMCompareKey LowKeyPtr KeyPtr (QUOTE <=))		     do [if (AND (VFMCompareKey LowKeyPtr KeyPtr (QUOTE <=))				 (VFMCompareKey KeyPtr (FADDR VFMIndex (VFMIndexDscr Key))						(QUOTE <)))			    then [if (EQUAL CacheLevel VFMLeafLevel)				     then (MakeCacheEntry VFMCacheIntervalPtr LowKeyPtr							  (fetch (VFMIndexDscr PageNumber)							     of VFMIndex)							  (FADDR VFMIndex (VFMIndexDscr Key)))					  (RETURN VFMCacheIntervalPtr)				   else (SETQ CacheLevel (SUB1 CacheLevel))					(SETQ VFMCacheIntervalPtr (VFMIntervalPtr VolNum CacheLevel))					(MakeCacheEntry VFMCacheIntervalPtr LowKeyPtr							(fetch (VFMIndexDscr PageNumber)							   of VFMIndex)							(FADDR VFMIndex (VFMIndexDscr Key]			  else (SETQ LowKeyPtr (FADDR VFMIndex (VFMIndexDscr Key)))			       (SETQ VFMIndex (\ADDBASE VFMIndex (fetch (VFMIndexDscr EntrySize)								    of VFMIndex]		     finally (MakeCacheEntry VFMCacheIntervalPtr LowKeyPtr (fetch (VFMIndexDscr										    PageNumber)									      of VFMIndex)					     (FADDR VFMIndex (VFMIndexDscr Key)))			     (RETURN NIL])(SetUpVFMPageSearch  [LAMBDA NIL                                                (* sg: " 9-JUN-83 12:30")    (SETQ LowKeyPtr (FADDR VFMCacheIntervalPtr (VFMIntervalDscr Key)))    (SETQ HighKeyPtr (FADDR VFMCacheIntervalPtr (VFMIntervalDscr NextKey)))    (SETQ VFMPage (LvGetPage VolNum (fetch (VFMIntervalDscr PageNumber) of VFMCacheIntervalPtr)))    (SETQ VFMIndex VFMPage])(VFMStartingCacheLevel  [LAMBDA (VolNum KeyPtr)                                    (* SDG "10-JUN-83 13:27")    (PROG ((LvPage (LvPagePtr VolNum))	   MaxCacheIndex CachePtr)          (SETQ MaxCacheIndex (SUB1 (fetch (LogicalVolumeDscr TreeDepth) of LvPage)))          (RETURN (for CacheLevel from 0 to MaxCacheIndex		     do (SETQ CachePtr (VFMIntervalPtr VolNum CacheLevel))			(if (AND (VFMCompareKey (FADDR CachePtr (VFMIntervalDscr Key))						KeyPtr						(QUOTE <=))				 (VFMCompareKey KeyPtr (FADDR CachePtr (VFMIntervalDscr NextKey))						(QUOTE <)))			    then (RETURN CacheLevel))		     finally (RETURN NIL])(VFMCompareKey  [LAMBDA (Key1 Key2 Operation)                              (* SDG "14-JUN-83 15:05")    (SELECTQ Operation	     [= (for I from 0 to 4 do (COND					((NOT (EQ (\GETBASE Key1 I)						  (\GETBASE Key2 I)))					  (RETURN NIL)))		   finally (RETURN (EQDskAddr (FADDR Key1 (KeyDscr FilePage))					      (FADDR Key2 (KeyDscr FilePage]	     [<= (for I from 0 to 4 do [COND					 ((NOT (EQ (\GETBASE Key1 I)						   (\GETBASE Key2 I)))					   (RETURN (ILESSP (\GETBASE Key1 I)							   (\GETBASE Key2 I]		    finally (RETURN (LEQDskAddr (FADDR Key1 (KeyDscr FilePage))						(FADDR Key2 (KeyDscr FilePage]	     [< (for I from 0 to 4 do [COND					((NOT (EQ (\GETBASE Key1 I)						  (\GETBASE Key2 I)))					  (RETURN (ILESSP (\GETBASE Key1 I)							  (\GETBASE Key2 I]		   finally (RETURN (LowerDskAddr (FADDR Key1 (KeyDscr FilePage))						 (FADDR Key2 (KeyDscr FilePage]	     (SHOULDNT])(MkStringPtr  [LAMBDA (Addr Len)                                         (* SDG "17-JUN-83 14:16")    (PROG ((STR "Dsk"))          (\PUTBASEPTR STR 0 Addr)          (\PUTBASE STR 2 Len)          (RETURN STR])(FirstFreeBit  [LAMBDA (W)                                                (* SDG "16-JUN-83 08:58")    (PROG (W1)          (RETURN (for I from 0 to 15		     do (SETQ W1 (LRSH W (IDIFFERENCE 15 I)))			(COND			  ((EVENP W1)			    (RETURN I)			    finally			    (RETURN NIL])(FindSuccessiveFreeBits  [LAMBDA (W)                                                (* SDG "19-JUN-83 15:31")    (PROG ((START (FirstFreeBit W)))          (RETURN (if START		      then (CONS START (FreeBitRunLength W START))		    else NIL])(FreeBitRunLength  [LAMBDA (W S)                                              (* SDG "16-JUN-83 09:13")    (PROG (W1)          (RETURN (for I from S to 15		     do (SETQ W1 (LRSH W (IDIFFERENCE 15 I)))			[COND			  ((ODDP W1)			    (RETURN (IDIFFERENCE I S]		     finally (RETURN (IDIFFERENCE 16 S])(VAMFindSpace  [LAMBDA (VolNum Needed)                                    (* SDG "22-JUN-83 16:43")    (PROG ((Found 0)	   (Index -1)	   [MaxVAMPageNumber (SUB1 (fetch (LogicalVolumeDscr VFMStart) of (LvPagePtr VolNum]	   (VAMStart (fetch (LogicalVolumeDscr VAMStart) of (LvPagePtr VolNum)))	   Result VAMPageNumber Interval LeftOver VAMPtr VAMWord)          (if (ILESSP (fetch (LogicalVolumeDscr FreePageCount) of (LvPagePtr VolNum))		      Needed)	      then (RETURN NIL))          (SETQ VAMPageNumber 0)          (while (AND (ILESSP Found Needed)		      (LEQ VAMPageNumber MaxVAMPageNumber))	     do [if (NULL VAMPtr)		    then (SETQ VAMPtr (LvGetPage VolNum (IPLUS VAMStart VAMPageNumber]		(while (AND (ILESSP Index 255)			    (ILESSP Found Needed))		   do (if (NEQ [SETQ VAMWord (\GETBASE VAMPtr (SETQ Index (ADD1 Index]			       65535)			  then (SETQ Interval (MKInterval VAMPageNumber Index VAMWord))			       (SETQ Result				 (CONS (if (EQ (IPLUS (FirstFreeBit VAMWord)						      (CDR Interval))					       16)					   then (while [AND (ILESSP Index 255)							    (ILESSP (IPLUS Found (CDR Interval))								    Needed)							    (ZEROP (SETQ VAMWord								     (\GETBASE VAMPtr (SETQ Index										 (ADD1 Index]						   do (AddToInterval Interval 16)						   finally						    (if [AND (NEQ VAMWord 65535)							     (ZEROP (CAR (SETQ LeftOver									   (MKInterval VAMPageNumber 										       Index VAMWord]							then (AddToInterval Interval (CDR LeftOver)))						    (SETQ Found (IPLUS Found (CDR Interval)))						    (RETURN Interval))					 else Interval)				       Result)))		   finally (SETQ VAMPtr NIL)			   (SETQ VAMPageNumber (ADD1 VAMPageNumber))			   (SETQ Index -1)))          (RETURN Result])(VAMPageAddr  [LAMBDA (VolNum VAMPageNumber)                             (* SDG "27-JUN-83 12:06")    (IPLUS (IQUOTIENT VAMPageNumber 4096)	   (fetch (LogicalVolumeDscr VAMStart) of (LvPagePtr VolNum])(VAMAllocateInterval  [LAMBDA (VAMPtr PageNum Len)                               (* SDG "21-JUN-83 09:08")    (PROG (L StartBit Index)          (SETQ Index (IQUOTIENT (IMOD PageNum 4096)				 16))          (SETQ StartBit (IMOD PageNum 16))          (while (NOT (ZEROP Len))	     do (SETQ L (IMIN (IDIFFERENCE 16 StartBit)			      Len))		(\PUTBASE VAMPtr Index (SetMapBits (\GETBASE VAMPtr Index)						   StartBit L))		(SETQ Len (IDIFFERENCE Len L))		(SETQ StartBit 0)		(SETQ Index (ADD1 Index])(VAMFreeInterval  [LAMBDA (VAMPtr PageNum Len)                               (* SDG "19-JUN-83 14:58")    (PROG (L StartBit Index)          (SETQ Index (IQUOTIENT (IMOD PageNum 4096)				 16))          (SETQ StartBit (IMOD PageNum 16))          (while (NOT (ZEROP Len))	     do (SETQ L (IMIN (IDIFFERENCE 16 StartBit)			      Len))		(\PUTBASE VAMPtr Index (ClearMapBits (\GETBASE VAMPtr Index)						     StartBit L))		(SETQ Len (IDIFFERENCE Len L))		(SETQ StartBit 0)		(SETQ Index (ADD1 Index])(VAMAllocateSpace  [LAMBDA (VolNum Needed)                                    (* SDG "24-JUN-83 10:58")    (PROG (VAMPtr PossibleSpace VAMPage Interval StartInterval Taken Result)          (SETQ PossibleSpace (VAMFindSpace VolNum Needed))          (if PossibleSpace	      then (while (NOT (ZEROP Needed))		      do (SETQ Interval (CAR PossibleSpace))			 (SETQ Taken (IMIN (CDR Interval)					   Needed))			 (SETQ StartInterval (CAR Interval))			 (SETQ VAMPage (VAMPageAddr VolNum StartInterval))			 (SETQ VAMPtr (LvGetPage VolNum VAMPage))			 (VAMAllocateInterval VAMPtr StartInterval Taken)			 (LvPutPage VolNum VAMPage VAMPtr)			 (SETQ Result (CONS (CONS StartInterval Taken)					    Result))			 (replace (LogicalVolumeDscr FreePageCount) of (LvPagePtr VolNum)			    with (IDIFFERENCE (fetch (LogicalVolumeDscr FreePageCount)						 of (LvPagePtr VolNum))					      Taken))			 (SETQ Needed (IDIFFERENCE Needed Taken))			 (SETQ PossibleSpace (CDR PossibleSpace)))		   (LvPutPage VolNum 0 (LvPagePtr VolNum))		   (DsplyVolumes))          (RETURN Result])(VAMFreeSpace  [LAMBDA (VolNum Start Len)                                 (* SDG "24-JUN-83 10:57")    (PROG (VAMPage VAMPtr)          (SETQ VAMPage (VAMPageAddr VolNum Start))          (SETQ VAMPtr (LvGetPage VolNum VAMPage))          (VAMFreeInterval VAMPtr Start Len)          (LvPutPage VolNum VAMPage VAMPtr)          (replace (LogicalVolumeDscr FreePageCount) of (LvPagePtr VolNum)	     with (IPLUS (fetch (LogicalVolumeDscr FreePageCount) of (LvPagePtr VolNum))			 Len))          (LvPutPage VolNum 0 (LvPagePtr VolNum))          (DsplyVolumes)          (RETURN VAMPtr])(MKInterval  [LAMBDA (PageNum Index Word)                               (* SDG "17-JUN-83 14:02")    (PROG (Intr)          [if (SETQ Intr (FindSuccessiveFreeBits Word))	      then (RPLACA Intr (IPLUS (ITIMES PageNum 4096)				       (ITIMES Index 16)				       (CAR Intr]          (RETURN Intr])(AddToInterval  [LAMBDA (Interval Num)                                     (* SDG "16-JUN-83 15:27")    (RPLACD Interval (IPLUS Num (CDR Interval])(GetPvName  [LAMBDA NIL                                                (* SDG "22-JUN-83 16:11")    (MkStringPtr (FADDR \PhysVolumePage (PhysVolumeDscr Name))		 (fetch (PhysVolumeDscr NameLength) of \PhysVolumePage])(GetLvName  [LAMBDA (VolNum)                                           (* SDG "17-JUN-83 14:32")    (MkStringPtr (FADDR (LvPagePtr VolNum)			(LogicalVolumeDscr Name))		 (fetch (LogicalVolumeDscr NameLength) of (LvPagePtr VolNum])(GetLvNum  [LAMBDA (LvName)                                           (* SDG "17-JUN-83 14:45")    (for I from 1 to (fetch (PhysVolumeDscr SubVolCount) of \PhysVolumePage)       do (if (STREQUAL (GetLvName I)			LvName)	      then (RETURN I])(SetMapBits  [LAMBDA (Word Start Count)                                 (* SDG "21-JUN-83 22:58")    (PROG ((Mask 0))          [for I from 1 to Count	     do (SETQ Mask (LOGOR Mask 1))		(if (ILESSP I Count)		    then (SETQ Mask (LSH Mask 1]          [SETQ Mask (LSH Mask (IDIFFERENCE 16 (IPLUS Start Count]          (RETURN (LOGOR Word Mask])(ClearMapBits  [LAMBDA (Word Start Count)                                 (* SDG "19-JUN-83 14:07")    (PROG ((RMask 0)	   (LMask 0))          [SETQ RMask (SetMapBits 0 (IPLUS Start Count)				  (IDIFFERENCE 16 (IPLUS Start Count]          (SETQ LMask (SetMapBits 0 0 Start))          (RETURN (LOGAND Word (LOGOR LMask RMask]))(DECLARE: EVAL@COMPILE (PUTPROPS LOCF DMACRO (X (TRANSLATE.LOCF X)))(PUTPROPS LOCF MACRO (X (TRANSLATE.LOCF X)))(PUTPROPS FADDR MACRO ((Parm Fld)		       (LOCF (fetch Fld of Parm))))(PUTPROPS PageAddr MACRO ((L)			  (CDR (LOC L)))))(DEFINEQ(DsplyPvPage  [LAMBDA NIL                                                (* sg: " 8-JUN-83 19:26")    (INSPECT \PhysVolumePage (QUOTE PhysVolumeDscr])(DsplyVolumes  [LAMBDA NIL                                                (* SDG "23-JUN-83 10:43")    (if (NULL \VolumeDsplyWindow)	then (SETQ \VolumeDsplyWindow (CREATEW (create REGION						       WIDTH _ 280						       HEIGHT _(IPLUS 45 (ITIMES 15										 (fetch (PhysVolumeDscr SubVolCount) of \PhysVolumePage)))						       LEFT _ 100						       BOTTOM _ 50)					       "1108 InterLisp File System"))      else (CLEARW \VolumeDsplyWindow))    (printout \VolumeDsplyWindow # (DSPFONT FIXEDFONT \VolumeDsplyWindow)	      "Physical Volume: " # (DSPFONT FIXEDBOLD \VolumeDsplyWindow)	      (GetPvName)	      #	      (DSPFONT FIXEDFONT \VolumeDsplyWindow)	      T "Logical Volumes:" T)    (for I from 1 to (fetch (PhysVolumeDscr SubVolCount) of \PhysVolumePage)       do (printout \VolumeDsplyWindow # (DSPFONT FIXEDFONT \VolumeDsplyWindow)		    "  " I " " # (DSPFONT FIXEDBOLD \VolumeDsplyWindow)		    (GetLvName I)		    "  " # (DSPFONT FIXEDFONT \VolumeDsplyWindow)		    .FR 18 (fetch (LogicalVolumeDscr VolumeSize) of (LvPagePtr I))		    "  Pages" .FR 30 (fetch (LogicalVolumeDscr FreePageCount) of (LvPagePtr I))		    "  Free" .FONT DEFAULTFONT T])(DsplyLvPage  [LAMBDA (I)                                                (* sg: " 8-JUN-83 19:25")    (INSPECT (LvPagePtr I)	     (QUOTE LogicalVolumeDscr])(BFKeyPtr  [LAMBDA (V N)                                              (* SDG "10-JUN-83 11:44")    (\ADDBASE (FADDR (LvPagePtr V)		     (LogicalVolumeDscr BootingInfo))	      (ITIMES (SUB1 N)		      9])(DsplyPage  [LAMBDA (VolNum PageAddr)                                  (* SDG "22-JUN-83 19:20")    (DsplyWords (LvGetPage VolNum PageAddr)		256])(DsplyCacheEntry  [LAMBDA (V L)                                              (* SDG "23-JUN-83 22:04")    (DsplyWords (VFMIntervalPtr V L)		VFMCacheEntrySize])(DsplyWords  [LAMBDA (Start Number)                                     (* edited: " 9-JUN-83 10:04")    (for I from 0 to (SUB1 Number)       do (PRIN1 (\GETBASE Start I))	  (PRIN1 " "))    (TERPRI])(DsplySubVolEntry  [LAMBDA (Vol)                                              (* edited: " 8-JUN-83 19:57")    (INSPECT (SubVolumeEntryPtr Vol)	     (QUOTE SubVolumeDscr])(ScanFile  [LAMBDA (Vol Key)                                          (* SDG " 9-JUN-83 14:23")    (PROG (FileSize StartPage)          (SETQ FileSize (PFSFileSize Vol Key))          (SETQ StartPage (fetch (KeyDscr FilePage) of Key))          [while (ILESSP (fetch (KeyDscr FilePage) of Key)			 FileSize)	     do (SETQ PG (fetch (KeyDscr FilePage) of Key))		(LvGetPage Vol PG)		(if (EQ (IMOD PG 100)			0)		    then (PRIN1 " ")			 (PRIN1 PG))		(replace (KeyDscr FilePage) of Key with (ADD1 (fetch (KeyDscr FilePage) of Key]          (replace (KeyDscr FilePage) of Key with StartPage)          (TERPRI]))(RPAQQ SubVolumeEntrySize 13)(RPAQQ VFMCacheEntrySize 16)(RPAQQ VFMKeySize 7)(RPAQQ VFMLeafLevel 0)(RPAQQ VFMIndexSize 10)(DECLARE: EVAL@COMPILE (PUTPROPS InsertHalfInterval MACRO (NIL (SETQ NextEntryPtr (\ADDBASE VFMEntryPtr VFMIndexSize))					(SETQ WordsToMove VFMIndexSize)					[MoveWords VFMEntryPtr NextEntryPtr						   (IPLUS VFMIndexSize (IDIFFERENCE (PageAddr 										     FreeEntryPtr)										    (PageAddr 										     NextEntryPtr]					(SETQ VFMEntryPtr NextEntryPtr)					(SETQ NextEntryPtr (\ADDBASE NextEntryPtr VFMIndexSize))					(\PUTBASE VFMPagePtr 250 (IPLUS FreeEntryIndex WordsToMove))					(replace (KeyDscr FilePage) of VFMEntryPtr					   with (IPLUS (fetch (KeyDscr FilePage) of VFMEntryPtr)						       IntervalSize))					(replace (VFMIndexDscr PageNumber) of VFMEntryPtr					   with StartPage)))(PUTPROPS InsertFullInterval MACRO (NIL (SETQ NextEntryPtr (\ADDBASE VFMEntryPtr WordsToMove))					(MoveWords VFMEntryPtr NextEntryPtr (IDIFFERENCE						     (PageAddr FreeEntryPtr)						     (PageAddr VFMEntryPtr)))					(\PUTBASE VFMPagePtr 250 (IPLUS FreeEntryIndex WordsToMove))					(\BLT VFMEntryPtr NewKey VFMKeySize)					(\BLT (\ADDBASE VFMEntryPtr VFMIndexSize)					      NewKey VFMKeySize)					(replace (VFMIndexDscr PageNumber) of VFMEntryPtr					   with (fetch (VFMIndexDscr PageNumber) of NextEntryPtr))					(replace (VFMIndexDscr PageNumber) of NextEntryPtr					   with 0)					(SETQ NextEntryPtr (\ADDBASE VFMEntryPtr VFMIndexSize))					(replace (KeyDscr FilePage) of NextEntryPtr					   with (IPLUS (fetch (KeyDscr FilePage) of VFMEntryPtr)						       IntervalSize))					(replace (VFMIndexDscr PageNumber) of NextEntryPtr					   with StartPage)					(replace (VFMIndexDscr EntrySize) of NextEntryPtr					   with VFMIndexSize)))(PUTPROPS LvPagePtr MACRO ((I)			   (ELT \LogicalVolumes I)))(PUTPROPS SubVolumeEntryPtr MACRO ((LVNum)                   (* edited: " 7-JUN-83 14:02")				   (\ADDBASE (FADDR \PhysVolumePage (PhysVolumeDscr SubVolumes))					     (ITIMES (SUB1 LVNum)						     SubVolumeEntrySize))))(PUTPROPS LowerDskAddr MACRO ((Da1 Da2)			      (