(FILECREATED "11-Jan-85 23:20:30" {ERIS}<LISPCORE>LIBRARY>RS232LOGIN.;9 17350        changes to:  (VARS RS232LOGINCOMS)		   (FNS RS232LOGIN)      previous date: " 5-Oct-84 00:25:31" {ERIS}<LISPCORE>LIBRARY>RS232LOGIN.;8)(* Copyright (c) 1983, 1984, 1985 by Xerox Corporation. All rights reserved.)(PRETTYCOMPRINT RS232LOGINCOMS)(RPAQQ RS232LOGINCOMS ((FILES (SYSLOAD)			      RS232)		       (* LOGIN facilities)		       (DECLARE: EVAL@COMPILE DONTCOPY (P (OR (GETMACROPROP (QUOTE 									     RS232INITIALIZECHECK)									    COMPILERMACROPROPS)							      (LOADFROM (QUOTE RS232)))))		       (RECORDS LOGINSYSTEMTYPE)		       (VARS RS232OSTYPES RS232LOGINSYSTEMTYPEINFO)		       (FNS RS232.PROMPT&LOGIN RS232LOGIN \RS232LOGIN.CHECKSTOP \RS232LOGIN.MSGDALLY 			    \RS232LOGIN.SENDPAGESIZE \RS232.P&L.FINDGOODNAMES)		       (INITVARS (\RS232LOGIN.LASTHOSTNAME NIL)				 (\RS232LOGIN.LASTHOSTSYSTEMTYPE NIL)				 (\RS232LOGIN.TIMER (SETUPTIMER 0))				 (\RS232STRPTR (ALLOCSTRING 0)))		       (GLOBALVARS RS232OSTYPES RS232LOGINSYSTEMTYPEINFO \RS232LOGIN.LASTHOSTNAME 				   \RS232LOGIN.LASTHOSTSYSTEMTYPE \RS232LOGIN.TIMER \RS232STRPTR)		       (INITVARS (\RS232CHAT7? T)				 (\RS232CHAT.EOLsequence "")				 (\RS232CHAT.NEWLINECHAR (CHARCODE LF))				 (\RS232CHAT.IgnoreCharcodes (LIST (CHARCODE NULL))))		       (GLOBALVARS \RS232CHAT7?)		       (SPECVARS \RS232CHAT.NEWLINECHAR \RS232CHAT.EOLsequence 				 \RS232CHAT.IgnoreCharcodes)))(FILESLOAD (SYSLOAD)	   RS232)(* LOGIN facilities)(DECLARE: EVAL@COMPILE DONTCOPY (OR (GETMACROPROP (QUOTE RS232INITIALIZECHECK)		  COMPILERMACROPROPS)    (LOADFROM (QUOTE RS232))))[DECLARE: EVAL@COMPILE (TYPERECORD LOGINSYSTEMTYPE (ATTNCHAR LOGINPATTERN PAGESIZEPATTERN MINIMALLINEBUFFERSIZE))](RPAQQ RS232OSTYPES ((MAXC . TENEX)		     (SUMEX-AIM . TOPS20)		     (SUMEX . TOPS20)		     (NIL . TENEX)))(RPAQQ RS232LOGINSYSTEMTYPEINFO ((TENEX LOGINSYSTEMTYPE 3 "LOGIN ˜ ™" "LENGTH ™WIDTH ˜" 512)				 (TOPS20 LOGINSYSTEMTYPE 3 "LOGIN ˜™" "TERMINAL WIDTH ˜TERMINAL LENGTH ™" 512)				 (VMS LOGINSYSTEMTYPE 13 "˜™" "SET TERMINAL/WIDTH=˜/PAGE=™" 512)				 (UNIX LOGINSYSTEMTYPE 13 "˜™" NIL 512)				 (WAITS LOGINSYSTEMTYPE 3 "LOGIN ˜™" NIL 1536)				 (ITS LOGINSYSTEMTYPE 26 ":LOGIN ˜™" ":TCTYP LINELENGTH ˜ PAGESIZE ™" 512)				 (TOPS10 LOGINSYSTEMTYPE 3 "LOGIN ˜™" NIL 512)))(DEFINEQ(RS232.PROMPT&LOGIN  (LAMBDA (TypeScriptStream)                                 (* JonL " 4-Aug-84 23:24")    (PROG (HOST HOST.SYSTEMTYPE)          (DSPRESET PROMPTWINDOW)      A   (AND (\RS232LOGIN.CHECKSTOP)	       (RETURN (QUOTE StopLogin)))          (FRESHLINE PROMPTWINDOW)          (\RS232INSURE.LINEBUFFER BYTESPERPAGE)          (SETQ HOST (MKATOM (PROMPTFORWORD "{Login thru RS232} Hostname: " \RS232LOGIN.LASTHOSTNAME					    (FUNCTION \RS232.P&L.FINDGOODNAMES)					    PROMPTWINDOW NIL (QUOTE TTY))))          (if (NULL HOST)	      then (RINGBELLS 2)		   (GO A))      B   (AND (\RS232LOGIN.CHECKSTOP)	       (RETURN (QUOTE StopLogin)))          (if (NULL (SETQ HOST.SYSTEMTYPE (CDR (OR (ASSOC HOST RS232OSTYPES)						   (ASSOC HOST NETWORKOSTYPES)))))	      then (FRESHLINE PROMPTWINDOW)		   (\RS232INSURE.LINEBUFFER BYTESPERPAGE)		   (SETQ HOST.SYSTEMTYPE (MKATOM (PROMPTFORWORD " HostSYSTEMTYPE = " NIL								(FUNCTION \RS232.P&L.FINDGOODNAMES)								PROMPTWINDOW NIL (QUOTE TTY))))		   (if (NULL HOST.SYSTEMTYPE)		       then (RINGBELLS 2)			    (GO B)		     elseif (NOT (ASSOC HOST.SYSTEMTYPE RS232LOGINSYSTEMTYPEINFO))		       then (HELP "Sorry, I don't know that SYSTEMTYPE;  type OK to try again.")			    (GO B))		   (push RS232OSTYPES (CONS HOST HOST.SYSTEMTYPE)))          (RETURN (RS232LOGIN HOST NIL NIL HOST.SYSTEMTYPE TypeScriptStream PROMPTWINDOW			      (QUOTE TTY))))))(RS232LOGIN  (LAMBDA (HOST UserName PASSWORD HostSYSTEMTYPE TypeScriptStream PROMPTFORWORDstream URGENCY.OPTION)                                                             (* JonL "11-Jan-85 23:19")                                                             (* Returns NIL if successful, error code 							     (as a litatom) if not.)    (RS232INITIALIZECHECK)    (if (type? STREAM TypeScriptStream)	then (OR (OPENP TypeScriptStream (QUOTE OUTPUT))		 (ERROR TypeScriptStream "Not open for output"))      else (SETQ TypeScriptStream (if (NULL TypeScriptStream)				      then (GETSTREAM T)				    elseif (EQ TypeScriptStream (QUOTE NONE))				      then NIL				    elseif (OR (WINDOWP TypeScriptStream)					       (DISPLAYSTREAMP TypeScriptStream)					       (EQ TypeScriptStream T))				      then (GETSTREAM TypeScriptStream)				    elseif (LITATOM TypeScriptStream)				      then (OPENSTREAM TypeScriptStream (QUOTE OUTPUT))				    else (\ILLEGAL.ARG TypeScriptStream))))    (OR (type? LOGINSYSTEMTYPE HostSYSTEMTYPE)	((LAMBDA (HST)	    (if (SETQ HST (CDR (ASSOC HostSYSTEMTYPE RS232LOGINSYSTEMTYPEINFO)))		then                                         (* HostSYSTEMTYPE can be given by symbolic name.)	      elseif (AND (NOT (NULL HOST))			  (SETQ HST (CDR (OR (ASSOC HOST RS232OSTYPES)					     (ASSOC HOST NETWORKOSTYPES))))			  (SETQ HST (CDR (ASSOC HST RS232LOGINSYSTEMTYPEINFO))))		then                                         (* AH, we already know what kind of SYSTEMTYPE this 							     HOST is)	      elseif (AND (NOT (NULL HOST))			  (SETQ HST (CDR (ASSOC HOST RS232LOGINSYSTEMTYPEINFO))))		then                                         (* Perhaps HOST name was just the symbolic 							     HostSYSTEMTYPE)		     (SETQ HOST)	      else (ERROR "We really must know what the HostSYSTEMTYPE is" HostSYSTEMTYPE))	    (SETQ HostSYSTEMTYPE HST))))    (OR (NULL PASSWORD)	(STRINGP PASSWORD)	(SETQ PASSWORD (AND (LITATOM PASSWORD)			    (MKSTRING PASSWORD))))    (OR URGENCY.OPTION (SETQ URGENCY.OPTION T))    (AND (PROG ((PWHashEntry (CAR (LISTP (AND HOST (GETHASH HOST LOGINPASSWORDS)))))		(LoginName (USERNAME NIL NIL T)))	       (AND (\RS232LOGIN.CHECKSTOP)		    (RETURN))	       (if (NULL (OR UserName (SETQ UserName (CAR PWHashEntry))))		   then (FRESHLINE PROMPTFORWORDstream)			(SETQ UserName (MKATOM (PROMPTFORWORD (if HOST								  then (CONCAT "Login ID for " HOST 									       ":")								else "Login ID:")							      LoginName NIL PROMPTFORWORDstream NIL 							      URGENCY.OPTION)))			(AND (\RS232LOGIN.CHECKSTOP)			     (RETURN)))	       (if (OR (NULL PASSWORD)		       (NULL (CDR PWHashEntry)))		   then (SETQ PASSWORD (if (CDR PWHashEntry)					   then (\DECRYPT.PWD (CDR PWHashEntry))					 else (PROMPTFORWORD " (password)" NIL NIL 							     PROMPTFORWORDstream (QUOTE *)							     URGENCY.OPTION)))			(if (AND PASSWORD HOST)			    then                             (* Update the LOGINPASSWORDS table if user has supplied							     new information, but no cacheing possible if HOST not 							     supplied.)				 (SETPASSWORD HOST UserName PASSWORD)))	       (RETURN T))	 (PROG ((Host'sAttnChar (fetch (LOGINSYSTEMTYPE ATTNCHAR) of HostSYSTEMTYPE))		(WINDOW (AND (DISPLAYSTREAMP TypeScriptStream)			     (WFROMDS TypeScriptStream)))		(3SECS.tics (ITIMES 3 \RCLKSECOND))		(5SECS.tics (ITIMES 5 \RCLKSECOND))		CHAR MESSAGE PAGESIZE PAGEPATTERN)	       (\RS232INSURE.LINEBUFFER (IMAX (OR (FIXP (fetch (LOGINSYSTEMTYPE MINIMALLINEBUFFERSIZE)							   of HostSYSTEMTYPE))						  0)					      BYTESPERPAGE))	       (AND WINDOW (TOTOPW WINDOW))	       (RS232CLEARBUFFER (QUOTE BOTH))	       (MAPC (DEFERREDCONSTANT (APPEND (QUOTE (\RS232INSURE.LINEBUFFER \DSPPRINTCR/LF 									       \BLTCHAR \GETSTREAM 									       \CARET.DOWN))					       (\ONPATHS.CCODE (QUOTE (\RS232LOGIN.CHECKSTOP 										 \RS232BOUTSTRING 										 RS232WRITESTRING 										    \DSPPRINTCHAR 										   RS232WRITEBYTE 										    RS232READBYTE 										  RS232READSTRING 										 RS232FORCEOUTPUT 									     \RS232LOGIN.MSGDALLY 											   STRPOS))							       (QUOTE (\RS232INSURE.LINEBUFFER CHCON1 											   NCHARS 											CHARCODEP 											DSPBACKUP 											    ERROR 										       \LISPERROR 										     \ILLEGAL.ARG 											     RAID 											    BLOCK 											  \CLOCK0 											     HELP 											\DAYTIME0 										     \ILLEGAL.ARG 											 SHOULDNT 										   \GETBASESTRING 											  DISMISS 											   CLOCK0 										     \STOPSCROLL? 										     BITMAPCREATE 										     DSPBACKCOLOR 										       FONTCREATE 										       \SHOWCARET 											  CREATEW 											    OPENW 											 MKSTRING 											   ERRORX 										     \RUN.PROCESS 									  \CanonicalizeTimerUnits 											\MAPCHARS 											     MENU 										      MACHINETYPE 											 PLAYTUNE 										      FLASHWINDOW 											  RETFROM 											   STKPOS 											   ERROR! 									 \CREATE.TTYDISPLAYSTREAM 										   \DSPPRINTCR/LF 											 \BLTCHAR 										      \CARET.DOWN 										       \GETSTREAM))							       65535)))		     (FUNCTION \FRESHENUPFN))	       (to 6		  do (AND (\RS232LOGIN.CHECKSTOP)			  (GO STOPLOGIN))		     (if Host'sAttnChar			 then (AND TypeScriptStream (BOUT TypeScriptStream Host'sAttnChar))			      (RS232WRITEBYTE Host'sAttnChar T))		     (during 5SECS.tics until (SETQ CHAR (RS232PEEKBYTE)) timerUnits (QUOTE TICKS)			usingBox \RS232LOGIN.TIMER)		  repeatuntil CHAR)	       (if (NULL CHAR)		   then                                      (* Sigh, 6 intervals of 5 seconds have gone by, and no 							     communication from the remove host.)			(if TypeScriptStream			    then (\RS232BOUTSTRING TypeScriptStream (MKSTRING (QUOTE 									       NoResponseFromHost))))			(RETURN (QUOTE NoResponseFromHost)))                                                             (* Wait until Host Responds)	       (do (CHECKUART)                               (* Gobble up any replies, waiting for a quiescent 							     interval of at least 5 seconds)		  repeatuntil (NULL (\RS232LOGIN.MSGDALLY 5SECS.tics NIL TypeScriptStream WINDOW)))	       (AND (\RS232LOGIN.CHECKSTOP)		    (GO STOPLOGIN))	       (for C PREVIOUSCHAR instring (fetch (LOGINSYSTEMTYPE LOGINPATTERN) of HostSYSTEMTYPE)		  do (SELCHARQ C			       ((#^X)				 (RS232WRITESTRING UserName))			       ((#^Y)				 (RS232FORCEOUTPUT)				 (if (SELCHARQ PREVIOUSCHAR					       ((CR ESC)     (* Dally, because some losing OS's won't be ready to 							     receive PW until after they have typed out their 							     prompt)						 (SETQ MESSAGE (\RS232LOGIN.MSGDALLY 3SECS.tics T 										 TypeScriptStream 										     WINDOW))						 (STRPOS "PASSWORD" MESSAGE NIL NIL NIL NIL 							 UPPERCASEARRAY))					       T)				     then (AND (NOT (NULL PASSWORD))					       (RS232WRITESTRING PASSWORD T))))			       (RS232WRITEBYTE C))		     (SETQ PREVIOUSCHAR C))	       (AND (\RS232LOGIN.CHECKSTOP)		    (GO STOPLOGIN))	       (RS232FORCEOUTPUT)	       (until (NULL (\RS232LOGIN.MSGDALLY 5SECS.tics NIL TypeScriptStream WINDOW))		  do (CHECKUART)                             (* Gobble up any replies, waiting for a quiescent 							     interval of at least 5 seconds))	       (AND (\RS232LOGIN.CHECKSTOP)		    (GO STOPLOGIN))	       (SETQ \RS232LOGIN.LASTHOSTNAME HOST)	       (SETQ \RS232LOGIN.LASTHOSTSYSTEMTYPE HostSYSTEMTYPE)	       (RS232CLEARBUFFER (QUOTE INPUT))	       (if WINDOW		   then (\RS232LOGIN.SENDPAGESIZE WINDOW HostSYSTEMTYPE 3SECS.tics))                                                             (* Standard normal exit.)	       (RETURN NIL)	   STOPLOGIN	       (RS232CLEARBUFFER (QUOTE BOTH))	       (RETURN (QUOTE StopLogin))))))(\RS232LOGIN.CHECKSTOP  (LAMBDA NIL                                                (* JonL "30-JUN-83 21:13")    (AND (\RS232CHECK.BLOCK)	 (EQ \RS232CHAT.MENUSIGNAL (QUOTE MENU))	 (EQ (MENU \RS232CHATMENU)	     (PROG1 (QUOTE StopLogin)		    (SETQ \RS232CHAT.MENUSIGNAL))))))(\RS232LOGIN.MSGDALLY  (LAMBDA (WAIT?.tics FORCETRUNC7? TypeScriptStream WINDOWP)                                                             (* JonL "30-May-84 22:10")    (\RS232INSURE.LINEBUFFER BYTESPERPAGE)                   (* Note that \RS232INSURE.LINEBUFFER sets up 							     \RS232STRPTR)    (PROG ((MESSAGE (RS232READSTRING NIL NIL NIL (OR (FIXP WAIT?.tics)						     \RCLKSECOND)				     (QUOTE TICKS)				     \RS232STRPTR)))          (if (\RS232LOGIN.CHECKSTOP)	      then ((LAMBDA (OPOS)		       (RETFROM OPOS (QUOTE StopLogin)				T))		     (STKPOS (QUOTE RS232LOGIN)))	    elseif (OR (NOT (STRINGP MESSAGE))		       (ZEROP (ffetch (STRINGP LENGTH) of MESSAGE)))	      then (SETQ MESSAGE)	    else (if (OR FORCETRUNC7? (AND \RS232CHAT7? (ILESSP 7 (fetch (RS232CHARACTERISTICS 										      BITSPERCHAR)								     of RS232INIT))))		     then (bind C (J _ 0) for I from 1 to (ffetch (STRINGP LENGTH) of MESSAGE)			     do (SETQ C (LOADBYTE (NTHCHARCODE MESSAGE I)						  0 7))				(if (OR (AND WINDOWP (EQ C (CHARCODE LF)))					(FMEMB C \RS232CHAT.IgnoreCharcodes))				    then                     (* Flush LF's since the CR will generate it on a display							     stream)					 NIL				  else (RPLCHARCODE MESSAGE (add J 1)						    C))			     finally (freplace (STRINGP LENGTH) of MESSAGE with J)))		 (AND (type? STREAM TypeScriptStream)		      (\RS232BOUTSTRING TypeScriptStream MESSAGE)))          (RETURN MESSAGE))))(\RS232LOGIN.SENDPAGESIZE  (LAMBDA (WINDOW HostSYSTEMTYPE DALLY.tics)                 (* JonL "22-Jun-84 05:05")    (PROG ((PAGESIZE (WINDOWPROP WINDOW (QUOTE PAGESIZE)))	   (PAGEPATTERN (fetch (LOGINSYSTEMTYPE PAGESIZEPATTERN) of HostSYSTEMTYPE))	   (OUTSTRM (GETSTREAM WINDOW))	   MSG)          (if (AND PAGESIZE PAGEPATTERN)	      then (RS232CLEARBUFFER (QUOTE INPUT))		   (if (SETQ MSG (fetch (LOGINSYSTEMTYPE ATTNCHAR) of HostSYSTEMTYPE))		       then (RS232WRITEBYTE MSG T)			    (\RS232LOGIN.MSGDALLY DALLY.tics NIL OUTSTRM T)			    (RS232CLEARBUFFER (QUOTE INPUT)))		   (RESETFORM (RADIX 10)			      (for X instring PAGEPATTERN				 do (SELCHARQ X					      ((#^X #^Y)						(RS232WRITESTRING (MKSTRING								    (if (EQ X (CHARCODE #^X))									then                                                              (* #^X is the LINELENGTH (or the number of "X" 							     positions))									     (CADR PAGESIZE)								      else (CAR PAGESIZE)))))					      (RS232WRITEBYTE X))))		   (RS232FORCEOUTPUT)		   (\RS232LOGIN.MSGDALLY NIL NIL OUTSTRM T)))))(\RS232.P&L.FINDGOODNAMES  (LAMBDA (MSG)                                              (* JonL " 2-Dec-83 17:27")                                                             (* Give out only the names without hyphens in them, for 							     each such has a non-hyphenated version.							     E.g., SAIL for SU-AI)    (MAPCONC (if (STREQUAL MSG "{Login thru RS232} Hostname = ")		 then RS232OSTYPES	       else RS232LOGINSYSTEMTYPEINFO)	     (FUNCTION (LAMBDA (X)		 (SETQ X (CAR X))		 (AND (STRPOSL (DEFERREDCONSTANT (MAKEBITTABLE (CHARCODE (-))							       T))			       X)		      (LIST X))))))))(RPAQ? \RS232LOGIN.LASTHOSTNAME NIL)(RPAQ? \RS232LOGIN.LASTHOSTSYSTEMTYPE NIL)(RPAQ? \RS232LOGIN.TIMER (SETUPTIMER 0))(RPAQ? \RS232STRPTR (ALLOCSTRING 0))(DECLARE: DOEVAL@COMPILE DONTCOPY(GLOBALVARS RS232OSTYPES RS232LOGINSYSTEMTYPEINFO \RS232LOGIN.LASTHOSTNAME 	    \RS232LOGIN.LASTHOSTSYSTEMTYPE \RS232LOGIN.TIMER \RS232STRPTR))(RPAQ? \RS232CHAT7? T)(RPAQ? \RS232CHAT.EOLsequence "")(RPAQ? \RS232CHAT.NEWLINECHAR (CHARCODE LF))(RPAQ? \RS232CHAT.IgnoreCharcodes (LIST (CHARCODE NULL)))(DECLARE: DOEVAL@COMPILE DONTCOPY(GLOBALVARS \RS232CHAT7?))(DECLARE: DOEVAL@COMPILE DONTCOPY(SPECVARS \RS232CHAT.NEWLINECHAR \RS232CHAT.EOLsequence \RS232CHAT.IgnoreCharcodes))(PUTPROPS RS232LOGIN COPYRIGHT ("Xerox Corporation" 1983 1984 1985))(DECLARE: DONTCOPY  (FILEMAP (NIL (2415 16535 (RS232.PROMPT&LOGIN 2425 . 3910) (RS232LOGIN 3912 . 12827) (\RS232LOGIN.CHECKSTOP 12829 . 13117) (\RS232LOGIN.MSGDALLY 13119 . 14724) (\RS232LOGIN.SENDPAGESIZE 14726 . 15891) (\RS232.P&L.FINDGOODNAMES 15893 . 16533)))))STOP