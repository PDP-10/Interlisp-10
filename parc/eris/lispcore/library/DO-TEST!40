(DEFINE-FILE-INFO §READTABLE "xcl" §PACKAGE (DEFPACKAGE "XCL-TEST" (§USE "LISP")))(IL:FILECREATED "28-Oct-86 16:36:44" IL:{ERIS}<LISPCORE>LIBRARY>DO-TEST.\;40 13216        IL:|changes| IL:|to:|  (IL:FUNCTIONS DO-TEST-LIST DO-TEST DO-TEST-GROUP TEST-DEFMACRO                                     TEST-DEFUN TEST-SETQ WITHOUT-BATCH-MODE-ERRORS EXPECT-ERRORS                                     DO-ALL-TESTS CURRENT-FILE-NAME CL-READFILE DO-TEST-FILE)                             (IL:VARS IL:DO-TESTCOMS)                             (IL:PROPS (DO-TEST IL:MAKEFILE-ENVIRONMENT))                             (IL:VARIABLES *ANY-ERRORS* *TEST-CLEANUP-FORMS* *TEST-COMPILE*                                     *TEST-MODE* *TEST-BATCH-RESULTS* *TEST-FILE-PATTERN*                                     *TEST-FILE-NAME*)      IL:|previous| IL:|date:| "27-Oct-86 14:32:14" IL:{ERIS}<LISPCORE>LIBRARY>DO-TEST.\;38); Copyright (c) 1986 by Xerox Corporation.  All rights reserved.(IL:PRETTYCOMPRINT IL:DO-TESTCOMS)(IL:RPAQQ IL:DO-TESTCOMS           ((IL:FUNCTIONS DO-TEST DO-TEST-GROUP TEST-DEFMACRO TEST-DEFUN TEST-SETQ                   WITHOUT-BATCH-MODE-ERRORS EXPECT-ERRORS DO-ALL-TESTS CURRENT-FILE-NAME CL-READFILE                   DO-TEST-FILE DO-TEST-LIST)           (IL:VARIABLES *ANY-ERRORS* *TEST-CLEANUP-FORMS* *TEST-COMPILE* *TEST-MODE*                   *TEST-BATCH-RESULTS* *TEST-FILE-PATTERN* *TEST-FILE-NAME*)           (IL:P (IL:DEFPACKAGE "XCL-TEST"                        (:EXPORT DO-TEST DO-TEST-GROUP EXPECT-ERRORS TEST-DEFUN TEST-DEFMACRO                                TEST-SETQ DO-ALL-TESTS CL-READFILE DO-TEST-FILE *TEST-MODE*                                *TEST-BATCH-RESULTS* *TEST-COMPILE* *TEST-FILE-PATTERN*)))           (IL:PROP (IL:MAKEFILE-ENVIRONMENT IL:FILETYPE)                  DO-TEST)))(DEFMACRO DO-TEST (IL:NAME-AND-OPTIONS &BODY IL:BODY)   (LET ((IL:NAME NIL)         (IL:OPTIONS NIL))        (COND           ((CONSP IL:NAME-AND-OPTIONS)            (SETQ IL:NAME (CAR IL:NAME-AND-OPTIONS))            (SETQ IL:OPTIONS (CDR IL:NAME-AND-OPTIONS)))           (T (SETQ IL:NAME IL:NAME-AND-OPTIONS)))        (IF (EQ *TEST-MODE* :INTERACTIVE)            (FORMAT *ERROR-OUTPUT* "Testing... ~S~%" IL:NAME))        `(NOT (WHEN (NULL (WITHOUT-BATCH-MODE-ERRORS ,@IL:BODY))                    (FORMAT *ERROR-OUTPUT* "Test \"~A\" failed in file \"~A\"~%" ',IL:NAME (                                                                                    CURRENT-FILE-NAME                                                                                            ))                    (IL:SETQ *ANY-ERRORS* T)))))(DEFMACRO DO-TEST-GROUP (IL:NAME-AND-OPTIONS &BODY IL:BODY)   (LET ((IL:NAME NIL)         (IL:OPTIONS NIL))        (COND           ((CONSP IL:NAME-AND-OPTIONS)            (SETQ IL:NAME (CAR IL:NAME-AND-OPTIONS))            (SETQ IL:OPTIONS (CDR IL:NAME-AND-OPTIONS)))           (T (SETQ IL:NAME IL:NAME-AND-OPTIONS)))           (IL:*                                 "Hack: find :BEFORE and :AFTER clauses in the body and move them out")        (LOOP (IF (AND (SYMBOLP (CAR IL:BODY))                       (OR (EQ (CAR IL:BODY)                               :BEFORE)                           (EQ (CAR IL:BODY)                               :AFTER)))                  (PROGN (IL:SETQ IL:OPTIONS (IL:APPEND IL:OPTIONS (LIST (CAR IL:BODY)                                                                         (CADR IL:BODY))))                         (IL:SETQ IL:BODY (CDDR IL:BODY)))                  (RETURN NIL)))        `(LET ((*TEST-CLEANUP-FORMS* NIL))              (BLOCK ,IL:NAME ,(IF (EQ *TEST-MODE* :INTERACTIVE)                                   (FORMAT *ERROR-OUTPUT* "Testing... ~S~%" IL:NAME))                     ,(LET ((IL:BEFORE (GETF IL:OPTIONS :BEFORE)))                           (IF IL:BEFORE `(WHEN (NULL (WITHOUT-BATCH-MODE-ERRORS ,IL:BEFORE T))                                                (FORMAT *ERROR-OUTPUT*                                                    ":BEFORE forms for test \"~A\" in file ~S failed."                                                       ',IL:NAME                                                       (CURRENT-FILE-NAME))                                                (IL:SETQ *ANY-ERRORS* T)                                                (RETURN-FROM ,IL:NAME))))                     ,@(IL:|for| IL:B IL:|in| IL:BODY                          IL:|join| (IL:|if| (AND (CONSP IL:B)                                                  (EQ (CAR IL:B)                                                      'DO-TEST))                                        IL:|then| (LIST IL:B)                                      IL:|else| (FORMAT *ERROR-OUTPUT*                                                        "Non DO-TEST form in ~S in ~S~%~S~%" IL:NAME                                                       (CURRENT-FILE-NAME)                                                       IL:B)))                     ,(LET ((IL:AFTER (GETF IL:OPTIONS :AFTER)))                           (IF IL:AFTER `(WHEN (NULL (WITHOUT-BATCH-MODE-ERRORS ,IL:AFTER T))                                               (FORMAT *ERROR-OUTPUT*                                                     ":AFTER forms for test \"~A\" in file ~S failed."                                                      ',IL:NAME                                                      (CURRENT-FILE-NAME))                                               (IL:SETQ *ANY-ERRORS* T)))))              (IL:EVAL (CONS 'PROGN *TEST-CLEANUP-FORMS*))              NIL)))(DEFMACRO TEST-DEFMACRO (IL:NAME &REST IL:STUFF)   (IF (FBOUNDP IL:NAME)       (IF (MACRO-FUNCTION IL:NAME)           (PUSH `(SETF (SYMBOL-FUNCTION (MACRO-FUNCTION ',IL:NAME))                        ',(SYMBOL-FUNCTION (MACRO-FUNCTION IL:NAME))) *TEST-CLEANUP-FORMS*)           (ERROR "Please don't redefine ~A in a test form" IL:NAME))       (PUSH `(REMPROP ',IL:NAME 'IL:MACRO-FN) *TEST-CLEANUP-FORMS*))   `(DEFMACRO (IL:\\\, IL:NAME) ,@IL:STUFF ))(DEFMACRO TEST-DEFUN (IL:NAME &REST IL:STUFF)   (IF (FBOUNDP IL:NAME)       (IF (OR (MACRO-FUNCTION IL:NAME)               (SPECIAL-FORM-P IL:NAME))           (ERROR "Please don't redefine ~A in a test form" IL:NAME)           (PUSH `(SETF (SYMBOL-FUNCTION ',IL:NAME)                        ',(SYMBOL-FUNCTION IL:NAME)) *TEST-CLEANUP-FORMS*))       (PUSH `(FMAKUNBOUND ',IL:NAME) *TEST-CLEANUP-FORMS*))   `(DEFUN (IL:\\\, IL:NAME) ,@IL:STUFF ))(DEFMACRO TEST-SETQ (IL:X IL:Y &REST IL:STUFF) (IF (BOUNDP IL:X)                                                   (PUSH `(SETQ ,IL:X ',(SYMBOL-VALUE IL:X))                                                          *TEST-CLEANUP-FORMS*)                                                   (PUSH `(MAKUNBOUND ',IL:X) *TEST-CLEANUP-FORMS*))                                               (IF IL:STUFF `(PROGN (SETQ ,IL:X ,IL:Y)                                                                    (TEST-SETQ ,@IL:STUFF))                                                   `(SETQ ,IL:X ,IL:Y)))(DEFMACRO WITHOUT-BATCH-MODE-ERRORS (&BODY IL:BODY) (COND                                                       ((EQ *TEST-MODE* :INTERACTIVE)                                                        `(PROGN ,@IL:BODY))                                                       (T `(IL:IGNORE-ERRORS ,@IL:BODY))))(DEFMACRO EXPECT-ERRORS (IL:ERROR-TYPES &REST IL:FORMS) `(IL:CONDITION-CASE (PROGN ,@IL:FORMS NIL)                                                                (,IL:ERROR-TYPES (IL:CONDITION)                                                                       (VALUES T IL:CONDITION))))(DEFUN DO-ALL-TESTS (&KEY (IL:RESULTS *TEST-BATCH-RESULTS*)                          (IL:PATTERN *TEST-FILE-PATTERN*)                          (IL:SYSOUT-TYPE NIL)) (WITH-OPEN-FILE (*ERROR-OUTPUT* *TEST-BATCH-RESULTS*                                                                        :DIRECTION :OUTPUT :IF-EXISTS                                                                        :NEW-VERSION)                                                       (FORMAT *ERROR-OUTPUT*                                                               ";;; Test results for sysout of ~A~%"                                                               IL:MAKESYSDATE)                                                       (IF IL:SYSOUT-TYPE (IL:FORMAT *ERROR-OUTPUT*                                                                             ";;; Sysout type is ~A~%"                                                                                  IL:SYSOUT-TYPE))                                                       (FORMAT *ERROR-OUTPUT*                                                               ";;; Tests run on ~A~2%" (IL:DATE))                                                       (IL:FOR IL:FN IL:IN (IL:DIRECTORY IL:PATTERN)                                                          IL:DO (DO-TEST-FILE IL:FN))                                                       (FORMAT *ERROR-OUTPUT* "(END-OF-TESTS)")))(DEFUN CURRENT-FILE-NAME NIL *TEST-FILE-NAME*)(DEFUN CL-READFILE (IL:TEST-FILE &OPTIONAL (*READTABLE* IL:CMLRDTBL)                          (IL:ENDTOKEN "STOP"))              (IL:* IL:|Pavel| "23-Sep-86 12:40")   (IL:|if| (PROBE-FILE IL:TEST-FILE)       IL:|then| (LET (IL:FORMS-LIST IL:TEM (*PACKAGE* (FIND-PACKAGE "XCL-TEST")))                      (WITH-OPEN-STREAM (IL:TEST-FILE (IL:OPENTEXTSTREAM (IL:MKATOM IL:TEST-FILE)))                             (IL:|until| (OR (NULL (IL:IGNORE-ERRORS (SETQ IL:TEM (READ IL:TEST-FILE)                                                                           )))                                             (AND (SYMBOLP IL:TEM)                                                  (STRING= IL:TEM IL:ENDTOKEN)))                                IL:|do| (PUSH IL:TEM IL:FORMS-LIST))                             (NREVERSE IL:FORMS-LIST)))     IL:|else| (PROGN (FORMAT *ERROR-OUTPUT* "~%Couldn't find file ~A~%" IL:TEST-FILE)                      NIL)))(DEFUN DO-TEST-FILE (IL:FILENAME)                            (IL:* IL:|Pavel| "23-Sep-86 12:19")   (LET* ((*PACKAGE* (FIND-PACKAGE "user"))          (IL:TEST-FORMS (CL-READFILE IL:FILENAME IL:CMLRDTBL))          (*TEST-FILE-NAME* (LET ((IL:PF (PATHNAME IL:FILENAME)))                                 (FORMAT NIL "~A.~A;~A" (PATHNAME-NAME IL:PF)                                        (PATHNAME-TYPE IL:PF)                                        (PATHNAME-VERSION IL:PF))))          (*ANY-ERRORS* NIL))         (DO-TEST-LIST IL:TEST-FORMS)         (IL:|if| *ANY-ERRORS*             IL:|then| (TERPRI *ERROR-OUTPUT*))))(DEFUN DO-TEST-LIST (IL:TEST-FORMS &OPTIONAL IL:OPTIONS IL:NAME)                                                              (IL:* IL:|Pavel| "23-Sep-86 12:21")   (LET ((IL:DFNFLG NIL))        (IL:|if| (NULL IL:TEST-FORMS)            IL:|then| (FORMAT *ERROR-OUTPUT* "~%(Trouble reading ~A)~%" (CURRENT-FILE-NAME))                  (SETQ *ANY-ERRORS* T)          IL:|else| (IL:|for| IL:FORM IL:|in| IL:TEST-FORMS                       IL:|do| (IF (AND (CONSP IL:FORM)                                        (OR (EQ (CAR IL:FORM)                                                'DO-TEST)                                            (EQ (CAR IL:FORM)                                                'DO-TEST-GROUP)))                                   (IF *TEST-COMPILE* (FUNCALL (XCL::COMPILE                                                                NIL                                                                `(LAMBDA NIL ,IL:FORM)))                                       (EVAL IL:FORM))                                   (FORMAT *ERROR-OUTPUT* "Non DO-TEST form at top level in ~S~%~S~%"                                          (CURRENT-FILE-NAME)                                          IL:FORM))))))(DEFVAR *ANY-ERRORS* NIL)(DEFVAR *TEST-CLEANUP-FORMS* NIL)(DEFVAR *TEST-COMPILE* NIL)(DEFVAR *TEST-MODE* :BATCH)(DEFVAR *TEST-BATCH-RESULTS* "{eris}<lispcore>cml>test>test-results" )(DEFVAR *TEST-FILE-PATTERN* "{ERIS}<LISPCORE>CML>TEST>*.TEST;" )(DEFVAR *TEST-FILE-NAME* "unknown" )(IL:DEFPACKAGE "XCL-TEST" (:EXPORT DO-TEST DO-TEST-GROUP EXPECT-ERRORS TEST-DEFUN TEST-DEFMACRO                                  TEST-SETQ DO-ALL-TESTS CL-READFILE DO-TEST-FILE *TEST-MODE*                                  *TEST-BATCH-RESULTS* *TEST-COMPILE* *TEST-FILE-PATTERN*))(IL:PUTPROPS DO-TEST IL:MAKEFILE-ENVIRONMENT (:READTABLE "xcl" :PACKAGE (IL:DEFPACKAGE "XCL-TEST"                                                                               (:USE "LISP"))))(IL:PUTPROPS DO-TEST IL:FILETYPE COMPILE-FILE)(IL:PUTPROPS DO-TEST IL:COPYRIGHT ("Xerox Corporation" 1986))(IL:DECLARE\: IL:DONTCOPY  (IL:FILEMAP (NIL)))IL:STOP