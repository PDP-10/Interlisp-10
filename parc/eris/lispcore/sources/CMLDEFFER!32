(DEFINE-FILE-INFO §READTABLE "XCL" §PACKAGE "INTERLISP")(FILECREATED "30-Oct-86 02:56:07" {ERIS}<LISPCORE>SOURCES>CMLDEFFER.\;32 27651        |changes| |to:|  (FUNCTIONS \\DEFINE-TYPE-SAVE-DEFN)      |previous| |date:| "30-Oct-86 01:07:47" {ERIS}<LISPCORE>SOURCES>CMLDEFFER.\;31); Copyright (c) 1986, 1900 by Xerox Corporation.  All rights reserved.(PRETTYCOMPRINT CMLDEFFERCOMS)(RPAQQ CMLDEFFERCOMS ((* |;;;|    "DEF-DEFINE-TYPE and DEFDEFINER -- Your One-Stop Providers of Customized File Manager Facilities."                         )                      (* |;;| "BE VERY CAREFUL CHANGING ANYTHING IN THIS FILE!!!  It is heavily self-referential and thick with bootstrapping problems.  All but the most trivial changes (and some of those) are very tricky to make without blowing yourself out of the water...  You have been warned."                         )                      (INITVARS (FILEPKGFLG NIL))                      (* |;;| "The definer data structures and manipulation functions")                      (VARIABLES *DEFINITION-HASH-TABLE*)                      (FUNCTIONS PPRINT-DEFINER REMOVE-COMMENTS)                      (VARIABLES *REMOVE-INTERLISP-COMMENTS*)                      (FUNCTIONS \\DEFINE-TYPE-DELDEF \\DEFINE-TYPE-GETDEF \\DEFINE-TYPE-SAVE-DEFN)                      (* |;;| "The groundwork for bootstrapping")                      (DEFINE-TYPES DEFINE-TYPES FUNCTIONS VARIABLES)                      (* |;;| "Prototype definition facility")                      (VARIABLES XCL::*DEFINITION-PROTOTYPES*)                      (FUNCTIONS XCL::ADD-PROTOTYPE-FN XCL::PROTOTYPE-DEFN-TYPES                              XCL::PROTOTYPE-DEFINERS-FOR-TYPE XCL::MAKE-PROTOTYPE)                      (* |;;| "DefDefiner itself and friends")                      (FUNCTIONS SI::EXPANSION-FUNCTION SI::MACRO-FUNCALL)                      (FUNCTIONS DEFDEFINER \\DELETE-DEFINER DEF-DEFINE-TYPE WITHOUT-FILEPKG)                      (* |;;| "The most commonly-used definers")                      (FUNCTIONS CL:DEFUN DEFINLINE DEFMACRO)                      (FUNCTIONS CL:DEFVAR CL:DEFPARAMETER CL:DEFCONSTANT DEFGLOBALVAR                              DEFGLOBALPARAMETER)                      (* |;;| "Don't note changes to these properties/variables")                      (PROP PROPTYPE MACRO-FN UNDEFINERS DEFINER-FOR DEFINED-BY)                      (* |;;| "Arrange for the correct compiler to be used.")                      (PROP FILETYPE CMLDEFFER)))(* |;;;| "DEF-DEFINE-TYPE and DEFDEFINER -- Your One-Stop Providers of Customized File Manager Facilities.")(* |;;| "BE VERY CAREFUL CHANGING ANYTHING IN THIS FILE!!!  It is heavily self-referential and thick with bootstrapping problems.  All but the most trivial changes (and some of those) are very tricky to make without blowing yourself out of the water...  You have been warned.")(RPAQ? FILEPKGFLG NIL)(* |;;| "The definer data structures and manipulation functions")(DEFGLOBALVAR *DEFINITION-HASH-TABLE* (* |;;;| "This is the repository for all DEFDEFINERs' definitions.  It is a two-level hash-table.  The first level hashes on the name of the type of the definition, using an EQ test.  Each type maps to another hash-table that, in turn, maps the names of items into their definitions.  The second-level hash-tables use an EQUAL test so as to allow non-atomic ``names''."                                         )        (* |;;|             "HASHARRAY is used here instead of MAKE-HASH-ARRAY because it's earlier in the loadup...")   (HASHARRAY 20))(CL:DEFUN PPRINT-DEFINER (DEFINE-EXPRESSION)   (COND      ((CL:ATOM (CDR DEFINE-EXPRESSION))          (* \; "Handle the cases (defun) and (defun . foo)")       (PRINTOUT NIL "(" |.P2| (CAR DEFINE-EXPRESSION))       (CL:UNLESS (NULL (CDR DEFINE-EXPRESSION))              (PRINTOUT NIL " . ")              (PRINTDEF (CDR DEFINE-EXPRESSION)                     T T))       (PRIN1 ")" NIL)       NIL)      (T (LET ((DEFINER (|pop| DEFINE-EXPRESSION))               (DEFINED (|pop| DEFINE-EXPRESSION))               (CURRENT (DSPXPOSITION))               (\#RPARS))              (DECLARE (SPECVARS \#RPARS))              (PRINTOUT NIL "(" |.P2| DEFINER \,)              (|if| (LISTP DEFINED)                  |then| (PRINTOUT NIL "(" .FONT PRETTYCOMFONT |.P2| (CAR DEFINED)                                .FONT DEFAULTFONT \, \# (PRINTDEF (CDR DEFINED)                                                               T T T)                                ")")                |else| (PRINTOUT NIL .FONT PRETTYCOMFONT |.P2| DEFINED .FONT DEFAULTFONT))              (|if| (LISTP (CAR DEFINE-EXPRESSION))                  |then| (SPACES 1)                        (PRINTDEF (|pop| DEFINE-EXPRESSION)                               T NIL))              (|if| (OR (STRINGP (CAR DEFINE-EXPRESSION))                        (EQ (CAR (LISTP (CAR DEFINE-EXPRESSION)))                            COMMENTFLG))                  |then| (SPACES 1)                        (PRINTDEF (|pop| DEFINE-EXPRESSION)                               T T))              (|if| (NOT (FITP DEFINE-EXPRESSION T T))                  |then| (TERPRI)                        (DSPXPOSITION CURRENT)                        (SPACES 3)                |else| (SPACES 1))              (PRINTDEF DEFINE-EXPRESSION T T T)              (PRIN1 ")" NIL)              (TERPRI NIL)))))(CL:DEFUN REMOVE-COMMENTS (X)                     (* |;;;|                                         "Removes SEdit-style comments from the given list structure.")   (COND      ((NLISTP X)       X)      ((AND (EQ (CAAR X)                '*)            (OR (FMEMB (CADAR X)                       '(\; |;;| |;;;|))                     (* \; "a sedit comment")                (EQ *REMOVE-INTERLISP-COMMENTS* T)           (* \; "always strip")                (PROGN (|if| (EQ *REMOVE-INTERLISP-COMMENTS* ':WARN)                           |then| (CL:WARN "Possible comment not stripped ~S" X))                       NIL)))       (REMOVE-COMMENTS (CDR X)))      (T (PROG ((A (REMOVE-COMMENTS (CAR X)))                (D (REMOVE-COMMENTS (CDR X))))               (RETURN (COND                          ((AND (EQ A (CAR X))                                (EQ D (CDR X)))                           X)                          (T (CONS A D))))))))(CL:DEFVAR *REMOVE-INTERLISP-COMMENTS* ':WARN                                          "Either NIL (don't) T (always do) or :WARN (don't and warn)"   )(CL:DEFUN \\DEFINE-TYPE-DELDEF (NAME TYPE)        (* |;;|                                                  "DELETE definition of definer-defined NAME as TYPE ")   (LET* ((HT (CL:GETHASH TYPE *DEFINITION-HASH-TABLE*)))         (AND HT (REMHASH NAME HT))         (FOR FN IN (GET TYPE 'UNDEFINERS) DO (CL:FUNCALL FN NAME))         NAME))(CL:DEFUN \\DEFINE-TYPE-GETDEF (NAME TYPE OPTIONS)                                                   (* |;;| "GETDEF method for all definers.  The EDIT is so that when you say EDITDEF you get a copy & can know when you made edits.")   (LET* ((CL:HASH-TABLE (CL:GETHASH TYPE *DEFINITION-HASH-TABLE*))          (DEFN (AND CL:HASH-TABLE (CL:GETHASH NAME CL:HASH-TABLE))))         (CL:IF (EQMEMB 'EDIT OPTIONS)                (CL:COPY-TREE DEFN)                DEFN)))(CL:DEFUN \\DEFINE-TYPE-SAVE-DEFN (NAME TYPE DEFINITION)   (LET ((CL:HASH-TABLE (CL:GETHASH TYPE *DEFINITION-HASH-TABLE*)))        (CL:WHEN (NULL CL:HASH-TABLE)               (CL:WARN "Couldn't find a hash-table for ~S definitions.~%One will be created." TYPE)               (SETQ CL:HASH-TABLE (CL:SETF (CL:GETHASH TYPE *DEFINITION-HASH-TABLE*)                                          (CL:MAKE-HASH-TABLE :TEST 'CL:EQUAL :SIZE 50 :REHASH-SIZE                                                  50))))        (LET ((OLD-DEFINITION (CL:GETHASH NAME CL:HASH-TABLE)))             (CL:UNLESS (CL:EQUAL DEFINITION OLD-DEFINITION)                    (CL:WHEN (AND OLD-DEFINITION (NEQ DFNFLG T))                           (FORMAT *TERMINAL-IO* "~&New ~A definition for ~S" TYPE NAME))                    (CL:SETF (CL:GETHASH NAME CL:HASH-TABLE)                           DEFINITION)                    (MARKASCHANGED NAME TYPE (CL:IF OLD-DEFINITION 'CHANGED 'DEFINED))))))(* |;;| "The groundwork for bootstrapping")(DEF-DEFINE-TYPE DEFINE-TYPES "Definition type" )(DEF-DEFINE-TYPE FUNCTIONS "functions or macros" :UNDEFINER CL:FMAKUNBOUND)(DEF-DEFINE-TYPE VARIABLES "Common Lisp variables" )(* |;;| "Prototype definition facility")(DEFGLOBALVAR XCL::*DEFINITION-PROTOTYPES* NIL    (* |;;| "\"A property list mapping file-manager types to property lists from definer-names to prototype-functions"))(DEFMACRO XCL::ADD-PROTOTYPE-FN (TYPE CL::DEFINER CL::PROTOTYPE-FN)                                                   (* |;;| "If this definer didn't already have a PROTOTYPE-FN, add one.  If it already had one, change it to the new one. Must be a macro to avoid bootstrapping problems")   `(CL:SETF (CL:GETF (CL:GETF XCL::*DEFINITION-PROTOTYPES* ',TYPE)                    ,CL::DEFINER)           ,CL::PROTOTYPE-FN))(CL:DEFUN XCL::PROTOTYPE-DEFN-TYPES NIL           (* |;;;|  "Return a list of the file-manager types for which some definer can provide a prototype definition.")                                        (FOR X ON XCL::*DEFINITION-PROTOTYPES*                                           WHEN (CADR X) COLLECT (CAR X)))(CL:DEFUN XCL::PROTOTYPE-DEFINERS-FOR-TYPE (TYPE) (* |;;;| "Return a list of the definers that claim to be able to provide a prototype definition of the given type.")   (FOR X ON (CL:GETF XCL::*DEFINITION-PROTOTYPES* TYPE) BY CDDR WHEN (CADR X)      COLLECT (CAR X)))(CL:DEFUN XCL::MAKE-PROTOTYPE (CL::NAME TYPE CL::DEFINER) (LET ((CL::PROTOTYPE-FN (CL:GETF                                                                                   (CL:GETF                                                                          XCL::*DEFINITION-PROTOTYPES*                                                                                           TYPE)                                                                                   CL::DEFINER)))                                                               (AND CL::PROTOTYPE-FN                                                                    (CL:FUNCALL CL::PROTOTYPE-FN                                                                            CL::NAME TYPE CL::DEFINER)                                                                    )))(* |;;| "DefDefiner itself and friends")(CL:DEFUN SI::EXPANSION-FUNCTION (SI::NAME SI::ARG-LIST SI::BODY)                                                   (* |;;;| "Shared code between DEFMACRO and DEFDEFINER.  Takes the parts of a DEFMACRO and returns two values: a LAMBDA form for the expansion function, and the documentation string found, if any.")   (CL:MULTIPLE-VALUE-BIND (SI::PARSED-BODY SI::PARSED-DECLARATIONS SI::PARSED-DOCSTRING)          (PARSE-DEFMACRO SI::ARG-LIST 'SI::$$MACRO-FORM SI::BODY SI::NAME NIL :ENVIRONMENT                 'SI::$$MACRO-ENVIRONMENT)          (CL:VALUES `(CL:LAMBDA (SI::$$MACRO-FORM SI::$$MACRO-ENVIRONMENT)                             ,@SI::PARSED-DECLARATIONS                             (CL:BLOCK ,SI::NAME ,SI::PARSED-BODY)) SI::PARSED-DOCSTRING)))(DEFMACRO SI::MACRO-FUNCALL (SI::EXPANSION-FUNCTION SI::MACRO-CALL SI::ENV)                                                   (* |;;;| "Used by DEFDEFINER as a mechanism for delaying macro-expansion until after checking the value of DFNFLG.  The arguments (unevaluated) are a macro-expansion function and a call on that macro.  The call to MACRO-FUNCALL should expand into the result of expanding the given macro-call.")   (CL:FUNCALL SI::EXPANSION-FUNCTION SI::MACRO-CALL SI::ENV))(DEFDEFINER (DEFDEFINER (:NAME (CL:LAMBDA (CL::WHOLE)                                      (LET ((CL::NAME (CL:SECOND CL::WHOLE)))                                           (CL:IF (CL:CONSP CL::NAME)                                                  (CAR CL::NAME)                                                  CL::NAME))))                        (:PROTOTYPE (CL:LAMBDA (CL::NAME)                                           (AND (CL:SYMBOLP CL::NAME)                                                `(DEFDEFINER (\\\, CL::NAME) "Type" ("Arg-list")                                                                                    "Body"))))                        (:UNDEFINER CL::\\DELETE-DEFINER))   FUNCTIONS   (CL::NAME TYPE CL::ARG-LIST &BODY CL::BODY)   (LET*    ((CL::OPTIONS (COND                     ((CL:CONSP CL::NAME)                      (PROG1 (CDR CL::NAME)                             (CL:SETQ CL::NAME (CAR CL::NAME))))                     (T NIL)))     (CL::NAME-FN 'CL:SECOND)     (CL::UNDEFINER NIL)     (CL::PROTOTYPE-FN NIL))    (FOR CL::OPT-LIST IN CL::OPTIONS DO (CASE (CAR CL::OPT-LIST)                                              ((:UNDEFINER)                                               (CL:SETQ CL::UNDEFINER (CADR CL::OPT-LIST)))                                              ((:NAME)                                               (CL:SETQ CL::NAME-FN (CADR CL::OPT-LIST)))                                              ((:PROTOTYPE)                                               (CL:SETQ CL::PROTOTYPE-FN (CADR CL::OPT-LIST)))                                              (CL:OTHERWISE (CL:CERROR "Ignore the bogus option"                                                               "Unrecognized option to DefDefiner: ~S"                                                                    CL::OPT-LIST))))    (CL:MULTIPLE-VALUE-BIND     (CL::EXPANSION-FN CL::DOC)     (SI::EXPANSION-FUNCTION CL::NAME CL::ARG-LIST CL::BODY)     `(PROGN (CL:SETF (GET ',CL::NAME 'DEFINER-FOR)                    ',TYPE)             (CL:PUSHNEW ',CL::NAME (GET ',TYPE 'DEFINED-BY))             (DEFMACRO (\\\, CL::NAME) (&WHOLE CL::ORIGINAL-MACRO-CALL &ENVIRONMENT CL::ENV)                (LET* ((CL::MACRO-CALL-WITHOUT-COMMENTS (REMOVE-COMMENTS CL::ORIGINAL-MACRO-CALL))                       (CL::DEFINED-OBJECT-NAME (,CL::NAME-FN CL::MACRO-CALL-WITHOUT-COMMENTS)))                      `(PROGN (WITHOUT-FILEPKG    (* |;;| "The ,#',FOO is really just like ,',FOO (which is used simply to get the evaluation of FOO to happen in the outer back-quote's context).  In this case, however, rather than simply preventing further evaluation (using QUOTE), we want to encourage the compiler to compile the LAMDA-expression that is the value of EXPANSION-FN.  Thus, we use #' instead of '.")                                     (SI::MACRO-FUNCALL ,#',CL::EXPANSION-FN ,                                            CL::MACRO-CALL-WITHOUT-COMMENTS ,CL::ENV))                              (CL:EVAL-WHEN (CL:EVAL)                                     (CL:UNLESS (NULL FILEPKGFLG)                                            (\\DEFINE-TYPE-SAVE-DEFN                                             ',CL::DEFINED-OBJECT-NAME                                             ',',TYPE                                             ',CL::ORIGINAL-MACRO-CALL)))                              ',CL::DEFINED-OBJECT-NAME)))             ,@(AND CL::UNDEFINER `((CL:PUSHNEW ',CL::UNDEFINER (GET ',CL::NAME 'UNDEFINERS))))             ,@(AND CL::PROTOTYPE-FN `((XCL::ADD-PROTOTYPE-FN ',TYPE ',CL::NAME #',CL::PROTOTYPE-FN))                    )             ,@(AND CL::DOC `((CL:SETF (CL:DOCUMENTATION ',CL::NAME 'CL:FUNCTION)                                     ,CL::DOC)))))))(CL:DEFUN \\DELETE-DEFINER (NAME) (AND (CL:SYMBOLP NAME)                                       (LET ((TYPE (GET NAME 'DEFINER-FOR)))                                            (/REMPROP NAME 'DEFINER-FOR)                                            (CL:WHEN TYPE                                                    (* |;;| "need to remove the prototype function!")                                                   (/PUTPROP TYPE 'DEFINED-BY                                                          (REMOVE NAME (GET TYPE 'DEFINED-BY)))))))(DEFDEFINER (DEF-DEFINE-TYPE (:PROTOTYPE (LAMBDA (NAME)                                           (AND (CL:SYMBOLP NAME)                                                `(DEF-DEFINE-TYPE (\\\, NAME) "Description string"                                                    ))))) DEFINE-TYPES     (NAME DESCRIPTION &KEY UNDEFINER &AUX (CHANGELST (CL:INTERN (CL:CONCATENATE 'STRING "CHANGED"                                                                        (STRING NAME)                                                                        "LST")                                                             (CL:SYMBOL-PACKAGE NAME))))     "Define NAME as a new definition type"       (* |;;| "This definition is a clean interface to a hokey implementation.  It works even before the file package is loaded.")     `(PROGN (CL:SETF (CL:DOCUMENTATION ',NAME 'DEFINE-TYPES)                    ',DESCRIPTION)             (CL:PUSHNEW '(,NAME X (P * (MAPCAR 'X (FUNCTION (LAMBDA (ITEM)                                                               (CL:DO                                                                ((DEF (GETDEF ITEM                                                                             ',NAME)))                                                                (DEF DEF)                                                                (CL:CERROR "Re-fetch the definition"                                                                        "No ~S definition for ~S"                                                                       ',NAME ITEM)))))))                     PRETTYDEFMACROS :TEST 'CL:EQUAL)                                                  (* |;;| "the information about a type in the file package is split up into a number of different places. PRETTYTYPELST contains a random amount: the changelist is the variable whose top level value contains the list of changed items, and the description is a string used by files? This is duplicated in the CL:DOCUMENTATION mechanism")             (CL:PUSHNEW '(,CHANGELST ,NAME ,DESCRIPTION) PRETTYTYPELST :TEST 'CL:EQUAL)             (DEFGLOBALVAR (\\\, CHANGELST) NIL)                                                  (* |;;| "the definition hash table is where the definitions are really stored. Create an entry for this type. Note that definitions are compared using CL:EQUAL so that names can be strings, lists, etc.")             (CL:UNLESS (CL:GETHASH ',NAME *DEFINITION-HASH-TABLE*)                    (CL:SETF (CL:GETHASH ',NAME *DEFINITION-HASH-TABLE*)                           (CL:MAKE-HASH-TABLE :TEST 'CL:EQUAL :SIZE 50 :REHASH-SIZE 50)))             (CL:PUSHNEW ',NAME FILEPKGTYPES)             (CL:SETF (GET ',NAME 'GETDEF)                    '\\DEFINE-TYPE-GETDEF)             (CL:SETF (GET ',NAME 'DELDEF)                    '\\DEFINE-TYPE-DELDEF)             (CL:SETF (GET ',NAME 'FILEPKGCONTENTS)                    'NILL)             ,@(CL:WHEN UNDEFINER `((CL:PUSHNEW ',UNDEFINER (GET ',NAME 'UNDEFINERS))))))(DEFMACRO WITHOUT-FILEPKG (&BODY BODY) `(PROGN (CL:EVAL-WHEN (CL:LOAD)                                                      ,@BODY)                                               (CL:EVAL-WHEN (CL:EVAL)                                                      (CL:UNLESS (OR (EQ DFNFLG 'PROP)                                                                     (EQ DFNFLG 'ALLPROP))                                                             (LET (FILEPKGFLG (DFNFLG T))                                                                  ,@BODY)))))(* |;;| "The most commonly-used definers")(DEFDEFINER (CL:DEFUN (:PROTOTYPE (CL:LAMBDA (CL::NAME)                                         (AND (CL:SYMBOLP CL::NAME)                                              `(CL:DEFUN (\\\, CL::NAME) ("Arg List") "Body" ))))) FUNCTIONS (CL::NAME CL::ARGS &BODY (CL::BODY CL::DECLS CL:DOCUMENTATION))           `(PROGN (CL:SETF (CL:SYMBOL-FUNCTION ',CL::NAME)                          #'(CL:LAMBDA ,CL::ARGS ,@CL::DECLS (CL:BLOCK ,CL::NAME ,@CL::BODY)))                   ,@(AND CL:DOCUMENTATION `((CL:SETF (CL:DOCUMENTATION ',CL::NAME 'CL:FUNCTION)                                                    ,CL:DOCUMENTATION)))))(DEFDEFINER (DEFINLINE (:PROTOTYPE (LAMBDA (NAME)                                     (AND (CL:SYMBOLP NAME)                                          `(DEFINLINE (\\\, NAME) ("Arg List") "Body" ))))) FUNCTIONS (NAME ARGLIST &BODY BODY &ENVIRONMENT ENV)                                                  (* |;;;| "This is an INTERIM version of DEFINLINE.  Eventually, this will just turn into a DEFUN and a PROCLAIM INLINE.  (It says so right here.)  If you're using this one, DO NOT make any recursive calls in the body of the DEFINLINE.  If you do, the compiler will run forever trying to expand the optimizer...  Once the INLINE version gets working (in the PavCompiler only) that restriction will be lifted.")           (CL:MULTIPLE-VALUE-BIND (CODE DECLS DOC)                  (PARSE-BODY BODY ENV T)                  (LET ((NEW-LAMBDA `(CL:LAMBDA ,ARGLIST ,@DECLS (CL:BLOCK ,NAME ,@CODE))))                       `(PROGN (CL:DEFUN (\\\, NAME) ,ARGLIST ,@BODY)                               (DEFOPTIMIZER (\\\, NAME) ,(XCL:PACK (LIST "definline-" NAME)                                                                 (CL:SYMBOL-PACKAGE NAME))                                  (&REST ARGS)                                  (CONS ',NEW-LAMBDA ARGS))))))(DEFDEFINER (DEFMACRO (:PROTOTYPE (CL:LAMBDA (CL::NAME)                                         (AND (CL:SYMBOLP CL::NAME)                                              `(DEFMACRO (\\\, CL::NAME) (CL::ARG-LIST) "Body" ))))) FUNCTIONS (NAME DEFMACRO-ARGS &BODY DEFMACRO-BODY)                                                  (* |;;| "The EVAL-WHEN below should be a PROGN as soon as the old ByteCompiler/COMPILE-FILE hack is done away with.  The PavCompiler understands DEFMACRO's correctly and doesn't side-effect the environment.")           (CL:UNLESS (AND NAME (CL:SYMBOLP NAME))                  (CL:ERROR "Illegal name used in DEFMACRO: ~S" NAME))           (LET ((CMACRONAME (XCL:PACK (LIST "expand-" NAME)                                    (CL:SYMBOL-PACKAGE NAME))))                (CL:MULTIPLE-VALUE-BIND                 (EXPANSION-FN DOC-STRING)                 (SI::EXPANSION-FUNCTION NAME DEFMACRO-ARGS DEFMACRO-BODY)                 `(CL:EVAL-WHEN (CL:EVAL CL:COMPILE CL:LOAD)                         (CL:SETF (CL:SYMBOL-FUNCTION ',CMACRONAME)                                #',EXPANSION-FN)                         (CL:SETF (CL:MACRO-FUNCTION ',NAME)                                ',CMACRONAME)                         ,@(AND DOC-STRING `((CL:SETF (CL:DOCUMENTATION ',NAME 'CL:FUNCTION)                                                    ,DOC-STRING)))))))(DEFDEFINER (CL:DEFVAR (:PROTOTYPE (CL:LAMBDA (CL::NAME)                                          (AND (CL:SYMBOLP CL::NAME)                                               `(CL:DEFVAR (\\\, CL::NAME) ))))) VARIABLES (CL::NAME &OPTIONAL (CL::INITIAL-VALUE NIL CL::IVP)                      CL:DOCUMENTATION)           `(PROGN (CL:PROCLAIM '(CL:SPECIAL ,CL::NAME))                   ,@(AND CL::IVP `((OR (BOUNDP ',CL::NAME)                                        (SETQ ,CL::NAME ,CL::INITIAL-VALUE))))                   ,@(AND CL:DOCUMENTATION `((CL:SETF (CL:DOCUMENTATION ',CL::NAME 'CL::VARIABLE)                                                    ,CL:DOCUMENTATION)))))(DEFDEFINER (CL:DEFPARAMETER (:PROTOTYPE (CL:LAMBDA (CL::NAME)                                                (AND (CL:SYMBOLP CL::NAME)                                                     `(CL:DEFPARAMETER (\\\, CL::NAME) "Value"                                                                                "Documentation string"))))) VARIABLES (CL::NAME CL::INITIAL-VALUE &OPTIONAL CL:DOCUMENTATION)           `(PROGN (CL:PROCLAIM '(CL:SPECIAL ,CL::NAME))                   (SETQ ,CL::NAME ,CL::INITIAL-VALUE)                   ,@(AND CL:DOCUMENTATION `((CL:SETF (CL:DOCUMENTATION ',CL::NAME 'CL::VARIABLE)                                                    ,CL:DOCUMENTATION)))))(DEFDEFINER (CL:DEFCONSTANT (:PROTOTYPE (CL:LAMBDA (CL::NAME)                                               (AND (CL:SYMBOLP CL::NAME)                                                    `(CL:DEFCONSTANT (\\\, CL::NAME) "Value"                                                                                "Documentation string"))))) VARIABLES (CL::NAME CL::VALUE &OPTIONAL CL:DOCUMENTATION)           `(PROGN (SETQ ,CL::NAME ,CL::VALUE)                   (PUTHASH ',CL::NAME '(CONSTANT ,CL::NAME) COMPVARMACROHASH)                   ,@(AND CL:DOCUMENTATION `((CL:SETF (CL:DOCUMENTATION ',CL::NAME 'CL::VARIABLE)                                                    ,CL:DOCUMENTATION)))))(DEFDEFINER (DEFGLOBALVAR (:PROTOTYPE (CL:LAMBDA (CL::NAME)                                             (AND (CL:SYMBOLP CL::NAME)                                                  `(DEFGLOBALVAR (\\\, CL::NAME) ))))) VARIABLES (CL::NAME &OPTIONAL (CL::INITIAL-VALUE NIL CL::IVP)                      CL:DOCUMENTATION)           `(PROGN (CL:PROCLAIM '(GLOBAL ,CL::NAME))                   ,@(AND CL::IVP `((OR (BOUNDP ',CL::NAME)                                        (SETQ ,CL::NAME ,CL::INITIAL-VALUE))))                   ,@(AND CL:DOCUMENTATION `((CL:SETF (CL:DOCUMENTATION ',CL::NAME 'CL::VARIABLE)                                                    ,CL:DOCUMENTATION)))))(DEFDEFINER (DEFGLOBALPARAMETER (:PROTOTYPE (CL:LAMBDA (CL::NAME)                                                   (AND (CL:SYMBOLP CL::NAME)                                                        `(DEFGLOBALPARAMETER (\\\, CL::NAME) "Value"                                                            "Documentation string"))))) VARIABLES (CL::NAME CL::INITIAL-VALUE &OPTIONAL CL:DOCUMENTATION)           `(PROGN (CL:PROCLAIM '(GLOBAL ,CL::NAME))                   (SETQ ,CL::NAME ,CL::INITIAL-VALUE)                   ,@(AND CL:DOCUMENTATION `((CL:SETF (CL:DOCUMENTATION ',CL::NAME 'CL::VARIABLE)                                                    ,CL:DOCUMENTATION)))))(* |;;| "Don't note changes to these properties/variables")(PUTPROPS MACRO-FN PROPTYPE FUNCTIONS)(PUTPROPS UNDEFINERS PROPTYPE IGNORE)(PUTPROPS DEFINER-FOR PROPTYPE IGNORE)(PUTPROPS DEFINED-BY PROPTYPE IGNORE)(* |;;| "Arrange for the correct compiler to be used.")(PUTPROPS CMLDEFFER FILETYPE CL:COMPILE-FILE)(PUTPROPS CMLDEFFER COPYRIGHT ("Xerox Corporation" 1986 1900))(DECLARE\: DONTCOPY  (FILEMAP (NIL)))STOP