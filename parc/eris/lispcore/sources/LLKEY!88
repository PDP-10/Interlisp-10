(DEFINE-FILE-INFO §READTABLE "XCL" §PACKAGE "INTERLISP")(filecreated "16-Oct-86 16:53:34" {eris}<lispcore>sources>llkey.\;88 168401       |changes| |to:|  (vars llkeycoms)      |previous| |date:| "14-Oct-86 14:42:41" {eris}<lispcore>sources>llkey.\;87); Copyright (c) 1982, 1983, 1984, 1985, 1986 by Xerox Corporation.  All rights reserved.(prettycomprint llkeycoms)(rpaqq llkeycoms        ((coms (* \; "Access to keyboard")              (fns bksyscharcode \\clearsysbuf \\getkey \\nsysbufchars \\savesysbuf \\sysbufp                    \\getsysbuf \\putsysbuf \\peeksysbuf)              (initvars (\\longsysbuf))              (initvars (\\\\keyboardwaitbox.globalresource))              (declare\: dontcopy (resources \\keyboardwaitbox))              (declare\: dontcopy (constants (\\sysbufsize 200))                     (macros \\getrealsysbuf)))        (declare\: docopy donteval@load (coms (* \;                                             "Here because it must be done in init before PROC loaded"                                                 )                                              (p (movd? 'nill 'caret))))        (coms (* \; "Key handler")              (fns \\keyboardinit \\keyboardeventfn \\alloclocked \\setiopointers \\keyboardoff                    \\keyboardon \\keyhandler \\keyhandler1 \\resetkeyboard \\domousechording                    \\dotransitions \\decodetransition mousechordwait \\trackcursor)              (initvars (\\mousechordticks)                     (\\mousechordmilliseconds 50))              (declare\: donteval@load docopy (p (\\keyboardinit)))              (declare\: dontcopy (macros .notelastuseraction)                     (constants allup \\ctrlmask \\metabit)                     (constants * dlmousebits)                     (constants * dlmousestates)                     (constants * transitionflags)                     (macros \\transindex armedcode transitionshiftcode transitioncode                             transitionflags)                     (export (records keyaction)                            (constants \\nkeys))                     (records ring)                     (coms (* \; "can get rid of shiftstate after clients have been fixed")                           (records shiftstate)                           (globalvars \\shiftstate \\mousetimertemp))                     (constants nringindexwords)                     (constants (\\sysbuffer.first (unfold nringindexwords bytesperword))                            (\\sysbuffer.last (iplus \\sysbuffer.first (sub1 \\sysbufsize)))))              (declare\: eval@compile (vars \\keynames))              (vars \\origkeyactions \\dlionkeyactions \\dlionosdkeyactions \\doradokeyactions                     \\dovekeyactions \\doveosdkeyactions)              (initvars (\\keyboard.meta 256)                     (\\modified.keyactions))              (globalvars \\sysbuffer \\longsysbuf \\interruptstate \\modified.keyactions                      \\rclksecond \\lastuseraction \\mousechordticks \\lastkeystate                      \\keyboardeventqueue \\keybuffering \\currentkeyaction \\defaultkeyaction                      \\timer.interrupt.pending \\origkeyactions \\keyboard.meta                      \\mousechordmilliseconds \\doradokeyactions \\dlionkeyactions                      \\dlionosdkeyactions \\dovekeyactions \\doveosdkeyactions))        (coms (* \; "Key interpretation")              (fns keyaction keyactiontable \\keyaction1 keydownp \\keynametonumber modify.keyactions                    metashift shiftdownp)              (* \; "To support office style 1108 & 1186 keyboards")              (fns setup.office.keyboard)              (optimizers \\keynametonumber)              (macros \\tempcopytimer)              (* \;                  "Don't copy this optimizer since it expands out to \\getbasebit, but do exportit.")              (declare\: dontcopy (export (optimizers keydownp)))              (export (macros xkeydownp keydownp1 \\newkeydownp)))        (coms (* \; "A raw keyboard device/stream")              (fns \\init.keyboard.stream)              (declare\: donteval@load docopy (p (\\init.keyboard.stream)))              (export (globalvars \\keyboard.device \\keyboard.stream)))        (coms (* \; "Hook for a periodic interrupt")              (fns \\dobufferedtransitions \\timer.interruptframe \\periodic.interruptframe)              (initvars (\\keybuffering)                     (\\periodic.interrupt)                     (\\timer.interrupt.pending)                     (\\periodic.interrupt.frequency 77)))        (localvars . t)        (coms (* \; "cursor and mouse related functions.")              (fns \\hardcursorup \\hardcursorposition \\hardcursordown)              (fns cursor.init \\cursordestination \\softcursorup \\softcursorupcurrent                    \\softcursorposition \\softcursordown cursorprop getcursorprop putcursorprop                    \\cursorbitsperpixel \\cursorimagepropname \\cursormaskpropname)              (fns cursorcreate cursor \\cursorup \\cursorposition \\cursordown adjustcursorposition                    cursorposition cursorscreen cursorexit flipcursor flipcursorbar lastmousex                    lastmousey createposition positionp cursorhotspot)              (props (cursorprop argnames))              (initvars (\\cursorhotspotx 0)                     (\\cursorhotspoty 0)                     (\\currentcursor nil)                     (\\softcursorwidth nil)                     (\\softcursorheight nil)                     (\\softcursorp nil)                     (\\softcursorupp nil)                     (\\softcursorupbm nil)                     (\\softcursordownbm nil)                     (\\softcursorbbt1 nil)                     (\\softcursorbbt2 nil)                     (\\softcursorbbt3 nil)                     (\\softcursorbbt4 nil)                     (\\softcursorbbt5 nil)                     (\\softcursorbbt6 nil)                     (\\cursorscreen nil)                     (\\cursordestination nil)                     (\\cursordestheight 808)                     (\\cursordestwidth 1024)                     (\\cursordestrasterwidth 64)                     (\\cursordestline 0)                     (\\cursordestlinebase nil))              (globalvars \\cursorhotspotx \\cursorhotspoty \\currentcursor \\softcursorwidth                      \\softcursorheight \\softcursorp \\softcursorupp \\softcursorupbm                      \\softcursordownbm \\softcursorbbt1 \\softcursorbbt2 \\softcursorbbt3                      \\softcursorbbt4 \\softcursorbbt5 \\softcursorbbt6 \\cursordestination                      \\cursordestheight \\cursordestwidth \\cursordestrasterwidth \\cursordestline                      \\cursordestlinebase)              (fns getmousestate \\eventkeys)              (export (constants (hardcursorheight 16)                             (hardcursorwidth 16))                     (declare\: eval@compile (addvars (globalvars lastmousex lastmousey lastscreen                                                              lastmousebuttons lastmousetime                                                              lastkeyboard))))              (declare\: dontcopy (export (macros \\setmousexy))                     (macros \\xmousecoord \\ymousecoord))              (declare\: donteval@load docopy (p (movd 'cursor 'setcursor)                                                 (movd '\\cursorposition '\\setcursorposition))                     (vars (|\\SFPosition| (createposition)))))        (coms (declare\: dontcopy (records keyboardevent)                     (constants (\\keyboardevent.first nringindexwords)                            \\keyboardevent.size                            (\\keyboardevent.last (plus \\keyboardevent.first (times                                                                                  \\keyboardevent.size                                                                                      383))))))        (coms (fns machinetype setmaintpanel)              (* \; "DLion beeper")              (fns beepon beepoff))        (export (globalvars \\em.mousex \\em.mousey \\em.cursorx \\em.cursory \\em.utilin                        \\em.realutilin \\em.kbdad0 \\em.kbdad1 \\em.kbdad2 \\em.kbdad3 \\em.kbdad4                        \\em.kbdad5 \\em.dispinterrupt \\em.displayhead \\em.cursorbitmap                        \\machinetype \\defaultkeyaction \\currentkeyaction \\periodic.interrupt                        \\periodic.interrupt.frequency))        (fns without-interrupts)        (coms (* \; "Compile locked fns together for locality")              (blocks (nil flipcursorbar \\keyhandler \\keyhandler1 \\trackcursor                            \\periodic.interruptframe \\timer.interruptframe \\dobufferedtransitions                            \\dotransitions \\decodetransition \\eventkeys \\hardcursorup                            \\domousechording \\keyboardoff \\hardcursorposition \\hardcursordown                            \\softcursorup \\softcursorupcurrent \\softcursorposition \\softcursordown                           )))        (declare\: dontcopy               (addvars (inewcoms (allocal (addvars (lockedfns flipcursorbar \\setiopointers                                                            \\keyhandler \\keyhandler1 \\contextapply                                                            \\lockpages \\decodetransition \\smashlink                                                            \\incusecount llsh \\makefreeblock                                                            \\decusecount \\makenumber \\addbase                                                            \\periodic.interruptframe                                                            \\dobufferedtransitions                                                            \\timer.interruptframe \\causeinterrupt                                                            \\domousechording \\keyboardoff                                                            \\trackcursor \\hardcursorup                                                            \\hardcursorposition \\hardcursordown                                                            \\softcursorup \\softcursorupcurrent                                                            \\softcursorposition \\softcursordown                                                            \\softcursorpilotbitblt)                                                  (lockedvars |\\InterfacePage| \\cursorhotspotx                                                          \\cursorhotspoty \\currentcursor                                                          \\softcursorwidth \\softcursorheight                                                          \\softcursorp \\softcursorupp                                                          \\softcursorupbm \\softcursordownbm                                                          \\softcursorbbt1 \\softcursorbbt2                                                          \\softcursorbbt3 \\softcursorbbt4                                                          \\softcursorbbt5 \\softcursorbbt6                                                          \\cursordestination \\cursordestheight                                                          \\cursordestwidth \\cursordestrasterwidth                                                          \\cursordestline \\cursordestlinebase                                                          \\pendinginterrupt \\periodic.interrupt                                                          \\periodic.interrupt.frequency                                                          \\lastuseraction \\mousechordticks                                                          \\keyboardeventqueue \\keybuffering                                                          screenwidth screenheight                                                          \\timer.interrupt.pending \\em.mousex                                                          \\em.mousey \\em.cursorx \\em.cursory                                                          \\em.utilin \\em.realutilin \\em.kbdad0                                                          \\em.kbdad1 \\em.kbdad2 \\em.kbdad3                                                          \\em.dispinterrupt \\em.cursorbitmap                                                          \\em.kbdad4 \\em.kbdad5 \\miscstats                                                          \\rclksecond))))                      (rdcoms (fns \\setiopointers))))        (prop filetype llkey)        (declare\: donteval@load doeval@compile dontcopy compilervars (addvars (nlama)                                                                             (nlaml                                                                                    without-interrupts                                                                                    )                                                                             (lama cursorprop                                                                                    metashift                                                                                    mousechordwait)))))(* \; "Access to keyboard")(defineq(bksyscharcode  (lambda (char)                                             (* |rrb| "30-Dec-83 11:56")    (or (\\putsysbuf char)        (progn (setq \\longsysbuf (nconc \\longsysbuf (|bind| c |while| (setq c (\\getrealsysbuf))                                                         |collect| c)))               (\\putsysbuf char)))))(\\clearsysbuf  (lambda (allflg)                                           (* |mpl| "27-Jun-85 20:04")    (declare (globalvars \\processes))    (cond       ((or allflg (tty.processp))        (setq \\longsysbuf)        (|replace| (ring read) |of| \\sysbuffer |with| 0)))    (cond       (allflg (|for| proc |in| \\processes |do| (|replace| proctypeahead |of| proc |with| nil)))       ((this.process)        (|replace| proctypeahead |of| (this.process) |with| nil)))))(\\getkey  (lambda nil                                                (* |lmm| "18-Apr-85 00:07")    (declare (globalvars \\keyboardwait1 \\keyboardwait2))    (cond       ((and (this.process)             (|fetch| proctypeahead |of| (this.process)))        (|pop| (|fetch| proctypeahead |of| (this.process))))       (t (wait.for.tty)          (or (\\getsysbuf)              (globalresource (\\keyboardwaitbox)            (* |Busy-wait| |loop| |that| |gets|                                                              |next| |character|)                     (\\clock0 \\keyboardwaitbox)                     (|bind| c |do| (cond                                       ((setq c (\\getsysbuf))                                        (\\boxiplus (locf (|fetch| keyboardwaittime |of| \\miscstats)                                                          )                                               (clockdifference \\keyboardwaitbox))                                        (return c)))                                    (\\ttybackground)                                    (\\wait.for.tty))))))))(\\nsysbufchars  (lambda nil                                                (* |JonL| " 7-May-84 01:50")                    (* |Tells| |how| |many| |characters| |can| |be| |\\GETSYSBUFed.|          |Used| |by| \\savesysbuf.)    (iplus (length \\longsysbuf)           (prog ((r (|fetch| (ring read) |of| \\sysbuffer))                  (w (|fetch| (ring write) |of| \\sysbuffer)))                 (return (cond                            ((eq 0 r)                             0)                            ((igreaterp w r)                             (idifference w r))                            (t (idifference w (idifference r \\sysbufsize)))))))))(\\savesysbuf  (lambda nil                                                (* |JonL| " 7-May-84 01:50")    (declare (globalvars \\savedsysbuffer))    (prog (ta (buf \\savedsysbuffer)              (nc (\\nsysbufchars))              (j 0))          (cond             ((tty.processp)              (cond                 ((and (this.process)                       (setq ta (|fetch| proctypeahead |of| (this.process))))                  (|replace| proctypeahead |of| (this.process) |with| nil)                  (|add| nc (length ta))                  (cond                     ((igreaterp nc (nchars buf))                      (setq buf (allocstring nc))))                  (|for| ch |in| ta |do| (rplcharcode buf (|add| j 1)                                                ch)))                 ((igreaterp nc (nchars buf))                  (setq buf (allocstring nc))))              (|for| i |from| (add1 j) |to| nc |do|                     (* |Test| |on| j |means| |that| |we'll| |ignore| |extra| |chars| |typed|           |since| |we| |got| |the| |length.| |Test| |on| \\getsysbuf |so| |we| |don't|           |get| |screwed| |if| |buffer| |gets| |cleared| |while| |during| |this| |loop|)                                                    (rplcharcode buf i (or (\\getsysbuf)                                                                           (progn (setq nc                                                                                   (sub1 i))                                                                                  (return)))))))          (return (and (not (eq 0 nc))                       (substring buf 1 nc))))))(\\sysbufp  (lambda nil                                                (* |JonL| " 7-May-84 01:52")    (or (and (tty.processp)             (or \\longsysbuf (not (eq 0 (|fetch| (ring read) |of| \\sysbuffer)))))        (and (this.process)             (|fetch| proctypeahead |of| (this.process))))))(\\getsysbuf  (lambda nil                                                (* |lmm| " 9-JUL-83 00:56")    (or (and \\longsysbuf (|pop| \\longsysbuf))        (\\getrealsysbuf))))(\\putsysbuf  (lambda (char)                                             (* |rmk:| "27-Nov-84 17:51")    (prog ((r (|fetch| (ring read) |of| \\sysbuffer))           (w (|fetch| (ring write) |of| \\sysbuffer)))          (return (cond                     ((eq r w)                               (* |Full|)                      nil)                     (t (\\putbasefat \\sysbuffer w char)                        (and (eq 0 r)                             (|replace| (ring read) |of| \\sysbuffer |with| w))                                                             (* |Return| |random| |non-NIL| |value|                                                              |to| |indicate| |success| |for|                                                              bksysbuf)                        (|replace| (ring write) |of| \\sysbuffer |with| (cond                                                                           ((eq \\sysbuffer.last w)                                                                            \\sysbuffer.first)                                                                           (t (add1 w))))                        t))))))(\\peeksysbuf  (lambda (stream)                                           (* |bvm:| " 8-Feb-85 17:50")    (prog (r)      wait          (|until| (\\sysbufp) |do| (block))          (return (|if| (tty.processp)                      |then| (|if| \\longsysbuf                                 |then| (car \\longsysbuf)                               |elseif| (neq (setq r (|fetch| (ring read) |of| \\sysbuffer))                                             0)                                 |then|                      (* |Here's| |the| |vanilla| |case|)                                       (\\getbasefat \\sysbuffer r)                               |else|                     (* |Foo| |an| |interrupt| |could| |have| |sneaked| |in| |here| |and| |gobbled|           |down| |the| |remaining| |characters|)                                     (go wait))                    |elseif| (this.process)                      |then| (car (|fetch| proctypeahead |of| (this.process)))                    |else| (shouldnt)))))))(rpaq? \\longsysbuf )(rpaq? \\\\keyboardwaitbox.globalresource )(declare\: dontcopy (declare\: eval@compile (putdef '\\keyboardwaitbox 'resources '(new (createcell \\fixp)))))(declare\: dontcopy (declare\: eval@compile (rpaqq \\sysbufsize 200)(constants (\\sysbufsize 200)))(declare\: eval@compile (putprops \\getrealsysbuf macro       (nil (prog ((r (|fetch| (ring read)                             |of| \\sysbuffer)))                  (return (and (not (eq 0 r))                               (prog1 (\\getbasefat \\sysbuffer r)                                      (and (eq (|fetch| (ring write)                                                      |of| \\sysbuffer)                                               (|replace| (ring read)                                                      |of| \\sysbuffer |with| (cond                                                                               ((eq \\sysbuffer.last                                                                                     r)                                                                                \\sysbuffer.first)                                                                               (t (add1 r)))))                                           (|replace| (ring read)                                                  |of| \\sysbuffer |with| 0))))))))))(declare\: docopy donteval@load (* \; "Here because it must be done in init before PROC loaded")(movd? 'nill 'caret))(* \; "Key handler")(defineq(\\keyboardinit  (lambda nil                                                (* |lmm| "23-May-85 15:57")    (declare (globalvars \\savedsysbuffer))                  (* |Sets| |up| |keyboard| |decoding|                                                              |tables.|)    (setq \\currentkeyaction (setq \\defaultkeyaction (|create| keyaction)))    (|for| x |in| \\origkeyactions |do| (keyaction (car x)                                               (cdr x)))    (setq \\interruptstate (\\alloclocked 2))    (progn (setq \\sysbuffer (\\allocblock (foldhi (add1 \\sysbuffer.last)                                                  wordspercell)))           (|replace| (ring read) |of| \\sysbuffer |with| 0)           (|replace| (ring write) |of| \\sysbuffer |with| \\sysbuffer.first))    (setq \\savedsysbuffer (allocstring \\sysbufsize nil nil t))    (setq \\lastuseraction (locf (|fetch| lastuseraction |of| \\miscstats)))    (progn (setq \\keyboardeventqueue (\\alloclocked (foldhi (plus \\keyboardevent.last                                                                    \\keyboardevent.size)                                                            wordspercell)))           (|replace| (ring read) |of| \\keyboardeventqueue |with| 0)           (|replace| (ring write) |of| \\keyboardeventqueue |with| \\keyboardevent.first))    (setq \\lastkeystate (|create| keyboardevent))    (setq \\shiftstate (|create| shiftstate))    (setq \\mousetimertemp (setuptimer 0 nil 'ticks))    (mousechordwait \\mousechordmilliseconds)    (\\keyboardon)))(\\keyboardeventfn  (lambda (fdev event extra)                                 (* |jds| "11-Nov-85 00:30")    (declare (globalvars \\keyboard.beforetype \\doradokeyactions \\dlionkeyactions))    (selectq event        ((beforelogout beforemakesys beforesysout beforesavevm)              (setq \\keyboard.beforetype \\machinetype))        ((afterlogout aftermakesys aftersysout aftersavevm)                     (* |Restarting| \a |world.| i\f |we| |changed| |machines,| |fix| |up| |the|           |key| |actions| |to| |match| |the| |new| |machine.|)             (cond                ((neq \\machinetype \\keyboard.beforetype)   (* |Changed| |machines.|                                                             |Change| |Keyactions.|)                 (|for| x |in| (selectc \\machinetype                                   (\\dorado \\doradokeyactions)                                   (\\dandelion \\dlionkeyactions)                                   (\\daybreak                     (* |Moving| |to| \a |daybreak.| |Need| |to| |distinguish| |among| |the|           |various| |kinds| |of| |keyboard.|)                    (* |For| |now,| |we| |only| |distinguish| |between| |the| |office| |keyboards|          (1 = us\, 2 = |Euro,| 3 = |Japanese,| 4 = adm-3)\, |and| |some|           |yet-to-be-determined| |Lisp-keyboard| |number|)                                               (cond                                                  ((ileq (|\\DoveMisc.ReadKeyboardType|)                                                         4)  (* |It's| |an| |office| |keyboard.|                                                             |Set| |it| |up| |right!|)                                                   (append \\dovekeyactions \\doveosdkeyactions))                                                  (t         (* |Lisp| |keyboard.|                                                             |Leave| |the| |Dove| |keyactions| |as|                                                              |they| |were.|)                                                     \\dovekeyactions)))                                   nil) |do| (keyaction (car x)                                                    (cdr x)                                                    \\defaultkeyaction))                 (mousechordwait (mousechordwait)))))        ((afterdosavevm afterdomakesys)              nil)        nil)))(\\alloclocked  (lambda (ncells)                                           (* |lmm| "20-Apr-85 13:08")                                                             (* |allocate| \a |block| |of| ncells                                                              |cells| |and| |lock| |it|)    (prog ((block (\\allocblock ncells nil (imin ncells cellsperpage))))          (\\lockcell block (foldhi (iplus (|fetch| (pointer wordinpage) |of| block)                                           (unfold ncells wordspercell))                                   wordsperpage))          (return block))))(\\setiopointers  (lambda nil                                                (* |bvm:| " 9-Oct-85 11:49")    (selectc (settopval '\\machinetype (|fetch| |MachineType| |of| |\\InterfacePage|))        ((list \\dolphin \\dorado)              (settopval '\\em.mousex (emaddress mousex.em))             (settopval '\\em.mousey (emaddress mousey.em))             (settopval '\\em.cursorx (emaddress cursorx.em))             (settopval '\\em.cursory (emaddress cursory.em))             (settopval '\\em.realutilin (emaddress utilin.em))             (settopval '\\em.kbdad0 (emaddress kbdad0.em))             (settopval '\\em.kbdad1 (emaddress kbdad1.em))             (settopval '\\em.kbdad2 (emaddress kbdad2.em))             (settopval '\\em.kbdad3 (emaddress kbdad3.em))             (settopval '\\em.kbdad4 (locf (|fetch| fakekbdad4 |of| |\\InterfacePage|)))             (\\putbase \\em.kbdad4 0 allup)             (settopval '\\em.kbdad5 (locf (|fetch| fakekbdad5 of |\\InterfacePage|)))             (\\putbase \\em.kbdad5 0 allup)             (settopval '\\em.dispinterrupt (emaddress dispinterrupt.em))             (settopval '\\em.cursorbitmap (emaddress cursorbitmap.em))             (settopval '\\em.displayhead (emaddress dcb.em))             (settopval 'screenwidth (unfold (|fetch| |ScreenWidth| |of| |\\InterfacePage|)                                            bitsperword)))        (\\dandelion (settopval '\\em.mousex (|fetch| dlmousexptr |of| \\iopage))                     (settopval '\\em.mousey (|fetch| dlmouseyptr |of| \\iopage))                     (settopval '\\em.cursorx (|fetch| dlcursorxptr |of| \\iopage))                     (settopval '\\em.cursory (|fetch| dlcursoryptr |of| \\iopage))                     (progn (settopval '\\em.realutilin (|fetch| dlutilinptr |of| \\iopage))                    (* |Where| |the| |hardware| |bits| |live,| |vs.|          |where| |the| |Lisp| |software| |sees| |them| |after| |reinterpretation| |by|           |keyhandler|)                            )                     (settopval '\\em.kbdad0 (|fetch| dlkbdad0ptr |of| \\iopage))                     (settopval '\\em.kbdad1 (|fetch| dlkbdad1ptr |of| \\iopage))                     (settopval '\\em.kbdad2 (|fetch| dlkbdad2ptr |of| \\iopage))                     (settopval '\\em.kbdad3 (|fetch| dlkbdad3ptr |of| \\iopage))                     (settopval '\\em.kbdad4 (|fetch| dlkbdad4ptr |of| \\iopage))                     (settopval '\\em.kbdad5 (|fetch| dlkbdad5ptr |of| \\iopage))                     (settopval '\\em.dispinterrupt (|fetch| dldispinterruptptr |of| \\iopage))                     (settopval '\\em.cursorbitmap (|fetch| dlcursorbitmapptr |of| \\iopage))                     (settopval '\\em.displayhead nil)                     (settopval 'screenwidth 1024))        (\\daybreak (prog ((kbdbase (|\\DoveMisc.GetKBDBase|)))                          (settopval '\\em.kbdad0 (\\addbase kbdbase 1))                          (settopval '\\em.kbdad1 (\\addbase kbdbase 2))                          (settopval '\\em.kbdad2 (\\addbase kbdbase 3))                          (settopval '\\em.kbdad3 (\\addbase kbdbase 4))                          (settopval '\\em.kbdad4 (\\addbase kbdbase 5))                          (settopval '\\em.kbdad5 (\\addbase kbdbase 6))                          (settopval '\\em.mousex (|\\DoveMisc.GetMouseXBase|))                          (settopval '\\em.mousey (|\\DoveMisc.GetMouseYBase|))                          (settopval '\\em.cursorbitmap (|\\DoveDisplay.GetCursorBitmapBase|))                                                             (* |These| |three| |set| |this| |way|                                                              |to| |prevent| |address| |faults|)                          (settopval '\\em.dispinterrupt (|fetch| dldispinterruptptr |of| \\iopage))                          (settopval '\\em.cursorx (|fetch| dlcursorxptr |of| \\iopage))                          (settopval '\\em.cursory (|fetch| dlcursoryptr |of| \\iopage))                          (progn (settopval '\\em.realutilin kbdbase)                    (* |Where| |the| |hardware| |bits| |live,| |vs.|          |where| |the| |Lisp| |software| |sees| |them| |after| |reinterpretation| |by|           |keyhandler|)                                 )                          (settopval 'screenwidth (|\\DoveDisplay.ScreenWidth|))))        (raid))    (settopval '\\em.utilin (locf (|fetch| (ifpage fakemousebits) |of| |\\InterfacePage|)))))(\\keyboardoff  (lambda nil                                                (* |lmm| "30-MAR-83 20:40")    (\\putbase \\em.dispinterrupt 0 (logand (logxor 65535 |\\LispKeyMask|)                                           (\\getbase \\em.dispinterrupt 0)))))(\\keyboardon  (lambda (nocheck)                                          (* |lmm| "30-MAR-83 20:39")    (\\setiopointers)    (\\putbase \\em.dispinterrupt 0 (logor |\\LispKeyMask| (\\getbase \\em.dispinterrupt 0)))))(\\keyhandler  (lambda nil                                                (* |lmm| "30-MAR-83 20:40")    (\\keyhandler1)))(\\keyhandler1  (lambda nil                                                (* |bvm:| " 9-Oct-85 12:46")    (prog ((old0 allup)           (old1 allup)           (old2 allup)           (old3 allup)           (old4 allup)           (old5 allup)           (oldu allup)           (oldfakeu allup)           (loopcnt 10)           (periodcnt 60)           (mousestate \\dlmouse.up)           (mousetimer (locf (|fetch| dlmousetimer |of| \\miscstats)))           (mousetemp (locf (|fetch| dlmousetemp |of| \\miscstats)))           cursorx cursory yhot)          (setq \\keybuffering nil)          (|replace| (ring read) |of| \\keyboardeventqueue |with| 0)      lp  (\\contextswitch |\\KbdFXP|)          (cond             (\\periodic.interrupt                           (* |eventually| |can| |be| |replaced|                                                              |with| |general| |timer| |mechanism|)                    (cond                       ((igreaterp periodcnt 0)              (* |Continue| |counting| |down| |to|                                                              |zero|)                        (setq periodcnt (sub1 periodcnt)))                       ((\\causeinterrupt |\\KbdFXP| (function \\periodic.interruptframe))                    (* |When| |we've| |counted| |down,| |then| |keep| |trying| |to| |cause| |the|           |interrupt,| |and| |reset| |the| |counter| |when| |it| |finally| |happens|)                        (setq periodcnt (sub1 (or \\periodic.interrupt.frequency 1)))))))          (cond             ((or (neq (\\getbase \\em.mousex 0)                       cursorx)                  (neq (\\getbase \\em.mousey 0)                       cursory))              (\\trackcursor (setq cursorx (\\getbase \\em.mousex 0))                     (setq cursory (\\getbase \\em.mousey 0)))))          (cond             ((or (cond                     ((or (neq oldu (\\getbase \\em.realutilin 0))                          (cond                             ((and (eq mousestate \\dlmouse.waiting)                                   (igreaterp (\\boxidifference (\\rclk mousetemp)                                                     mousetimer)                                          0))                    (* |Timer| |expired| |on| |seeing| |both| |left| |and| |right| |down,| |so|           |set| |state| |to| |normal|)                              (setq mousestate \\dlmouse.normal)                              t)))                      (setq mousestate (\\domousechording (setq oldu (\\getbase \\em.realutilin 0))                                              mousestate))                      (neq oldfakeu (\\getbase \\em.utilin 0))))                  (neq old0 (\\getbase \\em.kbdad0 0))                  (neq old1 (\\getbase \\em.kbdad1 0))                  (neq old2 (\\getbase \\em.kbdad2 0))                  (neq old3 (\\getbase \\em.kbdad3 0))                  (neq old4 (\\getbase \\em.kbdad4 0))                  (neq old5 (\\getbase \\em.kbdad5 0)))              (cond                 ((eq 0 (logand (\\getbase \\em.kbdad2 0)                               2114))                        (* |Ctrl-shift-DEL| |panic|                                                              |interrupt| -- |switch| |to|                                                              |TeleRaid| |immediately|)                  (|swap| (|fetch| (ifpage teleraidfxp) |of| |\\InterfacePage|)                         (|fetch| (ifpage |KbdFXP|) |of| |\\InterfacePage|))                  (\\keyboardoff)                  (setq old2 (\\getbase \\em.kbdad2 0))                  (go lp)))              (prog ((w (|fetch| (ring write) |of| \\keyboardeventqueue))                     (r (|fetch| (ring read) |of| \\keyboardeventqueue))                     wptr)                    (cond                       ((eq r w)                             (* |eventqueue| |full!|)                        (return)))                    (setq wptr (\\addbase \\keyboardeventqueue w))                    (\\rclk (locf (|fetch| time |of| wptr)))                    (|with| keyboardevent wptr (progn (setq w0 (setq old0 (\\getbase \\em.kbdad0 0)))                                                      (setq w1 (setq old1 (\\getbase \\em.kbdad1 0)))                                                      (setq w2 (setq old2 (\\getbase \\em.kbdad2 0)))                                                      (setq w3 (setq old3 (\\getbase \\em.kbdad3 0)))                                                      (setq w4 (setq old4 (\\getbase \\em.kbdad4 0)))                                                      (setq w5 (setq old5 (\\getbase \\em.kbdad5 0)))                                                      (setq wu (setq oldfakeu (\\getbase \\em.utilin                                                                                      0)))))                    (cond                       ((eq r 0)                             (* |Queue| |was| |empty|)                        (|replace| (ring read) |of| \\keyboardeventqueue |with| w)))                    (|replace| (ring write) |of| \\keyboardeventqueue                       |with| (cond                                 ((igeq w \\keyboardevent.last)                                  \\keyboardevent.first)                                 (t (iplus w \\keyboardevent.size)))))              (or \\keybuffering (setq \\keybuffering t))))          (cond             (\\keybuffering (cond                                ((eq \\keybuffering t)                                 (cond                                    ((\\causeinterrupt |\\KbdFXP| (function \\dobufferedtransitions))                                     (setq \\keybuffering 'started)                                                             (* |don't| |call| |until|                                                              \\dobufferedtransitions |is| |done|)                                     )))))             (t (cond                   (\\pendinginterrupt (cond                                          ((\\causeinterrupt |\\KbdFXP| (function \\interruptframe))                                           (setq \\pendinginterrupt)))))))          (cond             ((ileq (setq loopcnt (sub1 loopcnt))                    0)                                       (* |Only| |do| |this| |once| |in| \a                                                              |while|)              (setq loopcnt (cond                               ((\\updatetimers)                    (* |Timer| |was| |updated,| |so| |do| |it| |next| |time| |around,| |too,| |in|           |case| |we| |just| |came| |back| |from| raid |or| |other| |bcpl| |code|)                                1)                               (t 20)))))          (cond             ((and nil \\timer.interrupt.pending (igreaterp (\\boxidifference                                                             (\\rclk (locf (|fetch| dlmousetemp                                                                              |of| \\miscstats)))                                                             (locf (|fetch| dlmousetimer |of|                                                                                           \\miscstats                                                                          )))                                                        0)                   (cond                      ((eq \\timer.interrupt.pending '\\mousechange)                       (setq oldu nil)                       t)                      (t (\\causeinterrupt |\\KbdFXP| (function \\timer.interruptframe)))))              (setq \\timer.interrupt.pending)))          (go lp))))(\\resetkeyboard  (lambda nil                                                (* |bvm:| "21-Nov-85 16:10")    (\\setiopointers)                    (* |Called| |with| |lisp| |keyboard| |disabled| |whenever| |Lisp| |is|           |resumed| |from| |bcpl| |logout| |or| |copysys.|)    (setq \\keybuffering nil)    (cond       ((or (eq \\machinetype \\dandelion)            (eq \\machinetype \\daybreak))                   (* |Initialize| |fake| |mouse| |bits|                                                              |to| |all| |up|)        (\\putbase \\em.utilin 0 allup)))    (|with| keyboardevent \\lastkeystate (setq w0 (\\getbase \\em.kbdad0 0))           (setq w1 (\\getbase \\em.kbdad1 0))           (setq w2 (\\getbase \\em.kbdad2 0))           (setq w3 (\\getbase \\em.kbdad3 0))           (setq w4 (\\getbase \\em.kbdad4 0))           (setq w5 (\\getbase \\em.kbdad5 0))           (setq wu (\\getbase \\em.realutilin 0))           (setq lock (xkeydownp 'lock))           (setq 1shift nil)           (setq 2shift nil)           (setq ctrl nil)           (setq meta nil)           (setq font nil)           (setq usermode1 nil)           (setq usermode2 nil)           (setq usermode3 nil)           (setq mousestate \\dlmouse.up))    (setq \\timer.interrupt.pending)    (|replace| (ring read) |of| \\keyboardeventqueue |with| 0)    (|replace| (ring read) |of| \\sysbuffer |with| 0)    (setq \\longsysbuf)    (\\daytime0 \\lastuseraction)    (\\keyboardon)))(\\domousechording  (lambda (realutilin state)                                 (* |bvm:| " 9-Oct-85 11:24")                    (* |Handles| |mouse| |transitions| |on| \a |DLion.|          realutilin |is| |the| |actual| |util| |word| |from| |the| |processor.|          state |is| |our| |internal| |state.| |Sets| |contents| |of| \\em.utilin |to|           |reflect| |the| |virtual| |mouse| |state,| |which| |may| |contain| \a |middle|           |mouse| |button| |even| |where| |there| |is| |only| \a |two-button| |mouse.|          |Returns| |new| |state|)    (prog (lrstate)          (cond             ((or (null \\mousechordticks)                  (eq (setq lrstate (logxor (logand realutilin \\mouse.allbits)                                           \\mouse.allbits))                      0))                    (* |Not| |interpreting| |chording,| |or| |both| left |and| right |are| |up| --          |real| |state| |and| |virtual| |state| |the| |same|)              (setq state \\dlmouse.up))             (t                     (* |Either| l |or| r |or| |both| |are| |down,| |so| |have| |to| |decide|           |about| |Middle|)                (selectc state                    ((list \\dlmouse.up \\dlmouse.waiting)                          (setq realutilin (logor realutilin \\mouse.lrbit))                                                             (* |Turn| |off| |the| l |and/or| r                                                              |bits|)                         (cond                            ((eq lrstate \\mouse.lrbit)                    (* |Both| l |and| r |down| |at| |once,| |interpret| |as| middle |without|           |waiting|)                             (setq realutilin (logand (logxor allup \\mouse.middlebit)                                                     realutilin))                             (setq state \\dlmouse.middle))                            ((neq state \\dlmouse.waiting)                    (* |Only| |one| |of| l |and| r |down.| |Set| |timer,| |and| |ignore| |the|           |down| |bit| |for| |now|)                             (\\boxiplus (\\rclk (locf (|fetch| dlmousetimer |of| \\miscstats)))                                    \\mousechordticks)                             (setq state \\dlmouse.waiting))))                    (\\dlmouse.middle                     (* |State| |is| |middle| |and| |at| |least| |one| |of| l |and| r |is| |still|           |down,| |so| |consider| |it| |to| |be| |still| |only| |middle|)                         (setq realutilin (logand (logxor allup \\mouse.middlebit)                                                 (logor realutilin \\mouse.lrbit)))                         (selectc lrstate                             (\\mouse.leftbit                (* |Right| |came| |up.|                                                             |Henceforth| |treat| |right|                                                              |transparently|)                                  (setq state \\dlmouse.middle&right))                             (\\mouse.rightbit               (* |Left| |came| |up.|                                                             |Henceforth| |treat| |left|                                                              |transparently|)                                  (setq state \\dlmouse.middle&left))                             nil))                    (\\dlmouse.middle&right                  (* |Only| |ignore| left)                         (setq realutilin (logand (logxor allup \\mouse.middlebit)                                                 (logor realutilin \\mouse.leftbit))))                    (\\dlmouse.middle&left                   (* |Only| |ignore| right)                         (setq realutilin (logand (logxor allup \\mouse.middlebit)                                                 (logor realutilin \\mouse.rightbit))))                    (progn                     (* |Remaining| |state| |is| \\dlmouse.normal |which| |means| |treat| |mouse|           |normally,| |and| |the| |only| |interesting| |transition| |is| |back| |to|           \\dlmouse.up)))))          (\\putbase \\em.utilin 0 realutilin)          (return state))))(\\dotransitions  (lambda (keybase old new)                                  (* |lmm| "22-Apr-85 16:04")                    (* old |and| new |are| |keyboard| |state| |words| |that| |are| |known| |to|           |have| |changed.| keybase |is| |the| |number| |in| |hardware| |order| |of|           |the| |key| |corresponding| |to| |the| |first| |bit| |in| |these| |words.|          |This| |function| |figures| |out| |the| |indices| |of| |transitioning| |keys|           |and| |calls| |the| |decoder.|)    (|for| i (bitmask _ (llsh 1 15)) |from| 0 |to| 15       |do| (or (eq 0 (logand bitmask (logxor old new)))                (\\decodetransition (iplus i keybase)                       (eq 0 (logand new bitmask))))            (setq bitmask (lrsh bitmask 1)))    t))(\\decodetransition  (lambda (keynumber downflg)                                (* |lmm| "23-Apr-85 10:08")                    (* keynumber |is| |the| |key| |number| |in| |the| |hardware| |keyboard|           |layout,| downflg |is| t |if| |the| |key| |just| |went| |down.|          pendinginterrupt\, |bound| |in| \\keyhandler\, |is| |set| |to| |the| |decoded|           |character| |if| |it| |is| |an| |interrupt.|)    (.notelastuseraction)    (prog (asciicode (ti (\\transindex keynumber downflg)))          (selectc (transitionflags \\currentkeyaction ti)              (ignore.tf (return))              (lockshift.tf (setq asciicode (cond                                               ((|fetch| (keyboardevent shiftorlock) |of|                                                                                        \\lastkeystate                                                       )                                                (transitionshiftcode \\currentkeyaction ti))                                               (t (transitioncode \\currentkeyaction ti)))))              (nolockshift.tf                    (setq asciicode (cond                                      ((|fetch| (keyboardevent shift) |of| \\lastkeystate)                                       (transitionshiftcode \\currentkeyaction ti))                                      (t (transitioncode \\currentkeyaction ti)))))              (event.tf (return))              (1shiftup.tf (|replace| (keyboardevent 1shift) |of| \\lastkeystate |with| nil)                           (return))              (1shiftdown.tf (|replace| (keyboardevent 1shift) |of| \\lastkeystate |with| t)                             (return))              (2shiftup.tf (|replace| (keyboardevent 2shift) |of| \\lastkeystate |with| nil)                           (return))              (2shiftdown.tf (|replace| (keyboardevent 2shift) |of| \\lastkeystate |with| t)                             (return))              (lockup.tf (|replace| (keyboardevent lock) |of| \\lastkeystate |with| nil)                         (return))              (lockdown.tf (|replace| (keyboardevent lock) |of| \\lastkeystate |with| t)                           (return))              (locktoggle.tf (|replace| (keyboardevent lock) |of| \\lastkeystate                                |with| (not (|fetch| (keyboardevent lock) |of| \\lastkeystate)))                             (return))              (ctrlup.tf (|replace| (keyboardevent ctrl) |of| \\lastkeystate |with| nil)                         (return))              (ctrldown.tf (|replace| (keyboardevent ctrl) |of| \\lastkeystate |with| t)                           (return))              (metaup.tf (|replace| (keyboardevent meta) |of| \\lastkeystate |with| nil)                         (return))              (metadown.tf (|replace| (keyboardevent meta) |of| \\lastkeystate |with| t)                           (return))              (fontup.tf (|replace| (keyboardevent font) |of| \\lastkeystate |with| nil)                         (return))              (fontdown.tf (|replace| (keyboardevent font) |of| \\lastkeystate |with| t)                           (return))              (fonttoggle.tf (|replace| (keyboardevent font) |of| \\lastkeystate                                |with| (not (|fetch| (keyboardevent font) |of| \\lastkeystate)))                             (return))              (usermode1up.tf                    (|replace| (keyboardevent usermode1) |of| \\lastkeystate |with| nil)                   (return))              (usermode1down.tf                    (|replace| (keyboardevent usermode1) |of| \\lastkeystate |with| t)                   (return))              (usermode1toggle.tf                    (|replace| (keyboardevent usermode1) |of| \\lastkeystate                      |with| (not (|fetch| (keyboardevent usermode1) |of| \\lastkeystate)))                   (return))              (usermode2up.tf                    (|replace| (keyboardevent usermode2) |of| \\lastkeystate |with| nil)                   (return))              (usermode2down.tf                    (|replace| (keyboardevent usermode2) |of| \\lastkeystate |with| t)                   (return))              (usermode2toggle.tf                    (|replace| (keyboardevent usermode2) |of| \\lastkeystate                      |with| (not (|fetch| (keyboardevent usermode2) |of| \\lastkeystate)))                   (return))              (usermode3up.tf                    (|replace| (keyboardevent usermode3) |of| \\lastkeystate |with| nil)                   (return))              (usermode3down.tf                    (|replace| (keyboardevent usermode3) |of| \\lastkeystate |with| t)                   (return))              (usermode3toggle.tf                    (|replace| (keyboardevent usermode3) |of| \\lastkeystate                      |with| (not (|fetch| (keyboardevent usermode3) |of| \\lastkeystate)))                   (return))              (shouldnt))          (and (|fetch| (keyboardevent ctrl) |of| \\lastkeystate)               (setq asciicode (logand asciicode \\ctrlmask)))          (cond             ((and (or (|fetch| (keyboardevent meta) |of| \\lastkeystate)                       (|fetch| (keyboardevent font) |of| \\lastkeystate))                   (ilessp asciicode \\keyboard.meta))              (setq asciicode (logor asciicode \\keyboard.meta))))          (cond             ((assoc asciicode (|fetch| interruptlist |of| \\currentkeyaction))              (setq pendinginterrupt t)              (|replace| waitinginterrupt |of| \\interruptstate |with| t)              (|replace| intcharcode |of| \\interruptstate |with| asciicode))             (t (\\putsysbuf asciicode))))))(mousechordwait  (lambda msecs                                              (* mpl "21-Jun-85 16:31")    (declare (globalvars \\rclkmillisecond))    (prog1 (and \\mousechordticks \\mousechordmilliseconds)           (cond              ((igreaterp msecs 0)               (setq \\mousechordticks (and (arg msecs 1)                                            (imin max.smallp (itimes (setq \\mousechordmilliseconds                                                                      (or (smallp (arg msecs 1))                                                                          50))                                                                    \\rclkmillisecond)))))))))(\\trackcursor  (lambda (cursorx cursory)                                  (* |gbn:| "26-Jan-86 17:01")    (declare (globalvars \\cursordestheight \\cursordestwidth))    (.notelastuseraction)    (cond       ((or (cond               ((igeq cursorx (idifference \\cursordestwidth \\cursorhotspotx))                    (* |Large| |cursor| |values| |are| |either| |out| |of| |bounds| |to| |the|           |right| |or| |are| |negative| |values| (|16-bit| |bcpl| |signed| |numbers|))                (cond                   ((igreaterp cursorx 32767)                (* |Cursor| |value| |is| |negative|)                    (cond                       ((ilessp (iplus (sub1 (idifference cursorx 65535))                                       \\cursorhotspotx)                               0)                    (* |Cursor| |pos| + |hotspot| |is| |still| |off| |to| |the| |left|          (|the| iplus |is| |an| |optimization| |of|          (\\xmousecoord))\, |so| |clip| |to| |effective| |zero|)                        (setq cursorx (cond                                         ((eq \\machinetype \\dandelion)                                                             (* |Temporary| |workaround|)                                          0)                                         (t (unsigned (iminus \\cursorhotspotx)                                                   bitsperword)))))))                   (t (setq cursorx (sub1 (idifference \\cursordestwidth \\cursorhotspotx)))))))            (igeq cursory (idifference \\cursordestheight hardcursorheight)))                    (* |repeat| |test| |so| |that| |both| x |and| y |will| |get| |clipped| |each|           |cycle.| |This| |keeps| |the| |cursor| |from| |moving| |off| |the| |screen.|)        (cond           ((igeq cursory (idifference \\cursordestheight \\cursorhotspoty))                    (* |Large| |cursor| |values| |are| |either| |out| |of| |bounds| |to| |the|           |bottom| |or| |are| |negative| |values| (|16-bit| |bcpl| |signed| |numbers|))            (cond               ((igreaterp cursory 32767)                    (* |Cursor| |value| |is| |negative|)                (cond                   ((ilessp (iplus (sub1 (idifference cursory 65535))                                   \\cursorhotspoty)                           0)                    (* |Cursor| |pos| + |hotspot| |is| |still| |off| |to| |the| |top,| |so| |clip|           |to| |effective| |zero|)                    (setq cursory (cond                                     ((or (eq \\machinetype \\dandelion)                                          (eq \\machinetype \\daybreak))                                                             (* |Temporary| |workaround|)                                      0)                                     (t (unsigned (iminus \\cursorhotspoty)                                               bitsperword)))))))               (t (setq cursory (sub1 (idifference \\cursordestheight \\cursorhotspoty)))))))                    (* i\f |need| |to| |clip| |mouse,| |do| |so| |here.|          \\setmousexy macro |takes| |dlion| |complexities| |into| |account.|)        (\\setmousexy cursorx cursory)))    (cond       (\\softcursorupp (\\softcursorposition cursorx cursory)))    (cond       ((eq \\machinetype \\daybreak)                    (* |Have| |to| |kick| daybreak iop |to| |track| |the| |cursor.|          *)        (|\\DoveDisplay.SetCursorPosition| cursorx cursory)))    (\\putbase \\em.cursorx 0 cursorx)    (\\putbase \\em.cursory 0 cursory))))(rpaq? \\mousechordticks )(rpaq? \\mousechordmilliseconds 50)(declare\: donteval@load docopy (\\keyboardinit))(declare\: dontcopy (declare\: eval@compile (putprops .notelastuseraction macro (nil (\\blt \\lastuseraction (locf (|fetch| secondstmp |of|                                                                               \\miscstats))                                                wordspercell))))(declare\: eval@compile (rpaqq allup 65535)(rpaqq \\ctrlmask 159)(rpaqq \\metabit 128)(constants allup \\ctrlmask \\metabit))(rpaqq dlmousebits ((\\mouse.leftbit 4)                    (\\mouse.rightbit 2)                    (\\mouse.middlebit 1)                    (\\mouse.allbits 7)                    (\\mouse.lrbit 6)))(declare\: eval@compile (rpaqq \\mouse.leftbit 4)(rpaqq \\mouse.rightbit 2)(rpaqq \\mouse.middlebit 1)(rpaqq \\mouse.allbits 7)(rpaqq \\mouse.lrbit 6)(constants (\\mouse.leftbit 4)       (\\mouse.rightbit 2)       (\\mouse.middlebit 1)       (\\mouse.allbits 7)       (\\mouse.lrbit 6)))(rpaqq dlmousestates ((\\dlmouse.up 0)                      (\\dlmouse.waiting 1)                      (\\dlmouse.normal 2)                      (\\dlmouse.middle 3)                      (\\dlmouse.middle&left 4)                      (\\dlmouse.middle&right 5)))(declare\: eval@compile (rpaqq \\dlmouse.up 0)(rpaqq \\dlmouse.waiting 1)(rpaqq \\dlmouse.normal 2)(rpaqq \\dlmouse.middle 3)(rpaqq \\dlmouse.middle&left 4)(rpaqq \\dlmouse.middle&right 5)(constants (\\dlmouse.up 0)       (\\dlmouse.waiting 1)       (\\dlmouse.normal 2)       (\\dlmouse.middle 3)       (\\dlmouse.middle&left 4)       (\\dlmouse.middle&right 5)))(rpaqq transitionflags        (ctrldown.tf ctrlup.tf ignore.tf event.tf lockdown.tf lockshift.tf locktoggle.tf lockup.tf               nolockshift.tf 1shiftdown.tf 1shiftup.tf 2shiftdown.tf 2shiftup.tf metadown.tf               metaup.tf fontdown.tf fontup.tf fonttoggle.tf usermode1up.tf usermode1down.tf               usermode1toggle.tf usermode2up.tf usermode2down.tf usermode2toggle.tf usermode3up.tf               usermode3down.tf usermode3toggle.tf))(declare\: eval@compile (rpaqq ctrldown.tf 5)(rpaqq ctrlup.tf 4)(rpaqq ignore.tf 0)(rpaqq event.tf 1)(rpaqq lockdown.tf 8)(rpaqq lockshift.tf 2)(rpaqq locktoggle.tf 14)(rpaqq lockup.tf 7)(rpaqq nolockshift.tf 3)(rpaqq 1shiftdown.tf 6)(rpaqq 1shiftup.tf 9)(rpaqq 2shiftdown.tf 11)(rpaqq 2shiftup.tf 10)(rpaqq metadown.tf 13)(rpaqq metaup.tf 12)(rpaqq fontdown.tf 24)(rpaqq fontup.tf 25)(rpaqq fonttoggle.tf 26)(rpaqq usermode1up.tf 15)(rpaqq usermode1down.tf 16)(rpaqq usermode1toggle.tf 17)(rpaqq usermode2up.tf 18)(rpaqq usermode2down.tf 19)(rpaqq usermode2toggle.tf 20)(rpaqq usermode3up.tf 21)(rpaqq usermode3down.tf 22)(rpaqq usermode3toggle.tf 23)(constants ctrldown.tf ctrlup.tf ignore.tf event.tf lockdown.tf lockshift.tf locktoggle.tf lockup.tf        nolockshift.tf 1shiftdown.tf 1shiftup.tf 2shiftdown.tf 2shiftup.tf metadown.tf metaup.tf        fontdown.tf fontup.tf fonttoggle.tf usermode1up.tf usermode1down.tf usermode1toggle.tf        usermode2up.tf usermode2down.tf usermode2toggle.tf usermode3up.tf usermode3down.tf        usermode3toggle.tf))(declare\: eval@compile (putprops \\transindex macro ((keynumber downflg)                              (cond (downflg (iplus \\nkeys keynumber))                                    (t keynumber))))(putprops armedcode macro ((table char)                           (\\getbasebit (|fetch| (keyaction armed)                                                table)                                  char)))(putprops transitionshiftcode macro ((table char)                                     (\\getbase (|fetch| (keyaction shiftcodes)                                                       table)                                            char)))(putprops transitioncode macro ((table char)                                (\\getbase (|fetch| (keyaction codes)                                                  table)                                       char)))(putprops transitionflags macro ((table char)                                 (\\getbasebyte (|fetch| (keyaction flags)                                                       table)                                        char))))(* FOLLOWING DEFINITIONS EXPORTED)(declare\: eval@compile(blockrecord keyaction (flags codes shiftcodes armed interruptlist)                       flags _ (\\allocblock (foldhi (iplus \\nkeys \\nkeys)                                                    bytespercell))                       codes _ (\\allocblock (foldhi (plus \\nkeys \\nkeys)                                                    wordspercell))                       shiftcodes _ (\\allocblock (foldhi (plus \\nkeys \\nkeys)                                                         wordspercell))                       armed _ (\\allocblock (foldhi (add1 \\maxthinchar)                                                    bitspercell))                       (create (\\allocblock 5 ptrblock.gct))                       (type? (and (\\blockdatap datum)                                   (eq (\\#blockdatacells datum)                                       5)                                   (or (null (fetch (keyaction interruptlist) of datum))                                       (listp (fetch interruptlist of datum)))                                   (\\blockdatap (fetch (keyaction flags)                                                        datum))                                   (\\blockdatap (fetch (keyaction codes)                                                        datum))                                   (\\blockdatap (fetch (keyaction armed)                                                        datum))))))(declare\: eval@compile (rpaqq \\nkeys 112)(constants \\nkeys))(* END EXPORTED DEFINITIONS)(declare\: eval@compile(blockrecord ring ((read word)                   (write word))))(* \; "can get rid of shiftstate after clients have been fixed")(declare\: eval@compile(accessfns shiftstate ((dummyshift (not (eq 0 (logand (\\getbasebyte datum 0)                                                     (logor 1 2)))))                       (dummy1shift (not (eq 0 (logand 1 (\\getbasebyte datum 0))))                              (\\putbasebyte datum 0 (cond                                                        (newvalue (logor 1 (\\getbasebyte datum 0)))                                                        (t (logand (\\getbasebyte datum 0)                                                                  (logxor \\charmask 1))))))                       (dummy2shift (not (eq 0 (logand 2 (\\getbasebyte datum 0))))                              (\\putbasebyte datum 0 (cond                                                        (newvalue (logor 2 (\\getbasebyte datum 0)))                                                        (t (logand (\\getbasebyte datum 0)                                                                  (logxor \\charmask 2))))))                       (dummylock (not (eq 0 (logand 4 (\\getbasebyte datum 0))))                              (\\putbasebyte datum 0 (cond                                                        (newvalue (logor 4 (\\getbasebyte datum 0)))                                                        (t (logand (\\getbasebyte datum 0)                                                                  (logxor \\charmask 4))))))                       (dummyshiftorlock (not (eq 0 (\\getbasebyte datum 0)))                              (\\putbasebyte datum 0 (cond                                                        (newvalue (help " Can't turn on SHIFTORLOCK")                                                               )                                                        (t 0))))                       (dummyctrl (not (eq 0 (\\getbasebyte datum 1)))                              (\\putbasebyte datum 1 (cond                                                        (newvalue 1)                                                        (t 0))))                       (dummymeta (not (eq 0 (\\getbasebyte datum 2)))                              (\\putbasebyte datum 2 (cond                                                        (newvalue 1)                                                        (t 0))))                       (dummyfont (neq 0 (logand (llsh 1 3)                                                (\\getbasebyte datum 3)))                              (\\putbasebyte datum 3 (cond                                                        (newvalue (logor (llsh 1 3)                                                                         (\\getbasebyte datum 3)))                                                        (t (logand (\\getbasebyte datum 3)                                                                  (logxor \\charmask (llsh 1 3)))))))                       (dummyusermode1 (neq 0 (logand (llsh 1 0)                                                     (\\getbasebyte datum 3)))                              (\\putbasebyte datum 3 (cond                                                        (newvalue (logor (llsh 1 0)                                                                         (\\getbasebyte datum 3)))                                                        (t (logand (\\getbasebyte datum 3)                                                                  (logxor \\charmask (llsh 1 0)))))))                       (dummyusermode2 (neq 0 (logand (llsh 1 1)                                                     (\\getbasebyte datum 3)))                              (\\putbasebyte datum 3 (cond                                                        (newvalue (logor (llsh 1 1)                                                                         (\\getbasebyte datum 3)))                                                        (t (logand (\\getbasebyte datum 3)                                                                  (logxor \\charmask (llsh 1 1)))))))                       (dummyusermode3 (neq 0 (logand (llsh 1 2)                                                     (\\getbasebyte datum 3)))                              (\\putbasebyte datum 3 (cond                                                        (newvalue (logor (llsh 1 2)                                                                         (\\getbasebyte datum 3)))                                                        (t (logand (\\getbasebyte datum 3)                                                                  (logxor \\charmask (llsh 1 2)))))))                       )                      (create (\\allocblock (foldhi 3 bytespercell)))))(declare\: doeval@compile dontcopy(globalvars \\shiftstate \\mousetimertemp))(declare\: eval@compile (rpaqq nringindexwords 2)(constants nringindexwords))(declare\: eval@compile (rpaq \\sysbuffer.first (unfold nringindexwords bytesperword))(rpaq \\sysbuffer.last (iplus \\sysbuffer.first (sub1 \\sysbufsize)))(constants (\\sysbuffer.first (unfold nringindexwords bytesperword))       (\\sysbuffer.last (iplus \\sysbuffer.first (sub1 \\sysbufsize))))))(declare\: eval@compile (rpaqq \\keynames ((5 % five)                   (4 $ four)                   (6 ~ six)                   (\e e)                   (7 & seven)                   (\d d)                   (\u u)                   (\v v)                   (0 \) zero)                   (\k k)                   (- \)                   (\p p)                   (/ ?)                   (\\ \| font looks)                   (lf same)                   (bs <-)                   (3 \# three)                   (2 @ two)                   (\w w)                   (\q q)                   (\s s)                   (\a a)                   (9 \( nine)                   (\i i)                   (\x x)                   (\o o)                   (\l l)                   (\, <)                   (\' \")                   (] })                   (blank-middle open dbk-help)                   (blank-top keyboard dbk-meta)                   (1 ! one)                   (esc escape ->)                   (tab =>)                   (\f f)                   (ctrl prop\'s edit)                   (\c c)                   (\j j)                   (\b b)                   (\z z)                   (lshift)                   (\. >)                   (\; \:)                   (cr <-\|)                   (_ ^)                   (del delete)                   (skip next)                   (\r r)                   (\t t)                   (\g g)                   (\y y)                   (\h h)                   (8 * eight)                   (\n n)                   (\m m)                   (lock)                   (space)                   ([ {)                   (= +)                   (rshift)                   (blank-bottom stop)                   (move)                   (undo)                   (util0)                   (util1)                   (util2 super/sub)                   (util3 case)                   (util4 strikeout)                   (util5 keypad2)                   (util6 keypad3 pgdn)                   (util7)                   (pad1 leftkey capslock keypad+)                   (pad2 leftmiddlekey numlock keypad-)                   (pad3 middlekey scrolllock keypad*)                   (pad4 rightmiddlekey break keypad/)                   (pad5 rightkey doit prtsc)                   (left red mousered)                   (right blue mouseblue)                   (middle yellow mouseyellow)                   (margins)                   (k41 keypad7 home)                   (k42 keypad8)                   (k43 keypad9 pgup)                   (k44 keypad4)                   (k45 keypad5)                   (k46)                   (k47 keypad6)                   (k48)                   (copy)                   (find)                   (again)                   (help)                   (def\'n expand)                   (k4e keypad1 end)                   (always-on-1)                   (always-on-2)                   (center)                   (k52 keypad0 ins)                   (bold)                   (italics)                   (underline)                   (superscript)                   (subscript)                   (larger smaller)                   (k59 keypad\| keypad.)                   (k5a keypad\\ keypad\,)                   (k5b)                   (k5c)                   (defaults)                   (k5e)                   (k5f))))(rpaqq \\origkeyactions ((0 (53 % nolockshift))                         (1 (52 $ nolockshift))                         (2 (54 ~ nolockshift))                         (3 (\e e lockshift))                         (4 (55 & nolockshift))                         (5 (\d d lockshift))                         (6 (\u u lockshift))                         (7 (\v v lockshift))                         (8 (48 \) nolockshift))                         (9 (\k k lockshift))                         (10 (- - nolockshift))                         (11 (\p p lockshift))                         (12 (/ ? nolockshift))                         (13 (\\ \| nolockshift))                         (14 (10 96 nolockshift))                         (15 (8 8 nolockshift))                         (16 (51 \# nolockshift))                         (17 (50 @ nolockshift))                         (18 (\w w lockshift))                         (19 (\q q lockshift))                         (20 (\s s lockshift))                         (21 (\a a lockshift))                         (22 (57 \( nolockshift))                         (23 (\i i lockshift))                         (24 (\x x lockshift))                         (25 (\o o lockshift))                         (26 (\l l lockshift))                         (27 (\, < nolockshift))                         (28 (\' \" nolockshift))                         (29 (] } nolockshift))                         (30 (194 194 nolockshift))                         (31 (193 193 nolockshift))                         (32 (49 ! nolockshift))                         (33 (27 27 nolockshift))                         (34 (9 9 nolockshift))                         (35 (\f f lockshift))                         (36 ctrldown . ctrlup)                         (37 (\c c lockshift))                         (38 (\j j lockshift))                         (39 (\b b lockshift))                         (40 (\z z lockshift))                         (41 1shiftdown . 1shiftup)                         (42 (\. > nolockshift))                         (43 (\; \: nolockshift))                         (44 (13 13 nolockshift))                         (45 (_ ^ nolockshift))                         (46 (127 535 nolockshift))                         (47 (\( [ nolockshift))                         (48 (\r r lockshift))                         (49 (\t t lockshift))                         (50 (\g g lockshift))                         (51 (\y y lockshift))                         (52 (\h h lockshift))                         (53 (56 * nolockshift))                         (54 (\n n lockshift))                         (55 (\m m lockshift))                         (56 lockdown . lockup)                         (57 (32 32 nolockshift))                         (58 ([ { nolockshift))                         (59 (= + nolockshift))                         (60 2shiftdown . 2shiftup)                         (61 (195 195 nolockshift))                         (63 (\) ] nolockshift))                         (77 event . event)                         (78 event . event)                         (79 event . event)                         (102 lockdown)                         (103 lockup)))(rpaqq \\dlionkeyactions ((2 (54 ^ nolockshift))                          (10 (- _ nolockshift))                          (33 (\\ \| nolockshift))                          (45 (96 ~ nolockshift))                          (open metadown . metaup)                          (prop\'s ctrldown . ctrlup)                          (same metadown . metaup)                          (find (2\,3 2\,43 nolockshift))                          (undo (2\,4 2\,44 nolockshift))                          (stop (5 7 nolockshift))                          (move)                          (copy)                          (again (2\,10 2\,50 nolockshift))                          (center (2\,101 2\,141 nolockshift))                          (bold (2\,102 2\,142 nolockshift))                          (italics (2\,103 2\,143 nolockshift))                          (underline (2\,106 2\,146 nolockshift))                          (superscript (2\,113 2\,153 nolockshift))                          (subscript (2\,114 2\,154 nolockshift))                          (larger (2\,110 2\,150 nolockshift))                          (defaults (2\,115 2\,155 nolockshift))                          (93 (27 2\,64 nolockshift))                          (47 (2\,22 2\,62 nolockshift))                          (31 (2\,5 2\,45 nolockshift))                          (92 (2\,1 2\,41 nolockshift))                          (80 (2\,13 2\,53 nolockshift))                          (font (2\,112 2\,152 nolockshift))))(rpaqq \\dlionosdkeyactions ((56 locktoggle)))(rpaqq \\doradokeyactions ((2 (54 ~ nolockshift))                           (10 (- - nolockshift))                           (13 (\\ \| nolockshift))                           (14 (10 96 nolockshift))                           (33 (27 27 nolockshift))                           (45 (_ ^ nolockshift))))(rpaqq \\dovekeyactions ((2 (54 ^ nolockshift))                         (10 (- _ nolockshift))                         (33 (27 27 nolockshift))                         (56 ctrldown . ctrlup)                         (65 (27 27 nolockshift))                         (71 (39 34 nolockshift))                         (93 (2\,24 2\,64 nolockshift))                         (108 (96 126 nolockshift))                         (dbk-meta metadown . metaup)                         (dbk-help (2\,1 2\,41 nolockshift))                         (same metadown . metaup)                         (find (2\,3 2\,43 nolockshift))                         (undo (2\,4 2\,44 nolockshift))                         (stop (5 7 nolockshift))                         (edit (2\,5 2\,45 nolockshift))                         (move)                         (copy)                         (again (2\,10 2\,50 nolockshift))                         (center (2\,101 2\,141 nolockshift))                         (bold (2\,102 2\,142 nolockshift))                         (italics (2\,103 2\,143 nolockshift))                         (case (2\,104 2\,144 nolockshift))                         (strikeout (2\,105 2\,145 nolockshift))                         (underline (2\,106 2\,146 nolockshift))                         (super/sub (2\,107 2\,147 nolockshift))                         (larger (2\,110 2\,150 nolockshift))                         (margins (2\,111 2\,151 nolockshift))                         (looks (2\,112 2\,152 nolockshift))                         (capslock locktoggle)                         (numlock (2\,11 - nolockshift))                         (scrolllock (2\,12 180 nolockshift))                         (break (2 184 nolockshift))                         (doit (2\,13 2\,53 nolockshift))                         (keypad7 (2\,14 55 nolockshift))                         (keypad8 (173 56 nolockshift))                         (keypad9 (2\,15 57 nolockshift))                         (keypad4 (172 52 nolockshift))                         (keypad5 (2\,16 53 nolockshift))                         (keypad6 (174 54 nolockshift))                         (keypad1 (2\,17 49 nolockshift))                         (keypad2 (175 50 nolockshift))                         (keypad3 (2\,20 51 nolockshift))                         (keypad0 (2\,21 48 nolockshift))                         (keypad\| (\| 46 nolockshift))                         (keypad\\ (\\ 44 nolockshift))                         (47 (2\,22 2\,62 nolockshift))))(rpaqq \\doveosdkeyactions ((56 lockdown . lockup)                            (36 ctrldown . ctrlup)                            (capslock (2\,5 2\,45 nolockshift))))(rpaq? \\keyboard.meta 256)(rpaq? \\modified.keyactions )(declare\: doeval@compile dontcopy(globalvars \\sysbuffer \\longsysbuf \\interruptstate \\modified.keyactions \\rclksecond        \\lastuseraction \\mousechordticks \\lastkeystate \\keyboardeventqueue \\keybuffering        \\currentkeyaction \\defaultkeyaction \\timer.interrupt.pending \\origkeyactions        \\keyboard.meta \\mousechordmilliseconds \\doradokeyactions \\dlionkeyactions        \\dlionosdkeyactions \\dovekeyactions \\doveosdkeyactions))(* \; "Key interpretation")(defineq(keyaction  (lambda (keyname actions table)                            (* |lmm| "22-May-85 07:41")    (let ((numb (or (smallp keyname)                    (\\keynametonumber keyname)))          (table (or table \\defaultkeyaction)))         (cons (\\keyaction1 (\\transindex numb t)                      (and actions (or (car actions)                                       'ignore))                      table)               (\\keyaction1 (\\transindex numb nil)                      (and actions (or (cdr actions)                                       'ignore))                      table)))))(keyactiontable  (lambda (old)                                              (* |gbn:| "26-Jan-86 17:02")    (|if| old        |then| (|create| keyaction |copying| old)      |else| (prog1 (setq old (|create| keyaction))                    (|for| x |in| \\origkeyactions |do| (keyaction (car x)                                                               (cdr x)                                                               old))))))(\\keyaction1  (lambda (ti action table)                                  (* |lmm| "18-Apr-85 06:14")    (prog1 (selectc (transitionflags table ti)               (ignore.tf 'ignore)               ((list lockshift.tf nolockshift.tf)                     (list (transitioncode table ti)                          (transitionshiftcode table ti)                          (cond                             ((eq lockshift.tf (transitionflags table ti))                              'lockshift)                             (t 'nolockshift))))               (event.tf 'event)               (ctrldown.tf 'ctrldown)               (ctrlup.tf 'ctrlup)               (1shiftdown.tf '1shiftdown)               (1shiftup.tf '1shiftup)               (2shiftdown.tf '2shiftdown)               (2shiftup.tf '2shiftup)               (lockdown.tf 'lockdown)               (lockup.tf 'lockup)               (locktoggle.tf 'locktoggle)               (metadown.tf 'metadown)               (metaup.tf 'metaup)               (fontup.tf 'fontup)               (fontdown.tf 'fontdown)               (fonttoggle.tf 'fonttoggle)               (usermode1up.tf                     'usermode1up)               (usermode1down.tf                     'usermode1down)               (usermode1toggle.tf                     'usermode1toggle)               (usermode2up.tf                     'usermode2up)               (usermode2down.tf                     'usermode2down)               (usermode2toggle.tf                     'usermode2toggle)               (usermode3up.tf                     'usermode3up)               (usermode3down.tf                     'usermode3down)               (usermode3toggle.tf                     'usermode3toggle)               (shouldnt))           (selectq action               ((nil nochange))               (ignore (|change| (transitionflags table ti)                              ignore.tf))               (event (|change| (transitionflags table ti)                             event.tf))               (ctrlup (|change| (transitionflags table ti)                              ctrlup.tf))               (ctrldown (|change| (transitionflags table ti)                                ctrldown.tf))               (1shiftup (|change| (transitionflags table ti)                                1shiftup.tf))               (1shiftdown (|change| (transitionflags table ti)                                  1shiftdown.tf))               (2shiftup (|change| (transitionflags table ti)                                2shiftup.tf))               (2shiftdown (|change| (transitionflags table ti)                                  2shiftdown.tf))               (lockup (|change| (transitionflags table ti)                              lockup.tf))               (lockdown (|change| (transitionflags table ti)                                lockdown.tf))               (locktoggle (|change| (transitionflags table ti)                                  locktoggle.tf))               (metaup (|change| (transitionflags table ti)                              metaup.tf))               (metadown (|change| (transitionflags table ti)                                metadown.tf))               (fontup (|change| (transitionflags table ti)                              fontup.tf))               (fontdown (|change| (transitionflags table ti)                                fontdown.tf))               (fonttoggle (|change| (transitionflags table ti)                                  fonttoggle.tf))               (usermode1up (|change| (transitionflags table ti)                                   usermode1up.tf))               (usermode1down (|change| (transitionflags table ti)                                     usermode1down.tf))               (usermode1toggle                     (|change| (transitionflags table ti)                           usermode1toggle.tf))               (usermode2up (|change| (transitionflags table ti)                                   usermode2up.tf))               (usermode2down (|change| (transitionflags table ti)                                     usermode2down.tf))               (usermode2toggle                     (|change| (transitionflags table ti)                           usermode2toggle.tf))               (usermode3up (|change| (transitionflags table ti)                                   usermode3up.tf))               (usermode3down (|change| (transitionflags table ti)                                     usermode3down.tf))               (usermode3toggle                     (|change| (transitionflags table ti)                           usermode3toggle.tf))               (prog (code shiftcode act)                     (cond                        ((and (or (\\charcodep (setq code (\\getcharcode (car (listp action)))))                                  (setq code (apply* (function charcode)                                                    (car (listp action)))))                              (or (\\charcodep (setq shiftcode (\\getcharcode                                                                (car (setq act (listp (cdr action))))                                                                )))                                  (setq shiftcode (apply* (function charcode)                                                         (car act))))                              (or (null (setq act (cdr act)))                                  (listp act))                              (selectq (car act)                                  ((lockshift t)                                        (|change| (transitionflags table ti)                                              lockshift.tf))                                  ((nolockshift nil)                                        (|change| (transitionflags table ti)                                              nolockshift.tf))                                  nil))                         (|change| (transitioncode table ti)                                code)                         (|change| (transitionshiftcode table ti)                                shiftcode))                        (t (\\illegal.arg action))))))))(keydownp  (lambda (keyname)                                          (* |lmm| "18-Apr-85 02:09")                                                             (* t |if| |the| |indicated| |key| |is|                                                              |instantaneously| |down.|)    (\\newkeydownp (\\keynametonumber keyname))))(\\keynametonumber  (lambda (keyname)                                          (* |rmk:| " 2-SEP-83 10:29")    (declare (globalvars \\keynames))                        (* |The| |fast| |case| |is| |when|                                                              keyname |is| |lower-case|)    (|for| x n |in| \\keynames |as| i |from| 0 |when| (eqmemb keyname x) |do| (return i)       |finally| (return (or (and (neq keyname (setq n (l-case keyname)))                                  (|for| y |in| \\keynames |as| i |from| 0                                     |when| (eqmemb n y) |do| (return i)))                             (\\illegal.arg keyname))))))(modify.keyactions  (lambda (|KeyActions| |SaveCurrent?|)                      (* |JonL| "11-MAY-83 18:29")    (prog1 (|if| |SaveCurrent?|               |then| (setq \\modified.keyactions (|for| item |in| |KeyActions|                                                     |collect| (cons (car item)                                                                     (keyaction (car item))))))           (|for| x |in| |KeyActions| |do| (keyaction (car x)                                                  (cdr x))))))(metashift  (lambda flg                                                (* |bvm:| "29-APR-82 15:22")                    (* |Sets| |interpretation| |of| |swat| |key| |to| |first| |arg,| |where| t           |means| |meta-shift,| nil |means| |original| |setting.|          |Returns| |previous| |setting|)    (prog ((metastatus '(metadown . metaup))           oldsetting)          (setq oldsetting (keyaction 'blank-bottom (and (igreaterp flg 0)                                                         (cond                                                            ((eq (arg flg 1)                                                                 t)                                                             metastatus)                                                            (t (or (arg flg 1)                                                                   (cdr (assoc 'blank-bottom                                                                                \\origkeyactions))))))                                  ))          (return (cond                     ((equal oldsetting metastatus)                      t)                     (t oldsetting))))))(shiftdownp  (lambda (shift)                                            (* |lmm| "18-Apr-85 01:07")                                                             (* |Tells| |whether| \a |given|                                                              |shift| |is| |down|)    (selectq shift        (lock (|fetch| (keyboardevent lock) |of| \\lastkeystate))        (meta (|fetch| (keyboardevent meta) |of| \\lastkeystate))        (shift (or (|fetch| (keyboardevent 1shift) |of| \\lastkeystate)                   (|fetch| (keyboardevent 2shift) |of| \\lastkeystate)))        (1shift (|fetch| (keyboardevent 1shift) |of| \\lastkeystate))        (2shift (|fetch| (keyboardevent 2shift) |of| \\lastkeystate))        (shiftorlock (or (|fetch| (keyboardevent 1shift) |of| \\lastkeystate)                         (|fetch| (keyboardevent 2shift) |of| \\lastkeystate)                         (|fetch| (keyboardevent lock) |of| \\lastkeystate)))        (ctrl (|fetch| (keyboardevent ctrl) |of| \\lastkeystate))        (font (|fetch| (keyboardevent font) |of| \\lastkeystate))        (usermode1 (|fetch| (keyboardevent usermode1) |of| \\lastkeystate))        (usermode2 (|fetch| (keyboardevent usermode2) |of| \\lastkeystate))        (usermode3 (|fetch| (keyboardevent usermode3) |of| \\lastkeystate))        (\\illegal.arg shift)))))(* \; "To support office style 1108 & 1186 keyboards")(defineq(setup.office.keyboard  (lambda nil                                                (* |jds| " 8-Oct-85 16:27")    (selectq (machinetype)        (dandelion (modify.keyactions \\dlionosdkeyactions))        (dove (modify.keyactions \\doveosdkeyactions))        nil))))(defoptimizer \\keynametonumber (&rest x) (let ((ce (constantexpressionp (car x))))                                               (cond                                                  (ce (\\keynametonumber (car ce)))                                                  (t 'ignoremacro))))(declare\: eval@compile (putprops \\tempcopytimer macro ((x)                                 (progn (\\blt \\mousetimertemp (locf x)                                               wordspercell)                                        \\mousetimertemp))))(* \; "Don't copy this optimizer since it expands out to \\getbasebit, but do exportit.")(declare\: dontcopy (* FOLLOWING DEFINITIONS EXPORTED)(defoptimizer keydownp (keyname) `(\\newkeydownp (\\keynametonumber ,keyname)))(* END EXPORTED DEFINITIONS))(* FOLLOWING DEFINITIONS EXPORTED)(declare\: eval@compile (putprops xkeydownp macro ((keyname)                           (keydownp1 (\\keynametonumber keyname))))(putprops keydownp1 macro (openlambda (keynumber)                                 (declare (globalvars \\em.kbdad0 \\em.kbdad1 \\em.kbdad2 \\em.kbdad3                                                  \\em.utilin \\em.kbdad4 \\em.kbdad5))                                 (prog nil (return (eq 0 (logand (lrsh (llsh 1 15)                                                                       (progn (* (imod keynumber                                                                                        bitsperword)                                                                                 - getd |cause| imod                                                                                  |and| bitsperword                                                                                  |not| |exported|                                                                                  |to| |user|)                                                                              (logand keynumber 15)))                                                                (\\getbase                                                                 (selectq (progn (* (foldlo keynumber                                                                                           bitsperword                                                                                           )                                                                                    getd |follows|                                                                                     |since| foldlo                                                                                     |and| bitsperword                                                                                     |not| |exported|                                                                                     |to| |user|)                                                                                 (lrsh keynumber 4))                                                                        (0 \\em.kbdad0)                                                                        (1 \\em.kbdad1)                                                                        (2 \\em.kbdad2)                                                                        (3 \\em.kbdad3)                                                                        (4 \\em.utilin)                                                                        (5 (or \\em.kbdad4 (return)))                                                                        (6 (or \\em.kbdad5 (return)))                                                                        (return))                                                                 0)))))))(putprops \\newkeydownp macro ((keynumber)                               (eq 0 (\\getbasebit \\lastkeystate keynumber)))))(* END EXPORTED DEFINITIONS)(* \; "A raw keyboard device/stream")(defineq(\\init.keyboard.stream  (lambda nil                                                (* |lmm| "23-May-85 15:47")    (declare (globalvars \\keyboard.device \\keyboard.stream))    (\\definedevice 'keyboard (setq \\keyboard.device (|create| fdev                                                             devicename _ 'keyboard                                                             closefile _ (function nill)                                                             eventfn _ (function \\keyboardeventfn)                                                             bin _ (function \\getkey)                                                             peekbin _ (function \\peeksysbuf)                                                             readp _ (function \\sysbufp)                                                             eofp _ (function nill)                                                             getfilename _                                                             (function (lambda (x mode)                                                                         (|if| (eq mode 'input)                                                                             |then| \\keyboard.stream                                                                               ))))))    (setq \\keyboard.stream (|create| stream                                   usercloseable _ nil                                   uservisible _ nil                                   fullfilename _ '{keyboard}                                   device _ \\keyboard.device                                   access _ 'input)))))(declare\: donteval@load docopy (\\init.keyboard.stream))(* FOLLOWING DEFINITIONS EXPORTED)(declare\: doeval@compile dontcopy(globalvars \\keyboard.device \\keyboard.stream))(* END EXPORTED DEFINITIONS)(* \; "Hook for a periodic interrupt")(defineq(\\dobufferedtransitions  (lambda (\\interruptable)    (declare (specvars \\interruptable))                     (* |bvm:| " 8-Oct-85 17:47")    (setq \\keybuffering 'inprogress)    (let ((pendinginterrupt))         (declare (specvars pendinginterrupt))               (* |Used| |by| \\decodetransition)         (|bind| r rptr |until| (eq 0 (setq r (|fetch| (ring read) |of| \\keyboardeventqueue)))            |do| (setq rptr (\\addbase \\keyboardeventqueue r))                                                              (* |get| |pointer| |to| |this| |event|)                    (* |handle| |simple| |keyboard| |words| |by| |calling| \\dotransitions |for|           |each| |word|)                 (cond                    ((neq (|fetch| (keyboardevent w0) |of| rptr)                          (|fetch| (keyboardevent w0) |of| \\lastkeystate))                     (\\dotransitions 0 (|fetch| (keyboardevent w0) |of| \\lastkeystate)                            (|fetch| (keyboardevent w0) |of| rptr))                     (|replace| (keyboardevent w0) |of| \\lastkeystate |with| (|fetch| (keyboardevent                                                                                        w0)                                                                                 |of| rptr))))                 (cond                    ((neq (|fetch| (keyboardevent w1) |of| rptr)                          (|fetch| (keyboardevent w1) |of| \\lastkeystate))                     (\\dotransitions 16 (|fetch| (keyboardevent w1) |of| \\lastkeystate)                            (|fetch| (keyboardevent w1) |of| rptr))                     (|replace| (keyboardevent w1) |of| \\lastkeystate |with| (|fetch| (keyboardevent                                                                                        w1)                                                                                 |of| rptr))))                 (cond                    ((neq (|fetch| (keyboardevent w2) |of| rptr)                          (|fetch| (keyboardevent w2) |of| \\lastkeystate))                     (\\dotransitions 32 (|fetch| (keyboardevent w2) |of| \\lastkeystate)                            (|fetch| (keyboardevent w2) |of| rptr))                     (|replace| (keyboardevent w2) |of| \\lastkeystate |with| (|fetch| (keyboardevent                                                                                        w2)                                                                                 |of| rptr))))                 (cond                    ((neq (|fetch| (keyboardevent w3) |of| rptr)                          (|fetch| (keyboardevent w3) |of| \\lastkeystate))                     (\\dotransitions 48 (|fetch| (keyboardevent w3) |of| \\lastkeystate)                            (|fetch| (keyboardevent w3) |of| rptr))                     (|replace| (keyboardevent w3) |of| \\lastkeystate |with| (|fetch| (keyboardevent                                                                                        w3)                                                                                 |of| rptr))))                 (cond                    ((neq (|fetch| (keyboardevent w4) |of| rptr)                          (|fetch| (keyboardevent w4) |of| \\lastkeystate))                     (\\dotransitions 80 (|fetch| (keyboardevent w4) |of| \\lastkeystate)                            (|fetch| (keyboardevent w4) |of| rptr))                     (|replace| (keyboardevent w4) |of| \\lastkeystate |with| (|fetch| (keyboardevent                                                                                        w4)                                                                                 |of| rptr))))                 (cond                    ((neq (|fetch| (keyboardevent w5) |of| rptr)                          (|fetch| (keyboardevent w5) |of| \\lastkeystate))                     (\\dotransitions 96 (|fetch| (keyboardevent w5) |of| \\lastkeystate)                            (|fetch| (keyboardevent w5) |of| rptr))                     (|replace| (keyboardevent w5) |of| \\lastkeystate |with| (|fetch| (keyboardevent                                                                                        w5)                                                                                 |of| rptr))))                 (cond                    ((neq (|fetch| (keyboardevent wu) |of| rptr)                          (|fetch| (keyboardevent wu) |of| \\lastkeystate))                     (\\dotransitions 64 (|fetch| (keyboardevent wu) |of| \\lastkeystate)                            (|fetch| (keyboardevent wu) |of| rptr))                     (|replace| (keyboardevent wu) |of| \\lastkeystate |with| (|fetch| (keyboardevent                                                                                        wu)                                                                                 |of| rptr))))                     (* * |now| |remove| |event| |from| |queue|)                 (cond                    ((eq (|replace| (ring read) |of| \\keyboardeventqueue                            |with| (cond                                      ((igeq r \\keyboardevent.last)                                       \\keyboardevent.first)                                      (t (iplus \\keyboardevent.size r))))                         (|fetch| (ring write) |of| \\keyboardeventqueue))                     (|replace| (ring read) |of| \\keyboardeventqueue |with| 0))))         (progn                                              (* |update| |dummy| |shift| |state|)                (|replace| dummy1shift |of| \\shiftstate |with| (|fetch| (keyboardevent 1shift)                                                                   |of| \\lastkeystate))                (|replace| dummy2shift |of| \\shiftstate |with| (|fetch| (keyboardevent 2shift)                                                                   |of| \\lastkeystate))                (|replace| dummylock |of| \\shiftstate |with| (|fetch| (keyboardevent lock)                                                                 |of| \\lastkeystate))                (|replace| dummyctrl |of| \\shiftstate |with| (|fetch| (keyboardevent ctrl)                                                                 |of| \\lastkeystate))                (|replace| dummymeta |of| \\shiftstate |with| (|fetch| (keyboardevent meta)                                                                 |of| \\lastkeystate))                (|replace| dummyfont |of| \\shiftstate |with| (|fetch| (keyboardevent font)                                                                 |of| \\lastkeystate))                (|replace| dummyusermode1 |of| \\shiftstate |with| (|fetch| (keyboardevent usermode1)                                                                      |of| \\lastkeystate))                (|replace| dummyusermode2 |of| \\shiftstate |with| (|fetch| (keyboardevent usermode2)                                                                      |of| \\lastkeystate))                (|replace| dummyusermode3 |of| \\shiftstate |with| (|fetch| (keyboardevent usermode3)                                                                      |of| \\lastkeystate)))                    (* |Note:| |there| |is| \a |window| |between| |the| |test| |of| read |above|           |and| |the| |setting| |of| \\keybuffering |below| |where| \a |keyboard|           |transition| |can| |be| |ignored| |until| |the| |next| |transition| |causes|           \\keybuffering |to| |be| |set| |again|)         (cond            ((not (or pendinginterrupt \\pendinginterrupt))                    (* n\o |interrupt| |noticed| |this| |time| |or| |on| |any| |previous|           |invocation|)             (setq \\keybuffering nil))            ((not (\\getbaseptr (\\stkscan '\\interruptable)                         0))                                 (* |We're| |not| |interruptable,| |so|                                                              |try| |again| |later|)             (setq \\pendinginterrupt t)             (setq \\keybuffering nil))            (t (setq \\pendinginterrupt nil)               (setq \\keybuffering nil)               (let ((\\interruptable t))                    (interrupted)))))))(\\timer.interruptframe  (lambda nil                                                (* |lmm| "22-Apr-85 09:47")                                                             (* |place| |holder| |for| |periodic|                                                              |interrupts|)    (|if| nil        |then| (apply* \\periodic.interrupt)              (|if| \\periodic.interrupt                  |then| (setuptimer (quotient (times \\periodic.interrupt.frequency \\rclksecond)                                            77)                                (locf (|fetch| dlmousetimer |of| \\miscstats))                                'ticks)                        (setq \\timer.interrupt.pending t)))))(\\periodic.interruptframe  (lambda nil    (declare (globalvars \\periodic.interrupt))              (* |lmm| "16-Jul-85 16:22")    (let ((fn \\periodic.interrupt))         (and fn (spreadapply* fn))))))(rpaq? \\keybuffering )(rpaq? \\periodic.interrupt )(rpaq? \\timer.interrupt.pending )(rpaq? \\periodic.interrupt.frequency 77)(declare\: doeval@compile dontcopy(localvars . t))(* \; "cursor and mouse related functions.")(defineq(\\hardcursorup  (lambda (newcursor invertflg)                              (* |gbn:| "26-Jan-86 17:23")                    (* |version| |of| \\cursorup |that| |knows| |about| |the| |possibility| |of|           |the| |cursor| |being| |on| |the| |color| |screen.|)    (prog (image)          (setq \\softcursorp nil)          (setq \\currentcursor newcursor)          (setq image (|fetch| (cursor cuimage) |of| newcursor))          (cond             ((not (eq (|fetch| (bitmap bitmapbitsperpixel) |of| image)                       (|fetch| (bitmap bitmapbitsperpixel) |of| \\cursordestination)))              (\\cursorbitsperpixel newcursor (|fetch| (bitmap bitmapbitsperpixel) |of|                                                                                   \\cursordestination                                                     ))              (setq image (|fetch| (cursor cuimage) |of| newcursor))))          (bitblt image 0 0 |CursorBitMap| 0 (idifference hardcursorheight (|fetch| (bitmap                                                                                          bitmapheight                                                                                           )                                                                              |of| image))                 hardcursorwidth hardcursorheight (cond                                                     (invertflg 'invert)                                                     (t 'input))                 'replace)          (cond             ((eq \\machinetype \\daybreak)              (|\\DoveDisplay.SetCursorShape| |CursorBitMap|))))))(\\hardcursorposition  (lambda (xpos ypos)                                        (* |kbr:| "13-Jun-85 21:24")                    (* |sets| |cursor| |position,| |adjusts| |for| |hotspot| |and| |tty| |region|           |limits.| xpos |and| ypos |are| |the| |screen| |coordinates| |of| |the|           |hotspot| |location.|)    (declare (globalvars \\cursorhotspotx \\cursorhotspoty \\cursordestwidth \\cursordestheight))                    (* ypos |is| |reflected| |around| cursorymax |because| |the| |screen| |has|          (0\,0) |as| |the| |upper| |left| |corner.|          *)    (setq ypos (idifference (sub1 \\cursordestheight)                      ypos))                                 (* |Clip| |coordinates| *)    (setq xpos (unsigned (idifference (cond                                         ((ilessp xpos 0)                                          0)                                         ((igeq xpos \\cursordestwidth)                                          (sub1 \\cursordestwidth))                                         (t xpos))                                \\cursorhotspotx)                      bitsperword))    (setq ypos (unsigned (idifference (cond                                         ((ilessp ypos 0)                                          0)                                         ((igeq ypos \\cursordestheight)                                          (sub1 \\cursordestheight))                                         (t ypos))                                \\cursorhotspoty)                      bitsperword))    (cond       ((eq \\machinetype \\dandelion)                       (* |Temporary| |workaround|)        (cond           ((igreaterp ypos 32767)            (setq ypos 0)))        (cond           ((igreaterp xpos 32767)            (setq xpos 0)))))    (\\setmousexy xpos ypos)    (progn                     (* |change| |the| |cursor| |position| |too| |so| |that| getmousestate |will|           |get| |the| |correct| |values| |if| |it| |is| |called| |before| |the| |next| 60           |cycle| |interrupt.|)           (\\putbase \\em.cursorx 0 xpos)           (\\putbase \\em.cursory 0 ypos))    nil))(\\hardcursordown  (lambda nil                                                (* |kbr:| "23-Apr-85 18:26")    (\\clearbm (cursorbitmap)))))(defineq(cursor.init  (lambda nil                                                (* |kbr:| "23-Jan-86 17:34")    (prog (destbpl)                                          (* |Assorted| |globals| |for| |doing|                                                              |the| |color| |cursor.|                                                             *)          (setq \\cursordestination |ScreenBitMap|)          (setq \\softcursorupbm nil)          (setq \\softcursordownbm nil)          (setq \\cursordestline 0)          (setq \\cursordestlinebase (|fetch| (bitmap bitmapbase) |of| |ScreenBitMap|))          (setq \\cursordestwidth (|fetch| (bitmap bitmapwidth) |of| |ScreenBitMap|))          (setq \\cursordestheight (|fetch| (bitmap bitmapheight) |of| |ScreenBitMap|))          (setq \\cursordestrasterwidth (|fetch| (bitmap bitmaprasterwidth) |of| |ScreenBitMap|))                                                             (* |Initialize| pilotbbt\s.                                                             *)          (setq destbpl (unfold \\cursordestrasterwidth bitsperword))                    (* |These| pilotbbt\s |are| |the| |mixing| |areas| |for| |forming| |the|           |color| |cursor| |image.| *)                                                             (* |Does| screen |to| downbm |via|                                                              input\, replace. *)          (setq \\softcursorbbt1           (|create| pilotbbt                  pbtsourcebpl _ destbpl                  pbtdisjoint _ t                  pbtsourcetype _ 0                  pbtoperation _ 0))          (\\lockcell \\softcursorbbt1)                      (* |Does| downbm |to| upbm |via|                                                              input\, replace. *)          (setq \\softcursorbbt2           (|create| pilotbbt                  pbtdestbit _ 0                  pbtsourcebit _ 0                  pbtdisjoint _ t                  pbtsourcetype _ 0                  pbtoperation _ 0))          (\\lockcell \\softcursorbbt2)                      (* |Does| mask |to| upbm |via| input\,                                                              erase. *)          (setq \\softcursorbbt3           (|create| pilotbbt                  pbtdestbit _ 0                  pbtsourcebit _ 0                  pbtdisjoint _ t                  pbtsourcetype _ 1                  pbtoperation _ 1))          (\\lockcell \\softcursorbbt3)                      (* |Does| image |to| upbm |via|                                                              input\, paint. *)          (setq \\softcursorbbt4           (|create| pilotbbt                  pbtdestbit _ 0                  pbtsourcebit _ 0                  pbtdisjoint _ t                  pbtsourcetype _ 0                  pbtoperation _ 2))          (\\lockcell \\softcursorbbt4)                      (* |Does| upbm |to| screen |via|                                                              input\, replace. *)          (setq \\softcursorbbt5           (|create| pilotbbt                  pbtdestbpl _ destbpl                  pbtdisjoint _ t                  pbtsourcetype _ 0                  pbtoperation _ 0))          (\\lockcell \\softcursorbbt5)                      (* |Does| downbm |to| screen |via|                                                              input\, replace. *)          (setq \\softcursorbbt6           (|create| pilotbbt                  pbtdestbpl _ destbpl                  pbtdisjoint _ t                  pbtsourcetype _ 0                  pbtoperation _ 0))          (\\lockcell \\softcursorbbt6)                      (* |Lock| |things| |down.|                                                             *)      )))(\\cursordestination  (lambda (destination)                                      (* |kbr:| " 2-Sep-85 20:13")                                                             (* |Change| destination |of|                                                              \\currentcursor\, |assuming| |it| |is|                                                              |down.| *)    (prog (destbpl)          (cond             ((not (eq destination \\cursordestination))              (uninterruptably                  (cond                     ((not (eq (|fetch| (bitmap bitmapbitsperpixel) |of| (|fetch| (cursor cuimage)                                                                            |of| \\currentcursor))                               (|fetch| (bitmap bitmapbitsperpixel) |of| destination)))                      (\\cursorbitsperpixel \\currentcursor (|fetch| (bitmap bitmapbitsperpixel)                                                               |of| destination))))                  (\\setmousexy 0 0)                  (\\putbase \\em.cursorx 0 0)                  (\\putbase \\em.cursory 0 0)                  (setq \\cursordestline 0)                  (setq.noref \\cursordestlinebase (|fetch| (bitmap bitmapbase) |of| destination))                  (setq \\cursordestwidth (|fetch| (bitmap bitmapwidth) |of| destination))                  (setq \\cursordestheight (|fetch| (bitmap bitmapheight) |of| destination))                  (setq \\cursordestrasterwidth (|fetch| (bitmap bitmaprasterwidth) |of| destination)                   )                  (setq destbpl (unfold \\cursordestrasterwidth bitsperword))                  (|replace| (pilotbbt pbtsourcebpl) |of| \\softcursorbbt1 |with| destbpl)                  (|replace| (pilotbbt pbtdestbpl) |of| \\softcursorbbt5 |with| destbpl)                  (|replace| (pilotbbt pbtdestbpl) |of| \\softcursorbbt6 |with| destbpl)                  (setq \\cursordestination destination)))))))(\\softcursorup  (lambda (newcursor)                                        (* |kbr:| " 2-Sep-85 20:15")                    (* |Put| |soft| newcursor |up,| |assuming| |soft| |cursor| |is| |down.|          *)    (prog (image mask width bwidth height cursorbitsperpixel cursorbpl upbmbase downbmbase)                                                             (* |Get| |cursor| image & mask.                                                             *)          (setq image (|fetch| (cursor cuimage) |of| newcursor))          (setq mask (|fetch| (cursor cumask) |of| newcursor))          (setq width (|fetch| (bitmap bitmapwidth) |of| image))          (setq height (|fetch| (bitmap bitmapheight) |of| image))          (setq cursorbitsperpixel (|fetch| (bitmap bitmapbitsperpixel) |of| image))                                                             (* |Create| |new| upbm & downbm                                                              |caches| |if| |necessary.|                                                             *)          (cond             ((not (and (|type?| bitmap \\softcursorupbm)                        (eq (|fetch| (bitmap bitmapwidth) |of| \\softcursorupbm)                            width)                        (eq (|fetch| (bitmap bitmapheight) |of| \\softcursorupbm)                            height)                        (eq (|fetch| (bitmap bitmapbitsperpixel) |of| \\softcursorupbm)                            cursorbitsperpixel)))              (setq \\softcursorwidth width)              (setq \\softcursorheight height)              (setq \\softcursorupbm (bitmapcreate width height cursorbitsperpixel))              (setq \\softcursordownbm (bitmapcreate width height cursorbitsperpixel))              (setq upbmbase (|fetch| (bitmap bitmapbase) |of| \\softcursorupbm))              (\\templockpages upbmbase 1)              (setq downbmbase (|fetch| (bitmap bitmapbase) |of| \\softcursordownbm))              (\\templockpages downbmbase 1)              (setq cursorbpl (unfold (|fetch| (bitmap bitmaprasterwidth) |of| image)                                     bitsperword))              (setq bwidth (itimes (|fetch| (bitmap bitmapwidth) |of| image)                                  (|fetch| (bitmap bitmapbitsperpixel) |of| image)))              (|replace| (pilotbbt pbtdestbpl) |of| \\softcursorbbt1 |with| cursorbpl)              (|replace| (pilotbbt pbtdest) |of| \\softcursorbbt2 |with| upbmbase)              (|replace| (pilotbbt pbtdestbpl) |of| \\softcursorbbt2 |with| cursorbpl)              (|replace| (pilotbbt pbtsource) |of| \\softcursorbbt2 |with| downbmbase)              (|replace| (pilotbbt pbtsourcebpl) |of| \\softcursorbbt2 |with| cursorbpl)              (|replace| (pilotbbt pbtwidth) |of| \\softcursorbbt2 |with| bwidth)              (|replace| (pilotbbt pbtheight) |of| \\softcursorbbt2 |with| height)              (|replace| (pilotbbt pbtdest) |of| \\softcursorbbt3 |with| upbmbase)              (|replace| (pilotbbt pbtdestbpl) |of| \\softcursorbbt3 |with| cursorbpl)              (|replace| (pilotbbt pbtsourcebpl) |of| \\softcursorbbt3 |with| cursorbpl)              (|replace| (pilotbbt pbtwidth) |of| \\softcursorbbt3 |with| bwidth)              (|replace| (pilotbbt pbtheight) |of| \\softcursorbbt3 |with| height)              (|replace| (pilotbbt pbtdest) |of| \\softcursorbbt4 |with| upbmbase)              (|replace| (pilotbbt pbtdestbpl) |of| \\softcursorbbt4 |with| cursorbpl)              (|replace| (pilotbbt pbtsourcebpl) |of| \\softcursorbbt4 |with| cursorbpl)              (|replace| (pilotbbt pbtwidth) |of| \\softcursorbbt4 |with| bwidth)              (|replace| (pilotbbt pbtheight) |of| \\softcursorbbt4 |with| height)              (|replace| (pilotbbt pbtsourcebpl) |of| \\softcursorbbt5 |with| cursorbpl)              (|replace| (pilotbbt pbtsourcebpl) |of| \\softcursorbbt6 |with| cursorbpl)))                                                             (* |Change| pilotbbt\s.                                                             *)          (|replace| (pilotbbt pbtsource) |of| \\softcursorbbt3 |with| (|fetch| (bitmap bitmapbase)                                                                          |of| mask))          (|replace| (pilotbbt pbtsource) |of| \\softcursorbbt4 |with| (|fetch| (bitmap bitmapbase)                                                                          |of| image))                                                             (* |Put| |up| |new| \\currentcursor.                                                             *)          (setq \\currentcursor newcursor)          (\\templockpages \\currentcursor 1)          (setq \\softcursorp t)          (\\softcursorupcurrent))))(\\softcursorupcurrent  (lambda nil                                                (* |kbr:| "18-Aug-85 15:09")                    (* |Put| |soft| \\currentcursor |up,| |assuming| |soft| |cursor| |is| |down.|          *)    (prog (dispinterrupt x y xbase ybase width height bitsperpixel minusdestrasterwidth dest destbit                  sourceoffset upbmsource downbmsource sourcebit)          (setq dispinterrupt (\\getbase \\em.dispinterrupt 0))          (\\putbase \\em.dispinterrupt 0 0)          (setq \\softcursorupp t)                           (* |Roughly,| |we| |want| |to|                                                             (bitblt cursor xbase ybase screen x y                                                              width height) *)          (setq x (signed (\\getbase \\em.mousex 0)                         bitsperword))          (setq y (signed (\\getbase \\em.mousey 0)                         bitsperword))          (setq xbase 0)          (setq ybase 0)          (setq width \\softcursorwidth)          (setq height \\softcursorheight)                   (* |Clip| |off| |screen| |parts| |of|                                                              |cursor.| *)          (cond             ((igreaterp 0 x)                                (* |Some| |of| |cursor| |is| |to|                                                              |left| |of| |screen.|                                                             *)              (setq xbase (iminus x))              (setq width (idifference width xbase))              (setq x 0))             ((igreaterp (iplus x width)                     \\cursordestwidth)                      (* |Some| |of| |cursor| |is| |to|                                                              |right| |of| |screen.|                                                             *)              (setq width (idifference \\cursordestwidth x))))          (cond             ((ilessp width 0)              (go exit)))          (cond             ((igreaterp 0 y)                                (* |Some| |of| |cursor| |is| |to|                                                              |above| |of| |screen.|                                                             *)              (setq ybase (iminus y))              (setq height (idifference height ybase))              (setq y 0))             ((igreaterp (iplus y height)                     \\cursordestheight)                     (* |Some| |of| |cursor| |is| |to|                                                              |below| |of| |screen.|                                                             *)              (setq height (idifference \\cursordestheight y))))          (cond             ((ilessp height 0)              (go exit)))                    (* |These| |loops| |reset| \\cursordestlinebase |while| |avoiding| |large|           |number| |arithmetic.| *)          (cond             ((igreaterp \\cursordestline y)              (setq minusdestrasterwidth (iminus \\cursordestrasterwidth))              (|until| (eq \\cursordestline y) |do| (setq \\cursordestline (sub1 \\cursordestline))                                                    (setq.noref \\cursordestlinebase (\\addbase                                                                                                                                                                       \\cursordestlinebase                                                                                  minusdestrasterwidth                                                                                      ))))             ((ilessp \\cursordestline y)              (|until| (eq \\cursordestline y) |do| (setq \\cursordestline (add1 \\cursordestline))                                                    (setq.noref \\cursordestlinebase (\\addbase                                                                                                                                                                       \\cursordestlinebase                                                                               \\cursordestrasterwidth                                                                                      )))))                                                             (* |Reset| pilotbbt\s.                                                             *)          (setq bitsperpixel (|fetch| (cursor cubitsperpixel) |of| \\currentcursor))          (setq x (itimes bitsperpixel x))          (setq xbase (itimes bitsperpixel xbase))          (setq width (itimes bitsperpixel width))          (setq dest \\cursordestlinebase)          (setq destbit x)          (setq sourceoffset (itimes ybase (|fetch| (bitmap bitmaprasterwidth) |of| \\softcursorupbm)                                    ))          (setq upbmsource (\\addbase (|fetch| (bitmap bitmapbase) |of| \\softcursorupbm)                                  sourceoffset))          (setq downbmsource (\\addbase (|fetch| (bitmap bitmapbase) |of| \\softcursordownbm)                                    sourceoffset))          (setq sourcebit xbase)                    (* tbw\: |Most| |of| |these| |fields| |only| |need| |to| |be| |set| |if| |we|           |are| |clipping| |this| |time| |or| |the| |previous| |time| |we| |put| |the|           |cursor| |up.| *)          (|replace| (pilotbbt pbtdest) |of| \\softcursorbbt1 |with| downbmsource)          (|replace| (pilotbbt pbtdestbit) |of| \\softcursorbbt1 |with| sourcebit)          (|replace| (pilotbbt pbtsource) |of| \\softcursorbbt1 |with| dest)          (|replace| (pilotbbt pbtsourcebit) |of| \\softcursorbbt1 |with| destbit)          (|replace| (pilotbbt pbtwidth) |of| \\softcursorbbt1 |with| width)          (|replace| (pilotbbt pbtheight) |of| \\softcursorbbt1 |with| height)          (|replace| (pilotbbt pbtdest) |of| \\softcursorbbt5 |with| dest)          (|replace| (pilotbbt pbtdestbit) |of| \\softcursorbbt5 |with| destbit)          (|replace| (pilotbbt pbtsource) |of| \\softcursorbbt5 |with| upbmsource)          (|replace| (pilotbbt pbtsourcebit) |of| \\softcursorbbt5 |with| sourcebit)          (|replace| (pilotbbt pbtwidth) |of| \\softcursorbbt5 |with| width)          (|replace| (pilotbbt pbtheight) |of| \\softcursorbbt5 |with| height)          (|replace| (pilotbbt pbtdest) |of| \\softcursorbbt6 |with| dest)          (|replace| (pilotbbt pbtdestbit) |of| \\softcursorbbt6 |with| destbit)          (|replace| (pilotbbt pbtsource) |of| \\softcursorbbt6 |with| downbmsource)          (|replace| (pilotbbt pbtsourcebit) |of| \\softcursorbbt6 |with| sourcebit)          (|replace| (pilotbbt pbtwidth) |of| \\softcursorbbt6 |with| width)          (|replace| (pilotbbt pbtheight) |of| \\softcursorbbt6 |with| height)                                                             (* |Save| |background| |behind|                                                              |cursor.| *)          (\\pilotbitblt \\softcursorbbt1 0)                 (* |Compute| |cursor| |appearance.|                                                             upbm = (or image (and downbm                                                             (not mask))) *)          (\\pilotbitblt \\softcursorbbt2 0)          (\\pilotbitblt \\softcursorbbt3 0)          (\\pilotbitblt \\softcursorbbt4 0)                 (* |Put| |color| |cursor| |up.|                                                             *)          (\\softcursorpilotbitblt \\softcursorbbt5 0)      exit          (\\putbase \\em.dispinterrupt 0 dispinterrupt))))(\\softcursorposition  (lambda (x y)                                              (* |kbr:| "18-Aug-85 14:50")                                                             (* |Move| |soft| |cursor.|                                                             *)    (prog (dispinterrupt)          (setq dispinterrupt (\\getbase \\em.dispinterrupt 0))          (\\putbase \\em.dispinterrupt 0 0)          (cond             ((or (not (eq (\\getbase \\em.cursorx 0)                           x))                  (not (eq (\\getbase \\em.cursory 0)                           y)))              (cond                 (\\softcursorupp (\\softcursordown)                        (\\softcursorupcurrent)))))          (\\putbase \\em.dispinterrupt 0 dispinterrupt))))(\\softcursordown  (lambda nil                                                (* |kbr:| " 6-Jul-85 00:09")                                                             (* |Take| color |cursor| |down.|                                                             *)    (prog (dispinterrupt)                                    (* \\softcursorupp |must| |be| |set|                                                              |to| nil |before| |BITBLTing.|                                                             *)          (setq dispinterrupt (\\getbase \\em.dispinterrupt 0))          (\\putbase \\em.dispinterrupt 0 0)          (setq \\softcursorupp nil)          (\\softcursorpilotbitblt \\softcursorbbt6 0)          (\\putbase \\em.dispinterrupt 0 dispinterrupt))))(cursorprop  (lambda x                                                  (* |kbr:| "11-Jan-86 20:03")    (cond       ((igreaterp x 2)        (putcursorprop (arg x 1)               (arg x 2)               (arg x 3)))       ((eq x 2)        (getcursorprop (arg x 1)               (arg x 2)))       (t (\\illegal.arg nil)))))(getcursorprop  (lambda (cursor prop)                                      (* |kbr:| "26-Apr-85 11:18")    (listget (|fetch| (cursor cudata) |of| cursor)           prop)))(putcursorprop  (lambda (cursor prop value)                                (* |kbr:| "26-Apr-85 11:18")    (prog (olddata oldvalue)          (setq olddata (|fetch| (cursor cudata) |of| cursor))          (cond             (olddata (setq oldvalue (listget olddata prop))                    (cond                       (value (listput olddata prop value))                       (oldvalue (cond                                    ((eq (car olddata)                                         prop)                                     (|replace| (cursor cudata) |of| cursor                                        |with| (cddr (|fetch| (cursor cudata) |of| cursor))))                                    (t (for tail on (cdr olddata) by (cddr tail)                                          when (eq (cadr tail)                                                   prop) do (frplacd tail (cdddr tail))                                                            (return)))))))             (value (|replace| (cursor cudata) |of| cursor |with| (list prop value))))          (return oldvalue))))(\\cursorbitsperpixel  (lambda (cursor newbitsperpixel)                           (* |kbr:| "12-May-85 17:15")                    (* |Swap| |in| newbitsperpixel image |and| mask\, |creating| |them| |if|           |necessary.| *)    (prog (oldbitsperpixel oldimage oldmask white black newimage newmask)          (setq oldbitsperpixel (|fetch| (cursor cubitsperpixel) |of| cursor))          (cond             ((eq oldbitsperpixel newbitsperpixel)              (return)))                                     (* |Save| oldimage |and| oldmask.                                                             *)          (setq oldimage (|fetch| (cursor cuimage) |of| cursor))          (setq oldmask (|fetch| (cursor cumask) |of| cursor))          (cursorprop cursor (\\cursorimagepropname oldbitsperpixel)                 oldimage)          (cursorprop cursor (\\cursormaskpropname oldbitsperpixel)                 oldmask)                    (* |Unsave| newimage |and| newmask |if| |possible,| |otherwise| |create|           |them.| *)          (cond             ((setq newimage (cursorprop cursor (\\cursorimagepropname newbitsperpixel)))                                                             (* |Use| |cached| newimage & newmask.                                                             *)              (setq newmask (cursorprop cursor (\\cursormaskpropname newbitsperpixel))))             (t                                              (* |Create| newimage & newmask.                                                             *)                (setq white (mask.1\'s 0 newbitsperpixel))                (setq black 0)                (setq newimage (colorizebitmap (cursorprop cursor 'image1)                                      black white newbitsperpixel))                (setq newmask (colorizebitmap (cursorprop cursor 'mask1)                                     black white newbitsperpixel))))          (|replace| (cursor cuimage) |of| cursor |with| newimage)          (|replace| (cursor cumask) |of| cursor |with| newmask))))(\\cursorimagepropname  (lambda (bitsperpixel)                                     (* |kbr:| "26-Apr-85 11:18")    (selectq bitsperpixel        (1 'image1)        (4 'image4)        (8 'image8)        (shouldnt))))(\\cursormaskpropname  (lambda (bitsperpixel)                                     (* |kbr:| "26-Apr-85 11:18")    (selectq bitsperpixel        (1 'mask1)        (4 'mask4)        (8 'mask8)        (shouldnt)))))(defineq(cursorcreate  (lambda (image mask hotspotx hotspoty data)                (* |gbn:| "26-Jan-86 17:05")                    (* |creates| \a |cursor| |from| \a |bitmap.|          hotspotx |and| hotspoty |specify| |the| |hotspot.|)                    (* * i\f |Mask| |is| \a |fixp| |then| |we| |presume| |this| |is| |the| |old|           |arg| |list| (|bitmap| \x \y)\. |the| |cursor| |filepkgtype| |has| |been|           |changed| |to| |write| |the| |new| |arg| |list.|          |The| |other| |is| |provided| |for| (|dubious|) |compatibility|)    (prog (cursor)          (cond             ((or (fixp mask)                  (positionp mask))              (setq hotspoty hotspotx)              (setq hotspotx mask)              (setq mask nil)))          (cond             ((positionp hotspotx)              (setq hotspoty (|fetch| (position ycoord) |of| hotspotx))              (setq hotspotx (|fetch| (position xcoord) |of| hotspotx))))          (setq cursor (|create| cursor                              cuimage _ image                              cumask _ (or mask image)                              cuhotspotx _ (or (fixp hotspotx)                                               0)                              cuhotspoty _ (or (fixp hotspoty)                                               (sub1 (bitmapheight image)))                              cudata _ data))          (return cursor))))(cursor  (lambda (newcursor invertflg)                              (* |kbr:| "13-Jun-85 20:45")                    (* |installs| newcursor |as| |the| |cursor| |and| |returns| |the| |current|           |cursor| |state.| i\f invertflg |is| |non-NIL,| |the| |cursor| |image| |is|           |inverted| |during| |installation.|)    (declare (globalvars defaultcursor))    (prog (oldcursor)          (setq oldcursor \\currentcursor)          (cond             ((eq newcursor t)              (setq newcursor defaultcursor)))          (cond             ((|type?| cursor newcursor)              (\\cursordown)              (\\cursorup newcursor invertflg)                    (* |set| |after| |adjustment| |to| |avoid| |confusion| |about| |hotspot|           |during| |adjustment.|)              (setq \\cursorhotspotx (|fetch| (cursor cuhotspotx) |of| newcursor))              (setq \\cursorhotspoty (idifference (sub1 (|fetch| (bitmap bitmapheight)                                                           |of| (|fetch| (cursor cuimage)                                                                   |of| newcursor)))                                            (|fetch| (cursor cuhotspoty) |of| newcursor)))))          (return oldcursor))))(\\cursorup  (lambda (newcursor invertflg)                              (* |kbr:| "18-Aug-85 14:38")    (uninterruptably        (\\cursorbitsperpixel newcursor (|fetch| (bitmap bitmapbitsperpixel) |of| \\cursordestination                                               ))        (cond           ((and (eq (|fetch| (cursor cuimage) |of| newcursor)                     (|fetch| (cursor cumask) |of| newcursor))                 (ileq (|fetch| (bitmap bitmapwidth) |of| (|fetch| (cursor cuimage) |of| newcursor))                       hardcursorwidth)                 (ileq (|fetch| (bitmap bitmapheight) |of| (|fetch| (cursor cuimage) |of| newcursor))                       hardcursorheight)                 (eq \\cursordestination |ScreenBitMap|))            (\\hardcursorup newcursor invertflg))           (t (\\softcursorup newcursor)))        (adjustcursorposition (idifference \\cursorhotspotx (|fetch| (cursor cuhotspotx) |of|                                                                                             newcursor                                                                   ))               (idifference (idifference (sub1 (|fetch| (bitmap bitmapheight)                                                  |of| (|fetch| (cursor cuimage) |of| newcursor)))                                   (|fetch| (cursor cuhotspoty) |of| newcursor))                      \\cursorhotspoty)))))(\\cursorposition  (lambda (xpos ypos)                                        (* |kbr:| "19-Jan-86 16:17")                    (* |sets| |cursor| |position,| |adjusts| |for| |hotspot| |and| |tty| |region|           |limits.| xpos |and| ypos |are| |the| |screen| |coordinates| |of| |the|           |hotspot| |location.|)    (declare (globalvars \\cursorhotspotx \\cursorhotspoty \\cursordestwidth \\cursordestheight))                    (* ypos |is| |reflected| |around| cursorymax |because| |the| |screen| |has|          (0\,0) |as| |the| |upper| |left| |corner.|          *)    (setq ypos (idifference (sub1 \\cursordestheight)                      ypos))                                 (* |Clip| |coordinates| *)    (setq xpos (unsigned (idifference (cond                                         ((ilessp xpos 0)                                          0)                                         ((igeq xpos \\cursordestwidth)                                          (sub1 \\cursordestwidth))                                         (t xpos))                                \\cursorhotspotx)                      bitsperword))    (setq ypos (unsigned (idifference (cond                                         ((ilessp ypos 0)                                          0)                                         ((igeq ypos \\cursordestheight)                                          (sub1 \\cursordestheight))                                         (t ypos))                                \\cursorhotspoty)                      bitsperword))    (cond       ((eq \\machinetype \\dandelion)                       (* |Temporary| |workaround|)        (cond           ((igreaterp ypos 32767)            (setq ypos 0)))        (cond           ((igreaterp xpos 32767)            (setq xpos 0)))))    (\\setmousexy xpos ypos)    (cond       (\\softcursorp (\\softcursorposition xpos ypos)))    (progn                     (* |change| |the| |cursor| |position| |too| |so| |that| getmousestate |will|           |get| |the| |correct| |values| |if| |it| |is| |called| |before| |the| |next| 60           |cycle| |interrupt.|)           (\\putbase \\em.cursorx 0 xpos)           (\\putbase \\em.cursory 0 ypos)           (cond              ((eq \\machinetype \\daybreak)                 (* |Need| |to| |notify| daybreak iop                                                              |to| |move| |cursor.|                                                             *)               (|\\DoveDisplay.SetCursorPosition| xpos ypos))))    nil))(\\cursordown  (lambda nil                                                (* |kbr:| "12-Jun-85 17:21")    (uninterruptably        (cond           (\\softcursorp (\\softcursordown))           (t (\\hardcursordown))))))(adjustcursorposition  (lambda (deltax deltay)                                    (* |kbr:| " 6-Jan-86 11:55")    (cond       ((positionp deltax)        (\\cursorposition (iplus (|fetch| (position xcoord) |of| deltax)                                 (\\xmousecoord))               (iplus (|fetch| (position ycoord) |of| deltax)                      (\\ymousecoord))))       (t (\\cursorposition (iplus (or deltax 0)                                   (\\xmousecoord))                 (iplus (or deltay 0)                        (\\ymousecoord)))))))(cursorposition  (lambda (newposition displaystream oldposition)            (* |kbr:| "13-Feb-86 15:53")    (prog (dd)          (setq dd (\\getdisplaydata displaystream))          (or (|type?| position oldposition)              (setq oldposition (|create| position)))          (|freplace| (position xcoord) |of| oldposition |with| (\\dspuntransformx (\\xmousecoord)                                                                       dd))          (|freplace| (position ycoord) |of| oldposition |with| (\\dspuntransformy (\\ymousecoord)                                                                       dd))          (cond             ((|type?| position newposition)              (\\cursorposition (\\dsptransformx (|fetch| (position xcoord) |of| newposition)                                       dd)                     (\\dsptransformy (|fetch| (position ycoord) |of| newposition)                            dd)))             ((|type?| screenposition newposition)              (cursorscreen (|fetch| (screenposition screen) |of| newposition)                     (|fetch| (screenposition xcoord) |of| newposition)                     (|fetch| (screenposition ycoord) |of| newposition)))             (newposition (\\illegal.arg newposition)))          (return oldposition))))(cursorscreen  (lambda (screen xcoord ycoord)                             (* |gbn:| "25-Jan-86 16:53")                    (* * |sets| |up| screen |to| |be| |the| |current| |screen,| xcoord \, ycoord           |is| |initial| |pos| |of| |cursor| |on| screen)    (cond       ((null xcoord)        (setq xcoord 0)))    (cond       ((null ycoord)        (setq ycoord 0)))    (prog (destination)          (setq destination (|fetch| (screen scdestination) |of| screen))          (\\cursordown)          (setq \\cursorscreen screen)          (\\cursordestination destination)          (\\cursorup \\currentcursor)          (\\cursorposition xcoord ycoord))))(cursorexit  (lambda nil                                                (* |gbn:| "25-Jan-86 16:52")                    (* * |called| |when| |cursor| |moves| |off| |the| |screen| |edge|)    (declare (globalvars lastscreen lastmousex lastmousey))    (prog (screen xcoord ycoord screen2 xcoord2 ycoord2)          (setq screen lastscreen)          (setq xcoord lastmousex)          (setq ycoord lastmousey)          (setq screen2 (cond                           ((eq screen \\mainscreen)                            \\colorscreen)                           (t \\mainscreen)))                (* |generalize| |for| |more| |than|                                                              |two| |screens| (|or| |alternate|                                                              |physical| |arrangement| |of|                                                              |screens.|))          (cond             ((eq xcoord 0)              (setq xcoord2 (idifference (|fetch| (screen scwidth) |of| screen2)                                   2)))             ((eq xcoord (sub1 (|fetch| (screen scwidth) |of| screen)))              (setq xcoord2 1))             (t (return)))          (setq ycoord2 (iquotient (itimes ycoord (sub1 (|fetch| (screen scheight) |of| screen2)))                               (sub1 (|fetch| (screen scheight) |of| screen))))          (cursorscreen screen2 xcoord2 ycoord2))))(flipcursor  (lambda nil                                                (* |gbn:| "26-Jan-86 17:13")    (prog (addr)          (cond             ((not \\softcursorp)              (setq addr \\em.cursorbitmap)              (frptq hardcursorheight (\\putbase addr 0 (logxor (\\getbase addr 0)                                                               (constant (sub1 (expt 2                                                                                      hardcursorwidth)                                                                               ))))                     (setq addr (\\addbase addr 1)))              (cond                 ((eq \\machinetype \\daybreak)                  (|\\DoveDisplay.SetCursorShape|))))))))(flipcursorbar  (lambda (n)                                                (* |kbr:| " 4-Sep-85 14:53")                    (* * |Inverts| |the| |Nth| |line| |of| |the| |cursor,| n = 0 |being| |the|           |top|)    (cond       ((not \\softcursorp)        (\\putbase \\em.cursorbitmap n (logxor (\\getbase \\em.cursorbitmap n)                                              max.smallp))        (cond           ((eq \\machinetype \\daybreak)                    (* |Notify| iop)            (|\\DoveDisplay.SetCursorShape|)))))))(lastmousex  (lambda (ds)                                               (* |rmk:| "30-AUG-83 13:07")                    (* |returns| |the| |mouse| \x |position| |in| |the| |coordinates| |of| |the|           |DisplayStream| ds)    (\\dspuntransformx lastmousex (\\getdisplaydata ds))))(lastmousey  (lambda (ds)                                               (* |rmk:| "30-AUG-83 13:07")                    (* |returns| |the| |mouse| \y |position| |in| |the| |coordinates| |of| |the|           |DisplayStream| ds)    (\\dspuntransformy lastmousey (\\getdisplaydata ds))))(createposition  (lambda (xcoord ycoord)                                    (* |rmk:| " 6-Aug-84 13:43")    (|create| position           xcoord _ (or xcoord 0)           ycoord _ (or ycoord 0))))(positionp  (lambda (x)                                                (* |rrb| "25-AUG-82 11:04")                    (* |is| x \a |position?| |For| |now| |just| \a |cons| |check| |but| |should|           |be| |made| \a |datatype.|)    (and (listp x)         (numberp (car x))         (numberp (cdr x))         x)))(cursorhotspot  (lambda (newposition)                                      (* |gbn:| "26-Jan-86 15:36")                    (* |returns| |the| |current| |cursor| |hot| |spot| |and| |sets| |the| |hot|           |spot| |to| newpositon |if| |one| |is| |given.|)    (prog1 (|create| position                  xcoord _ \\cursorhotspotx                  ycoord _ \\cursorhotspoty)           (cond              ((positionp newposition)               (setq \\cursorhotspotx (|fetch| (position ycoord) |of| newposition))               (setq \\cursorhotspoty (|fetch| (position ycoord) |of| newposition))))))))(putprops cursorprop argnames (nil (cursor prop {newvalue}) . u))(rpaq? \\cursorhotspotx 0)(rpaq? \\cursorhotspoty 0)(rpaq? \\currentcursor nil)(rpaq? \\softcursorwidth nil)(rpaq? \\softcursorheight nil)(rpaq? \\softcursorp nil)(rpaq? \\softcursorupp nil)(rpaq? \\softcursorupbm nil)(rpaq? \\softcursordownbm nil)(rpaq? \\softcursorbbt1 nil)(rpaq? \\softcursorbbt2 nil)(rpaq? \\softcursorbbt3 nil)(rpaq? \\softcursorbbt4 nil)(rpaq? \\softcursorbbt5 nil)(rpaq? \\softcursorbbt6 nil)(rpaq? \\cursorscreen nil)(rpaq? \\cursordestination nil)(rpaq? \\cursordestheight 808)(rpaq? \\cursordestwidth 1024)(rpaq? \\cursordestrasterwidth 64)(rpaq? \\cursordestline 0)(rpaq? \\cursordestlinebase nil)(declare\: doeval@compile dontcopy(globalvars \\cursorhotspotx \\cursorhotspoty \\currentcursor \\softcursorwidth \\softcursorheight        \\softcursorp \\softcursorupp \\softcursorupbm \\softcursordownbm \\softcursorbbt1        \\softcursorbbt2 \\softcursorbbt3 \\softcursorbbt4 \\softcursorbbt5 \\softcursorbbt6        \\cursordestination \\cursordestheight \\cursordestwidth \\cursordestrasterwidth        \\cursordestline \\cursordestlinebase))(defineq(getmousestate  (lambda nil                                                (* |kbr:| " 6-Jul-85 14:16")                                                             (* |Reads| |the| |current| |state|                                                              |of| |the| |mouse| |and| |keyboard|)    (setq lastmousex (\\xmousecoord))    (setq lastmousey (\\ymousecoord))    (setq lastmousebuttons (logxor (logand (|fetch| (keyboardevent wu) |of| \\lastkeystate)                                          \\mouse.allbits)                                  \\mouse.allbits))    (setq lastkeyboard (\\eventkeys))    (setq lastscreen \\cursorscreen)    nil))(\\eventkeys  (lambda nil                                                (* |rmk:| " 4-JUN-81 22:58")                    (* |Returns| |the| |state| |of| |the| |various| |keys| |that| |are|           |represented| |in| |mouse| |events|)    (logor (cond              ((keydownp 'lock)               128)              (t 0))           (cond              ((keydownp 'lshift)               64)              (t 0))           (cond              ((keydownp 'ctrl)               32)              (t 0))           (cond              ((keydownp 'rshift)               8)              (t 0))           (cond              ((keydownp 'blank-top)               4)              (t 0))           (cond              ((keydownp 'blank-middle)               2)              (t 0))           (cond              ((keydownp 'blank-bottom)               1)              (t 0))))))(* FOLLOWING DEFINITIONS EXPORTED)(declare\: eval@compile (rpaqq hardcursorheight 16)(rpaqq hardcursorwidth 16)(constants (hardcursorheight 16)       (hardcursorwidth 16)))(declare\: eval@compile (addtovar globalvars lastmousex lastmousey lastscreen lastmousebuttons lastmousetime lastkeyboard))(* END EXPORTED DEFINITIONS)(declare\: dontcopy (* FOLLOWING DEFINITIONS EXPORTED)(declare\: eval@compile (putprops \\setmousexy macro ((xpos ypos)                              (progn (selectc \\machinetype                                            (\\dandelion (|do| (progn (|replace| (iopage newmousex)                                                                             |of| \\iopage |with|                                                                              xpos)                                                                      (|replace| (iopage newmousey)                                                                             |of| \\iopage |with|                                                                              ypos))                                                               |repeatuntil|                                                               (ilessp (|fetch| (iopage newmousestate                                                                                       )                                                                              |of| \\iopage)                                                                      32768))                                                   (* |smash| |position| |until| |mouse| |says| |it|                                                       |is| |not| |busy|)                                                   (|replace| (iopage newmousex)                                                          |of| \\iopage |with| xpos)                                                   (|replace| (iopage newmousey)                                                          |of| \\iopage |with| ypos)                                                   (|replace| (iopage newmousestate)                                                          |of| \\iopage |with| 32768))                                            (\\daybreak (|\\DoveMisc.SetMousePosition| xpos ypos))                                            nil)                                     (progn (\\putbase \\em.mousex 0 xpos)                                            (\\putbase \\em.mousey 0 ypos))))))(* END EXPORTED DEFINITIONS)(declare\: eval@compile (putprops \\xmousecoord macro (nil (iplus \\cursorhotspotx (signed (\\getbase \\em.cursorx 0)                                                                  bitsperword))))(putprops \\ymousecoord macro (nil (idifference (sub1 \\cursordestheight)                                          (iplus \\cursorhotspoty (signed (\\getbase \\em.cursory 0)                                                                         bitsperword)))))))(declare\: donteval@load docopy (movd 'cursor 'setcursor)(movd '\\cursorposition '\\setcursorposition)(rpaq |\\SFPosition| (createposition)))(declare\: dontcopy (declare\: eval@compile(blockrecord keyboardevent              ((w0 word)              (w1 word)              (w2 word)              (w3 word)              (wu word)              (w4 word)              (w5 word)              (time fixp)              (mousestate bits 3)              (1shift flag)              (2shift flag)              (lock flag)              (ctrl flag)              (meta flag)              (font flag)              (usermode1 flag)              (usermode2 flag)              (usermode3 flag)              (nil bits 4)              (mousex word)              (mousey word))             (create (\\allocblock (foldhi \\keyboardevent.size wordspercell)))             w0 _ allup w1 _ allup w2 _ allup w3 _ allup w4 _ allup w5 _ allup wu _ allup mousestate              _ \\dlmouse.up (accessfns keyboardevent ((size (indexf (|fetch| mousey |of| datum)))                                                      (shift (or (|fetch| (keyboardevent 1shift)                                                                        datum)                                                                 (|fetch| (keyboardevent 2shift)                                                                        datum)))                                                      (shiftorlock (or (|fetch| (keyboardevent shift)                                                                              datum)                                                                       (|fetch| (keyboardevent lock)                                                                              datum)))))             lock _ (xkeydownp 'lock)             time _ 0))(declare\: eval@compile (rpaq \\keyboardevent.first nringindexwords)(rpaqq \\keyboardevent.size 12)(rpaq \\keyboardevent.last (plus \\keyboardevent.first (times \\keyboardevent.size 383)))(constants (\\keyboardevent.first nringindexwords)       \\keyboardevent.size       (\\keyboardevent.last (plus \\keyboardevent.first (times \\keyboardevent.size 383))))))(defineq(machinetype  (lambda nil                                                (* |mpl| "27-Jun-85 20:57")    (selectq (|fetch| |MachineType| |of| |\\InterfacePage|)        (4 'dolphin)        (5 'dorado)        (6 'dandelion)        (8                                                   (* |This| |is| \\daybreak |internally|)           'dove)        nil)))(setmaintpanel  (lambda (n)                                                (* |mpl| "21-Jul-85 18:15")    (selectc \\machinetype        (\\dandelion (|replace| dlmaintpanel |of| \\iopage |with| n))        (\\dolphin ((opcodes misc1 3)                    (\\dtest n 'smallp)))        (\\daybreak ((opcodes dovemisc 2)                     (\\dtest n 'smallp)))        nil))))(* \; "DLion beeper")(defineq(beepon  (lambda (freq)                                             (* mpl "27-Jul-85 21:48")    (selectc \\machinetype        (\\dandelion (|while| (igeq (|fetch| dlbeepcmd |of| \\iopage)                                    32768) |do| (block))                     (|replace| dlbeepfreq |of| \\iopage |with| (iquotient 1843200 (imax freq 29)))                     (|replace| dlbeepcmd |of| \\iopage |with| 32768))        (\\daybreak (|\\DoveMisc.BeepOn| freq))        (progn nil))    nil))(beepoff  (lambda nil                                                (* mpl "27-Jul-85 21:49")    (selectc \\machinetype        (\\dandelion (|while| (igeq (|fetch| dlbeepcmd |of| \\iopage)                                    32768) |do| (block))                     (|replace| dlbeepcmd |of| \\iopage |with| 32769))        (\\daybreak (|\\DoveMisc.BeepOff|))        (progn nil))    nil)))(* FOLLOWING DEFINITIONS EXPORTED)(declare\: doeval@compile dontcopy(globalvars \\em.mousex \\em.mousey \\em.cursorx \\em.cursory \\em.utilin \\em.realutilin \\em.kbdad0        \\em.kbdad1 \\em.kbdad2 \\em.kbdad3 \\em.kbdad4 \\em.kbdad5 \\em.dispinterrupt        \\em.displayhead \\em.cursorbitmap \\machinetype \\defaultkeyaction \\currentkeyaction        \\periodic.interrupt \\periodic.interrupt.frequency))(* END EXPORTED DEFINITIONS)(defineq(without-interrupts  (nlambda (form)                                            (* |lmm| "18-Apr-85 02:53")    (prog (val)          (\\keyboardoff)          (setq val (displaydown form))          (\\keyboardon)          (return val)))))(* \; "Compile locked fns together for locality")(declare\: donteval@load doeval@compile dontcopy(block\: nil flipcursorbar \\keyhandler \\keyhandler1 \\trackcursor \\periodic.interruptframe        \\timer.interruptframe \\dobufferedtransitions \\dotransitions \\decodetransition \\eventkeys        \\hardcursorup \\domousechording \\keyboardoff \\hardcursorposition \\hardcursordown        \\softcursorup \\softcursorupcurrent \\softcursorposition \\softcursordown))(declare\: dontcopy (addtovar inewcoms           (allocal (addvars (lockedfns flipcursorbar \\setiopointers \\keyhandler \\keyhandler1                                    \\contextapply \\lockpages \\decodetransition \\smashlink                                    \\incusecount llsh \\makefreeblock \\decusecount \\makenumber                                    \\addbase \\periodic.interruptframe \\dobufferedtransitions                                    \\timer.interruptframe \\causeinterrupt \\domousechording                                    \\keyboardoff \\trackcursor \\hardcursorup \\hardcursorposition                                    \\hardcursordown \\softcursorup \\softcursorupcurrent                                    \\softcursorposition \\softcursordown \\softcursorpilotbitblt)                          (lockedvars |\\InterfacePage| \\cursorhotspotx \\cursorhotspoty                                  \\currentcursor \\softcursorwidth \\softcursorheight \\softcursorp                                  \\softcursorupp \\softcursorupbm \\softcursordownbm \\softcursorbbt1                                  \\softcursorbbt2 \\softcursorbbt3 \\softcursorbbt4 \\softcursorbbt5                                  \\softcursorbbt6 \\cursordestination \\cursordestheight                                  \\cursordestwidth \\cursordestrasterwidth \\cursordestline                                  \\cursordestlinebase \\pendinginterrupt \\periodic.interrupt                                  \\periodic.interrupt.frequency \\lastuseraction \\mousechordticks                                  \\keyboardeventqueue \\keybuffering screenwidth screenheight                                  \\timer.interrupt.pending \\em.mousex \\em.mousey \\em.cursorx                                  \\em.cursory \\em.utilin \\em.realutilin \\em.kbdad0 \\em.kbdad1                                  \\em.kbdad2 \\em.kbdad3 \\em.dispinterrupt \\em.cursorbitmap                                  \\em.kbdad4 \\em.kbdad5 \\miscstats \\rclksecond))))(addtovar rdcoms (fns \\setiopointers)))(putprops llkey filetype cl:compile-file)(declare\: donteval@load doeval@compile dontcopy compilervars (addtovar nlama )(addtovar nlaml without-interrupts)(addtovar lama cursorprop metashift mousechordwait))(putprops llkey copyright ("Xerox Corporation" 1982 1983 1984 1985 1986))(declare\: dontcopy  (filemap (nil (13542 21003 (bksyscharcode 13552 . 13923) (\\clearsysbuf 13925 . 14464) (\\getkey 14466 . 15648) (\\nsysbufchars 15650 . 16349) (\\savesysbuf 16351 . 18109) (\\sysbufp 18111 . 18440) (\\getsysbuf 18442 . 18636) (\\putsysbuf 18638 . 19878) (\\peeksysbuf 19880 . 21001)) (22560 58223 (\\keyboardinit 22570 . 24265) (\\keyboardeventfn 24267 . 26802) (\\alloclocked 26804 . 27431) (\\setiopointers 27433 . 32189) (\\keyboardoff 32191 . 32461) (\\keyboardon 32463 . 32699) (\\keyhandler 32701 . 32841) (\\keyhandler1 32843 . 40850) (\\resetkeyboard 40852 . 42416) (\\domousechording 42418 . 46804) (\\dotransitions 46806 . 47635) (\\decodetransition 47637 . 53828) (mousechordwait 53830 . 54534) (\\trackcursor 54536 . 58221)) (81847 93724 (keyaction 81857 . 82486) (keyactiontable 82488 . 82984) (\\keyaction1 82986 . 89354) (keydownp 89356 . 89717) (\\keynametonumber 89719 . 90459) (modify.keyactions 90461 . 91034) (metashift 91036 . 92248) (shiftdownp 92250 . 93722)) (93788 94093 (setup.office.keyboard 93798 . 94091)) (98090 99786 (\\init.keyboard.stream 98100 . 99784)) (100050 110099 (\\dobufferedtransitions 100060 . 109113) (\\timer.interruptframe 109115 . 109874) (\\periodic.interruptframe 109876 . 110097)) (110358 114515 (\\hardcursorup 110368 . 112098) (\\hardcursorposition 112100 . 114359) (\\hardcursordown 114361 . 114513)) (114516 139957 (cursor.init 114526 . 118470) (\\cursordestination 118472 . 120584) (\\softcursorup 120586 . 125816) (\\softcursorupcurrent 125818 . 133892) (\\softcursorposition 133894 . 134692) (\\softcursordown 134694 . 135507) (cursorprop 135509 . 135860) (getcursorprop 135862 . 136064) (putcursorprop 136066 . 137253) (\\cursorbitsperpixel 137255 . 139491) (\\cursorimagepropname 139493 . 139725) (\\cursormaskpropname 139727 . 139955)) (139958 154679 (cursorcreate 139968 . 141458) (cursor 141460 . 142815) (\\cursorup 142817 . 144379) (\\cursorposition 144381 . 147045) (\\cursordown 147047 . 147289) (adjustcursorposition 147291 . 147890) (cursorposition 147892 . 149295) (cursorscreen 149297 . 150009) (cursorexit 150011 . 151508) (flipcursor 151510 . 152270) (flipcursorbar 152272 . 152834) (lastmousex 152836 . 153146) (lastmousey 153148 . 153458) (createposition 153460 . 153675) (positionp 153677 . 154021) (cursorhotspot 154023 . 154677)) (155965 157610 (getmousestate 155975 . 156670) (\\eventkeys 156672 . 157608)) (162925 163726 (machinetype 162935 . 163318) (setmaintpanel 163320 . 163724)) (163757 164756 (beepon 163767 . 164317) (beepoff 164319 . 164754)) (165209 165482 (without-interrupts 165219 . 165480)))))stop