(DEFINE-FILE-INFO §READTABLE "XCL" §PACKAGE "LISP")(il:filecreated "20-Oct-86 18:13:59" il:{eris}<lispcore>sources>freemenu.\;5 280715       il:|previous| il:|date:| "20-Oct-86 10:58:58" il:{eris}<lispcore>sources>freemenu.\;4); Copyright (c) 1986 by Xerox Corporation.  All rights reserved.(il:prettycomprint il:freemenucoms)(il:rpaqq il:freemenucoms           ((il:prop il:filetype il:freemenu)           (il:coms (il:* il:user il:interface il:functions)                  (il:macros il:fm.groupprop il:fm.menuprop il:fm.nwayprop)                  (il:optimizers il:fm.itemprop)                  (il:prop il:argnames il:fm.itemprop il:fm.groupprop il:fm.menuprop il:fm.nwayprop)                  (il:macros il:\\fm.insurefm il:\\fm.insurewindow)                  (il:* il:run time type il:checkers)                  (il:fns il:freemenu (il:* il:accessing il:functions)                         il:fm.itemprop il:fm.getitem il:fm.getstate (il:* il:changing il:functions)                         il:fm.highlightitem il:fm.changelabel il:fm.changestate il:fm.resetstate                          il:fm.resetmenu il:fm.resetshape il:fm.resetgroups (il:* il:misc                                                                                   il:functions)                         il:fm.redisplayitem il:fm.redisplaymenu il:fm.shade il:fm.editp                          il:fm.edititem il:fm.endedit il:fm.skipnext il:fm.whichitem il:fm.topgroupid                         ))           (il:coms (il:* il:creation il:of il:freemenus)                  (il:declare\: il:dontcopy (il:macros il:\\fm.itemprop il:\\fm.groupprop                                                    il:\\fm.nwayprop il:\\fm.makegroup                                                    il:\\fm.topgroupprop il:\\fm.dtopgroupid                                                    il:\\fm.dgroupprop il:\\fm.dtopgroupprop))                  (il:fns (il:* il:formatting)                         il:\\fm.format il:\\fm.formatbyrow il:\\fm.formatbycolumn                          il:\\fm.formatbygrid il:\\fm.formatexplicit il:\\fm.layoutrow                          il:\\fm.layoutcolumn il:\\fm.layoutgrid il:\\fm.justifyitems                          il:\\fm.justifygroups il:\\fm.pushgroup (il:* il:error il:checking)                         il:\\fm.checkdescription il:\\fm.checkprops (il:* il:creating)                         il:\\fm.createitem il:\\fm.getregions il:\\fm.getbitmaps il:\\fm.makebitmap                          il:\\fm.readuserdata il:\\fm.makelinks il:\\fm.collectnways                          il:\\fm.setattachpoint il:\\fm.createw il:\\fm.startedit)                  (il:declare\: il:dontcopy (il:macros il:\\fm.setupprops il:\\fm.setformatprops                                                    il:\\fm.checkforbox il:\\fm.updateforbox                                                    il:\\fm.updategrid il:\\fm.itemwidth                                                    il:\\fm.itemheight il:\\fm.attachpoint))                  (il:declare\: il:dontcopy                         (il:constants (il:\\fm.format-types '(il:row il:column il:table il:explicit)                                              )                                (il:\\fm.defaultformat 'il:row)                                (il:* il:|format| il:|keywords|)                                (il:\\fm.groupspec 'il:group)                                (il:\\fm.propspec 'il:props)                                (il:* il:|key| il:|words| il:|in| il:|description|)                                (il:\\fm.hjustify-specs '(il:left il:center il:right))                                (il:\\fm.vjustify-specs '(il:top il:middle il:bottom))                                (il:* il:|item| il:|justification| il:|keywords|)                                (il:\\fm.boxspace 1)                                (il:* il:|default| il:|number| il:|of| il:|bits| il:|between|                                       il:|label| il:|and| il:|box|)                                (il:\\fm.rowspace 2)                                (il:\\fm.columnspace 10)                                (il:* il:|default| il:|number| il:|of| il:|bits| il:|between|                                       il:|formatted| il:|rows| il:|and| il:|columns|)                                (il:\\fm.item-types '(il:momentary il:toggle il:3state il:nway                                                             il:state il:number il:edit il:editstart                                                             il:display))                                (il:* il:|known| il:|freemenu| il:|item| il:|types|)                                (il:\\fm.description-props '(type il:label il:left il:bottom il:id                                                                   il:groupid il:state il:initstate                                                                   il:font il:bitmap il:region                                                                   il:maxregion il:message il:userdata                                                                   il:links il:sysdownfn il:sysmovedfn                                                                   il:sysselectedfn il:downfn                                                                   il:heldfn il:movedfn il:selectedfn)                                       )                                (il:* il:|properties| il:|in| il:|item| il:|description| il:|that|                                       il:|don't| il:|become| il:userdata)))                  (il:records il:freemenuitem))           (il:coms (il:* il:freemenu il:windows)                  (il:declare\: il:dontcopy (il:macros il:\\fm.transpose))                  (il:fns il:\\fm.redisplaymenu il:\\fm.reshapefn il:\\fm.unscrollwindow                          il:\\fm.resetclippingregion il:\\fm.fillwindow il:\\fm.initcornersfn                          il:\\fm.transposehorz il:\\fm.transposevert il:\\fm.updategroupextent                          il:\\fm.windowextent il:\\fm.updatewindowextent))           (il:coms (il:* il:mouse il:functions)                  (il:declare\: il:dontcopy (il:macros il:\\fm.onitem il:\\fm.checkregion))                  (il:fns il:\\fm.windowentryfn il:\\fm.buttoneventfn il:\\fm.rightbuttonfn                          il:\\fm.doselection il:\\fm.menuhandler))           (il:coms (il:* il:item il:support il:functions)                  (il:declare\: il:dontcopy (il:macros il:\\fm.displaybitmap il:\\fm.coerceitemptr))                  (il:fns il:\\fm.getitemprop il:\\fm.putitemprop il:\\fm.cgetitemprop                          il:\\fm.cputitemprop il:\\fm.displayitem il:\\fm.highlightitem                          il:\\fm.changelabel il:\\fm.changestate il:\\fm.endedit                          il:\\fm.insurevisible il:\\fm.clearitem))           (il:coms (il:* il:momentary il:item il:functions)                  (il:fns il:\\fm.momentary-setup il:\\fm.momentary-selectedfn))           (il:coms (il:* il:toggle il:item il:functions)                  (il:fns il:\\fm.toggle-setup il:\\fm.toggle-downfn il:\\fm.toggle-selectedfn                          il:\\fm.toggle-changestate))           (il:coms (il:* il:3state il:item il:functions)                  (il:fns il:\\fm.3state-setup il:\\fm.3state-setupoffbitmap il:\\fm.3state-downfn                          il:\\fm.3state-selectedfn il:\\fm.3state-changestate))           (il:coms (il:* il:state il:item il:functions)                  (il:fns il:\\fm.state-setup il:\\fm.state-selectedfn il:\\fm.state-changestate))           (il:coms (il:* il:nway il:item il:functions)                  (il:fns il:\\fm.nway-setup il:\\fm.nway-message il:\\fm.nway-downfn                          il:\\fm.nway-movedfn il:\\fm.nway-selectedfn il:\\fm.nway-changestate))           (il:coms (il:* il:number il:item il:functions)                  (il:fns il:\\fm.number-setup il:\\fm.number-message il:\\fm.number-selectedfn                          il:\\fm.number-changestate))           (il:coms (il:* il:title il:item il:functions)                  (il:fns il:\\fm.display-setup))           (il:coms (il:* il:editstart il:item il:functions)                  (il:fns il:\\fm.editstart-setup il:\\fm.editstart-message                          il:\\fm.editstart-selectedfn))           (il:coms (il:* il:edit il:items)                  (il:declare\: il:dontcopy                         (il:constants (il:\\fm.edit-timeout 100000)                                (il:\\fm.edit-rightendspace 5)                                (il:\\fm.edit-blocksize 50)                                (il:\\fm.edit-controlchars '(9 10 12 13))                                (il:\\fm.edit-controlcharsecho 255)                                (il:\\fm.edit-worddelimchars '(32 123 125 91 93 60 62 47 92 46 44 59                                                                   42 40 41 45))                                (il:* il:|space| il:{ il:} il:[ il:] < > / il:\\ il:\. il:\, il:\;                                       il:* il:\( il:\) -)))                  (il:vars (il:\\fm.edit-ttbl))                  (il:globalvars il:\\fm.edit-ttbl)                  (il:macros il:\\fm.edit-maxwidth il:\\fm.edit-scrollamount)                  (il:fns il:\\fm.edit-setup il:\\fm.edit-message il:\\fm.edit-setupttbl                          il:\\fm.edit-item il:\\fm.edit-preparetoedit il:\\fm.edit-findnext                          il:\\fm.edit-findfirst il:\\fm.edit-backup il:\\fm.edit-worddelete                          il:\\fm.edit-insert il:\\fm.edit-delete il:\\fm.edit-getpointerinfo                          il:\\fm.edit-movecaret il:\\fm.edit-strdelete il:\\fm.edit-strinsert                          il:\\fm.edit-updateafterdelete))           (il:declare\: il:donteval@load il:doeval@compile il:dontcopy il:compilervars                  (il:addvars (il:nlama)                         (il:nlaml)                         (il:lama il:fm.itemprop)))))(il:putprops il:freemenu il:filetype compile-file)(il:* il:user il:interface il:functions)(il:declare\: il:eval@compile (il:putprops il:fm.groupprop il:macro       (il:args (il:* il:|access| il:|macro| il:|to| il:|group| il:|props| il:|of| il:|window.|                       il:|args| (il:window il:group il:prop il:{value}))              (cond ((null (cddr il:args))                     (il:error "Too few arguments to FM.GROUPPROP:" (cons 'il:fm.groupprop il:args)))                    ((cdddr il:args)                     `(let ((il:group (cdr (il:fassoc il:\, (cadr il:args)                                                  (il:windowprop (il:\\fm.insurewindow il:\,                                                                        (car il:args))                                                         'il:fm.groups)))))                           (prog1 (il:listget il:group il:\, (caddr il:args))                                  (il:listput il:group il:\, (caddr il:args)                                         il:\,                                         (cadddr il:args)))))                    (t `(il:listget (cdr (il:fassoc il:\, (cadr il:args)                                                (il:windowprop (il:\\fm.insurewindow il:\,                                                                      (car il:args))                                                       'il:fm.groups)))                               il:\,                               (caddr il:args))))))(il:putprops il:fm.menuprop il:macro       (il:args (il:* il:|access| il:|macro| il:|to| il:top il:|group| il:|props| il:|of|                       il:|window.| il:|args| (il:window il:prop il:{value}))              (cond ((null (cdr il:args))                     (il:error "Too few arguments to FM.MENUPROP:" (cons 'il:fm.menuprop il:args)))                    ((cddr il:args)                     `(let ((il:group (cdar (il:windowprop (il:\\fm.insurewindow il:\, (car il:args))                                                   'il:fm.groups))))                           (prog1 (il:listget il:group il:\, (cadr il:args))                                  (il:listput il:group il:\, (cadr il:args)                                         il:\,                                         (caddr il:args)))))                    (t `(il:listget (cdar (il:windowprop (il:\\fm.insurewindow il:\, (car il:args))                                                 'il:fm.groups))                               il:\,                               (cadr il:args))))))(il:putprops il:fm.nwayprop il:macro       (il:args (il:* il:|access| il:|macro| il:|to| il:|nway| il:|props.| il:|args|                      (il:window il:collection il:prop il:{value}))              (cond ((null (cddr il:args))                     (il:error "Too few arguments to FM.NWAYPROP:" (cons 'il:fm.nwayprop il:args)))                    ((cdddr il:args)                     `(let ((il:nway (cdr (il:assoc il:\, (cadr il:args)                                                 (il:windowprop (il:\\fm.insurewindow il:\,                                                                       (car il:args))                                                        'il:fm.nways)))))                           (prog1 (il:listget il:nway il:\, (caddr il:args))                                  (il:listput il:nway il:\, (caddr il:args)                                         il:\,                                         (cadddr il:args)))))                    (t `(il:listget (cdr (il:assoc il:\, (cadr il:args)                                                (il:windowprop (il:\\fm.insurewindow il:\,                                                                      (car il:args))                                                       'il:fm.nways)))                               il:\,                               (caddr il:args)))))))(il:defoptimizer il:fm.itemprop (&rest il:args)              (il:* il:|access| il:|macro| il:|to|                                                              il:freemenuitem il:|datatype.|                                                             il:|args| (il:item il:prop il:{value}))   (cond      ((null (cdr il:args))       (il:error "Too few arguments to FM.ITEMPROP:" (cons 'il:fm.itemprop il:args)))      ((il:neq (caadr il:args)              'quote)       'il:ignoremacro)      ((cddr il:args)       (il:\\fm.cputitemprop `(il:\\fm.insurefm ,(car il:args)) (cadr il:args)              (caddr il:args)))      (t (il:\\fm.cgetitemprop `(il:\\fm.insurefm ,(car il:args)) (cadr il:args)))))(il:putprops il:fm.itemprop il:argnames (il:item il:prop il:{value}))(il:putprops il:fm.groupprop il:argnames (il:window il:group il:prop il:{value}))(il:putprops il:fm.menuprop il:argnames (il:window il:prop il:{value}))(il:putprops il:fm.nwayprop il:argnames (il:window il:collection il:prop il:{value}))(il:declare\: il:eval@compile (il:putprops il:\\fm.insurefm il:macro       (il:args (il:* il:|args| (il:item il:window)                      il:\. il:|Insure| il:item il:|is| il:|freemenuitem.| il:i\f il:window il:|is|                       il:|supplied,| il:|then| il:|try| il:|to| il:|coerce| il:|item| il:|if|                       il:|necessary.|)              (il:|if| (cdr il:args)                     il:|then|                     (il:* il:window il:argument il:supplied)                     `(cond ((il:|type?| il:freemenuitem il:\, (car il:args))                             il:\,                             (car il:args))                            (t (il:if (and (il:listp il:\, (car il:args))                                           (eq il:\\fm.groupspec (car il:\, (car il:args))))                                      il:then                                      (il:error "Can't describe a local item from top level:" il:\,                                             (car il:args))                                      il:else                                      (il:\\fm.coerceitemptr il:\, (car il:args)                                             il:\,                                             (cadr il:args))))) il:|else| (il:* il:no il:window                                                                                 il:supplied\: il:just                                                                                 type il:check il:item                                                                                )                     `(cond ((il:|type?| il:freemenuitem il:\, (car il:args))                             il:\,                             (car il:args))                            (t (il:error "Arg must be FreeMenuItem" il:\, (car il:args)))))))(il:putprops il:\\fm.insurewindow il:macro ((il:window)                                            (cond ((and (il:windowp il:window)                                                        (il:windowprop il:window 'il:fm.items))                                                   il:window)                                                  (t (il:error "Arg must be FreeMenu Window"                                                             il:window))))))(il:* il:run time type il:checkers)(il:defineq(il:freemenu  (il:lambda (il:description il:title il:background il:border)                                                             (il:* il:|jow| "17-Apr-86 19:32")                    (il:* il:|Create| il:\a il:|freemenu| il:|from| il:\a il:|description.|          il:\\fm.format il:|is| il:|the| il:|recursive| il:|formatter.|          il:|The| il:|defaults| il:|are| il:|passed| il:|to| il:|it| il:|here.|          il:i\t il:|returns| il:\a il:|list| il:|of| il:|groups,| il:|the| il:|first|           il:|of| il:|which| il:|is| il:|the| il:|entire| il:|menu.|          il:|Each| il:|group| il:|is| il:\a il:|property| il:|list,| il:|the| il:|first|           il:|item| il:|being| il:|the| il:id il:|of| il:|the| il:|group,| il:|with|           il:|group| il:|properties| il:|following.|)    (il:setq il:description (il:copy il:description))        (il:* il:|leave| il:|users|                                                              il:|description| il:|untouched|)    (let ((il:window (il:\\fm.createw (il:\\fm.format il:description il:\\fm.defaultformat                                              il:defaultfont 0 0 il:\\fm.rowspace il:\\fm.columnspace)                            il:title il:background il:border)))                                                             (il:* il:\\fm.setattachpoint                                                             (il:listget (cdar il:window)                                                             (quote il:items)) (il:|fetch|                                                             (il:region il:width) il:|of|                                                             (il:listget (cdar il:window)                                                             (quote il:region))) (il:|fetch|                                                             (il:region il:height) il:|of|                                                             (il:listget (cdar il:window)                                                             (quote il:region))))         (il:\\fm.makelinks il:window)         (il:\\fm.collectnways il:window)         (il:fm.resetmenu il:window)         il:window)))(il:fm.itemprop  (il:lambda il:argptr                                       (il:* il:|jow| " 4-Apr-86 14:57")    (cond       ((il:ilessp il:argptr 2)        (il:error "Too few arguments to FM.ITEMPROP" (list 'il:fm.itemprop (il:arg il:argptr 1))))       ((not (il:|type?| il:freemenuitem (il:arg il:argptr 1)))        (il:error "FM.ITEMPROP arg must be FreeMenuItem:" (il:arg il:argptr 1)))       ((eq il:argptr 2)        (il:\\fm.getitemprop (il:arg il:argptr 1)               (il:arg il:argptr 2)))       (t (il:\\fm.putitemprop (il:arg il:argptr 1)                 (il:arg il:argptr 2)                 (il:arg il:argptr 3))))))(il:fm.getitem  (il:lambda (il:id il:group il:window)                      (il:* il:|jow| "19-Apr-86 22:45")                    (il:* il:|find| il:|an| il:|item| il:|in| il:window il:|based| il:|on| il:group           il:|and| il:id il:|which| il:|is| il:|an| il:|item| il:|id| il:|or| il:|label,|           il:i\f il:group il:|is| il:nil\, il:|search| il:|whole| il:|menu.|)    (il:\\fm.insurewindow il:window)    (let ((il:items (il:|if| il:group il:|then| (il:\\fm.groupprop il:window il:group 'il:items)                           il:|else|                           (il:windowprop il:window 'il:fm.items))))         (il:|for| il:item il:|in| il:items il:|thereis| (or (eq il:id (il:\\fm.itemprop il:item                                                                              'il:id))                                                             (il:equal il:id (il:\\fm.itemprop                                                                              il:item                                                                              'il:label)))))))(il:fm.getstate  (il:lambda (il:window)                                     (il:* il:|jow| "18-Jun-86 16:29")                    (il:* il:|programmer| il:|interface:| il:|goes| il:|through| il:|all|           il:|items| il:|and| il:|nway| il:|collections,| il:|returns| il:\a il:|prop|           il:|list| il:|of| il:|id| / il:|current| il:|state| il:|for| il:|any|           il:|state| il:|items| il:|in| il:|the| il:|menu.|          il:|The| il:|current| il:|state| il:|is| il:|the| il:|value| il:|of| il:|the|           il:state il:|field,| il:|or| il:|for| il:|edit| il:|items,| il:|the| il:label.          il:|Don't| il:|include| il:|in| il:|state| il:|list| il:|if| il:state il:|is|           il:nil.)    (il:\\fm.insurewindow il:window)    (let ((il:statelist (list nil)))         (il:|for| il:nway il:|in| (il:windowprop il:window 'il:fm.nways)                il:|do|                (il:|if| (il:listget (cdr il:nway)                                'il:state)                       il:|then|                       (il:lconc il:statelist (list (car il:nway)                                                    (il:listget (cdr il:nway)                                                           'il:state)))))         (il:|for| il:item il:|in| (il:windowprop il:window 'il:fm.items)                il:|do|                (il:selectq (il:\\fm.itemprop il:item 'type)                      ((il:toggle il:3state il:state il:nway il:number)                             (il:|if| (il:\\fm.itemprop il:item 'il:state)                                   il:|then|                                   (il:lconc il:statelist (list (or (il:\\fm.itemprop il:item                                                                           'il:id)                                                                    (il:\\fm.itemprop il:item                                                                           'il:label))                                                                (il:\\fm.itemprop il:item                                                                       'il:state)))))                      (il:edit (il:lconc il:statelist (list (il:\\fm.itemprop il:item 'il:id)                                                            (il:\\fm.itemprop il:item 'il:label))))                      nil))         (car il:statelist))))(il:fm.highlightitem  (il:lambda (il:item il:window)                             (il:* il:|jow| "26-Jun-86 15:05")                    (il:* il:|this| il:|is| il:|the| il:|user| il:|interface| il:|function|           il:|for| il:|highlighting.| il:|Type| il:|check| il:|and| il:|coerce|           il:|item,| il:|then| il:|call| il:|the| il:|real| il:|function|)    (il:\\fm.insurewindow il:window)    (il:setq il:item (il:\\fm.insurefm il:item il:window))    (il:\\fm.highlightitem il:item il:window)))(il:fm.changelabel  (il:lambda (il:item il:newlabel il:window il:updateflg)    (il:* il:|jow| "26-Jun-86 14:50")                    (il:* il:|user| il:|interface| il:|to| il:|change| il:|the| il:|label| il:|of|           il:|an| il:|item,| il:|and| il:|redisplay| il:|as| il:|necessary.|)    (il:\\fm.insurewindow il:window)    (il:setq il:item (il:\\fm.insurefm il:item il:window))    (let ((il:oldregion (il:\\fm.itemprop il:item 'il:region)))         (il:\\fm.changelabel il:item il:newlabel)           (il:* il:|fill| il:|in|                                                              il:|background|)                    (il:* il:|now| il:|put| il:|item| il:|back| il:|into| il:|its| il:|current|           il:|state.| il:|This| il:|only| il:|applies| il:|to| il:|particular| il:|type|           il:|items| (il:|nway,| il:|toggle,| il:|3state|)il:\, il:|so| il:|do| il:|the|           il:|changestate| il:|directly,| il:|rather| il:|than| il:|call|           il:|changestate|)         (il:selectq (il:\\fm.itemprop il:item 'type)               ((il:nway il:toggle)                     (il:* il:|remember| il:|each| il:|nway| il:|item| il:|is| il:|handled| il:|as|           il:|an| il:|individual| il:|toggle|)                     (il:\\fm.toggle-changestate il:item (il:\\fm.itemprop il:item 'il:state)))               (il:3state (il:\\fm.3state-changestate il:item (il:\\fm.itemprop il:item 'il:state)))               nil)         (il:|if| (or il:updateflg (il:\\fm.itemprop il:item 'il:changelabelupdate))                il:|then|                                    (il:* il:|update| il:|groups|)                (il:\\fm.updategroupextent (il:windowprop il:window 'il:fm.groups))                (il:windowprop il:window 'il:extent (il:\\fm.windowextent il:window))                (il:\\fm.redisplaymenu il:window)                il:|else|                                    (il:* il:|just| il:|redisplay|                                                              il:|item|)                (il:\\fm.clearitem il:item il:window il:oldregion)                                                             (il:* il:|fill| il:|in|                                                              il:|background|)                (il:\\fm.displaybitmap il:item (il:\\fm.itemprop il:item 'il:bitmap)                       il:window)))))(il:fm.changestate  (il:lambda (il:x il:newstate il:window)                    (il:* il:|jow| "26-Jun-86 14:51")                    (il:* il:|user| il:|interface| il:|to| il:|change| il:|the| il:|state| il:|of|           il:|any| (il:|state|) il:|item| il:|or| il:|nway| il:|collection.|          il:|Redisplay| il:|the| il:|item| il:|if| il:|the| il:|window| il:|is|           il:|open|)    (il:\\fm.insurewindow il:window)    (il:|if| (il:assoc il:x (il:windowprop il:window 'il:fm.nways))           il:|then|                                         (il:* il:x il:|specifies| il:|an|                                                              il:nway. il:|Changestate| il:|and|                                                              il:|redisplay.|)           (let ((il:oldstate (il:\\fm.nwayprop il:window il:x 'il:state)))                (il:|if| il:newstate il:|then|               (il:* nil il:|would| il:|mean|                                                              il:|deselect|)                       (il:setq il:newstate (il:\\fm.insurefm il:newstate il:window)))                (il:\\fm.changestate il:x il:newstate il:window)                (il:|if| il:oldstate il:|then| (il:\\fm.displaybitmap il:oldstate (il:\\fm.itemprop                                                                                   il:oldstate                                                                                   'il:bitmap)                                                      il:window))                (il:|if| il:newstate il:|then| (il:\\fm.displaybitmap il:newstate (il:\\fm.itemprop                                                                                   il:newstate                                                                                   'il:bitmap)                                                      il:window)))           il:|else|                                         (il:* il:|treat| il:x il:|as| il:|an|                                                              il:|item|)           (il:setq il:x (il:\\fm.insurefm il:x il:window))           (il:\\fm.changestate il:x il:newstate il:window)           (il:\\fm.displaybitmap il:x (il:\\fm.itemprop il:x 'il:bitmap)                  il:window))))(il:fm.resetstate  (il:lambda (il:x il:window)                                (il:* il:|jow| "24-Apr-86 21:27")                    (il:* il:|Reset| il:x\, il:|an| il:|item| il:|or| il:|nway| il:|collection,|           il:|to| il:|its| il:|initial| il:|state| il:|and| il:|redisplay|)    (il:\\fm.insurewindow il:window)    (let ((il:initstate (il:|if| (il:assoc il:x (il:windowprop il:window 'il:fm.nways))                               il:|then|                               (il:\\fm.nwayprop il:window il:x 'il:initstate)                               il:|else|                               (il:\\fm.itemprop (il:\\fm.insurefm il:x il:window)                                      'il:initstate))))         (il:fm.changestate il:x il:initstate il:window))))(il:fm.resetmenu  (il:lambda (il:window)                                     (il:* il:|jow| "26-Jun-86 14:43")                                                             (il:* il:|reset| il:|each| il:|item|                                                              il:|to| il:|its| il:initstate)    (il:\\fm.insurewindow il:window)    (il:\\fm.endedit il:window t)    (il:|for| il:item il:|in| (il:windowprop il:window 'il:fm.items)           il:|do|           (il:fm.resetstate il:item il:window))    (il:|for| il:nway il:|in| (il:windowprop il:window 'il:fm.nways)           il:|do|           (il:fm.resetstate (car il:nway)                  il:window))    (il:\\fm.redisplaymenu il:window)))(il:fm.resetshape  (il:lambda (il:window il:alwaysflg)                        (il:* il:|jow| "19-Apr-86 22:50")                    (il:* il:|programmer| il:|way| il:|of| il:|reshaping| il:\a il:|freemenu|           il:|window| il:|to| il:|its| il:|minimal| il:|extent.|          il:i\f il:|window| il:|is| il:|too| il:|small,| il:|it| il:|will| il:|be|           il:|reshaped,| il:|without| il:|moving| il:|the| il:|lower| il:|left|           il:|corner.| il:i\f il:|window| il:|is| il:|too| il:|big,| il:|it| il:|will|           il:|only| il:|be| il:|reshaped| il:|if| il:alwaysflg il:|is| il:t.)    (il:\\fm.insurewindow il:window)    (il:|if| (or (il:ilessp (il:windowprop il:window 'il:width)                        (il:windowprop il:window 'il:fm.minwidth))                 (il:ilessp (il:windowprop il:window 'il:height)                        (il:windowprop il:window 'il:fm.minheight))                 il:alwaysflg)           il:|then|           (il:shapew il:window (il:createregion (il:|fetch| (il:region il:left)                                                        il:|of|                                                        (il:windowprop il:window 'il:region))                                       (il:|fetch| (il:region il:bottom)                                              il:|of|                                              (il:windowprop il:window 'il:region))                                       (il:widthifwindow (il:windowprop il:window 'il:fm.minwidth)                                              (il:windowprop il:window 'il:border))                                       (il:heightifwindow (il:windowprop il:window 'il:fm.minheight)                                              (il:windowprop il:window 'il:title)                                              (il:windowprop il:window 'il:border)))))))(il:fm.resetgroups  (il:lambda (il:window il:grouplist il:redisplayflg)        (il:* il:|jow| "26-Jun-86 14:45")                                                             (il:* il:|user| il:|interface| il:|to|                                                              il:|recalculating| il:|group|                                                              il:|extents.|)    (il:\\fm.insurewindow il:window)    (il:\\fm.updategroupextent (il:windowprop il:window 'il:fm.groups)           il:grouplist)    (and il:redisplayflg (il:\\fm.redisplaymenu il:window))))(il:fm.redisplayitem  (il:lambda (il:item il:window)                             (il:* il:|jow| "26-Jun-86 14:51")                                                             (il:* il:|user| il:|interface| il:|to|                                                              il:|displaying| il:|an| il:|item.|)    (il:\\fm.insurewindow il:window)    (il:setq il:item (il:\\fm.insurefm il:item il:window))    (il:\\fm.displaybitmap il:item (il:\\fm.itemprop il:item 'il:bitmap)           il:window)))(il:fm.redisplaymenu  (il:lambda (il:window)                                     (il:* il:|jow| "26-Jun-86 14:45")                    (il:* il:|use| il:\\fm.redisplaymenu\, il:|which| il:|has| il:|hooks| il:|for|           il:|updating| il:\a il:|particular| il:|region.|)    (il:\\fm.insurewindow il:window)    (il:\\fm.redisplaymenu il:window)))(il:fm.shade  (il:lambda (il:x il:shade il:window)                       (il:* il:|jow| "26-Jun-86 14:59")                    (il:* il:x il:|is| il:\a il:|group| il:|id| il:|or| il:|an| il:|item.|          il:|Paint| il:|shade| il:|on| il:|top| il:|of| il:|group| il:|or| il:|item.|)    (il:\\fm.insurewindow il:window)    (let ((il:region (or (il:\\fm.groupprop il:window il:x 'il:region)                         (il:\\fm.itemprop (il:\\fm.insurefm il:x il:window)                                'il:region))))         (il:|if| (and il:region (il:openwp il:window))                il:|then|                (il:bltshade (il:texturep il:shade)                       il:window nil nil nil nil 'il:paint il:region)))))(il:fm.editp  (il:lambda (il:window)                                     (il:* il:|jow| "19-Apr-86 22:52")    (il:windowprop (il:\\fm.insurewindow il:window)           'il:fm.edititem)))(il:fm.edititem  (il:lambda (il:item il:window il:clearflg)                 (il:* il:|jow| "20-Oct-86 10:48")                                                  (il:* il:|;;;|                                                   "start editing at beginning of item.")    (il:\\fm.insurewindow il:window)    (il:setq il:item (il:\\fm.insurefm il:item il:window))    (il:\\fm.endedit il:window t)    (il:|if| il:clearflg il:|then|                (il:* il:\;                                                   "hack to get EDIT-ITEM to clear item first.")           (il:setq il:clearflg '(il:right)))    (il:|if| (il:openwp il:window)           il:|then|           (il:add.process `(il:\\fm.startedit ',il:item ',il:window ',il:clearflg) 'il:name                  'il:freemenu                  'il:freemenu.process t))))(il:fm.endedit  (il:lambda (il:window il:waitflg)                          (il:* il:|jow| "24-Apr-86 21:23")    (il:\\fm.insurewindow il:window)    (il:\\fm.endedit il:window il:waitflg)))(il:fm.skipnext  (il:lambda (il:window il:clearflg)                         (il:* il:|jow| "20-Oct-86 10:57")    (il:|if| (il:fm.editp il:window)           il:|then|                              (il:* il:|;;| "eval the EDITITEM change in the FREEMENU process, which must be the tty process if editing.  This works even if called from the FREEMENU process, eg by LIMITCHARS")           (let ((il:fm.process (il:tty.process)))                (il:|if| (il:processprop il:fm.process 'il:freemenu.process)                       il:|then|                       (il:process.eval il:fm.process                              `(progn (il:setq il:edititem (il:\\fm.edit-findnext))                                      (il:|if| il:edititem il:|then|                                             (il:|if| ',il:clearflg il:|then| (il:fm.changelabel                                                                               il:edititem ""                                                                                il:window))                                             (il:\\fm.edit-preparetoedit il:edititem t)                                             (il:\\fm.insurevisible il:edititem il:window)                                             il:|else|                                             (il:\\fm.endedit il:window))))                       il:|else|                       (il:error "Can't find freemenu process to do skip-next" il:fm.process)))           il:|else|                              (il:* il:\;                                                  "not editing, so start with first edit item in menu")           (let ((il:edititem (il:\\fm.edit-findfirst il:window)))                (il:|if| il:edititem il:|then| (il:fm.edititem il:edititem il:window il:clearflg))))))(il:fm.whichitem  (il:lambda (il:window il:|POSorX| il:y)                    (il:* il:|jow| "19-Apr-86 22:54")                    (il:* il:|user| il:|interface| il:|to| il:checkregion.          il:|Return| il:|the| il:|item| il:|in| il:window il:|at|          (il:|POSorX,| il:y) il:i\f il:window il:|is| il:nil\, il:|use| il:|the|           il:|window| il:|the| il:|cursor| il:|is| il:|in,| il:|and| il:|the| il:|cursor|           il:|position| il:|in| il:|that| il:|window|)    (il:|if| (or (il:windowp il:window)                 (il:setq il:window (il:whichw)))           il:|then|           (cond              ((il:positionp il:|POSorX|)               (il:\\fm.checkregion il:window (il:|fetch| (il:position il:xcoord)                                                     il:|of| il:|POSorX|)                      (il:|fetch| (il:position il:ycoord)                             il:|of| il:|POSorX|)))              (il:|POSorX| (il:\\fm.checkregion il:window il:|POSorX| il:y))              (t (il:\\fm.checkregion il:window (il:lastmousex il:window)                        (il:lastmousey il:window)))))))(il:fm.topgroupid  (il:lambda (il:window)                                     (il:* il:|jow| "19-Apr-86 22:54")                                                             (il:* il:|grab| il:|id| il:|of|                                                              il:|top| il:|group|)    (il:\\fm.dtopgroupid (il:windowprop (il:\\fm.insurewindow il:window)                                'il:fm.groups)))))(il:* il:creation il:of il:freemenus)(il:declare\: il:dontcopy (il:declare\: il:eval@compile (il:putprops il:\\fm.itemprop il:macro (il:args (il:* il:|access| il:|macro| il:|to| il:freemenuitem                                                       il:|datatype.| il:|args| (il:item il:prop                                                                                       il:{value})                                                      il:|Doesnt| il:|force| il:|an| il:insurefm                                                       il:|on| il:|the| il:|item,| il:|so|                                                       il:|intended| il:|for| il:|internal| il:|use|                                                       il:|only.| il:prop il:|must| il:|be| il:\a                                                       il:|quoted| il:|literal.|)                                              (cond ((null (cdr il:args))                                                     (il:error "Too few arguments to \\FM.ITEMPROP:"                                                            (cons 'il:fm.itemprop il:args)))                                                    ((not (eq (caadr il:args)                                                              'quote))                                                     (il:error                                                        "CANT USE \\FM.ITEMPROP UNLESS PROP IS QUOTED"                                                            ))                                                    ((cddr il:args)                                                     (il:\\fm.cputitemprop (car il:args)                                                            (cadr il:args)                                                            (caddr il:args)))                                                    (t (il:\\fm.cgetitemprop (car il:args)                                                              (cadr il:args))))))(il:putprops il:\\fm.groupprop il:macro       (il:args (il:* il:|internal| il:|access| il:|macro| il:|to| il:|group| il:|props| il:|of|                       il:|window.| il:|doesn't| il:|check| il:|for| il:|illegal| il:|args.| il:|args|                      (il:window il:group il:prop il:{value}))              (cond ((null (cddr il:args))                     (il:error "Too few arguments to FM.GROUPPROP:" (cons 'il:fm.groupprop il:args)))                    ((cdddr il:args)                     `(let ((il:group (cdr (il:fassoc il:\, (cadr il:args)                                                  (il:windowprop il:\, (car il:args)                                                         'il:fm.groups)))))                           (prog1 (il:listget il:group il:\, (caddr il:args))                                  (il:listput il:group il:\, (caddr il:args)                                         il:\,                                         (cadddr il:args)))))                    (t `(il:listget (cdr (il:fassoc il:\, (cadr il:args)                                                (il:windowprop il:\, (car il:args)                                                       'il:fm.groups)))                               il:\,                               (caddr il:args))))))(il:putprops il:\\fm.nwayprop il:macro       (il:args (il:* il:|internal| il:|access| il:|macro| il:|to| il:|nway| il:|props.| il:|doesn't|                       il:|error| il:|check| il:|args.| il:|args| (il:window il:collection il:prop                                                                         il:{value}))              (cond ((null (cddr il:args))                     (il:error "Too few arguments to FM.NWAYPROP:" (cons 'il:fm.nwayprop il:args)))                    ((cdddr il:args)                     `(let ((il:nway (cdr (il:assoc il:\, (cadr il:args)                                                 (il:windowprop il:\, (car il:args)                                                        'il:fm.nways)))))                           (prog1 (il:listget il:nway il:\, (caddr il:args))                                  (il:listput il:nway il:\, (caddr il:args)                                         il:\,                                         (cadddr il:args)))))                    (t `(il:listget (cdr (il:assoc il:\, (cadr il:args)                                                (il:windowprop il:\, (car il:args)                                                       'il:fm.nways)))                               il:\,                               (caddr il:args))))))(il:putprops il:\\fm.makegroup il:macro (il:args (il:* il:|access| il:|macro| il:|that| il:|will|                                                        il:|build| il:|group| il:|from| (il:id                                                                                              il:props                                                                                              ))                                               `(cons il:\, (car il:args)                                                      il:\,                                                      (cadr il:args))))(il:putprops il:\\fm.topgroupprop il:macro       (il:args (il:* il:|access| il:|macro| il:|to| il:|top| il:|group| il:|of| il:|window.|                       il:|args| (il:window il:prop il:{value}))              (cond ((null (cdr il:args))                     (il:error "BAD ARGS TO \\FM.TOPGROUPPROP:" (cons 'il:\\fm.topgroupprop il:args))                     )                    ((cddr il:args)                     `(let ((il:group (cdar (il:windowprop (il:\\fm.insurewindow il:\, (car il:args))                                                   'il:fm.groups))))                           (prog1 (il:listget il:group il:\, (cadr il:args))                                  (il:listput il:group il:\, (cadr il:args)                                         il:\,                                         (caddr il:args)))))                    (t `(il:listget (cdar (il:windowprop (il:\\fm.insurewindow il:\, (car il:args))                                                 'il:fm.groups))                               il:\,                               (cadr il:args))))))(il:putprops il:\\fm.dtopgroupid il:macro ((il:group)                                           (caar il:group)))(il:putprops il:\\fm.dgroupprop il:macro (il:args                                          (il:* il:|access| il:|macro| il:|to| il:|groups| il:|props|                                                 il:|directly.| il:|args| (il:groups il:groupid                                                                                 il:prop il:{value}))                                          (cond ((null (cddr il:args))                                                 (il:error "BAD ARGS TO \\FM.DGROUPPROP"                                                        (cons 'il:\\fm.dgroupprop il:args)))                                                ((cdddr il:args)                                                 `(let ((il:group (cdr (il:fassoc il:\, (cadr il:args                                                                                              )                                                                              il:\,                                                                              (car il:args)))))                                                       (prog1 (il:listget il:group il:\, (caddr                                                                                          il:args))                                                              (il:listput il:group il:\, (caddr                                                                                          il:args)                                                                     il:\,                                                                     (cadddr il:args)))))                                                (t `(il:listget (cdr (il:fassoc il:\, (cadr il:args)                                                                            il:\,                                                                            (car il:args)))                                                           il:\,                                                           (caddr il:args))))))(il:putprops il:\\fm.dtopgroupprop il:macro (il:args (il:* il:|access| il:|macro| il:|to| il:|direct|                                                            il:|top| il:|group.| il:|args|                                                           (il:groups il:prop il:{value}))                                                   (cond ((null (cdr il:args))                                                          (il:error "BAD ARGS TO \\FM.DTOPGROUPPROP:"                                                                 (cons 'il:\\fm.dtopgroupprop il:args                                                                       )))                                                         ((cddr il:args)                                                          `(prog1 (il:listget (cdar il:\,                                                                                    (car il:args))                                                                         il:\,                                                                         (cadr il:args))                                                                  (il:listput (cdar il:\,                                                                                    (car il:args))                                                                         il:\,                                                                         (cadr il:args)                                                                         il:\,                                                                         (caddr il:args))))                                                         (t `(il:listget (cdar il:\, (car il:args))                                                                    il:\,                                                                    (cadr il:args))))))))(il:defineq(il:\\fm.format  (il:lambda (il:description format il:font il:left il:bottom il:rowspace il:columnspace il:mother                     il:id il:props)                          (il:* il:|jow| "24-Apr-86 23:14")                    (il:* il:|recursive| il:|formatter.| il:mother il:|is| il:|this| il:|groups|           il:|mother| il:|group| il:|id,| il:|and| il:id il:|is| il:|this| il:|groups|           il:|id,| il:|and| il:props il:|is| il:|this| il:|groups| il:|property|           il:|list.| il:|Currently| il:id il:|and| il:props il:|are| il:|unspecified|           il:|arguments,| il:|and| il:|are| il:|only| il:|set| il:|by| il:setupprops          (il:|but| il:|they| il:|are| il:|available| il:|as| il:|format| il:|arguments|           il:|for| il:|later| il:|versions???|) il:|Format| il:|description| il:|based|           il:|on| il:|its| il:|requested| il:|format| il:|in| il:props.          il:i\f il:|the| il:|format| il:|type| il:|is| il:|not| il:|known,| il:|treat|           il:|it| il:|as| il:\a il:|user| il:|specified| il:|funtion| il:|to| il:|do|           il:|the| il:|desired| il:|formatting,| il:|and| il:|apply| il:|it| il:|to|           il:|the| il:|description.| (not il:currently) il:left il:|and| il:bottom           il:|specify| il:|the| il:|corner| il:|of| il:|the| il:|groups| il:|coordinate|           il:|system,| il:|and| il:|the| il:left il:|and| il:bottom il:|menuprops|           il:|in| il:|the| il:|group| il:|specify| il:|offsets| il:|in| il:|that|           il:|system.| il:i\f il:|the| il:|group| il:|is| il:|boxed,| il:|then|           il:|offset| il:|the| il:|group| il:|before| il:|formatting,| il:|and|           il:|readjust| il:|the| il:|extent| il:|after| il:|formatting| il:|to|           il:|account| il:|for| il:|the| il:|box.|          il:|Return| il:\a il:|group| il:|structure| il:|for| il:|this| il:|group.|)    (il:\\fm.setupprops il:description '(format il:font il:left il:bottom il:rowspace il:columnspace                                                il:id))    (let (il:groups il:oldcorner il:boxoffset il:extent)         (il:\\fm.checkforbox)         (il:setq il:groups (il:selectq format                                  (il:row (il:\\fm.formatbyrow il:description il:font il:left                                                  il:bottom il:rowspace il:columnspace il:id il:props))                                  (il:column (il:\\fm.formatbycolumn il:description il:font il:left                                                     il:bottom il:rowspace il:columnspace il:id                                                     il:props))                                  (il:table (il:\\fm.formatbygrid il:description il:font il:left                                                    il:bottom il:rowspace il:columnspace il:id                                                    il:props))                                  (il:explicit (il:\\fm.formatexplicit il:description il:font il:left                                                       il:bottom il:rowspace il:columnspace il:id                                                       il:props))                                  nil))                      (il:* il:apply* (il:listget il:props                                                             (quote format)) il:description il:font                                                              il:left il:bottom il:rowspace                                                              il:columnspace il:id)         (il:\\fm.justifyitems il:groups)         (il:\\fm.justifygroups il:groups)         (il:setq il:extent (il:\\fm.dtopgroupprop il:groups 'il:region))                                                             (il:* il:updateforbox il:|macro|                                                              il:|uses| il:extent)         (il:\\fm.updateforbox)         il:groups)))(il:\\fm.formatbyrow  (il:lambda (il:description il:font il:left il:bottom il:rowspace il:columnspace il:id il:props)                                                             (il:* il:|jow| "17-Apr-86 18:09")                    (il:* il:|Called| il:|when| il:|row| il:|formatting| il:|is| il:|specified.|          il:id il:|and| il:props il:|are| il:|passed| il:|from| il:\\fm.format.          il:id il:|is| il:|id| il:|of| il:|this| il:|group,| il:|and| il:|thus|           il:|passed| il:|to| il:mother il:|of| il:|each| il:|row| il:|group.|          il:props il:|is| il:|the| il:|group| il:|proplist| il:|to| il:|build| il:|the|           il:|group| il:|from.| il:description il:|is| il:\a il:|list| il:|of| il:|rows,|           il:|each| il:|row| il:\a il:|list| il:|of| il:|item| il:|descriptions| il:|and|           il:|groups.| il:|Reverse| il:|the| il:|rows,| il:|then| il:|build| il:|from|           il:|bottom| il:|up.| il:|Use| il:\\fm.layoutrow il:|to| il:|lay| il:|out|           il:|the| il:|items| il:|in| il:\a il:|row.|)    (let ((il:extent (il:createregion il:left il:bottom 0 0))          (il:itemlist (list nil))          (il:grouplist (list nil))          (il:rowids (list nil))          (il:rowbottom il:bottom)          il:groups)         (il:|for| il:row il:|in| (il:dreverse il:description)                il:|do|                (il:setq il:groups (il:\\fm.layoutrow il:row il:font il:left il:rowbottom il:rowspace                                           il:columnspace il:id))                (il:tconc il:rowids (il:\\fm.dtopgroupid il:groups))                (il:lconc il:itemlist (il:reverse (il:\\fm.dtopgroupprop il:groups 'il:items)))                (il:extendregion il:extent (il:\\fm.dtopgroupprop il:groups 'il:region))                (il:lconc il:grouplist il:groups)                (il:|add| il:rowbottom (il:|fetch| (il:region il:height)                                              il:|of|                                              (il:\\fm.dtopgroupprop il:groups 'il:region))                       il:rowspace))         (il:listput il:props 'il:items (il:dreverse (car il:itemlist)))         (il:listput il:props 'il:region il:extent)         (il:listput il:props 'il:daughters (il:dreverse (car il:rowids)))         (cons (il:\\fm.makegroup il:id il:props)               (car il:grouplist)))))(il:\\fm.formatbycolumn  (il:lambda (il:description il:font il:left il:bottom il:rowspace il:columnspace il:id il:props)                                                             (il:* il:|jow| "17-Apr-86 18:09")                    (il:* il:id il:|and| il:props il:|are| il:|passed| il:|from| il:\\fm.format.          il:id il:|is| il:|this| il:|groups| il:|id,| il:|and| il:|is| il:|passed|           il:|as| il:|the| il:mother il:|of| il:|each| il:|column.|          il:description il:|is| il:\a il:|list| il:|of| il:|columns,| il:|each|           il:|column| il:\a il:|list| il:|of| il:|items|          (il:|top| il:|to| il:|bottom|) il:|and| il:|groups.|          il:\\fm.layoutcolumn il:|takes| il:\a il:|column| il:|description| il:|and|           il:|lays| il:|out| il:|the| il:|items.| il:|Column| il:|formatting|           il:|requires| il:\a il:|second| il:|pass,| il:|to| il:|top| il:|justify|           il:|the| il:|columns.| il:|This| il:|is| il:|done| il:|by| il:|going|           il:|through| il:|the| il:grouplist il:|and| il:|pushing| il:|up| il:|each|           il:|column| il:|as| il:|necessary.|)    (let ((il:extent (il:createregion il:left il:bottom 0 0))          (il:itemlist (list nil))          (il:grouplist (list nil))          (il:columnids (list nil))          (il:columnleft il:left)          il:groups)         (il:|for| il:col il:|in| il:description il:|do| (il:setq il:groups                                                          (il:\\fm.layoutcolumn il:col il:font                                                                  il:columnleft il:bottom il:rowspace                                                                  il:columnspace il:id))                (il:tconc il:columnids (il:\\fm.dtopgroupid il:groups))                (il:lconc il:itemlist (il:copy (il:\\fm.dtopgroupprop il:groups 'il:items)))                (il:extendregion il:extent (il:\\fm.dtopgroupprop il:groups 'il:region))                (il:lconc il:grouplist il:groups)                (il:|add| il:columnleft (il:|fetch| (il:region il:width)                                               il:|of|                                               (il:\\fm.dtopgroupprop il:groups 'il:region))                       il:columnspace))         (il:setq il:grouplist (car il:grouplist))           (il:* il:|list| il:|from| il:lconc                                                              il:|pair|)         (let ((il:height (il:|fetch| (il:region il:height)                                 il:|of| il:extent))               il:colheight)              (il:|for| il:colid il:|in| (car il:columnids)                     il:|do|                    (il:* il:|go| il:|through| il:|each| il:|column,| il:|pushing| il:|up|           il:|each| il:|item| il:|in| il:|the| il:|column.|)                     (il:setq il:colheight (il:|fetch| (il:region il:height)                                                  il:|of|                                                  (il:\\fm.dgroupprop il:grouplist il:colid                                                         'il:region)))                     (il:|if| (il:neq il:colheight il:height)                            il:|then|                        (il:* il:|column| il:|doesn't|                                                              il:|reach| il:|top,| il:|so| il:|push|                                                              il:|up|)                            (il:\\fm.pushgroup il:colid il:grouplist (il:idifference il:height                                                                             il:colheight)                                   'il:up))))         (il:listput il:props 'il:items (car il:itemlist))         (il:listput il:props 'il:region il:extent)         (il:listput il:props 'il:daughters (car il:columnids))         (cons (il:\\fm.makegroup il:id il:props)               il:grouplist))))(il:\\fm.formatbygrid  (il:lambda (il:description il:font il:left il:bottom il:rowspace il:columnspace il:id il:props)                                                             (il:* il:|jow| " 9-May-86 16:05")                    (il:* il:id il:|and| il:props il:|are| il:|specified| il:|by| il:\\fm.format.          il:id il:|is| il:|this| il:|groups| il:|id,| il:|and| il:|thus| il:|the|           il:mother il:|of| il:|each| il:|grid| il:|row.|          il:description il:|is| il:\a il:|list| il:|of| il:|rows,| il:|each| il:|row|           il:\a il:|list| il:|of| il:|item| il:|descriptions| il:|and| il:|groups.|          il:|Reverse| il:|the| il:|rows,| il:|then| il:|build| il:|from| il:|bottom|           il:|up.| il:grid il:|is| il:|the| il:|list| il:|of| il:|columns.|          il:|Ignore| il:|row| il:|and| il:|item| il:|offsets| il:|and| il:|make|           il:|the| il:|first| il:|column| il:left.          il:|This| il:|is| il:|okay| il:|because| il:|can| il:|achieve| il:|the|           il:|offset| il:|by| il:|group| il:|offset.|          il:\\fm.layoutgrid il:|formats| il:|each| il:|row,| il:|and| il:|also|           il:|updates| il:|the| il:|column| il:|grid.|          il:a\s il:\a il:|second| il:|pass,| il:|the| il:|items| il:|in| il:|each|           il:|row| il:|are| il:|pushed| il:|right,| il:|to| il:|align| il:|them|           il:|with| il:|the| il:|calculated| il:|grid.|          il:|This| il:|involves| il:|extending| il:|the| il:|extent| il:|to|           il:|include| il:|any| il:|item/group| il:|that| il:|is| il:|on| il:|the|           il:|last| il:|grid| il:|position,| il:|otherwise| il:|the| il:|item/group|           il:|could| il:|get| il:|justified| il:|out| il:|of| il:|the| il:|extent.|)    (let ((il:extent (il:createregion il:left il:bottom 0 0))          (il:itemlist (list nil))          (il:grouplist (list nil))          (il:rowids (list nil))          (il:grid (il:tconc (list nil)                          il:left))          (il:rowbottom il:bottom)          il:groups il:rowitems il:rowregion il:rowdaughters il:alignregion il:box)         (il:|for| il:rowdesc il:|in| (il:reverse il:description)                il:|do|                (il:setq il:groups (il:\\fm.layoutgrid il:rowdesc il:font il:grid il:rowbottom                                           il:rowspace il:columnspace il:id))                (il:tconc il:rowids (il:\\fm.dtopgroupid il:groups))                (il:lconc il:itemlist (il:reverse (il:\\fm.dtopgroupprop il:groups 'il:items)))                (il:extendregion il:extent (il:\\fm.dtopgroupprop il:groups 'il:region))                (il:lconc il:grouplist il:groups)                (il:|add| il:rowbottom (il:|fetch| (il:region il:height)                                              il:|of|                                              (il:\\fm.dtopgroupprop il:groups 'il:region))                       il:rowspace))         (il:setq il:grouplist (car il:grouplist))           (il:* il:|grab| il:|list| il:|from|                                                              il:lconc il:|pair|)         (il:setq il:rowids (il:dreverse (car il:rowids)))         (il:setq il:grid (car il:grid))         (il:|for| il:rowid il:|in| il:rowids il:|as| il:rowdesc il:|in| il:description il:|do|                (il:setq il:rowregion (il:\\fm.dgroupprop il:grouplist il:rowid 'il:region))                (il:setq il:rowitems (il:\\fm.dgroupprop il:grouplist il:rowid 'il:items))                (il:setq il:rowdaughters (il:\\fm.dgroupprop il:grouplist il:rowid 'il:daughters))                (il:|for| il:itemdesc il:|in| il:rowdesc il:|as| il:gridpos il:|in| il:grid il:|do|                       (il:|if| (eq il:\\fm.groupspec (car il:itemdesc))                              il:|then|                              (il:setq il:alignregion (il:\\fm.dgroupprop il:grouplist (car                                                                                       il:rowdaughters                                                                                            )                                                             'il:region))                              (il:setq il:rowitems (cdr (il:fmemb (car (last (il:\\fm.dgroupprop                                                                              il:grouplist                                                                              (car il:rowdaughters)                                                                              'il:items)))                                                               il:rowitems)))                              (il:|if| (il:neq il:gridpos (il:|fetch| (il:region il:left)                                                                 il:|of| il:alignregion))                                     il:|then|               (il:* il:|need| il:|to| il:|align|                                                              il:\a il:|group|)                                     (il:\\fm.pushgroup (car il:rowdaughters)                                            il:grouplist                                            (il:idifference il:gridpos (il:|fetch| (il:region il:left                                                                                          )                                                                              il:|of| il:alignregion)                                                   )                                            'il:right))                              (il:setq il:rowdaughters (cdr il:rowdaughters))                                                             (il:* il:|point| il:|at| il:|next|                                                              il:|item| il:|and| il:|group|)                              il:|else|                              (il:setq il:alignregion (il:\\fm.itemprop (car il:rowitems)                                                             'il:maxregion))                              (il:|replace| (il:region il:left)                                     il:|of|                                     (il:\\fm.itemprop (car il:rowitems)                                            'il:region)                                     il:|with| il:gridpos)                              (il:|replace| (il:region il:left)                                     il:|of| il:alignregion il:|with| il:gridpos)                              (il:setq il:rowitems (cdr il:rowitems))                                                             (il:* il:|point| il:|at| il:|next|                                                              il:|item|)                              )                       il:|finally|                       (il:extendregion il:rowregion il:alignregion)                       (il:|if| (il:setq il:box (il:\\fm.dgroupprop il:grouplist il:rowid                                                       'il:box))                              il:|then|                              (il:|add| (il:|fetch| (il:region il:width)                                               il:|of| il:rowregion)                                     (il:iplus il:box (il:\\fm.dgroupprop il:grouplist il:rowid                                                             'il:boxspace))))                       (il:extendregion il:extent il:rowregion)))         (il:listput il:props 'il:items (il:dreverse (car il:itemlist)))         (il:listput il:props 'il:region il:extent)         (il:listput il:props 'il:daughters il:rowids)         (cons (il:\\fm.makegroup il:id il:props)               il:grouplist))))(il:\\fm.formatexplicit  (il:lambda (il:description il:font il:left il:bottom il:rowspace il:columnspace il:id il:props)                                                             (il:* il:|jow| "17-Apr-86 18:10")                    (il:* il:id il:|and| il:props il:|are| il:|specified| il:|by| il:\\fm.format.          il:|For| il:|an| il:|explicitely| il:|formatted| il:|group,| il:|just|           il:|check| il:|that| il:|the| il:|descriptions| il:|are| il:|valid,| il:|and|           il:|figure| il:|out| il:|the| il:|groups| il:|extent.|          il:i\f il:|the| il:|group| il:|is| il:|layed| il:|out| il:|in| il:|local|           il:|coordinates,| il:|replace| il:|with| il:|menu| il:|coordinates.|          il:|When| il:\a il:|group| il:|is| il:|encountered| il:|within| il:|an|           il:|explicitely| il:|formatted| il:|group,| il:|the| il:left il:|and| il:bottom           il:|specs| il:|in| il:|the| il:|inside| il:|group| il:|locate| il:|its|           il:|corner.| il:i\f il:|the| il:|outer| il:|group| il:|is| il:|expressed|           il:|in| il:|group| il:|coordinates,| il:|then| il:|the| il:|corner| il:|of|           il:|the| il:|outer| il:|group| il:|is| il:|passed| il:|on,| il:|so| il:|that|           il:|the| il:|inner| il:|group| il:|will| il:|be| il:|in| il:|the| il:|same|           il:|system.|)    (let ((il:extent (il:createregion il:left il:bottom 0 0))          (il:itemlist (list nil))          (il:grouplist (list nil))          (il:subgroupids (list nil))          (il:local (eq (il:listget il:props 'il:coordinates)                        'il:group))          il:x)                                              (il:* il:x il:|holds| il:|newly|                                                              il:|created| il:|group| il:|or|                                                              il:|item.|)         (il:|for| il:itemdesc il:|in| il:description il:|do|                (il:|if| (eq il:\\fm.groupspec (car il:itemdesc))                       il:|then|                             (il:* il:|if| il:|item| il:|is| il:\a                                                              il:|group,| il:|recurse|)                       (il:|if| il:local il:|then| (il:setq il:x (il:\\fm.format (cdr il:itemdesc)                                                                        'il:explicit il:font il:left                                                                         il:bottom il:rowspace                                                                         il:columnspace il:id))                              il:|else|                              (il:setq il:x (il:\\fm.format (cdr il:itemdesc)                                                   'il:explicit il:font 0 0 il:rowspace                                                    il:columnspace il:id)))                       (il:tconc il:subgroupids (il:\\fm.dtopgroupid il:x))                       (il:lconc il:itemlist (il:copy (il:\\fm.dtopgroupprop il:x 'il:items)))                       (il:extendregion il:extent (il:\\fm.dtopgroupprop il:x 'il:region))                       (il:lconc il:grouplist il:x)                       il:|else|                       (il:\\fm.checkdescription il:itemdesc)(il:* il:|check| il:|description|                                                              il:|and| il:|left| il:|and|                                                              il:|bottom| il:|specs|)                       (il:|if| il:local il:|then|           (il:* il:|change| il:|group|                                                              il:|coord's| il:|into| il:|menu|                                                              il:|coord's|)                              (il:setq il:x (il:\\fm.createitem il:itemdesc il:font il:left il:bottom                                                    il:id))                              il:|else|                              (il:setq il:x (il:\\fm.createitem il:itemdesc il:font 0 0 il:id)))                       (il:tconc il:itemlist il:x)                       (il:extendregion il:extent (il:\\fm.itemprop il:x 'il:maxregion))))         (il:listput il:props 'il:items (il:dreverse (car il:itemlist)))         (il:listput il:props 'il:region il:extent)         (il:listput il:props 'il:daughters (car il:subgroupids))         (cons (il:\\fm.makegroup il:id il:props)               (car il:grouplist)))))(il:\\fm.layoutrow  (il:lambda (il:row il:font il:left il:bottom il:rowspace il:columnspace il:mother il:id il:props)                                                             (il:* il:|jow| "17-Apr-86 18:11")                    (il:* il:mother il:|mother| il:|group| il:|id.|          il:id il:|and| il:props il:|belong| il:|to| il:|the| il:|group| il:|which|           il:|is| il:|this| il:|row,| il:|and| il:|are| il:|currently| il:|unspecified|           il:|on| il:|entry| (il:|later| il:|versions???|) il:|Layout| il:|the|           il:|items| il:|in| il:\a il:|row| il:|starting| il:|at| il:left il:|and|           il:bottom il:|including| il:|any| il:|individual| il:|item| il:|offsets,|           il:|leaving| il:columnspace il:|bits| il:|between| il:|items| il:|in| il:|the|           il:|row.| il:|Nested| il:|groups| il:|get| il:|default| il:|row| il:|format.|          il:|Return| il:\a il:|list| il:|of| il:|groups.|)    (il:\\fm.setupprops il:row '(il:id il:font il:left il:bottom il:columnspace))    (let (il:oldcorner il:boxoffset)         (il:\\fm.checkforbox)         (let ((il:extent (il:createregion il:left il:bottom 0 0))               (il:itemlist (list nil))               (il:grouplist (list nil))               (il:subgroupids (list nil))               (il:groupleft il:left)               il:x)                                         (il:* il:x il:|holds| il:|newly|                                                              il:|created| il:|group| il:|or|                                                              il:|item|)              (il:|for| il:itemdesc il:|in| il:row il:|do|                     (il:|if| (eq il:\\fm.groupspec (car il:itemdesc))                            il:|then|                            (il:setq il:x (il:\\fm.format (cdr il:itemdesc)                                                 'il:row il:font il:left il:bottom il:rowspace                                                  il:columnspace il:id))                            (il:tconc il:subgroupids (il:\\fm.dtopgroupid il:x))                            (il:lconc il:itemlist (il:copy (il:\\fm.dtopgroupprop il:x 'il:items)))                            (il:extendregion il:extent (il:\\fm.dtopgroupprop il:x 'il:region))                            (il:lconc il:grouplist il:x)                            il:|else|                            (il:\\fm.checkdescription il:itemdesc)                            (il:setq il:x (il:\\fm.createitem il:itemdesc il:font il:left il:bottom                                                  il:id))                            (il:tconc il:itemlist il:x)                            (il:extendregion il:extent (il:\\fm.itemprop il:x 'il:maxregion)))                     (il:setq il:left (il:iplus il:groupleft (il:|fetch| (il:region il:width)                                                                    il:|of| il:extent)                                             il:columnspace)))              (il:\\fm.updateforbox)              (il:listput il:props 'il:items (car il:itemlist))              (il:listput il:props 'il:region il:extent)              (il:listput il:props 'il:daughters (car il:subgroupids))              (cons (il:\\fm.makegroup il:id il:props)                    (car il:grouplist))))))(il:\\fm.layoutcolumn  (il:lambda (il:column il:font il:left il:bottom il:rowspace il:columnspace il:mother il:id il:props                    )                                        (il:* il:|jow| "17-Apr-86 18:11")                    (il:* il:mother il:|is| il:|mother| il:|group| il:|id.|          il:id il:|and| il:props il:|belong| il:|to| il:|the| il:|group| il:|which|           il:|is| il:|this| il:|row,| il:|and| il:|are| il:|currently| il:|unspecified|           il:|on| il:|entry| (il:|later| il:|versions???|) il:|Called| il:|by|           il:\\fm.formatbycolumn il:|to| il:|layout| il:|the| il:|items| il:|in| il:\a           il:|column.| il:|The| il:column il:|is| il:|reversed,| il:|so| il:|that|           il:|it| il:|is| il:|built| il:|from| il:|bottom| il:|up.|          il:|Column| il:|starts| il:|at| il:left\, il:bottom\, il:|with| il:rowspace           il:|bits| il:|between| il:|items.| il:|Nested| il:|groups| il:|default| il:|to|           il:|column| il:|format.| il:|The| il:|items| il:|are| il:|returned| il:|in|           il:|the| il:|order| il:|that| il:|they| il:|are| il:|declared.|)    (il:\\fm.setupprops il:column '(il:id il:font il:left il:bottom il:rowspace))    (let (il:oldcorner il:boxoffset)         (il:\\fm.checkforbox)         (let ((il:extent (il:createregion il:left il:bottom 0 0))               (il:itemlist (list nil))               (il:grouplist (list nil))               (il:subgroupids (list nil))               (il:groupbottom il:bottom)               il:x)                                         (il:* il:x il:|holds| il:|newly|                                                              il:|created| il:|group| il:|or|                                                              il:|item|)              (il:|for| il:itemdesc il:|in| (il:dreverse il:column)                     il:|do|                     (il:|if| (eq il:\\fm.groupspec (car il:itemdesc))                            il:|then|                            (il:setq il:x (il:\\fm.format (cdr il:itemdesc)                                                 'il:column il:font il:left il:bottom il:rowspace                                                  il:columnspace il:id))                            (il:tconc il:subgroupids (il:\\fm.dtopgroupid il:x))                            (il:lconc il:itemlist (il:reverse (il:\\fm.dtopgroupprop il:x                                                                     'il:items)))                            (il:extendregion il:extent (il:\\fm.dtopgroupprop il:x 'il:region))                            (il:lconc il:grouplist il:x)                            il:|else|                            (il:\\fm.checkdescription il:itemdesc)                            (il:setq il:x (il:\\fm.createitem il:itemdesc il:font il:left il:bottom                                                  il:id))                            (il:tconc il:itemlist il:x)                            (il:extendregion il:extent (il:\\fm.itemprop il:x 'il:maxregion)))                     (il:setq il:bottom (il:iplus il:groupbottom (il:|fetch| (il:region il:height)                                                                        il:|of| il:extent)                                               il:rowspace)))              (il:\\fm.updateforbox)              (il:listput il:props 'il:items (il:dreverse (car il:itemlist)))              (il:listput il:props 'il:region il:extent)              (il:listput il:props 'il:daughters (il:dreverse (car il:subgroupids)))              (cons (il:\\fm.makegroup il:id il:props)                    (car il:grouplist))))))(il:\\fm.layoutgrid  (il:lambda (il:row il:font il:grid il:bottom il:rowspace il:columnspace il:mother il:id il:props)                                                             (il:* il:|jow| "24-Apr-86 23:15")                    (il:* il:mother il:|is| il:|mother| il:|group| il:|id.|          il:id il:|and| il:props il:|belong| il:|to| il:|the| il:|group| il:|which|           il:|is| il:|this| il:|row,| il:|and| il:|are| il:|currently| il:|unspecified|           il:|on| il:|entry| (il:|later| il:|versions???|) il:row il:|is| il:\a il:|list|           il:|of| il:|item| il:|descriptions.| il:|Layout| il:|the| il:|items|           il:|according| il:|to| il:grid\, il:|updating| il:grid il:|as| il:|you|           il:|go.| il:grid il:|is| il:\a il:|list|          (il:|built| il:|in| il:tconc il:|format|) il:|of| il:|column| il:|positions,|           il:|ie| il:|the| il:|first| il:|number| il:|in| il:|the| il:|list| il:|is|           il:|the| il:|left| il:|position| il:|of| il:|the| il:|first| il:|item| il:|in|           il:|each| il:|row,| il:|and| il:|so| il:|on.|          il:grid il:|will| il:|always| il:|specify| il:\a il:|first| il:|column.|          il:|For| il:|each| il:|row,| il:|update| il:grid il:|to| il:|accomodate|           il:|the| il:|items| il:|in| il:|that| il:|row,| il:|by| il:|pushing| il:|the|           il:|grid| il:|right| il:|as| il:|necessary| il:|for| il:|new| il:|items.|          il:|Then| il:\\fm.formatbygrid il:|will| il:|use| il:|this| il:|grid| il:|to|           il:|align| il:|all| il:|items| il:|by| il:|column.|)    (il:\\fm.setupprops il:row '(il:id il:font il:bottom il:columnspace))    (let ((il:gridlen (il:flength (car il:grid)))          il:oldcorner il:boxoffset)         (il:|if| (il:listget il:props 'il:box)                il:|then|                    (il:* il:|offset| il:|group| il:|to| il:|allow| il:|for| il:|box.|          il:|Like| il:checkforbox\; il:|slightly| il:|different| il:|for| il:grid.)                (or (il:listget il:props 'il:boxshade)                    (il:listput il:props 'il:boxshade il:blackshade))                (or (il:listget il:props 'il:boxspace)                    (il:listput il:props 'il:boxspace il:\\fm.boxspace))                (il:setq il:oldcorner (cons il:left il:bottom))                (il:setq il:boxoffset (il:iplus (il:listget il:props 'il:box)                                             (il:listget il:props 'il:boxspace)))                (il:\\fm.updategrid 1 (il:iplus (caar il:grid)                                             il:boxoffset))  (il:* il:|shift| il:|grid| il:|to|                                                              il:|account| il:|for| il:|box|)                (il:|add| il:bottom il:boxoffset))         (let ((il:extent (il:createregion (caar il:grid)                                 il:bottom 0 0))               (il:itemlist (list nil))               (il:grouplist (list nil))               (il:subgroupids (list nil))               (il:itemnum 0)               il:x il:groupregion il:left il:nextleft)              (il:|for| il:itemdesc il:|in| il:row il:|do| (il:|add| il:itemnum 1)                     (il:setq il:left (car (il:fnth (car il:grid)                                                  il:itemnum)))                     (il:|if| (eq il:\\fm.groupspec (car il:itemdesc))                            il:|then|                            (il:setq il:x (il:\\fm.format (cdr il:itemdesc)                                                 'il:table il:font il:left il:bottom il:rowspace                                                  il:columnspace il:id))                            (il:tconc il:subgroupids (il:\\fm.dtopgroupid il:x))                            (il:lconc il:itemlist (il:copy (il:\\fm.dtopgroupprop il:x 'il:items)))                            (il:setq il:groupregion (il:\\fm.dtopgroupprop il:x 'il:region))                            (il:extendregion il:extent il:groupregion)                            (il:lconc il:grouplist il:x)                            (il:setq il:left (il:|fetch| (il:region il:left)                                                    il:|of| il:groupregion))                            (il:setq il:nextleft (il:iplus il:left (il:|fetch| (il:region il:width)                                                                          il:|of| il:groupregion)                                                        il:columnspace))                            il:|else|                            (il:\\fm.checkdescription il:itemdesc)                            (il:setq il:x (il:\\fm.createitem il:itemdesc il:font il:left il:bottom                                                  il:id))                            (il:tconc il:itemlist il:x)                            (il:setq il:groupregion (il:\\fm.itemprop il:x 'il:maxregion))                            (il:extendregion il:extent il:groupregion)                            (il:setq il:left (il:|fetch| (il:region il:left)                                                    il:|of| il:groupregion))                            (il:setq il:nextleft (il:iplus il:left (il:|fetch| (il:region il:width)                                                                          il:|of| il:groupregion)                                                        il:columnspace)))                     (il:\\fm.updategrid il:itemnum il:left) (il:* il:|mark| il:|where| il:|this|                                                              il:|one| il:|went|)                     (il:\\fm.updategrid (il:add1 il:itemnum)                            il:nextleft)                     (il:* il:|mark| il:|where| il:|the|                                                              il:|next| il:|one| il:|will| il:|go|)                     )              (il:\\fm.updateforbox)              (il:listput il:props 'il:items (car il:itemlist))              (il:listput il:props 'il:region il:extent)              (il:listput il:props 'il:daughters (car il:subgroupids))              (cons (il:\\fm.makegroup il:id il:props)                    (car il:grouplist))))))(il:\\fm.justifyitems  (il:lambda (il:groups il:groupid)                          (il:* il:|jow| " 9-May-86 14:30")                    (il:* il:|justify| il:|the| il:|items| il:|in| il:|group| il:groupid\,           il:|within| il:|that| il:|items| il:|groups| il:|extent.|          il:i\f il:groupid il:|is| il:|nil,| il:|do| il:|top| il:|group.|          il:|This| il:|will| il:|descend| il:|into| il:|subgroups,| il:|and|           il:|justify| il:|those| il:|items| il:|within| il:|that| il:|group.|)    (let (il:extent il:extentleft il:extentbottom il:itemregion il:itemmaxregion il:itemwidth                 il:itemheight il:thisgroup il:mother)         (or il:groupid (il:setq il:groupid (il:\\fm.dtopgroupid il:groups)))         (il:|for| il:item il:|in| (il:\\fm.dgroupprop il:groups il:groupid 'il:items)                il:|when|                (or (il:\\fm.itemprop il:item 'il:hjustify)                    (il:\\fm.itemprop il:item 'il:vjustify))                il:|do|                (il:|if| (il:neq il:thisgroup (il:\\fm.itemprop il:item 'il:groupid))                       il:|then|                       (il:setq il:thisgroup (il:\\fm.itemprop il:item 'il:groupid))                       (il:|if| (eq (il:\\fm.dgroupprop il:groups il:thisgroup 'format)                                    'il:explicit)                              il:|then|                              (il:setq il:extent (il:\\fm.dgroupprop il:groups il:thisgroup                                                        'il:region))                              il:|else|                              (il:setq il:mother (il:\\fm.dgroupprop il:groups il:thisgroup                                                        'il:mother))                              (il:setq il:extent (il:\\fm.dgroupprop il:groups il:mother 'il:region))                              )                       (il:setq il:extentleft (il:|fetch| (il:region il:left)                                                     il:|of| il:extent))                       (il:setq il:extentbottom (il:|fetch| (il:region il:bottom)                                                       il:|of| il:extent)))                (il:setq il:itemregion (il:\\fm.itemprop il:item 'il:region))                (il:setq il:itemmaxregion (il:\\fm.itemprop il:item 'il:maxregion))                (il:|if| (il:\\fm.itemprop il:item 'il:hjustify)                       il:|then|                       (il:setq il:itemwidth (il:|fetch| (il:region il:width)                                                    il:|of| il:itemmaxregion))                       (il:|replace| (il:region il:left)                              il:|of| il:itemregion il:|with|                              (il:selectq (il:\\fm.itemprop il:item 'il:hjustify)                                    (il:left il:extentleft)                                    (il:center (il:iplus il:extentleft                                                      (il:iquotient (il:idifference                                                                     (il:|fetch| (il:region il:width)                                                                            il:|of| il:extent)                                                                     il:itemwidth)                                                             2)))                                    (il:right (il:iplus il:extentleft (il:idifference                                                                       (il:|fetch| (il:region                                                                                           il:width)                                                                              il:|of| il:extent)                                                                       il:itemwidth)))                                    nil))                       (il:|replace| (il:region il:left)                              il:|of| il:itemmaxregion il:|with| (il:|fetch| (il:region il:left)                                                                        il:|of| il:itemregion)))                (il:|if| (il:\\fm.itemprop il:item 'il:vjustify)                       il:|then|                       (il:setq il:itemheight (il:|fetch| (il:region il:height)                                                     il:|of| il:itemmaxregion))                       (il:|replace| (il:region il:bottom)                              il:|of| il:itemregion il:|with|                              (il:selectq (il:\\fm.itemprop il:item 'il:vjustify)                                    (il:top (il:iplus il:extentbottom (il:idifference                                                                       (il:|fetch| (il:region                                                                                           il:height)                                                                              il:|of| il:extent)                                                                       il:itemheight)))                                    (il:middle (il:iplus il:extentbottom                                                      (il:iquotient (il:idifference                                                                     (il:|fetch| (il:region il:height                                                                                        )                                                                            il:|of| il:extent)                                                                     il:itemheight)                                                             2)))                                    (il:bottom il:extentbottom)                                    nil))                       (il:|replace| (il:region il:bottom)                              il:|of| il:itemmaxregion il:|with| (il:|fetch| (il:region il:bottom)                                                                        il:|of| il:itemregion)))))))(il:\\fm.justifygroups  (il:lambda (il:groups il:groupid)                          (il:* il:|jow| "12-Apr-86 14:55")                    (il:* il:|justify| il:|group| il:groupid il:|in| il:groups il:|structure.|          il:|This| il:|will| il:|descend| il:|into| il:|the| il:|daughter| il:|groups.|          il:i\f il:groupid il:|is| il:|nil,| il:|start| il:|at| il:|the| il:|top.|)    nil))(il:\\fm.pushgroup  (il:lambda (il:groupid il:groups il:amount il:dir)         (il:* il:|jow| "12-Apr-86 18:25")                    (il:* il:groups il:|is| il:|freemenu| il:|groups| il:|structure,| il:groupid           il:|is| il:|id| il:|of| il:|group| il:|in| il:groups il:|to| il:|push.|          il:i\f il:groupid il:|is| il:nil\, il:|then| il:|push| il:|top| il:|group.|          il:|Push| il:|each| il:|item| il:|by| il:amount il:|in| il:|the| il:dir           il:|direction.| il:|Update| il:|the| il:|groups| il:|region.|          il:|Currently| il:|this| il:|function| il:|only| il:|knows| il:|about|           il:|pushing| il:up il:|and| il:right\,)    (or il:groupid (il:setq il:groupid (il:\\fm.dtopgroupid il:groups)))    (il:|for| il:item il:|in| (il:\\fm.dgroupprop il:groups il:groupid 'il:items)           il:|do|           (il:selectq il:dir                 (il:up (il:|add| (il:|fetch| (il:region il:bottom)                                         il:|of|                                         (il:\\fm.itemprop il:item 'il:region))                               il:amount)                        (il:|replace| (il:region il:bottom)                               il:|of|                               (il:\\fm.itemprop il:item 'il:maxregion)                               il:|with|                               (il:|fetch| (il:region il:bottom)                                      il:|of|                                      (il:\\fm.itemprop il:item 'il:region))))                 (il:right (il:|add| (il:|fetch| (il:region il:left)                                            il:|of|                                            (il:\\fm.itemprop il:item 'il:region))                                  il:amount)                           (il:|replace| (il:region il:left)                                  il:|of|                                  (il:\\fm.itemprop il:item 'il:maxregion)                                  il:|with|                                  (il:|fetch| (il:region il:left)                                         il:|of|                                         (il:\\fm.itemprop il:item 'il:region))))                 nil))    (il:selectq il:dir          (il:up (il:|add| (il:|fetch| (il:region il:bottom)                                  il:|of|                                  (il:\\fm.dgroupprop il:groups il:groupid 'il:region))                        il:amount))          (il:right (il:|add| (il:|fetch| (il:region il:left)                                     il:|of|                                     (il:\\fm.dgroupprop il:groups il:groupid 'il:region))                           il:amount))          nil)))(il:\\fm.checkdescription  (il:lambda (il:id)                                         (il:* il:|jow| "21-May-86 16:14")                    (il:* il:|check| il:|the| il:|item| il:|description| il:|for| il:|errors.|          il:|This| il:|is| il:|done| il:|before| il:|creating| il:|the| il:|item.|          il:|The| il:|general| il:|errors| il:|are| il:|checked| il:|first,| il:|and|           il:|then| il:|the| il:|type| il:|specific| il:|errors| il:|are| il:|checked.|          il:also\, il:|if| il:|the| il:|item| il:|is| il:|boxed,| il:|fill| il:|out|           il:|the| il:|description| il:|with| il:|all| il:|of| il:|the| il:|boxing|           il:|info.|)    (let ((il:label (il:listget il:id 'il:label))          (type (or (il:listget il:id 'type)                    'il:momentary)))                         (il:*                                                              il:------------------------------                                                             type il:field)         (il:|if| (not (il:fmemb type il:\\fm.item-types))                il:|then|                (il:error "Invalid TYPE:" il:id))            (il:*                                                              il:------------------------------                                                             il:label il:field)         (il:|if| (not (or (and il:label (il:atom il:label))                           (il:stringp il:label)                           (il:bitmapp il:label)))                il:|then|                (il:error "Invalid LABEL.  Atom, string, or bitmap expected:" il:id))                                                             (il:*                                                              il:------------------------------                                                             il:fixp il:fields)         (il:|for| il:prop il:|in| '(il:left il:bottom il:maxwidth il:haxheight il:box il:boxspace)                 il:|do| (il:|if| (and (il:listget il:id il:prop)                                      (not (il:fixp (il:listget il:id il:prop))))                               il:|then|                               (il:error (il:concat "Invalid " il:prop ".  Fixp expected:")                                      il:id)))               (il:*                                                              il:------------------------------                                                             il:justification il:fields)         (il:|if| (and (il:listget il:id 'il:hjustify)                       (not (il:fmemb (il:listget il:id 'il:hjustify)                                   il:\\fm.hjustify-specs)))                il:|then|                (il:error (il:concat "Invalid HJUSTIFY.  One of " il:\\fm.hjustify-specs " expected:"                                  il:id)))         (il:|if| (and (il:listget il:id 'il:vjustify)                       (not (il:fmemb (il:listget il:id 'il:vjustify)                                   il:\\fm.vjustify-specs)))                il:|then|                (il:error (il:concat "Invalid VJUSTIFY.  One of " il:\\fm.vjustify-specs " expected:"                                  il:id)))                    (il:*                                                              il:------------------------------                                                             il:texture il:fields)         (il:|for| il:prop il:|in| '(il:background il:boxshade) il:|do|                (il:|if| (and (il:listget il:id il:prop)                              (not (il:texturep (il:listget il:id il:prop))))                       il:|then|                       (il:error (il:concat "Invalid " il:prop ".  Shade expected:")                              il:id)))                       (il:*                                                              il:------------------------------                                                             il:highlight il:field)         (il:|if| (and (il:listget il:id 'il:highlight)                       (not (il:atom (il:listget il:id 'il:highlight)))                       (not (il:stringp (il:listget il:id 'il:highlight)))                       (not (il:bitmapp (il:listget il:id 'il:highlight))))                il:|then|                (il:error "Invalid HIGHLIGHT.  Texture or Label expected:" il:id))                                                             (il:*                                                              il:------------------------------                                                             il:function il:fields)         (il:|for| il:prop il:|in| '(il:selectedfn il:downfn il:heldfn il:movedfn) il:|do|                (il:|if| (and (il:listget il:id il:prop)                              (not (il:atom (il:listget il:id il:prop)))                              (not (il:listp (il:listget il:id il:prop))))                       il:|then|                       (il:error (il:concat "Invalid " il:prop ".  Atomic function name expected:")                              il:id)))                       (il:*                                                              il:------------------------------                                                             type il:specific il:checks)         (il:|if| (il:listget il:id 'il:box)                il:|then|                                    (il:* il:|fill| il:|out| il:|box|                                                              il:|info| il:|in| il:|description|)                (or (il:listget il:id 'il:boxshade)                    (il:listput il:id 'il:boxshade il:blackshade))                (il:listput il:id 'il:boxoffset (il:iplus (il:listget il:id 'il:box)                                                       (or (il:listget il:id 'il:boxspace)                                                           il:\\fm.boxspace))))         (il:selectq type               (il:3state (il:|if| (and (il:listget il:id 'il:off)                                        (not (il:atom (il:listget il:id 'il:off)))                                        (not (il:stringp (il:listget il:id 'il:off)))                                        (not (il:bitmapp (il:listget il:id 'il:off))))                                 il:|then|                                 (il:error "Invalid OFF.  Texture or Label expected:" il:id)))               (il:state (il:|if| (and (il:listget il:id 'il:changestate)                                       (not (il:atom (il:listget il:id 'il:changestate))))                                il:|then|                                (il:error                                      "Invalid CHANGESTATE  property.  Atomic function name expected:"                                        il:id))                         (il:|if| (and (il:listget il:id 'il:menuitems)                                       (not (il:listp (il:listget il:id 'il:menuitems))))                                il:|then|                                (il:error "Invalid MENUITEMS property.  List of items expected:"                                        il:id)))               (il:nway (il:|if| (not (il:listget il:id 'il:collection))                               il:|then|                               (il:error "Unspecified COLLECTION for NWAY item:" il:id)))               (il:edit (il:|if| (il:bitmapp il:label)                               il:|then|                               (il:error "Edit item label must be string or atom." il:id)))               nil))))(il:\\fm.checkprops  (il:lambda (il:props)                                      (il:* il:|jow| "30-Mar-86 00:53")    (il:|if| (and (il:listget il:props 'format)                  (not (il:fmemb (il:listget il:props 'format)                              il:\\fm.format-types)))           il:|then|           (il:error "PROPS Error.  Invalid FORMAT:" il:props))    (il:|for| il:prop il:|in| '(il:left il:bottom il:rowspace il:columnspace il:box il:boxspace)            il:|do| (il:|if| (and (il:listget il:props il:prop)                                 (not (il:fixp (il:listget il:props il:prop))))                          il:|then|                          (il:error (il:concat "PROPS Error.  FIXP expected for " il:prop                                            " property:")                                 il:props)))    (il:|for| il:prop il:|in| '(il:boxshade il:background) il:|do|           (il:|if| (and (il:listget il:props il:prop)                         (not (il:texturep (il:listget il:props il:prop))))                  il:|then|                  (il:error (il:concat "PROPS Error.  TEXTURE expected for " il:prop " property:")                         il:props)))))(il:\\fm.createitem  (il:lambda (il:id il:fontdefault il:left il:bottom il:groupid)                                                             (il:* il:|jow| "17-Apr-86 19:28")                    (il:* il:|create| il:|an| il:|item| il:|at| il:|position| il:left il:|and|           il:bottom il:|as| il:|specified| il:|by| il:|the| il:|formatter.|          il:|Add| il:|item| il:|offsets| il:|given| il:|in| il:|the| il:|description|           il:|to| il:|this| il:|position.| il:|Set| il:|the| il:|items| il:|region|           il:|to| il:|the| il:|minimum| il:|of| il:|the| il:|label| il:|size| il:|and|           il:|the| il:|max| il:|size| il:|specified.|)    (il:|add| il:left (or (il:listget il:id 'il:left)                          0))    (il:|add| il:bottom (or (il:listget il:id 'il:bottom)                            0))    (let* ((type (or (il:listget il:id 'type)                     'il:momentary))           (il:label (il:listget il:id 'il:label))           (il:font (or (and (il:listget il:id 'il:font)                             (il:apply* (il:function il:fontcreate)                                    (il:listget il:id 'il:font)))                        il:fontdefault))           (il:regions (il:\\fm.getregions il:id il:left il:bottom il:font))           (il:bitmaps (il:\\fm.getbitmaps il:id il:font (car il:regions)                              (cadr il:regions)))           (il:item (il:|create| il:freemenuitem il:fm.type il:_ type il:fm.label il:_ il:label                            il:fm.id il:_ (il:listget il:id 'il:id)                           il:fm.groupid il:_ il:groupid il:fm.initstate il:_ (il:listget                                                                               il:id                                                                               'il:initstate)                           il:fm.font il:_ il:font il:fm.bitmap il:_ (car il:bitmaps)                           il:fm.highlight il:_ (cadr il:bitmaps)                           il:fm.region il:_ (car il:regions)                           il:fm.maxregion il:_ (caddr il:regions)                           il:fm.message il:_ (il:listget il:id 'il:message)                           il:fm.links il:_ (or (il:listget il:id 'il:links)                                                (list nil))                           il:fm.downfn il:_ (or (il:listget il:id 'il:downfn)                                                 (il:function il:nill))                           il:fm.heldfn il:_ (or (il:listget il:id 'il:heldfn)                                                 (il:function il:nill))                           il:fm.movedfn il:_ (or (il:listget il:id 'il:movedfn)                                                  (il:function il:nill))                           il:fm.selectedfn il:_ (or (il:listget il:id 'il:selectedfn)                                                     (il:function il:nill)))))          (il:\\fm.readuserdata il:item il:id)          (il:apply* (il:pack* "\\FM." type "-SETUP")                 il:item il:regions)                    (il:* il:|pass| il:regions il:|to| il:|setup| il:|fn,| il:|since| il:|might|           il:|need| il:|highlightregion,| il:|etc.|)          il:item)))(il:\\fm.getregions  (il:lambda (il:id il:left il:bottom il:font)               (il:* il:|jow| "19-Apr-86 21:41")                    (il:* il:|Called| il:|by| il:|the| il:|formatter| il:|to| il:|determine|           il:|the| il:|region| il:|an| il:|item| il:|will| il:|occupy.|          il:left il:|and| il:bottom il:|are| il:|the| il:|items| il:|proposed|           il:|position,| il:|determined| il:|by| il:|the| il:|formatter.|          il:i\f il:|the| il:|item| il:|is| il:|boxed,| il:|then| il:|the| il:|region|           il:|is| il:|the| il:|region| il:|of| il:|the| il:|box,| il:|not| il:|the|           il:|label| il:|in| il:|the| il:|box.| il:|Return| il:\a il:|list|           il:|containing| il:|the| il:|item| il:|region,| il:|the| il:|highlight|           il:|region,| il:|and| il:|the| il:|max| il:|region.|)    (let* ((il:width (il:\\fm.itemwidth (il:listget il:id 'il:label)                            il:font))           (il:height (il:\\fm.itemheight (il:listget il:id 'il:label)                             il:font))           (il:hl (il:listget il:id 'il:highlight))           (il:highlight (or (and (il:atom il:hl)                                  (not (il:texturep il:hl))                                  il:hl)                             (il:bitmapp il:hl)                             (il:stringp il:hl)))           (il:highlightwidth (or (and il:highlight (il:\\fm.itemwidth il:highlight il:font))                                  0))           (il:highlightheight (or (and il:highlight (il:\\fm.itemheight il:highlight il:font))                                   0))           (il:maxwidth (or (il:listget il:id 'il:maxwidth)                            (il:imax il:width il:highlightwidth)))           (il:maxheight (or (il:listget il:id 'il:maxheight)                             (il:imax il:height il:highlightheight)))           (il:boxoffset (and (il:listget il:id 'il:boxoffset)                              (il:itimes 2 (il:listget il:id 'il:boxoffset)))))          (il:|if| il:boxoffset il:|then| (il:setq il:width (il:iplus il:boxoffset il:maxwidth))                 (il:setq il:height (il:iplus il:boxoffset il:maxheight))                 (list (il:createregion il:left il:bottom il:width il:height)                       (and il:highlight (il:createregion il:left il:bottom il:width il:height))                       (il:createregion il:left il:bottom il:width il:height))                 il:|else|                 (list (il:createregion il:left il:bottom (il:imin il:width il:maxwidth)                              (il:imin il:height il:maxheight))                       (and il:highlight (il:createregion il:left il:bottom (il:imin                                                                                    il:highlightwidth                                                                                    il:maxwidth)                                                (il:imin il:highlightheight il:maxheight)))                       (il:createregion il:left il:bottom il:maxwidth il:maxheight))))))(il:\\fm.getbitmaps  (il:lambda (il:id il:font il:itemregion il:highlightregion)(il:* il:|jow| "18-Apr-86 14:57")                                                             (il:* il:|Figure| il:|out| il:|the|                                                              il:|items| il:|bitmap| il:|and|                                                              il:|highlighting| il:|requirements.|)    (let ((il:box (or (il:listget il:id 'il:box)                      0))          (il:boxshade (il:listget il:id 'il:boxshade))          (il:highlight (il:listget il:id 'il:highlight))          (il:width (il:|fetch| (il:region il:width)                           il:|of| il:itemregion))          (il:height (il:|fetch| (il:region il:height)                            il:|of| il:itemregion))          il:bitmap il:hlbitmap)         (il:setq il:bitmap (il:\\fm.makebitmap (il:listget il:id 'il:label)                                   il:font il:width il:height il:id))         (cond            ((or (and il:highlight (il:atom il:highlight)                      (not (il:texturep il:highlight)))                 (il:stringp il:highlight)                 (il:bitmapp il:highlight))                  (il:* il:|highlight| il:|label|                                                              il:|specified.|)             (il:setq il:hlbitmap (il:\\fm.makebitmap il:highlight il:font (il:|fetch| (il:region                                                                                        il:width)                                                                                  il:|of|                                                                                   il:highlightregion)                                         (il:|fetch| (il:region il:height)                                                il:|of| il:highlightregion)                                         il:id)))            ((or (il:texturep il:highlight)                 (and (il:listget il:id 'il:box)                      (il:neq il:boxshade il:blackshade)                      (il:setq il:highlight il:boxshade)))                    (il:* il:|highlight| il:|texture| il:|was| il:|specified,| il:|or|           il:|non-black| il:|box| il:|with| il:|default| il:|highlight|          (il:|boxshade|))             (il:setq il:hlbitmap (il:bitmapcopy il:bitmap))             (il:bltshade il:highlight il:hlbitmap il:box il:box (il:idifference il:width                                                                        (il:itimes il:box 2))                    (il:idifference il:height (il:itimes il:box 2))                    'il:paint))            (t                                               (il:* il:|invert.| il:|Start|                                                              il:|with| il:|bitmap,| il:|and|                                                              il:|invert| il:|region| il:|inside|                                                              il:|box.|)               (il:setq il:hlbitmap (il:bitmapcopy il:bitmap))               (il:bitblt il:bitmap il:box il:box il:hlbitmap il:box il:box (il:idifference                                                                             il:width                                                                             (il:itimes il:box 2))                      (il:idifference il:height (il:itimes il:box 2))                      'il:invert)))         (list il:bitmap il:hlbitmap))))(il:\\fm.makebitmap  (il:lambda (il:label il:font il:width il:height il:id)     (il:* il:|jow| "18-Apr-86 14:29")                                                             (il:* il:|use| il:id il:|only|                                                              il:|for| il:|boxing| il:|info.|)    (let ((il:box (il:listget il:id 'il:box))          (il:boxoffset (or (il:listget il:id 'il:boxoffset)                            0))          (il:bitmap (il:bitmapcreate il:width il:height))          il:clippingregion)         (il:setq il:clippingregion (il:createregion il:boxoffset il:boxoffset                                           (il:idifference il:width (il:itimes il:boxoffset 2))                                           (il:idifference il:height (il:itimes il:boxoffset 2))))         (il:|if| il:box il:|then|                           (il:* il:|check| il:|for| il:|boxed|                                                              il:|item|)                (il:bltshade (il:listget il:id 'il:boxshade)                       il:bitmap)                            (il:* il:|do| il:|box| il:|and|                                                              il:|background|)                (il:bltshade il:whiteshade il:bitmap il:box il:box (il:idifference il:width                                                                          (il:itimes il:box 2))                       (il:idifference il:height (il:itimes il:box 2)))                                                             (il:* il:|copy| il:|box| il:|into|                                                              il:hlbitmap)                )         (il:|if| (il:bitmapp il:label)                il:|then|                (il:bitblt il:label 0 0 il:bitmap il:boxoffset il:boxoffset nil nil nil nil nil                        il:clippingregion)                il:|else|                (let ((stream (il:dspcreate il:bitmap)))                     (il:dspfont il:font stream)                     (il:dspxposition il:boxoffset stream)                     (il:dspyposition (il:iplus il:boxoffset (il:fontprop il:font 'il:descent))                            stream)                     (il:dspclippingregion il:clippingregion stream)                     (il:prin1 il:label stream)))         il:bitmap)))(il:\\fm.readuserdata  (il:lambda (il:item il:description)                        (il:* il:|jow| "15-Apr-86 16:58")                    (il:* il:|scans| il:description il:|for| il:|user| il:|props.|          il:|Add| il:|any| il:|prop/value| il:|pairs| il:|found| il:|to| il:|ITEM's|           il:|userdata| il:|list.|)    (il:|for| il:x il:|on| il:description il:|by| (cddr il:x)           il:|do|           (il:|if| (not (il:fmemb (car il:x)                                il:\\fm.description-props))                  il:|then|                  (il:listput (il:\\fm.itemprop il:item 'il:userdata)                         (car il:x)                         (cadr il:x))))))(il:\\fm.makelinks  (il:lambda (il:window)                                     (il:* il:|jow| "12-Apr-86 19:07")                    (il:* il:|go| il:|through| il:|items| il:|and| il:|replace| il:|link|           il:|requests| il:|with| il:|actual| il:|pointers|)    (il:|for| il:item il:|in| (il:windowprop il:window 'il:fm.items)           il:|do|           (il:|for| il:linktail il:itemptr il:|on| (cdr (il:\\fm.itemprop il:item 'il:links))                  il:|by|                  (cddr il:linktail)                  il:|do|                  (il:setq il:itemptr (car il:linktail))                  (rplaca il:linktail (il:\\fm.coerceitemptr il:itemptr il:window il:item))))))(il:\\fm.collectnways  (il:lambda (il:window)                                     (il:* il:|jow| "17-Apr-86 15:28")                    (il:* il:|go| il:|through| il:|items| il:|in| il:|menu,| il:|building| il:nways           il:|structure.| il:|Select| il:|the| il:|first| il:|item| il:|in| il:|each|           il:|collection.| il:nways il:|structure| il:|is| il:|list| il:|of|           il:|collection| il:|proplists,| il:|each| il:|beginning| il:|with| il:|id|           il:|of| il:|collection,| il:|and| il:|containing| il:state il:|of|           il:|collection,| il:|and| il:|other| il:|user| il:|props.|)    (let ((il:nways (list nil))          (il:nwayids (list nil))          il:nwayprops il:itemptr)         (il:|for| il:item il:|in| (il:windowprop il:window 'il:fm.items)                il:|do|                (il:|if| (and (eq (il:\\fm.itemprop il:item 'type)                                  'il:nway)                              (not (il:fmemb (il:\\fm.itemprop il:item 'il:collection)                                          (car il:nwayids))))                       il:|then|                             (il:* il:|this| il:|is| il:|the|                                                              il:|first| il:|nway| il:|of| il:|this|                                                              il:|collection|)                       (il:tconc il:nwayids (il:\\fm.itemprop il:item 'il:collection))                                                             (il:* il:|setup| il:nwayprops il:|and|                                                              il:state)                       (il:|if| (il:\\fm.itemprop il:item 'il:nwayprops)                              il:|then|                              (il:setq il:nwayprops (il:\\fm.itemprop il:item 'il:nwayprops))                              (il:listput il:nwayprops 'il:state il:item)                              il:|else|                              (il:setq il:nwayprops (list 'il:state il:item)))                                                             (il:* il:|setup| il:initstate)                       (il:|if| (il:listget il:nwayprops 'il:initstate)                              il:|then|                      (il:* il:|make| il:|link| il:|to|                                                              il:|specified| il:initstate il:|item|)                              (il:setq il:itemptr (il:listget il:nwayprops 'il:initstate))                              (il:listput il:nwayprops 'il:initstate (il:\\fm.coerceitemptr                                                                             il:itemptr il:window                                                                             il:item))                              il:|else|                      (il:* il:make il:this il:item the                                                              il:initstate)                              (il:listput il:nwayprops 'il:initstate il:item))                       (il:tconc il:nways (il:\\fm.makegroup (cadr il:nwayids)                                                 il:nwayprops))                                                             (il:* il:|this| il:|is| il:|the|                                                              il:|selected| il:|item|)                       (il:\\fm.toggle-changestate il:item t)))         (il:windowprop il:window 'il:fm.nways (car il:nways)))))(il:\\fm.setattachpoint  (il:lambda (il:items il:width il:height)                   (il:* il:|jow| "12-Apr-86 18:02")                    (il:* il:|figure| il:|out| il:|each| il:|items| il:|attach| il:|point|           il:|based| il:|on| il:|its| il:|position| il:|in| il:|extent|)    (il:|for| il:item il:|in| il:items il:|do| (il:\\fm.itemprop il:item 'il:attachpoint                                                      (il:\\fm.attachpoint il:item il:width il:height                                                             )))))(il:\\fm.createw  (il:lambda (il:groups il:title il:background il:border)    (il:* il:|jow| "24-Apr-86 21:24")                    (il:* il:|Create| il:\a il:|freemenu| il:|window.|          il:|Then| il:|setup| il:|the| il:|window| il:|with| il:|the| il:|necessary|           il:|freemenu| il:|properties.|)    (let* ((il:region (il:copy (il:listget (cdar il:groups)                                      'il:region)))           (il:window (il:createw (il:createregion (il:|fetch| (il:region il:left)                                                          il:|of| il:region)                                         (il:|fetch| (il:region il:bottom)                                                il:|of| il:region)                                         (il:widthifwindow (il:|fetch| (il:region il:width)                                                                  il:|of| il:region)                                                il:border)                                         (il:heightifwindow (il:|fetch| (il:region il:height)                                                                   il:|of| il:region)                                                il:title il:border))                             il:title il:border t)))          (il:windowprop il:window 'il:windowentryfn 'il:\\fm.windowentryfn)          (il:windowprop il:window 'il:buttoneventfn 'il:\\fm.buttoneventfn)          (il:windowprop il:window 'il:rightbuttonfn 'il:\\fm.rightbuttonfn)          (il:windowprop il:window 'il:repaintfn 'il:\\fm.redisplaymenu)          (il:windowprop il:window 'il:reshapefn 'il:\\fm.reshapefn)          (il:windowprop il:window 'il:initcornersfn 'il:\\fm.initcornersfn)          (il:windowprop il:window 'il:openfn 'il:fm.redisplaymenu)          (il:windowprop il:window 'il:closefn 'il:\\fm.endedit)          (il:windowprop il:window 'il:shrinkfn 'il:\\fm.endedit)          (il:windowprop il:window 'il:scrollfn 'il:scrollbyrepaintfn)          (il:windowprop il:window 'il:scrollextentuse '(il:limit . il:limit))          (il:windowprop il:window 'il:extent il:region)          (il:windowprop il:window 'il:fm.minwidth (il:|fetch| (il:region il:width)                                                          il:|of| il:region))          (il:windowprop il:window 'il:fm.minheight (il:|fetch| (il:region il:height)                                                           il:|of| il:region))          (il:windowprop il:window 'il:fm.busy nil)          (il:windowprop il:window 'il:fm.background il:background)          (il:windowprop il:window 'il:fm.groups il:groups)          (il:windowprop il:window 'il:fm.items (il:listget (cdar il:groups)                                                       'il:items))          il:window)))(il:\\fm.startedit  (il:lambda (il:item il:window il:clearflg)                 (il:* il:|jow| "17-Oct-86 18:35")    (il:resetlst (il:resetsave nil (list 'il:windowprop il:window 'il:fm.busy nil))           (il:windowprop il:window 'il:fm.busy t)           (il:\\fm.edit-item il:item il:window il:clearflg t (il:|if| (eq (il:\\fm.itemprop                                                                            il:item                                                                            'type)                                                                           'il:number)                                                                     il:|then|                                                                     (il:function                                                                       il:\\fm.number-changestate)))))))(il:declare\: il:dontcopy (il:declare\: il:eval@compile (il:putprops il:\\fm.setupprops il:macro ((il:description il:changeprops)                                          (il:|if| (eq il:\\fm.propspec (caar il:description))                                                 il:|then|                                                 (il:setq il:props (cdar il:description))                                                 (il:rplnode2 il:description (cdr il:description))                                                 (il:* il:|yank| il:|props| il:|out| il:|of| il:|row|                                                       )                                                 (il:\\fm.checkprops il:props)                                                 (il:\\fm.setformatprops il:changeprops)                                                 il:|else|                                                 (il:setq il:props (list 'il:items nil))                                                 (il:setq il:id (il:gensym "FM.GROUP-")))                                          (il:listput il:props 'il:mother il:mother)))(il:putprops il:\\fm.setformatprops il:macro       ((il:changeprops)        (il:|for| il:prop il:|in| il:changeprops il:|do|               (il:selectq il:prop (format (and (il:listget il:props 'format)                                                (il:setq format (il:listget il:props 'format))))                      (il:font (and (il:listget il:props 'il:font)                                    (il:setq il:font (il:apply* (il:function il:fontcreate)                                                            (il:listget il:props 'il:font)))))                      (il:left (il:|add| il:left (or (il:listget il:props 'il:left)                                                     0)))                      (il:bottom (il:|add| il:bottom (or (il:listget il:props 'il:bottom)                                                         0)))                      (il:rowspace (and (il:listget il:props 'il:rowspace)                                        (il:setq il:rowspace (il:listget il:props 'il:rowspace))))                      (il:columnspace (and (il:listget il:props 'il:columnspace)                                           (il:setq il:columnspace (il:listget il:props '                                                                          il:columnspace))))                      (il:id (il:setq il:id (or (il:listget il:props 'il:id)                                                (il:gensym "FM.GROUP-"))))                      nil))))(il:putprops il:\\fm.checkforbox il:macro (nil (il:|if| (il:listget il:props 'il:box)                                                      il:|then|                                                      (il:* il:|offset| il:|group| il:|to| il:|allow|                                                             il:|for| il:|box.|)                                                      (or (il:listget il:props 'il:boxshade)                                                          (il:listput il:props 'il:boxshade                                                                  il:blackshade))                                                      (or (il:listget il:props 'il:boxspace)                                                          (il:listput il:props 'il:boxspace                                                                  il:\\fm.boxspace))                                                      (il:setq il:oldcorner (cons il:left il:bottom))                                                      (il:setq il:boxoffset                                                             (il:iplus (il:listget il:props                                                                              'il:box)                                                                    (il:listget il:props 'il:boxspace                                                                           )))                                                      (il:|add| il:left il:boxoffset)                                                      (il:|add| il:bottom il:boxoffset))))(il:putprops il:\\fm.updateforbox il:macro (nil (il:|if| il:boxoffset il:|then| (il:* il:|group|                                                                                       il:|is|                                                                                       il:|boxed:|                                                                                       il:|readjust|                                                                                       il:|group|                                                                                       il:|region|)                                                       (il:|replace| (il:region il:left)                                                              il:|of| il:extent il:|with|                                                              (car il:oldcorner))                                                       (il:|replace| (il:region il:bottom)                                                              il:|of| il:extent il:|with|                                                              (cdr il:oldcorner))                                                       (il:|add| (il:|fetch| (il:region il:width)                                                                        il:|of| il:extent)                                                              (il:itimes il:boxoffset 2))                                                       (il:|add| (il:|fetch| (il:region il:height)                                                                        il:|of| il:extent)                                                              (il:itimes il:boxoffset 2)))))(il:putprops il:\\fm.updategrid il:macro       ((il:num il:left)        (il:|if| (il:igreaterp il:num il:gridlen)               il:|then|               (il:* il:|add| il:|this| il:|col| il:|to| il:|grid|)               (il:tconc il:grid il:left)               (il:|add| il:gridlen 1)               il:|else|               (il:* il:|this| il:|col| il:|exists.| il:|check| il:|alignment|)               (let ((il:gridtail (il:fnth (car il:grid)                                         il:num)))                    (il:|if| (il:igreaterp il:left (car il:gridtail))                           il:|then|                           (il:* il:|push| il:|grid| il:|column| il:|over|)                           (il:|for| il:tail il:|on| il:gridtail il:|bind| (il:amount                                                                            il:_                                                                            (il:idifference                                                                             il:left                                                                             (car il:gridtail)))                                  il:|do|                                  (il:|add| (car il:tail)                                         il:amount)))))))(il:putprops il:\\fm.itemwidth il:macro ((il:label il:font)                                         (il:|if| (il:bitmapp il:label)                                                il:|then|                                                (il:bitmapwidth il:label)                                                il:|else|                                                (il:stringwidth il:label il:font))))(il:putprops il:\\fm.itemheight il:macro ((il:label il:font)                                          (il:|if| (il:bitmapp il:label)                                                 il:|then|                                                 (il:bitmapheight il:label)                                                 il:|else|                                                 (il:fontprop il:font 'il:height))))(il:putprops il:\\fm.attachpoint il:macro       ((il:item il:width il:height)        (let ((il:maxregion (il:\\fm.itemprop il:item 'il:maxregion)))             (cons (il:fix (il:fplus .5 (il:fquotient (il:itimes (il:|fetch| (il:region il:width)                                                                        il:|of| il:maxregion)                                                             (il:|fetch| (il:region il:left)                                                                    il:|of| il:maxregion))                                               (il:idifference il:width (il:|fetch| (il:region                                                                                            il:width)                                                                               il:|of| il:maxregion))                                               )))                   (il:fix (il:fplus .5 (il:fquotient (il:itimes (il:|fetch| (il:region il:height)                                                                        il:|of| il:maxregion)                                                             (il:|fetch| (il:region il:bottom)                                                                    il:|of| il:maxregion))                                               (il:idifference il:height (il:|fetch| (il:region                                                                                      il:height)                                                                                il:|of| il:maxregion)                                                      ))))))))))(il:declare\: il:dontcopy (il:declare\: il:eval@compile (il:rpaqq il:\\fm.format-types (il:row il:column il:table il:explicit))(il:rpaqq il:\\fm.defaultformat il:row)(il:rpaqq il:\\fm.groupspec il:group)(il:rpaqq il:\\fm.propspec il:props)(il:rpaqq il:\\fm.hjustify-specs (il:left il:center il:right))(il:rpaqq il:\\fm.vjustify-specs (il:top il:middle il:bottom))(il:rpaqq il:\\fm.boxspace 1)(il:rpaqq il:\\fm.rowspace 2)(il:rpaqq il:\\fm.columnspace 10)(il:rpaqq il:\\fm.item-types (il:momentary il:toggle il:3state il:nway il:state il:number il:edit                                     il:editstart il:display))(il:rpaqq il:\\fm.description-props           (type il:label il:left il:bottom il:id il:groupid il:state il:initstate il:font il:bitmap                 il:region il:maxregion il:message il:userdata il:links il:sysdownfn il:sysmovedfn                 il:sysselectedfn il:downfn il:heldfn il:movedfn il:selectedfn))(il:constants (il:\\fm.format-types '(il:row il:column il:table il:explicit))       (il:\\fm.defaultformat 'il:row)       (il:\\fm.groupspec 'il:group)       (il:\\fm.propspec 'il:props)       (il:\\fm.hjustify-specs '(il:left il:center il:right))       (il:\\fm.vjustify-specs '(il:top il:middle il:bottom))       (il:\\fm.boxspace 1)       (il:\\fm.rowspace 2)       (il:\\fm.columnspace 10)       (il:\\fm.item-types '(il:momentary il:toggle il:3state il:nway il:state il:number il:edit                                    il:editstart il:display))       (il:\\fm.description-props '(type il:label il:left il:bottom il:id il:groupid il:state                                          il:initstate il:font il:bitmap il:region il:maxregion                                          il:message il:userdata il:links il:sysdownfn il:sysmovedfn                                          il:sysselectedfn il:downfn il:heldfn il:movedfn                                          il:selectedfn)))))(il:declare\: il:eval@compile(il:datatype il:freemenuitem              (il:fm.type il:fm.label il:fm.id il:fm.groupid il:fm.state il:fm.initstate il:fm.font                     il:fm.bitmap il:fm.highlight il:fm.region il:fm.maxregion il:fm.message                     il:fm.userdata il:fm.links il:fm.sysdownfn il:fm.sysmovedfn il:fm.sysselectedfn                     il:fm.downfn il:fm.heldfn il:fm.movedfn il:fm.selectedfn)             il:fm.userdata il:_ (list nil)             il:fm.sysdownfn il:_ (il:function il:nill)             il:fm.sysmovedfn il:_ (il:function il:nill)             il:fm.sysselectedfn il:_ (il:function il:nill)))(il:/declaredatatype 'il:freemenuitem       '(il:pointer il:pointer il:pointer il:pointer il:pointer il:pointer il:pointer il:pointer                il:pointer il:pointer il:pointer il:pointer il:pointer il:pointer il:pointer                il:pointer il:pointer il:pointer il:pointer il:pointer il:pointer)       '((il:freemenuitem 0 il:pointer)         (il:freemenuitem 2 il:pointer)         (il:freemenuitem 4 il:pointer)         (il:freemenuitem 6 il:pointer)         (il:freemenuitem 8 il:pointer)         (il:freemenuitem 10 il:pointer)         (il:freemenuitem 12 il:pointer)         (il:freemenuitem 14 il:pointer)         (il:freemenuitem 16 il:pointer)         (il:freemenuitem 18 il:pointer)         (il:freemenuitem 20 il:pointer)         (il:freemenuitem 22 il:pointer)         (il:freemenuitem 24 il:pointer)         (il:freemenuitem 26 il:pointer)         (il:freemenuitem 28 il:pointer)         (il:freemenuitem 30 il:pointer)         (il:freemenuitem 32 il:pointer)         (il:freemenuitem 34 il:pointer)         (il:freemenuitem 36 il:pointer)         (il:freemenuitem 38 il:pointer)         (il:freemenuitem 40 il:pointer))       '42)(il:* il:freemenu il:windows)(il:declare\: il:dontcopy (il:declare\: il:eval@compile (il:putprops il:\\fm.transpose il:macro ((il:point il:old il:new)                                         (il:fix (il:fplus .5 (il:fquotient (il:ftimes il:point                                                                                    il:new)                                                                     il:old)))))))(il:defineq(il:\\fm.redisplaymenu  (il:lambda (il:window il:updateregion)                     (il:* il:|jow| "26-Jun-86 14:43")                    (il:* il:right il:now il:this il:is il:dependent il:on the il:alist/proplist           il:structure il:of il:groups.)    (il:|if| (il:openwp il:window)           il:|then|           (let (il:region il:box il:background)                (il:\\fm.resetclippingregion il:window)      (il:* il:|back| il:|to| il:|full|                                                              il:|window|)                (il:\\fm.fillwindow il:window (il:windowprop il:window 'il:fm.background))                (il:|for| il:group il:|in| (il:windowprop il:window 'il:fm.groups)                       il:|do|                               (il:* il:|blast| il:|all| il:|boxes|                                                              il:|and| il:|backgrounds|)                       (il:setq il:group (cdr il:group))                       (il:|if| (il:setq il:box (il:listget il:group 'il:box))                              il:|then|                              (il:setq il:region (il:listget il:group 'il:region))                              (il:bltshade (il:listget il:group 'il:boxshade)                                     il:window nil nil nil nil nil il:region)                              (il:bltshade (il:listget il:group 'il:background)                                     il:window                                     (il:iplus (il:|fetch| (il:region il:left)                                                      il:|of| il:region)                                            il:box)                                     (il:iplus (il:|fetch| (il:region il:bottom)                                                      il:|of| il:region)                                            il:box)                                     (il:idifference (il:|fetch| (il:region il:width)                                                            il:|of| il:region)                                            (il:iplus il:box il:box))                                     (il:idifference (il:|fetch| (il:region il:height)                                                            il:|of| il:region)                                            (il:iplus il:box il:box)))                              il:|elseif|                              (il:setq il:background (il:listget il:group 'il:background))                              il:|then|                              (il:bltshade il:background il:window nil nil nil nil nil                                     (il:listget il:group 'il:region))))                (il:|for| il:item il:|in| (il:windowprop il:window 'il:fm.items)                       il:|do|                       (il:\\fm.displaybitmap il:item (il:\\fm.itemprop il:item 'il:bitmap)                              il:window))))))(il:\\fm.reshapefn  (il:lambda (il:window il:b il:oldregion)                   (il:* il:|jow| "25-Apr-86 11:21")    (il:|if| (not (il:windowprop il:window 'il:fm.dontreshape))           il:|then|           (il:\\fm.endedit il:window t)           (let ((il:oldwidth (il:|fetch| (il:region il:width)                                     il:|of| il:oldregion))                 (il:oldheight (il:|fetch| (il:region il:height)                                      il:|of| il:oldregion))                 (il:newwidth (il:windowprop il:window 'il:width))                 (il:newheight (il:windowprop il:window 'il:height))                 (il:minwidth (il:windowprop il:window 'il:fm.minwidth))                 (il:minheight (il:windowprop il:window 'il:fm.minheight)))                (cond                   ((and (il:igeq il:oldwidth il:minwidth)                         (il:igreaterp il:newwidth il:minwidth))                    (il:\\fm.transposehorz il:window il:oldwidth il:newwidth))                   ((and (il:igreaterp il:oldwidth il:minwidth)                         (il:ileq il:newwidth il:minwidth))  (il:* il:|transpose| il:|to|                                                              il:|minimal| il:|width|)                    (il:\\fm.transposehorz il:window il:oldwidth il:minwidth))                   ((and (il:ilessp il:oldwidth il:minwidth)                         (il:igreaterp il:newwidth il:minwidth))                                                             (il:* il:|transpose| il:|from|                                                              il:|minimal| il:|width|)                    (il:\\fm.transposehorz il:window il:minwidth il:newwidth)))                (cond                   ((and (il:igeq il:oldheight il:minheight)                         (il:igreaterp il:newheight il:minheight))                    (il:\\fm.transposevert il:window il:oldheight il:newheight))                   ((and (il:igreaterp il:oldheight il:minheight)                         (il:ileq il:newheight il:minheight))(il:* il:|transpose| il:|to|                                                              il:|minimal| il:|height|)                    (il:\\fm.transposevert il:window il:oldheight il:minheight))                   ((and (il:ilessp il:oldheight il:minheight)                         (il:igreaterp il:newheight il:minheight))                                                             (il:* il:|transpose| il:|from|                                                              il:|minimal| il:|height|)                    (il:\\fm.transposevert il:window il:minheight il:newheight)))                (il:\\fm.updategroupextent (il:windowprop il:window 'il:fm.groups))                (il:windowprop il:window 'il:extent (il:\\fm.windowextent il:window))                                                             (il:* il:|grab| il:|new| il:|extent|)                ))    (il:\\fm.unscrollwindow il:window)    (il:fm.redisplaymenu il:window)))(il:\\fm.unscrollwindow  (il:lambda (il:window)                                     (il:* il:|jow| "12-Apr-86 15:22")                    (il:* il:|called| il:|after| il:|reshaping| il:window\;          il:|resets| il:xoffset il:|and| il:yoffset il:|to| il:|unscroll| il:|window|           il:|Clipping| il:|region| il:|set| il:|back| il:|to| il:|copy| il:|of|           il:|full| il:window)    (il:dspxoffset (il:iplus (il:windowprop il:window 'il:border)                          (il:|fetch| (il:region il:left)                                 il:|of|                                 (il:windowprop il:window 'il:region)))           il:window)    (il:dspyoffset (il:iplus (il:windowprop il:window 'il:border)                          (il:|fetch| (il:region il:bottom)                                 il:|of|                                 (il:windowprop il:window 'il:region)))           il:window)    (il:\\fm.resetclippingregion il:window)))(il:\\fm.resetclippingregion  (il:lambda (il:window)                                     (il:* il:|jow| "10-Apr-86 21:52")                    (il:* il:|reset| il:|the| il:|clipping| il:|region| il:|of| il:window il:|to|           il:|the| il:|windows| il:|full| il:|expanse.|)    (il:dspclippingregion (il:createregion (il:idifference (il:iplus (il:|fetch| (il:region il:left)                                                                            il:|of|                                                                            (il:windowprop                                                                             il:window                                                                             'il:region))                                                                  (il:windowprop il:window                                                                         'il:border))                                                  (il:dspxoffset nil il:window))                                 (il:idifference (il:iplus (il:|fetch| (il:region il:bottom)                                                                  il:|of|                                                                  (il:windowprop il:window                                                                         'il:region))                                                        (il:windowprop il:window 'il:border))                                        (il:dspyoffset nil il:window))                                 (il:windowprop il:window 'il:width)                                 (il:windowprop il:window 'il:height))           il:window)))(il:\\fm.fillwindow  (il:lambda (il:window il:shade)                            (il:* il:|jow| "11-Apr-86 11:51")                    (il:* il:|fill| il:|entire| il:|window| il:|up| il:|to| il:|border| il:|with|           il:|shade.| il:|Rely| il:|on| il:|clippingregion| il:|being| il:|full|           il:|window| il:|on| il:|entry.| il:|Rely| il:|on| il:|border| il:|space|           il:|is| 2 il:|bits.|)    (let ((il:region (il:dspclippingregion nil il:window)))         (il:resetlst (il:resetsave nil (list 'il:dspclippingregion il:region il:window))                (il:dspclippingregion (il:createregion (il:idifference (il:|fetch| (il:region il:left                                                                                          )                                                                              il:|of| il:region)                                                              2)                                             (il:idifference (il:|fetch| (il:region il:bottom)                                                                    il:|of| il:region)                                                    2)                                             (il:iplus 4 (il:|fetch| (il:region il:width)                                                                il:|of| il:region))                                             (il:iplus 4 (il:|fetch| (il:region il:height)                                                                il:|of| il:region)))                       il:window)                (il:dspfill nil il:shade nil il:window)))))(il:\\fm.initcornersfn  (il:lambda (il:window)                                     (il:* il:|jow| " 3-Apr-86 23:35")                    (il:* il:|called| il:|by| il:shapew il:|to| il:|provide| il:|the| il:|initial|           il:|corners| il:|of| il:|the| il:|reshape| il:|ghost| il:|box,| il:|in|           il:|the| il:|form| (il:\x1 il:\y1 il:\x2 il:\y2)il:\, il:|where| 1 il:|is|           il:|fixed| il:|and| 2 il:|is| il:|tracked.|          il:|respond| il:|with| il:|the| il:|freemenus| il:minimal il:shape il:|leaving|           il:|left,| il:|bottom| il:|as| il:|they| il:|are.|)    (let ((il:left (il:|fetch| (il:region il:left)                          il:|of|                          (il:windowprop il:window 'il:region)))          (il:bottom (il:|fetch| (il:region il:bottom)                            il:|of|                            (il:windowprop il:window 'il:region))))         (list il:left il:bottom (il:iplus il:left (il:widthifwindow (il:windowprop il:window                                                                            'il:fm.minwidth)                                                          (il:windowprop il:window 'il:border)))               (il:iplus il:bottom (il:heightifwindow (il:windowprop il:window 'il:fm.minheight)                                          (il:windowprop il:window 'il:title)                                          (il:windowprop il:window 'il:border)))))))(il:\\fm.transposehorz  (il:lambda (il:window il:oldwidth il:newwidth)             (il:* il:|jow| "12-Apr-86 18:27")                                                             (il:* il:|transpose| il:|left|                                                              il:|point.|)    (il:|for| il:item il:region il:|in| (il:windowprop il:window 'il:fm.items)           il:|do|           (il:setq il:region (il:\\fm.itemprop il:item 'il:region))           (il:|replace| (il:region il:left)                  il:|of| il:region il:|with| (il:\\fm.transpose (il:|fetch| (il:region il:left)                                                                        il:|of| il:region)                                                     il:oldwidth il:newwidth))           (il:|replace| (il:region il:left)                  il:|of|                  (il:\\fm.itemprop il:item 'il:maxregion)                  il:|with|                  (il:|fetch| (il:region il:left)                         il:|of| il:region)))))(il:\\fm.transposevert  (il:lambda (il:window il:oldheight il:newheight)           (il:* il:|jow| "12-Apr-86 18:27")                                                             (il:* il:|transpose| il:|bottom|                                                              il:|point|)    (il:|for| il:item il:region il:|in| (il:windowprop il:window 'il:fm.items)           il:|do|           (il:setq il:region (il:\\fm.itemprop il:item 'il:region))           (il:|replace| (il:region il:bottom)                  il:|of| il:region il:|with| (il:\\fm.transpose (il:|fetch| (il:region il:bottom)                                                                        il:|of| il:region)                                                     il:oldheight il:newheight))           (il:|replace| (il:region il:bottom)                  il:|of|                  (il:\\fm.itemprop il:item 'il:maxregion)                  il:|with|                  (il:|fetch| (il:region il:bottom)                         il:|of| il:region)))))(il:\\fm.updategroupextent  (il:lambda (il:groups il:grouplist)                        (il:* il:|jow| "12-Apr-86 18:28")                    (il:* il:this il:depends il:on the il:alist/proplist il:group il:structure.          il:groups il:|is| il:\a il:|freemenu| il:|group| il:|alist| il:|structure.|          il:grouplist il:|is| il:\a il:|list| il:|of| il:|group| il:|id's| il:|to|           il:|update| il:|the| il:|extent| il:|of.|          il:i\f il:grouplist il:|is| il:nil\, il:|then| il:|update| il:|top| il:|group.|)    (or il:grouplist (il:setq il:grouplist (list (il:\\fm.dtopgroupid il:groups))))    (let (il:group il:region il:daughters il:boxoffset)         (il:|for| il:id il:|in| il:grouplist il:|do| (il:setq il:group (cdr (il:assoc il:id                                                                                     il:groups)))                (il:setq il:region (il:listput il:group 'il:region                                          (il:copyall (il:\\fm.itemprop (car (il:listget il:group                                                                                    'il:items))                                                             'il:maxregion))))                (il:|if| (il:setq il:daughters (il:listget il:group 'il:daughters))                       il:|then|                             (il:* il:|update| il:|subgroups|                                                              il:|first|)                       (il:\\fm.updategroupextent il:groups il:daughters)                       (il:|for| il:subid il:|in| il:daughters il:|do|                              (il:extendregion il:region (il:listget (cdr (il:assoc il:subid                                                                                  il:groups))                                                                'il:region))))                (il:|for| il:item il:|in| (il:listget il:group 'il:items)                       il:|do|                       (il:extendregion il:region (il:\\fm.itemprop il:item 'il:maxregion)))                (il:|if| (il:listget il:group 'il:box)                       il:|then|                       (il:setq il:boxoffset (il:iplus (il:listget il:group 'il:box)                                                    (il:listget il:group 'il:boxspace)))                       (il:|add| (il:|fetch| (il:region il:left)                                        il:|of| il:region)                              (il:minus il:boxoffset))                       (il:|add| (il:|fetch| (il:region il:bottom)                                        il:|of| il:region)                              (il:minus il:boxoffset))                       (il:|add| (il:|fetch| (il:region il:width)                                        il:|of| il:region)                              (il:iplus il:boxoffset il:boxoffset))                       (il:|add| (il:|fetch| (il:region il:height)                                        il:|of| il:region)                              (il:iplus il:boxoffset il:boxoffset)))))))(il:\\fm.windowextent  (il:lambda (il:window)                                     (il:* il:|jow| "24-Apr-86 17:13")                    (il:* il:|start| il:|with| il:|the| il:|top| il:|groups| il:|extent,|           il:|assumed| il:|to| il:|be| il:|correct,| il:|and| il:|then| il:|extent|           il:|to| il:|account| il:|for| il:|any| il:|infinite| il:|width| il:|items.|          il:|return| il:|extended| il:|extent|)    (let ((il:extent (il:copy (il:\\fm.topgroupprop il:window 'il:region)))          il:region)         (il:|for| il:item il:|in| (il:windowprop il:window 'il:fm.items)                il:|when|                (il:\\fm.itemprop il:item 'il:infinitewidth)                il:|do|                (il:setq il:region (il:\\fm.itemprop il:item 'il:region))                (il:|replace| (il:region il:width)                       il:|of| il:region il:|with| (il:\\fm.itemwidth (il:\\fm.itemprop il:item                                                                             'il:label)                                                          (il:\\fm.itemprop il:item 'il:font)))                (il:extendregion il:extent il:region))         il:extent)))(il:\\fm.updatewindowextent  (il:lambda (il:window)                                     (il:* il:|jow| "25-Apr-86 11:38")                    (il:* il:currently il:never il:called\, il:because il:problems il:with           il:recalculating il:minwidth\, il:minheight\, il:because il:this il:algorithm           il:just il:keeps il:on il:adding.)                    (il:* il:|update| il:|the| il:|window's| il:|extent| il:|to| il:|the|           il:|menu's| il:|region.| il:i\f il:|the| il:|extent| il:|is| il:|not|           il:|entirely| il:|visible,| il:|then| il:|menu| il:|has| il:|grown.|          il:|Update| min il:|dimensions| il:|of| il:|menu| il:|to| il:|allow|           il:|getting| il:|the| il:|entire| il:|menu| il:|visible| il:|again.|)    (il:windowprop il:window 'il:extent (il:\\fm.windowextent il:window))    (let ((il:extent (il:windowprop il:window 'il:extent)))         (il:|if| (il:igreaterp (il:|fetch| (il:region il:width)                                       il:|of| il:extent)                         (il:windowprop il:window 'il:width))                il:|then|                (il:windowprop il:window 'il:fm.minwidth (il:iplus (il:windowprop il:window                                                                          'il:fm.minwidth)                                                                (il:idifference (il:|fetch|                                                                                 (il:region il:width)                                                                                 il:|of| il:extent)                                                                       (il:windowprop il:window                                                                              'il:width)))))         (il:|if| (il:igreaterp (il:|fetch| (il:region il:height)                                       il:|of| il:extent)                         (il:windowprop il:window 'il:height))                il:|then|                (il:windowprop il:window 'il:fm.minheight (il:iplus (il:windowprop il:window                                                                           'il:fm.minheight)                                                                 (il:idifference (il:|fetch|                                                                                  (il:region                                                                                          il:height)                                                                                  il:|of| il:extent)                                                                        (il:windowprop il:window                                                                               'il:height)))))))))(il:* il:mouse il:functions)(il:declare\: il:dontcopy (il:declare\: il:eval@compile (il:putprops il:\\fm.onitem il:macro ((il:region il:x il:y il:infinitwidth)                                      (and (il:igeq il:y (il:|fetch| (il:region il:bottom)                                                                il:|of| il:region))                                           (il:igeq il:x (il:|fetch| (il:region il:left)                                                                il:|of| il:region))                                           (or il:infinitwidth (il:ilessp il:x                                                                      (il:iplus (il:|fetch|                                                                                 (il:region il:left)                                                                                 il:|of| il:region)                                                                             (il:|fetch| (il:region                                                                                          il:width)                                                                                    il:|of| il:region                                                                                    ))))                                           (il:ilessp il:y (il:iplus (il:|fetch| (il:region il:bottom                                                                                        )                                                                            il:|of| il:region)                                                                  (il:|fetch| (il:region il:height)                                                                         il:|of| il:region))))))(il:putprops il:\\fm.checkregion il:macro ((il:window il:x il:y)                                           (il:|for| (il:item il:region)                                                  il:|in|                                                  (il:windowprop il:window 'il:fm.items)                                                  il:|eachtime|                                                  (il:setq il:region (il:\\fm.itemprop il:item                                                                            'il:region))                                                  il:|thereis|                                                  (il:\\fm.onitem il:region il:x il:y                                                         (il:\\fm.itemprop il:item 'il:infinitewidth)                                                         ))))))(il:defineq(il:\\fm.windowentryfn  (il:lambda (il:window)                                     (il:* il:|jow| "20-Oct-86 10:51")                                                  (il:* il:|;;;|            "THIS SHOULD NEVER GET CALLED NOW, BECAUSE FREEMENU DUMPS THE EDIT WHEN IT LOSES THE TTY.")                    (il:* il:|called| il:|when| il:|buttonevent| il:|occurs| il:|while|           il:|editing| il:|with| il:|the| il:|tty| il:|process| il:|somewhere| il:|else.|          il:|should| il:|give| il:|the| il:|tty| il:|back| il:|to| il:|freemenu|           il:|unless| il:|the| il:|event| il:|is| il:|right| il:|only| il:|and| il:|not|           il:|on| il:|an| il:|item.| il:|in| il:|that| il:|case,| il:|just| il:|do|           il:|the| il:|window| il:|command| il:|menu.|          il:|don't| il:|worry| il:|here| il:|about| il:|calling| il:|buttoneventfn's,|           il:|because| il:|once| il:|freemenu| il:|gets| il:|the| il:|tty| il:|back,|           il:|the| il:|edit| il:|button| il:|handler| il:|will| il:|notice| il:|the|           il:|event| il:|and| il:|act| il:|properly.|)    (il:|if| (and (il:lastmousestate (il:only il:right))                  (not (and (il:insidep (il:dspclippingregion nil il:window)                                   (il:lastmousex il:window)                                   (il:lastmousey il:window))                            (il:\\fm.checkregion il:window (il:lastmousex il:window)                                   (il:lastmousey il:window)))))           il:|then|           (il:dowindowcom il:window)           il:|else|           (il:tty.process (il:windowprop il:window 'il:process)))))(il:\\fm.buttoneventfn  (il:lambda (il:window)                                     (il:* il:|jow| "13-Nov-85 22:08")    (il:totopw il:window)    (il:|if| (and (not (il:windowprop il:window 'il:fm.busy))                  (il:lastmousestate (not il:up)))           il:|then|                    (il:* il:|ignore| il:|button| il:|up| il:|events| il:|and| il:|events|           il:|when| il:|menu| il:|is| il:|busy|)           (il:\\fm.menuhandler il:window))))(il:\\fm.rightbuttonfn  (il:lambda (il:window)                                     (il:* il:|jow| "10-Apr-86 22:38")                    (il:* il:|if| il:|on| il:|an| il:|item,| il:|and| il:|not| il:|busy,| il:|then|           il:|process| il:|the| il:|item| il:|selection,| il:|else| il:|do| il:|the|           il:|window| il:|command| il:|menu.|)    (il:totopw il:window)    (il:|if| (and (il:insidep (il:dspclippingregion nil il:window)                         (il:lastmousex il:window)                         (il:lastmousey il:window))                  (il:\\fm.checkregion il:window (il:lastmousex il:window)                         (il:lastmousey il:window)))           il:|then|                                         (il:* il:|valid| il:|item|                                                              il:|selected|)           (il:|if| (not (il:windowprop il:window 'il:fm.busy))                  il:|then|                  (il:\\fm.menuhandler il:window))           il:|else|                                         (il:* il:|not| il:|on| il:|item|)           (il:dowindowcom il:window))))(il:\\fm.doselection  (il:lambda (il:item il:window il:buttons)                  (il:* il:|jow| "17-Oct-86 17:06")                                                  (il:* il:|;;;|                                     "run the selectedfns for this ITEM.  set busy flag accordingly. ")    (il:resetlst (il:resetsave nil (list 'il:windowprop il:window 'il:fm.busy nil))           (il:windowprop il:window 'il:fm.busy t)           (il:apply* (il:\\fm.itemprop il:item 'il:sysselectedfn)                  il:item il:window il:buttons)           (il:block)           (il:apply* (il:\\fm.itemprop il:item 'il:selectedfn)                  il:item il:window il:buttons)   (il:* il:|;;|                                         "return NIL so that result of process can't point to itself.")           nil)))(il:\\fm.menuhandler  (il:lambda (il:window il:sameprocess)                      (il:* il:|jow| "20-Oct-86 10:48")    (il:|repeatuntil| (il:mousestate il:up)           il:|bind|           (il:timer il:_ (il:setuptimer 0))           il:item il:lastitem il:buttons il:promptflg il:|do| (il:setq il:buttons (il:decodebuttons)                                                                )           (il:setq il:lastitem il:item)           (il:setq il:item (il:\\fm.checkregion il:window (il:lastmousex il:window)                                   (il:lastmousey il:window)))           (il:|if| il:item il:|then| (cond                                         ((not il:lastitem)  (il:* il:|moved| il:|on| il:|new|                                                              il:|item|)                                          (il:apply* (il:\\fm.itemprop il:item 'il:sysdownfn)                                                 il:item il:window il:buttons)                                          (il:apply* (il:\\fm.itemprop il:item 'il:downfn)                                                 il:item il:window il:buttons)                                          (il:setuptimer il:menuheldwait il:timer)                                          (il:setq il:promptflg t))                                         ((il:neq il:lastitem il:item)                    (il:* il:|jump| il:|between| il:|items| il:|without| il:|dead| il:|interval.|          il:|call| il:|last| il:|mouseoff,| il:|and| il:|new| il:|mousedown|)                                          (il:apply* (il:\\fm.itemprop il:lastitem 'il:sysmovedfn)                                                 il:lastitem il:window il:buttons)                                          (il:apply* (il:\\fm.itemprop il:lastitem 'il:movedfn)                                                 il:lastitem il:window il:buttons)                                          (il:apply* (il:\\fm.itemprop il:item 'il:sysdownfn)                                                 il:item il:window il:buttons)                                          (il:apply* (il:\\fm.itemprop il:item 'il:downfn)                                                 il:item il:window il:buttons)                                          (il:setuptimer il:menuheldwait il:timer)                                          (il:setq il:promptflg t))                                         ((and il:promptflg (il:timerexpired? il:timer))                                                             (il:* il:|held| il:|on| il:|item|                                                              il:|long| il:|enough|)                                          (il:printout (or (il:windowprop il:window '                                                                  il:fm.promptwindow)                                                           il:promptwindow)                                                 t                                                 (il:|if| (il:stringp (il:\\fm.itemprop il:item                                                                             'il:message))                                                        il:|then|                                                        (il:\\fm.itemprop il:item 'il:message)                                                        il:|else|                                                        (il:apply* (il:\\fm.itemprop il:item                                                                          'il:message)                                                               il:item il:window il:buttons)))                                          (il:setq il:promptflg nil)))                  (il:apply* (il:\\fm.itemprop il:item 'il:heldfn)                         il:item il:window il:buttons)                  il:|elseif| il:lastitem il:|then|          (il:* il:|moved| il:|off| il:|item|)                  (il:apply* (il:\\fm.itemprop il:lastitem 'il:sysmovedfn)                         il:lastitem il:window il:buttons)                  (il:apply* (il:\\fm.itemprop il:lastitem 'il:movedfn)                         il:lastitem il:window il:buttons))           il:|finally|           (il:setq il:lastitem il:item)           (il:setq il:item (il:\\fm.checkregion il:window (il:lastmousex il:window)                                   (il:lastmousey il:window)))           (il:|if| il:lastitem il:|then|                  (cond                     ((il:neq il:lastitem il:item)           (il:* il:|moved| il:|off| il:|item|)                      (il:apply* (il:\\fm.itemprop il:lastitem 'il:sysmovedfn)                             il:lastitem il:window il:buttons)                      (il:apply* (il:\\fm.itemprop il:lastitem 'il:movedfn)                             il:lastitem il:window il:buttons))                     (il:item (il:|if| il:sameprocess il:|then| (il:\\fm.doselection il:item                                                                        il:window il:buttons)                                     il:|else|                                     (il:add.process `(il:\\fm.doselection ',il:item                                                             ',il:window                                                             ',il:buttons) 'il:name 'il:freemenu                                            'il:freemenu.process t)))))))))(il:* il:item il:support il:functions)(il:declare\: il:dontcopy (il:declare\: il:eval@compile (il:putprops il:\\fm.displaybitmap il:macro ((il:item il:bitmap il:window)                                             (il:* il:|take| il:|care| il:|of| il:|background|                                                    il:|shade| il:|and| il:|display| il:|the|                                                    il:|item|)                                             (il:if (il:openwp il:window)                                                    il:then                                                    (il:bltshade (il:\\fm.itemprop il:item                                                                        'il:background)                                                           il:window nil nil nil nil nil                                                           (il:\\fm.itemprop il:item 'il:maxregion))                                                    (il:bitblt il:bitmap 0 0 il:window                                                           (il:|fetch| (il:region il:left)                                                                  il:|of|                                                                  (il:\\fm.itemprop il:item                                                                         'il:region))                                                           (il:|fetch| (il:region il:bottom)                                                                  il:|of|                                                                  (il:\\fm.itemprop il:item                                                                         'il:region))                                                           nil nil nil 'il:paint))))(il:putprops il:\\fm.coerceitemptr il:macro ((il:itemptr il:window il:item)                                             (let (il:groupid il:itemid)                                                  (il:|if| (il:listp il:itemptr)                                                         il:|then|                                                         (il:* il:|pull| il:|apart|)                                                         (il:setq il:groupid (car il:itemptr))                                                         (il:setq il:itemid (cadr il:itemptr)))                                                  (il:|if| (eq il:\\fm.groupspec il:groupid)                                                         il:|then|                                                         (il:* il:does not type il:check il:item.                                                                il:if il:used il:item il:must il:be                                                                il:a il:freemenuitem.)                                                         (il:setq il:groupid (il:\\fm.itemprop                                                                              il:item                                                                              'il:groupid)))                                                  (or (il:fm.getitem (or il:itemid il:itemptr)                                                             il:groupid il:window)                                                      (il:error "Could not find item:" il:itemptr))))       )))(il:defineq(il:\\fm.getitemprop  (il:lambda (il:item il:prop)                               (il:* il:|jow| "11-Apr-86 11:40")                                                             (il:* il:background (il:|fetch|                                                             (il:freemenuitem il:fm.background)                                                              il:|of| il:item))                                                             (il:* il:attachpoint                                                             (il:|fetch| (il:freemenuitem                                                              il:fm.attachpoint) il:|of| il:item))    (il:selectq il:prop          (type (il:|fetch| (il:freemenuitem il:fm.type)                       il:|of| il:item))          (il:label (il:|fetch| (il:freemenuitem il:fm.label)                           il:|of| il:item))          (il:id (il:|fetch| (il:freemenuitem il:fm.id)                        il:|of| il:item))          (il:groupid (il:|fetch| (il:freemenuitem il:fm.groupid)                             il:|of| il:item))          (il:state (il:|fetch| (il:freemenuitem il:fm.state)                           il:|of| il:item))          (il:initstate (il:|fetch| (il:freemenuitem il:fm.initstate)                               il:|of| il:item))          (il:font (il:|fetch| (il:freemenuitem il:fm.font)                          il:|of| il:item))          (il:bitmap (il:|fetch| (il:freemenuitem il:fm.bitmap)                            il:|of| il:item))          (il:highlight (il:|fetch| (il:freemenuitem il:fm.highlight)                               il:|of| il:item))          (il:region (il:|fetch| (il:freemenuitem il:fm.region)                            il:|of| il:item))          (il:maxregion (il:|fetch| (il:freemenuitem il:fm.maxregion)                               il:|of| il:item))          (il:message (il:|fetch| (il:freemenuitem il:fm.message)                             il:|of| il:item))          (il:userdata (il:|fetch| (il:freemenuitem il:fm.userdata)                              il:|of| il:item))          (il:links (il:|fetch| (il:freemenuitem il:fm.links)                           il:|of| il:item))          (il:sysdownfn (il:|fetch| (il:freemenuitem il:fm.sysdownfn)                               il:|of| il:item))          (il:sysmovedfn (il:|fetch| (il:freemenuitem il:fm.sysmovedfn)                                il:|of| il:item))          (il:sysselectedfn (il:|fetch| (il:freemenuitem il:fm.sysselectedfn)                                   il:|of| il:item))          (il:downfn (il:|fetch| (il:freemenuitem il:fm.downfn)                            il:|of| il:item))          (il:heldfn (il:|fetch| (il:freemenuitem il:fm.heldfn)                            il:|of| il:item))          (il:movedfn (il:|fetch| (il:freemenuitem il:fm.movedfn)                             il:|of| il:item))          (il:selectedfn (il:|fetch| (il:freemenuitem il:fm.selectedfn)                                il:|of| il:item))          (il:listget (il:|fetch| (il:freemenuitem il:fm.userdata)                             il:|of| il:item)                 il:prop))))(il:\\fm.putitemprop  (il:lambda (il:item il:prop il:value)                      (il:* il:|jow| "11-Apr-86 11:41")                                                             (il:* il:|store| il:|new| il:|value|                                                              il:|in| il:|item| il:|field|)                                                             (il:* il:background (prog1                                                             (il:|fetch| (il:freemenuitem                                                              il:fm.background) il:|of| il:item)                                                             (il:|replace| (il:freemenuitem                                                              il:fm.background) il:|of| il:item                                                              il:|with| il:value)))                                                             (il:* il:attachpoint                                                             (prog1 (il:|fetch| (il:freemenuitem                                                              il:fm.attachpoint) il:|of| il:item)                                                             (il:|replace| (il:freemenuitem                                                              il:fm.attachpoint) il:|of| il:item                                                              il:|with| il:value)))    (il:selectq il:prop          (type (il:error "Can't change the TYPE of an item" il:value))          (il:label (prog1 (il:|fetch| (il:freemenuitem il:fm.label)                                  il:|of| il:item)                           (il:|replace| (il:freemenuitem il:fm.label)                                  il:|of| il:item il:|with| il:value)))          (il:id (prog1 (il:|fetch| (il:freemenuitem il:fm.id)                               il:|of| il:item)                        (il:|replace| (il:freemenuitem il:fm.id)                               il:|of| il:item il:|with| il:value)))          (il:groupid (il:|fetch| (il:freemenuitem il:fm.groupid)                             il:|of| il:item)                      (il:|replace| (il:freemenuitem il:fm.groupid)                             il:|of| il:item il:|with| il:value))          (il:state (prog1 (il:|fetch| (il:freemenuitem il:fm.state)                                  il:|of| il:item)                           (il:|replace| (il:freemenuitem il:fm.state)                                  il:|of| il:item il:|with| il:value)))          (il:initstate (prog1 (il:|fetch| (il:freemenuitem il:fm.initstate)                                      il:|of| il:item)                               (il:|replace| (il:freemenuitem il:fm.initstate)                                      il:|of| il:item il:|with| il:value)))          (il:font (prog1 (il:|fetch| (il:freemenuitem il:fm.font)                                 il:|of| il:item)                          (il:|replace| (il:freemenuitem il:fm.font)                                 il:|of| il:item il:|with| il:value)))          (il:bitmap (prog1 (il:|fetch| (il:freemenuitem il:fm.bitmap)                                   il:|of| il:item)                            (il:|replace| (il:freemenuitem il:fm.bitmap)                                   il:|of| il:item il:|with| il:value)))          (il:highlight (prog1 (il:|fetch| (il:freemenuitem il:fm.highlight)                                      il:|of| il:item)                               (il:|replace| (il:freemenuitem il:fm.highlight)                                      il:|of| il:item il:|with| il:value)))          (il:region (prog1 (il:|fetch| (il:freemenuitem il:fm.region)                                   il:|of| il:item)                            (il:|replace| (il:freemenuitem il:fm.region)                                   il:|of| il:item il:|with| il:value)))          (il:maxregion (prog1 (il:|fetch| (il:freemenuitem il:fm.maxregion)                                      il:|of| il:item)                               (il:|replace| (il:freemenuitem il:fm.maxregion)                                      il:|of| il:item il:|with| il:value)))          (il:message (prog1 (il:|fetch| (il:freemenuitem il:fm.message)                                    il:|of| il:item)                             (il:|replace| (il:freemenuitem il:fm.message)                                    il:|of| il:item il:|with| il:value)))          (il:userdata (il:error "Can't change the USERDATA of an item" il:value))          (il:links (prog1 (il:|fetch| (il:freemenuitem il:fm.links)                                  il:|of| il:item)                           (il:|replace| (il:freemenuitem il:fm.links)                                  il:|of| il:item il:|with| il:value)))          (il:sysdownfn (prog1 (il:|fetch| (il:freemenuitem il:fm.sysdownfn)                                      il:|of| il:item)                               (il:|replace| (il:freemenuitem il:fm.sysdownfn)                                      il:|of| il:item il:|with| il:value)))          (il:sysmovedfn (prog1 (il:|fetch| (il:freemenuitem il:fm.sysmovedfn)                                       il:|of| il:item)                                (il:|replace| (il:freemenuitem il:fm.sysmovedfn)                                       il:|of| il:item il:|with| il:value)))          (il:sysselectedfn (prog1 (il:|fetch| (il:freemenuitem il:fm.sysselectedfn)                                          il:|of| il:item)                                   (il:|replace| (il:freemenuitem il:fm.sysselectedfn)                                          il:|of| il:item il:|with| il:value)))          (il:downfn (prog1 (il:|fetch| (il:freemenuitem il:fm.downfn)                                   il:|of| il:item)                            (il:|replace| (il:freemenuitem il:fm.downfn)                                   il:|of| il:item il:|with| il:value)))          (il:heldfn (prog1 (il:|fetch| (il:freemenuitem il:fm.heldfn)                                   il:|of| il:item)                            (il:|replace| (il:freemenuitem il:fm.heldfn)                                   il:|of| il:item il:|with| il:value)))          (il:movedfn (prog1 (il:|fetch| (il:freemenuitem il:fm.movedfn)                                    il:|of| il:item)                             (il:|replace| (il:freemenuitem il:fm.movedfn)                                    il:|of| il:item il:|with| il:value)))          (il:selectedfn (prog1 (il:|fetch| (il:freemenuitem il:fm.selectedfn)                                       il:|of| il:item)                                (il:|replace| (il:freemenuitem il:fm.selectedfn)                                       il:|of| il:item il:|with| il:value)))          (prog1 (il:listget (il:|fetch| (il:freemenuitem il:fm.userdata)                                    il:|of| il:item)                        il:prop)                 (il:listput (il:|fetch| (il:freemenuitem il:fm.userdata)                                    il:|of| il:item)                        il:prop il:value)))))(il:\\fm.cgetitemprop  (il:lambda (il:item il:prop)                               (il:* il:|jow| "12-Apr-86 16:13")                    (il:* il:|macro| il:|dispatch| il:|function| il:|for| il:fm.itemprop.          il:item il:|is| il:|bound| il:|to| il:|the| il:|name| il:|of| il:|the|           il:|item| il:|to| il:|be| il:|visited,| il:|and| il:prop il:|is| il:|bound|           il:|to| il:|the| il:|expression| (quote il:<fieldname>)il:\.          il:|This| il:|function| il:|returns| il:|the| il:|appropriate| il:|fetchfield|           il:|expression| il:|to| il:|be| il:|compiled.|          il:if the il:freemenuitem il:record il:is il:changed\,this il:function il:must           il:be il:changed il:accordingly)                                                             (il:* il:background (il:bquote                                                             (il:fetch (il:freemenuitem                                                              il:fm.background) il:of                                                             (il:\\fm.insurefm il:\, il:item))))                                                             (il:* il:attachpoint                                                             (il:bquote (il:fetch                                                             (il:freemenuitem il:fm.attachpoint)                                                              il:of (il:\\fm.insurefm il:\, il:item))))    (il:selectq (cadr il:prop)          (type `(il:fetch (il:freemenuitem il:fm.type)                        il:of il:\, il:item))          (il:label `(il:fetch (il:freemenuitem il:fm.label)                            il:of il:\, il:item))          (il:id `(il:fetch (il:freemenuitem il:fm.id)                         il:of il:\, il:item))          (il:groupid `(il:fetch (il:freemenuitem il:fm.groupid)                              il:of il:\, il:item))          (il:state `(il:fetch (il:freemenuitem il:fm.state)                            il:of il:\, il:item))          (il:initstate `(il:fetch (il:freemenuitem il:fm.initstate)                                il:of il:\, il:item))          (il:font `(il:fetch (il:freemenuitem il:fm.font)                           il:of il:\, il:item))          (il:bitmap `(il:fetch (il:freemenuitem il:fm.bitmap)                             il:of il:\, il:item))          (il:highlight `(il:fetch (il:freemenuitem il:fm.highlight)                                il:of il:\, il:item))          (il:region `(il:fetch (il:freemenuitem il:fm.region)                             il:of il:\, il:item))          (il:maxregion `(il:fetch (il:freemenuitem il:fm.maxregion)                                il:of il:\, il:item))          (il:message `(il:fetch (il:freemenuitem il:fm.message)                              il:of il:\, il:item))          (il:userdata `(il:fetch (il:freemenuitem il:fm.userdata)                               il:of il:\, il:item))          (il:links `(il:fetch (il:freemenuitem il:fm.links)                            il:of il:\, il:item))          (il:sysdownfn `(il:fetch (il:freemenuitem il:fm.sysdownfn)                                il:of il:\, il:item))          (il:sysmovedfn `(il:fetch (il:freemenuitem il:fm.sysmovedfn)                                 il:of il:\, il:item))          (il:sysselectedfn `(il:fetch (il:freemenuitem il:fm.sysselectedfn)                                    il:of il:\, il:item))          (il:downfn `(il:fetch (il:freemenuitem il:fm.downfn)                             il:of il:\, il:item))          (il:heldfn `(il:fetch (il:freemenuitem il:fm.heldfn)                             il:of il:\, il:item))          (il:movedfn `(il:fetch (il:freemenuitem il:fm.movedfn)                              il:of il:\, il:item))          (il:selectedfn `(il:fetch (il:freemenuitem il:fm.selectedfn)                                 il:of il:\, il:item))          `(il:listget (il:fetch (il:freemenuitem il:fm.userdata)                              il:of il:\, il:item)                  (quote il:\, (cadr il:prop))))))(il:\\fm.cputitemprop  (il:lambda (il:item il:prop il:value)                      (il:* il:|jow| "12-Apr-86 16:10")                    (il:* il:|macro| il:|dispatch| il:|function| il:|for| il:fm.itemprop.          il:item il:|is| il:|bound| il:|to| il:|the| il:|name| il:|of| il:|the|           il:|item| il:|to| il:|be| il:|visited,| il:prop il:|is| il:|bound| il:|to|           il:|the| il:|expression| ((quote il:<fieldname>)il:\, il:|and| il:value il:|is|           il:|bound| il:|to| il:|the| il:|expression| il:|to| il:|be| il:|evaluated|           il:|at| il:|run| il:|time| il:|to| il:|yield| il:|the| il:|newvalue.|)           il:|This| il:|function| il:|returns| il:|the| il:|appropriate| il:|prog1|           il:|expression| il:|to| il:|be| il:|compiled,| il:|which| il:|will| il:|return|           il:|the| il:|old| il:|value,| il:|and| il:|set| il:|the| il:|new| il:|value|           il:|of| il:|an| il:|item| il:|prop.| il:if the il:freemenuitem il:record il:is           il:changed\,this il:function il:must il:be il:changed il:accordingly)                                                             (il:* il:background (il:bquote                                                             (prog1 (il:fetch (il:freemenuitem                                                              il:fm.background) il:of                                                             (il:\\fm.insurefm il:\, il:item))                                                             (il:replace (il:freemenuitem                                                              il:fm.background) il:of il:\, il:item                                                              il:with il:\, il:value))))                                                             (il:* il:attachpoint                                                             (il:bquote (prog1 (il:fetch                                                             (il:freemenuitem il:fm.attachpoint)                                                              il:of (il:\\fm.insurefm il:\, il:item))                                                             (il:replace (il:freemenuitem                                                              il:fm.attachpoint) il:of il:\, il:item                                                              il:with il:\, il:value))))    (il:selectq (cadr il:prop)          (type (il:error "FreeMenuItem property TYPE not settable" (list 'il:fm.itemprop il:item                                                                           il:prop il:value)))          (il:label `(prog1 (il:fetch (il:freemenuitem il:fm.label)                                   il:of il:\, il:item)                            (il:replace (il:freemenuitem il:fm.label)                                   il:of il:\, il:item il:with il:\, il:value)))          (il:id `(prog1 (il:fetch (il:freemenuitem il:fm.id)                                il:of il:\, il:item)                         (il:replace (il:freemenuitem il:fm.id)                                il:of il:\, il:item il:with il:\, il:value)))          (il:groupid `(prog1 (il:fetch (il:freemenuitem il:fm.groupid)                                     il:of il:\, il:item)                              (il:replace (il:freemenuitem il:fm.groupid)                                     il:of il:\, il:item il:with il:\, il:value)))          (il:state `(prog1 (il:fetch (il:freemenuitem il:fm.state)                                   il:of il:\, il:item)                            (il:replace (il:freemenuitem il:fm.state)                                   il:of il:\, il:item il:with il:\, il:value)))          (il:initstate `(prog1 (il:fetch (il:freemenuitem il:fm.initstate)                                       il:of il:\, il:item)                                (il:replace (il:freemenuitem il:fm.initstate)                                       il:of il:\, il:item il:with il:\, il:value)))          (il:font `(prog1 (il:fetch (il:freemenuitem il:fm.font)                                  il:of il:\, il:item)                           (il:replace (il:freemenuitem il:fm.font)                                  il:of il:\, il:item il:with il:\, il:value)))          (il:bitmap `(prog1 (il:fetch (il:freemenuitem il:fm.bitmap)                                    il:of il:\, il:item)                             (il:replace (il:freemenuitem il:fm.bitmap)                                    il:of il:\, il:item il:with il:\, il:value)))          (il:highlight `(prog1 (il:fetch (il:freemenuitem il:fm.highlight)                                       il:of il:\, il:item)                                (il:replace (il:freemenuitem il:fm.highlight)                                       il:of il:\, il:item il:with il:\, il:value)))          (il:region `(prog1 (il:fetch (il:freemenuitem il:fm.region)                                    il:of il:\, il:item)                             (il:replace (il:freemenuitem il:fm.region)                                    il:of il:\, il:item il:with il:\, il:value)))          (il:maxregion `(prog1 (il:fetch (il:freemenuitem il:fm.maxregion)                                       il:of il:\, il:item)                                (il:replace (il:freemenuitem il:fm.maxregion)                                       il:of il:\, il:item il:with il:\, il:value)))          (il:message `(prog1 (il:fetch (il:freemenuitem il:fm.message)                                     il:of il:\, il:item)                              (il:replace (il:freemenuitem il:fm.message)                                     il:of il:\, il:item il:with il:\, il:value)))          (il:userdata (il:error "FreeMenuItem property USERDATA not settable" (list 'il:fm.itemprop                                                                                      il:item il:prop                                                                                      il:value)))          (il:links `(prog1 (il:fetch (il:freemenuitem il:fm.links)                                   il:of il:\, il:item)                            (il:replace (il:freemenuitem il:fm.links)                                   il:of il:\, il:item il:with il:\, il:value)))          (il:sysdownfn `(prog1 (il:fetch (il:freemenuitem il:fm.sysdownfn)                                       il:of il:\, il:item)                                (il:replace (il:freemenuitem il:fm.sysdownfn)                                       il:of il:\, il:item il:with il:\, il:value)))          (il:sysmovedfn `(prog1 (il:fetch (il:freemenuitem il:fm.sysmovedfn)                                        il:of il:\, il:item)                                 (il:replace (il:freemenuitem il:fm.sysmovedfn)                                        il:of il:\, il:item il:with il:\, il:value)))          (il:sysselectedfn `(prog1 (il:fetch (il:freemenuitem il:fm.sysselectedfn)                                           il:of il:\, il:item)                                    (il:replace (il:freemenuitem il:fm.sysselectedfn)                                           il:of il:\, il:item il:with il:\, il:value)))          (il:downfn `(prog1 (il:fetch (il:freemenuitem il:fm.downfn)                                    il:of il:\, il:item)                             (il:replace (il:freemenuitem il:fm.downfn)                                    il:of il:\, il:item il:with il:\, il:value)))          (il:heldfn `(prog1 (il:fetch (il:freemenuitem il:fm.heldfn)                                    il:of il:\, il:item)                             (il:replace (il:freemenuitem il:fm.heldfn)                                    il:of il:\, il:item il:with il:\, il:value)))          (il:movedfn `(prog1 (il:fetch (il:freemenuitem il:fm.movedfn)                                     il:of il:\, il:item)                              (il:replace (il:freemenuitem il:fm.movedfn)                                     il:of il:\, il:item il:with il:\, il:value)))          (il:selectedfn `(prog1 (il:fetch (il:freemenuitem il:fm.selectedfn)                                        il:of il:\, il:item)                                 (il:replace (il:freemenuitem il:fm.selectedfn)                                        il:of il:\, il:item il:with il:\, il:value)))          `(prog1 (il:listget (il:fetch (il:freemenuitem il:fm.userdata)                                     il:of il:\, il:item)                         (quote il:\, (cadr il:prop)))                  (il:listput (il:fetch (il:freemenuitem il:fm.userdata)                                     il:of il:\, il:item)                         (quote il:\, (cadr il:prop))                         il:\, il:value)))))(il:\\fm.displayitem  (il:lambda (il:item il:window)                             (il:* il:|jow| "26-Jun-86 14:52")    (il:\\fm.displaybitmap il:item (il:\\fm.itemprop il:item 'il:bitmap)           il:window)))(il:\\fm.highlightitem  (il:lambda (il:item il:window il:buttons)                  (il:* il:|jow| "26-Jun-86 14:52")    (il:\\fm.displaybitmap il:item (il:\\fm.itemprop il:item 'il:highlight)           il:window)))(il:\\fm.changelabel  (il:lambda (il:item il:newlabel)                           (il:* il:|jow| "24-Apr-86 22:56")                    (il:* il:|change| il:|the| il:|items| il:|label.|          il:newdesc il:|is| il:\a il:|description| il:|of| il:|the| il:|new| il:|item.|          il:|This| il:|includes| il:|the| il:|items| il:userdata il:|list,| il:|which|           il:|has| il:|in| il:|it| il:|all| il:|of| il:|the| il:|boxing| il:|info|           il:|necessary| il:|for| il:|changing| il:|the| il:|label.|          il:d\o il:|not| il:|redisplay|)    (or (or (il:atom il:newlabel)            (il:stringp il:newlabel)            (il:bitmapp il:newlabel))        (il:error "CHANGELABEL Error. NEWLABEL must be an atom, string, or bitmap." il:newlabel))    (let ((il:font (il:\\fm.itemprop il:item 'il:font))          (il:left (il:|fetch| (il:region il:left)                          il:|of|                          (il:\\fm.itemprop il:item 'il:region)))          (il:bottom (il:|fetch| (il:region il:bottom)                            il:|of|                            (il:\\fm.itemprop il:item 'il:region)))          (il:newdesc (il:append (list 'il:label il:newlabel)                             (il:\\fm.itemprop il:item 'il:userdata)))          il:regions il:bitmaps)         (il:setq il:regions (il:\\fm.getregions il:newdesc il:left il:bottom il:font))         (il:setq il:bitmaps (il:\\fm.getbitmaps il:newdesc il:font (car il:regions)                                    (cadr il:regions)))         (il:\\fm.itemprop il:item 'il:label il:newlabel)         (il:\\fm.itemprop il:item 'il:region (car il:regions))         (il:\\fm.itemprop il:item 'il:maxregion (caddr il:regions))         (il:\\fm.itemprop il:item 'il:bitmap (car il:bitmaps))         (il:\\fm.itemprop il:item 'il:highlight (cadr il:bitmaps))         (il:selectq (il:\\fm.itemprop il:item 'type)               (il:edit                                      (il:* il:|use| il:|maxregion|                                                              il:|always|)                        (il:\\fm.itemprop il:item 'il:region (il:\\fm.itemprop il:item 'il:maxregion)                               ))               (il:number                                    (il:* il:|make| il:|state| il:\a                                                              il:|number|)                          (il:\\fm.itemprop il:item 'il:region (il:\\fm.itemprop il:item '                                                                      il:maxregion))                          (il:\\fm.number-changestate il:item il:newlabel))               (il:toggle                                    (il:* il:|reset| il:|state|                                                              il:|bitmaps|)                          (il:\\fm.itemprop il:item 'il:unhighlight (il:\\fm.itemprop il:item                                                                           'il:bitmap)))               (il:3state                                    (il:* il:|reset| il:|state|                                                              il:|bitmaps|)                          (il:\\fm.itemprop il:item 'il:unhighlight (il:\\fm.itemprop il:item                                                                           'il:bitmap))                          (il:\\fm.3state-setupoffbitmap il:item))               (il:nway                                      (il:* il:|reset| il:|state|                                                              il:|bitmaps|)                        (il:\\fm.itemprop il:item 'il:unhighlight (il:\\fm.itemprop il:item                                                                         'il:bitmap)))               nil))))(il:\\fm.changestate  (il:lambda (il:x il:newstate il:window)                    (il:* il:|jow| "25-Apr-86 14:51")                    (il:* il:|user| il:|interface| il:|to| il:|change| il:|the| il:|state| il:|of|           il:|any| (il:|state|) il:|item| il:|or| il:|nway| il:|collection.|          il:|Redisplay| il:|the| il:|item| il:|if| il:|the| il:|window| il:|is|           il:|open|)    (il:|if| (il:assoc il:x (il:windowprop il:window 'il:fm.nways))           il:|then|                                         (il:* il:x il:|specifies| il:|an|                                                              il:nway. il:|Changestate| il:|and|                                                              il:|redisplay.|)           (il:\\fm.nway-changestate il:x il:newstate il:window)           il:|else|                                         (il:* il:|treat| il:x il:|as| il:|an|                                                              il:|item|)           (il:selectq (il:\\fm.itemprop il:x 'type)                 (il:toggle (il:\\fm.toggle-changestate il:x il:newstate))                 (il:3state (il:\\fm.3state-changestate il:x il:newstate))                 (il:state (il:\\fm.state-changestate il:x il:newstate il:window))                 (il:edit (il:\\fm.changelabel il:x il:newstate))                 (il:number (il:\\fm.changelabel il:x il:newstate))                 nil))))(il:\\fm.endedit  (il:lambda (il:window il:waitflg)                          (il:* il:|jow| "20-Oct-86 10:56")                                                  (il:* il:|;;;| "used as a closefn for freemenu, as well as for ending edits as necessary during button events.  Will kill the edit process and wait as requested.  If editing, the freemenu process must be the ttyprocess.")    (il:|if| (il:fm.editp il:window)           il:|then|           (il:setuptimer 0 (il:windowprop il:window 'il:fm.edit-timer))           (let ((il:fm.process (il:tty.process)))                (il:|if| (il:processprop il:fm.process 'il:freemenu.process)                       il:|then|                       (il:|if| (il:neq (il:this.process)                                       il:fm.process)                              il:|then|                              (il:process.result il:fm.process il:waitflg))                       il:|else|                       (il:error "Can't find freemenu process to end editing" il:fm.process))))))(il:\\fm.insurevisible  (il:lambda (il:item il:window)                             (il:* il:|jow| "25-Apr-86 12:04")    (il:|if| (not (il:subregionp (il:dspclippingregion nil il:window)                         (il:\\fm.itemprop il:item 'il:region)))           il:|then|                    (il:* il:|not| il:|all| il:|of| il:item il:|is| il:|visible:| il:|ensure|           il:|that| il:|left| il:|of| il:|item| il:|is| il:|in| il:|window|)           (il:scrollw il:window (il:fquotient (il:|fetch| (il:region il:left)                                                      il:|of|                                                      (il:\\fm.itemprop il:item 'il:region))                                        (il:|fetch| (il:region il:width)                                               il:|of|                                               (il:windowprop il:window 'il:extent)))                  0))))(il:\\fm.clearitem  (il:lambda (il:item il:window il:region)                   (il:* il:|jow| "26-Jun-86 14:50")                    (il:* il:|clear| il:|an| il:|item| il:|in| il:|the| il:|window.|          il:i\f il:infinitewidth\, il:|then| il:|clear| il:|to| il:|edge| il:|of|           il:|window.| il:|Don't| il:|change| il:|the| il:|item.|          il:region il:|defaults| il:|to| il:|items| il:|current| il:|region,| il:|and|           il:|may| il:|be| il:|passed| il:|as| il:|an| il:|arg,| il:|in| il:|order|           il:|to| il:|clear| il:|an| "old" il:|region| il:|for| il:|the| il:|item.|)    (il:|if| (il:openwp il:window)           il:|then|           (or il:region (il:setq il:region (il:\\fm.itemprop il:item 'il:region)))           (il:|if| (il:\\fm.itemprop il:item 'il:infinitewidth)                  il:|then|                  (il:bltshade (il:\\fm.itemprop il:item 'il:background)                         il:window                         (il:|fetch| (il:region il:left)                                il:|of| il:region)                         (il:|fetch| (il:region il:bottom)                                il:|of| il:region)                         nil                         (il:|fetch| (il:region il:height)                                il:|of| il:region))                  il:|else|                  (il:bltshade (il:\\fm.itemprop il:item 'il:background)                         il:window nil nil nil nil nil il:region))))))(il:* il:momentary il:item il:functions)(il:defineq(il:\\fm.momentary-setup  (il:lambda (il:item)                                       (il:* il:|jow| "17-Apr-86 18:16")    (or (il:\\fm.itemprop il:item 'il:message)        (il:\\fm.itemprop il:item 'il:message "Will select this item when you release the button."))    (il:\\fm.itemprop il:item 'il:sysdownfn 'il:\\fm.highlightitem)    (il:\\fm.itemprop il:item 'il:sysmovedfn 'il:\\fm.displayitem)    (il:\\fm.itemprop il:item 'il:sysselectedfn (il:function il:\\fm.momentary-selectedfn))))(il:\\fm.momentary-selectedfn  (il:lambda (il:item il:window il:buttons)                  (il:* il:|jow| "19-Apr-86 22:00")                    (il:* il:|setup| il:|unhighlighting| il:|on| il:|the| il:|way| il:|out| il:|by|           il:|puttin| il:|in| il:\a il:|resetsave.|          il:|we| il:|know| il:|we| il:|got| il:|called| il:|from| il:|\\fm.doselection,|           il:|which| il:resetlist\s.)    (il:resetsave nil (list 'il:\\fm.displayitem il:item il:window)))))(il:* il:toggle il:item il:functions)(il:defineq(il:\\fm.toggle-setup  (il:lambda (il:item il:regions)                            (il:* il:|jow| "18-Apr-86 12:22")                                                             (il:* il:|toggle| il:|items|                                                              il:|initial| il:|state| nil)    (or (il:\\fm.itemprop il:item 'il:message)        (il:\\fm.itemprop il:item 'il:message "Will toggle this item when you release the button."))    (il:\\fm.itemprop il:item 'il:sysdownfn (il:function il:\\fm.toggle-downfn))    (il:\\fm.itemprop il:item 'il:sysmovedfn (il:function il:\\fm.displayitem))    (il:\\fm.itemprop il:item 'il:sysselectedfn (il:function il:\\fm.toggle-selectedfn))                                                             (il:* il:|save| il:|unhighlighted|                                                              il:|looks.|)    (il:\\fm.itemprop il:item 'il:unhighlight (il:\\fm.itemprop il:item 'il:bitmap))                                                             (il:* il:|save| il:|regions| il:|for|                                                              il:|state| il:|changes.|)    (il:|if| (and (cadr il:regions)                  (not (il:equal (cadr il:regions)                              (il:\\fm.itemprop il:item 'il:region))))           il:|then|           (il:\\fm.itemprop il:item 'il:offregion (il:\\fm.itemprop il:item 'il:region))           (il:\\fm.itemprop il:item 'il:onregion (cadr il:regions)))))(il:\\fm.toggle-downfn  (il:lambda (il:item il:window il:buttons)                  (il:* il:|jow| "12-Apr-86 18:08")                    (il:* il:|display| il:|the| il:|other| il:|state| il:|in| il:|the| il:|window.|          il:|Can't| il:|just| il:|invert| il:|item| il:|in| il:|window,| il:|because| "highlight"           il:|may| il:|be| il:|shade| il:|other| il:|than| il:|black.|)    (il:|if| (il:\\fm.itemprop il:item 'il:state)           il:|then|           (il:\\fm.displaybitmap il:item (il:\\fm.itemprop il:item 'il:unhighlight)                  il:window)           il:|else|           (il:\\fm.displaybitmap il:item (il:\\fm.itemprop il:item 'il:highlight)                  il:window))))(il:\\fm.toggle-selectedfn  (il:lambda (il:item il:window il:buttons)                  (il:* il:|jow| "12-Apr-86 16:54")                                                             (il:* il:|change| il:|item| il:|to|                                                              il:|new| il:|state.|                                                             il:|display| il:|already| il:|updated|)    (il:|if| (il:\\fm.itemprop il:item 'il:state)           il:|then|           (il:\\fm.toggle-changestate il:item nil)           il:|else|           (il:\\fm.toggle-changestate il:item t))))(il:\\fm.toggle-changestate  (il:lambda (il:item il:newstate)                           (il:* il:|jow| "18-Apr-86 12:22")    (il:\\fm.itemprop il:item 'il:state il:newstate)    (il:|if| il:newstate il:|then| (il:\\fm.itemprop il:item 'il:bitmap (il:\\fm.itemprop                                                                         il:item                                                                         'il:highlight))           (and (il:\\fm.itemprop il:item 'il:onregion)                (il:\\fm.itemprop il:item 'il:region (il:\\fm.itemprop il:item 'il:onregion)))           il:|else|           (il:\\fm.itemprop il:item 'il:bitmap (il:\\fm.itemprop il:item 'il:unhighlight))           (and (il:\\fm.itemprop il:item 'il:offregion)                (il:\\fm.itemprop il:item 'il:region (il:\\fm.itemprop il:item 'il:offregion)))))))(il:* il:3state il:item il:functions)(il:defineq(il:\\fm.3state-setup  (il:lambda (il:item il:regions)                            (il:* il:|jow| "18-Apr-86 14:40")    (or (il:\\fm.itemprop il:item 'il:message)        (il:\\fm.itemprop il:item 'il:message                "Will change item to this state when you release the button."))    (il:\\fm.itemprop il:item 'il:sysdownfn (il:function il:\\fm.3state-downfn))    (il:\\fm.itemprop il:item 'il:sysmovedfn (il:function il:\\fm.displayitem))    (il:\\fm.itemprop il:item 'il:sysselectedfn (il:function il:\\fm.3state-selectedfn))                                                             (il:* il:|save| il:|the|                                                              il:|unhighlighted| il:|bitmap.|)    (il:\\fm.itemprop il:item 'il:unhighlight (il:\\fm.itemprop il:item 'il:bitmap))                                                             (il:* il:|save| il:|regions| il:|for|                                                              il:|state| il:|changes.|)    (il:|if| (and (cadr il:regions)                  (not (il:equal (cadr il:regions)                              (il:\\fm.itemprop il:item 'il:region))))           il:|then|           (il:\\fm.itemprop il:item 'il:neutralregion (il:\\fm.itemprop il:item 'il:region))           (il:\\fm.itemprop il:item 'il:onregion (cadr il:regions)))    (il:\\fm.3state-setupoffbitmap il:item)))(il:\\fm.3state-setupoffbitmap  (il:lambda (il:item)                                       (il:* il:|jow| "24-Apr-86 23:01")                    (il:* il:|used| il:|by| il:|3state| il:|items| il:|to| il:|setup| il:|bitmap|           il:|with| il:off il:|looks.|)    (let* ((il:off (il:\\fm.itemprop il:item 'il:off))           (il:box (or (il:\\fm.itemprop il:item 'il:box)                       0))           (il:font (il:\\fm.itemprop il:item 'il:font))           (il:offregion (il:\\fm.itemprop il:item 'il:region))           il:id il:offbitmap)          (cond             ((or (and il:off (il:atom il:off)                       (not (il:texturep il:off)))                  (il:stringp il:off)                  (il:bitmapp il:off))                       (il:* il:|new| il:|label|                                                              il:|specified.| il:|make| il:|anew|)                    (il:* il:|Set| il:region il:|of| il:off il:|looks:| il:|build| il:|item|           il:|description| il:|that| il:|has| il:off il:|has| il:|its| il:highlight           il:|prop.| il:|Then| il:|pass| il:|to| il:getregions          (il:|so| il:|lie| il:\a il:|bit|) il:|to| il:|get| il:|the| il:|region| il:|of|           il:|the| il:off il:|looks.|)              (il:setq il:id (il:copy (il:\\fm.itemprop il:item 'il:userdata)))              (il:listput il:id 'il:highlight il:off)              (il:setq il:offregion (cadr (il:\\fm.getregions il:id (il:|fetch| (il:region il:left)                                                                           il:|of| il:offregion)                                                 (il:|fetch| (il:region il:bottom)                                                        il:|of| il:offregion)                                                 il:font)))              (il:setq il:offbitmap (il:\\fm.makebitmap il:off il:font (il:|fetch| (il:region                                                                                           il:width)                                                                              il:|of| il:offregion)                                           (il:|fetch| (il:region il:height)                                                  il:|of| il:offregion)                                           il:id))              (il:\\fm.itemprop il:item 'il:highlight (list (il:\\fm.itemprop il:item 'il:highlight)                                                            il:offbitmap))              (il:|if| (not (il:equal il:offregion (il:\\fm.itemprop il:item 'il:region)))                     il:|then|                    (il:* il:|different| il:|region| il:|for| il:off il:|looks.|          il:|Save| il:|regions| il:|for| il:|changing| il:|state|)                     (il:\\fm.itemprop il:item 'il:neutralregion (il:\\fm.itemprop il:item                                                                        'il:region))                     (il:\\fm.itemprop il:item 'il:offregion il:offregion)                     (il:extendregion (il:\\fm.itemprop il:item 'il:maxregion)                            il:offregion)))             ((il:texturep il:off)                           (il:* il:|paint| il:|shade| il:|on|                                                              il:|label|)              (il:setq il:offbitmap (il:bitmapcopy (il:\\fm.itemprop il:item 'il:bitmap)))              (il:bltshade il:off il:offbitmap il:box il:box (il:idifference (il:|fetch| (il:region                                                                                          il:width)                                                                                    il:|of|                                                                                     il:offregion)                                                                    (il:itimes il:box 2))                     (il:idifference (il:|fetch| (il:region il:height)                                            il:|of| il:offregion)                            (il:itimes il:box 2))                     'il:paint)              (il:\\fm.itemprop il:item 'il:highlight (list (il:\\fm.itemprop il:item 'il:highlight)                                                            il:offbitmap)))             (t                                              (il:* il:|default:| il:|draw|                                                              il:|slash| il:|on| il:|label|)                (il:setq il:offbitmap (il:bitmapcopy (il:\\fm.itemprop il:item 'il:bitmap)))                (let ((stream (il:dspcreate il:offbitmap)))                     (il:drawline 0 0 (il:sub1 (il:|fetch| (il:region il:width)                                                      il:|of| il:offregion))                            (il:idifference (il:|fetch| (il:region il:height)                                                   il:|of| il:offregion)                                   2)                            2                            'il:replace stream)                     (il:\\fm.itemprop il:item 'il:highlight (list (il:\\fm.itemprop il:item                                                                          'il:highlight)                                                                   il:offbitmap))))))))(il:\\fm.3state-downfn  (il:lambda (il:item il:window il:buttons)                  (il:* il:|jow| "16-Apr-86 17:58")                    (il:* il:|called| il:|when| il:|mouse| il:|down| il:|over| il:|3state|           il:|item.| il:|rotates| il:|the| il:|state| il:|of| il:item il:|on| il:|the|           il:|screen.| il:|The| il:|order| il:|is| il:off -          nil -          t)    (il:selectq (il:\\fm.itemprop il:item 'il:state)          (il:off                                            (il:* il:off il:|to| nil)                  (il:\\fm.displaybitmap il:item (il:\\fm.itemprop il:item 'il:unhighlight)                         il:window))          (t                                                 (il:* t il:|to| il:off)             (il:\\fm.displaybitmap il:item (cadr (il:\\fm.itemprop il:item 'il:highlight))                    il:window))          (nil                                               (il:* nil il:|to| t)               (il:\\fm.displaybitmap il:item (car (il:\\fm.itemprop il:item 'il:highlight))                      il:window))          nil)))(il:\\fm.3state-selectedfn  (il:lambda (il:item il:window il:buttons)                  (il:* il:|jow| "12-Apr-86 18:30")                    (il:* il:|called| il:|when| il:|3state| il:|item| il:|selected.|          il:|rotates| il:|the| il:|state| il:|of| il:item il:|and| il:|its| il:|bitmap.|          il:|The| il:|order| il:|is| il:off -          nil -          t)    (il:selectq (il:\\fm.itemprop il:item 'il:state)          (il:off                                            (il:* il:off il:|to| nil)                  (il:\\fm.3state-changestate il:item nil))          (t                                                 (il:* t il:|to| il:off)             (il:\\fm.3state-changestate il:item 'il:off))          (nil                                               (il:* nil il:|to| t)               (il:\\fm.3state-changestate il:item t))          nil)))(il:\\fm.3state-changestate  (il:lambda (il:item il:newstate)                           (il:* il:|jow| "18-Apr-86 15:19")    (il:\\fm.itemprop il:item 'il:state il:newstate)    (il:selectq il:newstate          (il:off                                            (il:* il:|to| il:off)                  (il:\\fm.itemprop il:item 'il:bitmap (cadr (il:\\fm.itemprop il:item 'il:highlight)                                                             ))                  (and (il:\\fm.itemprop il:item 'il:offregion)                       (il:\\fm.itemprop il:item 'il:region (il:\\fm.itemprop il:item 'il:offregion))                       ))          (t                                                 (il:* il:|to| t)             (il:\\fm.itemprop il:item 'il:bitmap (car (il:\\fm.itemprop il:item 'il:highlight)))             (and (il:\\fm.itemprop il:item 'il:onregion)                  (il:\\fm.itemprop il:item 'il:region (il:\\fm.itemprop il:item 'il:onregion))))          (nil                                               (il:* il:|to| nil)               (il:\\fm.itemprop il:item 'il:bitmap (il:\\fm.itemprop il:item 'il:unhighlight))               (and (il:\\fm.itemprop il:item 'il:neutralregion)                    (il:\\fm.itemprop il:item 'il:region (il:\\fm.itemprop il:item 'il:neutralregion)                           )))          nil))))(il:* il:state il:item il:functions)(il:defineq(il:\\fm.state-setup  (il:lambda (il:item)                                       (il:* il:|jow| "17-Apr-86 18:16")                    (il:* il:|The| il:|item's| il:|state| il:|is| il:|initialized| il:|to| il:|the|           il:|first| il:|of| il:|the| il:|menu| il:|items.|          il:|The| il:|subitems| il:|list| il:|is| il:|replaced| il:|with| il:\a           il:|menu| il:|of| il:|those| il:|items.|)    (or (il:\\fm.itemprop il:item 'il:message)        (il:\\fm.itemprop il:item 'il:message "Will let you select a value from a pop up menu."))    (il:\\fm.itemprop il:item 'il:sysdownfn 'il:\\fm.highlightitem)    (il:\\fm.itemprop il:item 'il:sysmovedfn 'il:\\fm.displayitem)    (il:\\fm.itemprop il:item 'il:sysselectedfn (il:function il:\\fm.state-selectedfn))    (il:|if| (il:\\fm.itemprop il:item 'il:menuitems)           il:|then|                                         (il:* il:|build| il:|menu| il:|as|                                                              il:|specified|)           (let ((il:menuitems (il:\\fm.itemprop il:item 'il:menuitems))                 (il:menufont (il:apply (il:function il:fontcreate)                                     (il:\\fm.itemprop il:item 'il:menufont))))                (il:\\fm.itemprop il:item 'il:state (or (il:\\fm.itemprop il:item 'il:initstate)                                                        (car il:menuitems)))                (il:\\fm.itemprop il:item 'il:changestate                       (il:|create| il:menu il:items il:_ il:menuitems il:menufont il:_ il:menufont                               il:centerflg il:_ t il:title il:_ (or (il:\\fm.itemprop il:item                                                                           'il:menutitle)                                                                    (il:\\fm.itemprop il:item                                                                           'il:label))))))))(il:\\fm.state-selectedfn  (il:lambda (il:item il:window il:buttons)                  (il:* il:|jow| "12-Apr-86 18:30")                    (il:* il:|Setup| il:|highlighting| il:|on| il:|the| il:|way| il:|out,| il:|to|           il:|account| il:|for| il:changestate il:|function| il:|and| il:|user|           il:|selectedfn.| il:i\f il:changestate il:|is| il:|an| il:|atom,| il:|treat|           il:|as| il:|function| il:|name| il:|to| il:|be| il:|applied| il:|to| il:item           il:window il:buttons\, il:|which| il:|must| il:|return| il:|the| il:|new|           il:|state| (il:|any| il:|atom,| il:|string,| il:|or| il:|bitmap|) il:i\f           il:changestate il:|is| il:\a il:|menu,| il:|pop| il:|it| il:|up| il:|to|           il:|select| il:|new| il:|state.| il:i\f il:changestate il:|returns| il:nil\,           il:|don't| il:|change| il:|state|)    (il:resetsave nil (list 'il:\\fm.displayitem il:item il:window))    (let ((il:newstate (cond                          ((il:|type?| il:menu (il:\\fm.itemprop il:item 'il:changestate))                           (il:menu (il:\\fm.itemprop il:item 'il:changestate)))                          ((il:\\fm.itemprop il:item 'il:changestate)                           (il:apply* (il:\\fm.itemprop il:item 'il:changestate)                                  il:item il:window il:buttons)))))         (il:|if| il:newstate il:|then| (il:\\fm.state-changestate il:item il:newstate il:window)))))(il:\\fm.state-changestate  (il:lambda (il:item il:newstate il:window)                 (il:* il:|jow| "12-Apr-86 18:31")                    (il:* il:|changing| il:|the| il:|state| il:|of| il:\a il:state il:|item|           il:|simply| il:|changes| il:|the| il:|label| il:|of| il:|its| il:|display|           il:|item.|)    (il:\\fm.itemprop il:item 'il:state il:newstate)    (let ((il:displayitem (il:listget (il:\\fm.itemprop il:item 'il:links)                                 'il:display)))         (il:|if| il:displayitem il:|then| (il:fm.changelabel il:displayitem il:newstate il:window)))    )))(il:* il:nway il:item il:functions)(il:defineq(il:\\fm.nway-setup  (il:lambda (il:item il:regions)                            (il:* il:|jow| "24-Apr-86 21:53")    (or (il:\\fm.itemprop il:item 'il:message)        (il:\\fm.itemprop il:item 'il:message (il:function il:\\fm.nway-message)))    (il:\\fm.itemprop il:item 'il:sysdownfn (il:function il:\\fm.nway-downfn))    (il:\\fm.itemprop il:item 'il:sysmovedfn (il:function il:\\fm.nway-movedfn))    (il:\\fm.itemprop il:item 'il:sysselectedfn (il:function il:\\fm.nway-selectedfn))    (il:\\fm.itemprop il:item 'il:unhighlight (il:\\fm.itemprop il:item 'il:bitmap))                                                             (il:* il:|save| il:|regions| il:|for|                                                              il:|state| il:|changes.|)    (il:|if| (and (cadr il:regions)                  (not (il:equal (cadr il:regions)                              (il:\\fm.itemprop il:item 'il:region))))           il:|then|           (il:\\fm.itemprop il:item 'il:offregion (il:\\fm.itemprop il:item 'il:region))           (il:\\fm.itemprop il:item 'il:onregion (cadr il:regions)))))(il:\\fm.nway-message  (il:lambda (il:item il:window il:buttons)                  (il:* il:|jow| "24-Apr-86 22:07")    (il:if (il:\\fm.nwayprop il:window (il:\\fm.itemprop il:item 'il:collection)                  'il:deselect)           il:then           (il:selectq (car il:buttons)                 (il:right "Will turn off this NWAY collection.")                 ((il:left il:middle)                        "Will select this item from its NWAY collection.")                 nil)           il:else "Will select this item from its NWAY collection.")))(il:\\fm.nway-downfn  (il:lambda (il:item il:window il:buttons)                  (il:* il:|jow| "12-Apr-86 18:16")    (let* ((il:nway (cdr (il:assoc (il:\\fm.itemprop il:item 'il:collection)                                (il:windowprop il:window 'il:fm.nways))))           (il:state (il:listget il:nway 'il:state)))          (il:|if| il:state il:|then|                        (il:* il:|an| il:|item| il:|is|                                                              il:|currently| il:|selected:|                                                              il:|unhighlight| il:|it|)                 (il:\\fm.displaybitmap il:state (il:\\fm.itemprop il:state 'il:unhighlight)                        il:window))          (il:|if| (not (and (eq (car il:buttons)                                 'il:right)                             (il:listget il:nway 'il:deselect)))                 il:|then|                                   (il:* il:|highlight| il:|this|                                                              il:|item| il:|unless| il:|deselect|                                                              il:|group.|)                 (il:\\fm.displaybitmap il:item (il:\\fm.itemprop il:item 'il:highlight)                        il:window)))))(il:\\fm.nway-movedfn  (il:lambda (il:item il:window il:buttons)                  (il:* il:|jow| "12-Apr-86 18:16")    (let* ((il:nway (cdr (il:assoc (il:\\fm.itemprop il:item 'il:collection)                                (il:windowprop il:window 'il:fm.nways))))           (il:state (il:listget il:nway 'il:state)))          (il:|if| il:state il:|then|                        (il:* il:|there| il:|is| il:|an|                                                              il:|item| il:|currently| il:|selected|                                                              il:|to| il:|redisplay|)                 (il:\\fm.displaybitmap il:state (il:\\fm.itemprop il:state 'il:bitmap)                        il:window))          (il:|if| (not (and (eq (car il:buttons)                                 'il:right)                             (il:listget il:nway 'il:deselect)))                 il:|then|                                   (il:* il:|this| il:|item| il:|was|                                                              il:|highlighted| il:|by| il:|downfn,|                                                              il:|so| il:|redisplay.|)                 (il:\\fm.displaybitmap il:item (il:\\fm.itemprop il:item 'il:bitmap)                        il:window)))))(il:\\fm.nway-selectedfn  (il:lambda (il:item il:window il:buttons)                  (il:* il:|jow| "19-Apr-86 23:07")    (il:|if| (and (eq (car il:buttons)                      'il:right)                  (il:\\fm.nwayprop il:window (il:\\fm.itemprop il:item 'il:collection)                         'il:deselect))           il:|then|                                         (il:* il:|group| il:|deselected|)           (il:\\fm.nway-changestate (il:\\fm.itemprop il:item 'il:collection)                  nil il:window)           il:|else|                                         (il:* il:|new| il:|item| il:|selected|)           (il:\\fm.nway-changestate (il:\\fm.itemprop il:item 'il:collection)                  il:item il:window))))(il:\\fm.nway-changestate  (il:lambda (il:collection il:newstate il:window)           (il:* il:|jow| "19-Apr-86 23:09")    (let ((il:state (il:\\fm.nwayprop il:window il:collection 'il:state)))         (il:|if| (il:neq il:state il:newstate)                il:|then|                                    (il:* il:|actually| il:|have|                                                              il:|something| il:|to| il:|change|)                (il:|if| il:state il:|then|                  (il:* il:state il:|item| il:|is|                                                              il:|unselected|)                       (il:\\fm.toggle-changestate il:state nil))                (il:|if| il:newstate il:|then| (il:\\fm.toggle-changestate il:newstate t))                (il:\\fm.nwayprop il:window il:collection 'il:state il:newstate))))))(il:* il:number il:item il:functions)(il:defineq(il:\\fm.number-setup  (il:lambda (il:item)                                       (il:* il:|jow| "24-Apr-86 21:51")                                                             (il:* il:|This| il:|is| il:edit-setup                                                              il:|with| il:|number| il:|specifics|                                                              il:|added.|)    (or il:\\fm.edit-ttbl (il:\\fm.edit-setupttbl))          (il:* il:|since| il:|have| il:|edit|                                                              il:|item,| il:|setup| il:|term|                                                              il:|table|)    (il:\\fm.itemprop il:item 'il:region (il:\\fm.itemprop il:item 'il:maxregion))                                                             (il:* il:|always| il:|sensitive|                                                              il:|on| il:|maxregion|)    (il:|if| (and (il:\\fm.itemprop il:item 'il:box)                  (not (il:\\fm.itemprop il:item 'il:maxwidth)))           il:|then|                                         (il:* il:|boxing| il:|implies|                                                              il:|maxwidth|)           (il:\\fm.itemprop il:item 'il:maxwidth (il:idifference (il:|fetch| (il:region il:width)                                                                         il:|of|                                                                         (il:\\fm.itemprop                                                                          il:item                                                                          'il:region))                                                         (il:itimes 2 (il:\\fm.itemprop il:item                                                                             'il:boxoffset)))))    (il:|if| (il:\\fm.itemprop il:item 'il:maxwidth)           il:|then|                                         (il:* il:|setup| il:|stopwidth|)           (il:\\fm.itemprop il:item 'il:labelmaxwidth (il:\\fm.itemprop il:item 'il:maxwidth))           il:|else|                                         (il:* il:|make| il:|item|                                                              il:|infinite|)           (il:\\fm.itemprop il:item 'il:infinitewidth t))    (or (il:\\fm.itemprop il:item 'il:message)        (il:\\fm.itemprop il:item 'il:message (il:function il:\\fm.number-message)))    (il:\\fm.itemprop il:item 'il:initstate (il:\\fm.itemprop il:item 'il:label))    (il:|if| (il:fmemb (il:\\fm.itemprop il:item 'il:numbertype)                    '(float il:floatp))           il:|then|           (il:\\fm.itemprop il:item 'il:limitchars                  '(1 2 3 4 5 6 7 8 9 0 il:\.))           il:|else|           (il:\\fm.itemprop il:item 'il:limitchars                  '(1 2 3 4 5 6 7 8 9 0)))    (il:\\fm.itemprop il:item 'il:sysselectedfn (il:function il:\\fm.number-selectedfn))))(il:\\fm.number-message  (il:lambda (il:item il:window il:buttons)                  (il:* il:|jow| "24-Apr-86 22:06")    (il:selectq (car il:buttons)          (il:right "Will clear this number, then start editing.")          ((il:left il:middle)                 "Will start editing this number at this position.")          nil)))(il:\\fm.number-selectedfn  (il:lambda (il:item il:window il:buttons)                  (il:* il:|jow| "17-Oct-86 18:36")    (il:\\fm.edit-item il:item il:window il:buttons nil (il:function il:\\fm.number-changestate))))(il:\\fm.number-changestate  (il:lambda (il:item)                                       (il:* il:|jow| "24-Apr-86 20:50")    (il:\\fm.itemprop il:item 'il:state (il:|if| (not (il:equal "" (il:\\fm.itemprop il:item                                                                          'il:label)))                                               il:|then|                                               (il:mkatom (il:\\fm.itemprop il:item 'il:label)))))))(il:* il:title il:item il:functions)(il:defineq(il:\\fm.display-setup  (il:lambda (il:item)                                       (il:* il:|jow| "17-Apr-86 18:17")    (or (il:\\fm.itemprop il:item 'il:message)        (il:\\fm.itemprop il:item 'il:message "")))))(il:* il:editstart il:item il:functions)(il:defineq(il:\\fm.editstart-setup  (il:lambda (il:item)                                       (il:* il:|jow| "24-Apr-86 22:00")    (or (il:\\fm.itemprop il:item 'il:message)        (il:\\fm.itemprop il:item 'il:message (il:function il:\\fm.editstart-message)))    (il:\\fm.itemprop il:item 'il:sysdownfn 'il:\\fm.highlightitem)    (il:\\fm.itemprop il:item 'il:sysmovedfn 'il:\\fm.displayitem)    (il:\\fm.itemprop il:item 'il:sysselectedfn (il:function il:\\fm.editstart-selectedfn))))(il:\\fm.editstart-message  (il:lambda (il:item il:window il:buttons)                  (il:* il:|jow| "24-Apr-86 22:04")    (il:selectq (car il:buttons)          (il:right "Will clear first, then start editing.")          ((il:left il:middle)                 "Will start editing.")          nil)))(il:\\fm.editstart-selectedfn  (il:lambda (il:item il:window il:buttons)                  (il:* il:|jow| "18-Jun-86 16:39")                    (il:* il:|start| il:|editing| il:|at| il:|the| il:|beginning| il:|of| il:|item|           il:|in| il:|the| il:edit il:|link.|)    (il:\\fm.displayitem il:item il:window)    (let ((il:edititem (il:listget (il:\\fm.itemprop il:item 'il:links)                              'il:edit)))         (il:|if| (il:|type?| il:freemenuitem il:edititem)                il:|then|                (il:\\fm.itemprop il:item 'il:selectedfn (il:function il:nill))                    (il:* il:|insure| il:|editstart| il:|item| il:|won't| il:|have| il:|selectedfn|           il:|side| il:|effect,| il:|because| il:|end| il:|of| il:|edit| il:|is| il:|not|           il:|well| il:|defined|)                (il:\\fm.insurevisible il:edititem il:window)                (il:\\fm.edit-item il:edititem il:window il:buttons t))))))(il:* il:edit il:items)(il:declare\: il:dontcopy (il:declare\: il:eval@compile (il:rpaqq il:\\fm.edit-timeout 100000)(il:rpaqq il:\\fm.edit-rightendspace 5)(il:rpaqq il:\\fm.edit-blocksize 50)(il:rpaqq il:\\fm.edit-controlchars (9 10 12 13))(il:rpaqq il:\\fm.edit-controlcharsecho 255)(il:rpaqq il:\\fm.edit-worddelimchars           (32 123 125 91 93 60 62 47 92 46 44 59 42 40 41 45))(il:constants (il:\\fm.edit-timeout 100000)       (il:\\fm.edit-rightendspace 5)       (il:\\fm.edit-blocksize 50)       (il:\\fm.edit-controlchars '(9 10 12 13))       (il:\\fm.edit-controlcharsecho 255)       (il:\\fm.edit-worddelimchars '(32 123 125 91 93 60 62 47 92 46 44 59 42 40 41 45)))))(il:rpaqq il:\\fm.edit-ttbl nil)(il:declare\: il:doeval@compile il:dontcopy(il:globalvars il:\\fm.edit-ttbl))(il:declare\: il:eval@compile (il:putprops il:\\fm.edit-maxwidth il:macro (nil (or il:labelmaxwidth (il:iplus (il:windowprop                                                                                 il:window                                                                                 'il:width)                                                                             (il:|fetch| (il:region                                                                                          il:left)                                                                                    il:|of|                                                                                    (                                                                                 il:dspclippingregion                                                                                     nil il:window))                                                                             (il:minus il:left)))))(il:putprops il:\\fm.edit-scrollamount il:macro (nil (il:iquotient (il:windowprop il:window                                                                          'il:width)                                                            2))))(il:defineq(il:\\fm.edit-setup  (il:lambda (il:item)                                       (il:* il:|jow| "24-Apr-86 22:06")                    (il:* il:labelmaxwidth il:|is| il:|maximum| il:|width| il:|string| il:|can|           il:|reach.| il:|Right| il:|now| il:|it| il:|is| il:|set| il:|to| il:maxwidth\,           il:|leaving| il:|no| il:|right| il:|end| il:|space.|)    (or il:\\fm.edit-ttbl (il:\\fm.edit-setupttbl))          (il:* il:|since| il:|have| il:|edit|                                                              il:|item,| il:|setup| il:|term|                                                              il:|table|)    (il:\\fm.itemprop il:item 'il:region (il:\\fm.itemprop il:item 'il:maxregion))                                                             (il:* il:|always| il:|sensitive|                                                              il:|on| il:|maxregion|)    (il:|if| (and (il:\\fm.itemprop il:item 'il:box)                  (not (il:\\fm.itemprop il:item 'il:maxwidth)))           il:|then|                                         (il:* il:|boxing| il:|implies|                                                              il:|maxwidth|)           (il:\\fm.itemprop il:item 'il:maxwidth (il:idifference (il:|fetch| (il:region il:width)                                                                         il:|of|                                                                         (il:\\fm.itemprop                                                                          il:item                                                                          'il:region))                                                         (il:itimes 2 (il:\\fm.itemprop il:item                                                                             'il:boxoffset)))))    (il:|if| (il:\\fm.itemprop il:item 'il:maxwidth)           il:|then|                                         (il:* il:|setup| il:|stopwidth|)           (il:\\fm.itemprop il:item 'il:labelmaxwidth (il:\\fm.itemprop il:item 'il:maxwidth))           il:|else|                                         (il:* il:|make| il:|item|                                                              il:|infinite|)           (il:\\fm.itemprop il:item 'il:infinitewidth t))    (or (il:\\fm.itemprop il:item 'il:message)        (il:\\fm.itemprop il:item 'il:message (il:function il:\\fm.edit-message)))    (il:\\fm.itemprop il:item 'il:initstate (il:\\fm.itemprop il:item 'il:label))    (il:\\fm.itemprop il:item 'il:sysselectedfn (il:function il:\\fm.edit-item))))(il:\\fm.edit-message  (il:lambda (il:item il:window il:buttons)                  (il:* il:|jow| "24-Apr-86 22:05")    (il:selectq (car il:buttons)          (il:right "Will clear first, then start editing.")          ((il:left il:middle)                 "Will start editing at this position.")          nil)))(il:\\fm.edit-setupttbl  (il:lambda nil                                             (il:* il:|jow| "21-Aug-86 12:50")                    (il:* il:|creates| il:\a il:|new| il:|term| il:|table| il:|in| il:\\fm.ttbl           il:|with| il:|no| il:|line| il:|buffering| il:|or| il:|control| il:|character|           il:|echoing.|)    (il:setq il:\\fm.edit-ttbl (il:copytermtable 'il:orig))    (il:echomode nil il:\\fm.edit-ttbl)    (il:|for| il:cc il:|from| 0 il:|to| 31 il:|do| (il:echocontrol il:cc 'il:real il:\\fm.edit-ttbl))    ))(il:\\fm.edit-item  (il:lambda (il:edititem il:window il:buttons il:startflg il:donefn)                                                             (il:* il:|jow| "17-Oct-86 18:08")                                                  (il:* il:|;;;| "called when an edit item gets selected.  If STARTFLG is T, start editing the item at the beginning, rather than at the current mouse position.")    (il:|if| (eq (car il:buttons)                 'il:right)           il:|then|           (il:fm.changelabel il:edititem "" il:window))    (let ((il:timeout (il:setuptimer 0))          il:font il:bitmap il:left il:displayleft il:displaybottom il:boxoffset il:chcode           il:charwidth il:maxwidth il:stringptr il:tailptr il:mousex il:mousey il:item il:itemwidth           il:limitchars il:echochar stream)         (il:resetlst                                        (il:* il:\; "setup system")                (il:resetsave (il:settermtable il:\\fm.edit-ttbl))                (il:resetsave (il:ttydisplaystream il:window))                (il:resetsave (il:cursor t))                (il:resetsave nil (list 'il:windowprop il:window 'il:fm.edititem nil))                (il:resetsave nil (list 'il:windowprop il:window 'il:fm.edit-timer nil))                (il:resetsave nil (list 'il:windowprop il:window 'il:process nil))                (il:\\fm.edit-preparetoedit il:edititem il:startflg)                                                             (il:* il:\; "setup item info")                (il:resetsave (il:tty.process (il:this.process)))                                                  (il:* il:\;                            "grab the tty last, so won't have it unless the menu thinks it's editing.")                (il:|do| (il:setuptimer il:\\fm.edit-timeout il:timeout)                                                  (il:* il:|;;|     "wait for something interesting to happen. while waiting, call tty fns to make caret flash, etc,")                       (il:|until| (or (il:mousestate (not il:up))                                       (il:readp)                                       (il:timerexpired? il:timeout)                                       (not (il:tty.processp)))                              il:|do|                              (il:\\ttybackground))                       (cond                          ((not (il:tty.processp))                           (return (and il:donefn (il:apply* il:donefn il:edititem il:window))))                          ((il:lastmousestate (not il:up))                           (il:setq il:buttons (il:decodebuttons))                           (il:setq il:mousex (il:lastmousex il:window))                           (il:setq il:mousey (il:lastmousey il:window))                           (il:setq il:item (il:\\fm.checkregion il:window il:mousex il:mousey))                           (cond                              ((eq il:item il:edititem)                               (il:selectq (car il:buttons)                                     (il:left (il:\\fm.edit-movecaret))                                     (il:right (il:\\fm.edit-delete))                                     nil))                              (il:item            (il:* il:\; "run new buttonfn, in THIS PROCESS.*")                                     (il:\\caret.down)                                     (and il:donefn (il:setq il:buttons (il:apply* il:donefn                                                                                il:edititem il:window)                                                     ))                                                  (il:* il:\;                                                   "just reuse BUTTONS to hold result DONEFN")                                     (il:\\fm.menuhandler il:window t)                                     (return il:buttons))                              (t                          (il:* il:\; "let other button events run")                                 (il:block))))                          ((il:readp)                           (il:setq il:chcode (il:\\getkey))                           (il:selectq il:chcode                                 (530                        (il:* il:\; "SKIP-NEXT key")                                      (il:fm.skipnext il:window))                                 (562             (il:* il:\; "SHIFT-SKIP-NEXT key means clear first")                                      (il:fm.skipnext il:window t))                                 (il:selectq (il:getsyntax il:chcode il:\\fm.edit-ttbl)                                       (il:chardelete        (il:* il:\; "backup char,")                                                      (il:\\fm.edit-backup))                                       (il:worddelete        (il:* il:\; "delete word")                                                      (il:\\fm.edit-worddelete))                                       (il:\\fm.edit-insert)))))                       (cond                          ((il:timerexpired? il:timeout)                           (return (il:apply* il:donefn il:edititem il:window)))))))))(il:\\fm.edit-preparetoedit  (il:lambda (il:edititem il:startflg)                       (il:* il:|jow| "17-Oct-86 17:11")                                                  (il:* il:|;;;| "called to prepare edit info, displaystream, and window for EDITITEM.  References variables bound in FM.EDIT-ITEM.")    (il:\\fm.itemprop il:edititem 'il:selectedfn (il:function il:nill))                                                  (il:* il:\;         "insure edit item won't have selectedfn side effect, because end of edit is not well defined")    (il:windowprop il:window 'il:fm.edititem il:edititem)    (il:windowprop il:window 'il:fm.edit-timer il:timeout)    (il:setq il:boxoffset (or (il:\\fm.itemprop il:edititem 'il:boxoffset)                              0))    (il:setq il:font (il:\\fm.itemprop il:edititem 'il:font))    (il:setq il:bitmap (il:\\fm.itemprop il:edititem 'il:bitmap))    (il:setq il:itemwidth (il:stringwidth (il:\\fm.itemprop il:edititem 'il:label)                                 il:font))    (il:setq il:maxwidth (il:\\fm.itemprop il:edititem 'il:maxwidth))    (il:setq il:limitchars (il:\\fm.itemprop il:edititem 'il:limitchars))    (il:setq il:echochar (il:\\fm.itemprop il:edititem 'il:echochar))                                                             (il:* il:|setup| il:|edit|                                                              il:|pointer| il:|info|)    (il:setq stream (il:dspcreate il:bitmap))    (let ((il:region (il:\\fm.itemprop il:edititem 'il:region))          il:pointer)         (il:setq il:displayleft (il:|fetch| (il:region il:left)                                        il:|of| il:region))         (il:setq il:displaybottom (il:|fetch| (il:region il:bottom)                                          il:|of| il:region))         (il:setq il:left (il:iplus il:displayleft il:boxoffset))         (il:setq il:pointer (il:|if| il:startflg il:|then| (cons 1 0)                                    il:|else|                                    (il:\\fm.edit-getpointerinfo (il:\\fm.itemprop il:edititem                                                                        'il:label)                                           il:font il:left (il:lastmousex il:window))))         (il:setq il:stringptr (car il:pointer))         (il:setq il:tailptr (il:iplus il:boxoffset (cdr il:pointer)))                                                             (il:* il:\;                                              "setup window x and y position, so caret it right place")         (il:dspxposition (il:iplus il:left (cdr il:pointer))                il:window)         (il:dspyposition (il:iplus il:displaybottom (il:fontprop il:font 'il:descent)                                 il:boxoffset)                il:window)                                   (il:* il:\;                              "setup edit stream, used for printing inserted characters to the bitmap")         (il:dspxposition il:tailptr stream)         (il:dspyposition (il:iplus (il:fontprop il:font 'il:descent)                                 il:boxoffset)                stream)         (il:dspfont il:font stream))))(il:\\fm.edit-findnext  (il:lambda nil                                             (il:* il:|jow| "14-Nov-85 00:05")                    (il:* il:|find| il:|the| il:|next| il:|edit| il:|item| il:|in| il:|the|           il:|freemenu| il:|after| il:item. il:|Return| nil il:|if| il:|there| il:|isn't|           il:|another| il:|one.|)    (il:|for| il:i il:|in| (cdr (il:fmemb il:edititem (il:windowprop il:window 'il:fm.items)))           il:|thereis|           (eq (il:\\fm.itemprop il:i 'type)               'il:edit))))(il:\\fm.edit-findfirst  (il:lambda (il:window)                                     (il:* il:|jow| "18-Jun-86 17:01")                                                             (il:* il:|start| il:|editing| il:|the|                                                              il:|first| il:|edit| il:|item| il:|in|                                                              il:|the| il:|menu.|)    (il:|for| il:i il:|in| (il:windowprop il:window 'il:fm.items)           il:|thereis|           (eq (il:\\fm.itemprop il:i 'type)               'il:edit))))(il:\\fm.edit-backup  (il:lambda nil                                             (il:* il:|jow| "24-Apr-86 16:23")                                                             (il:* il:|backup| 1 il:|character,|                                                              il:|if| il:|possible|)    (il:|if| (il:igreaterp il:stringptr 1)           il:|then|           (il:setq il:stringptr (il:sub1 il:stringptr))           (il:setq il:charwidth (il:charwidth (il:nthcharcode (il:\\fm.itemprop il:edititem                                                                      'il:label)                                                      il:stringptr)                                        il:font))           (il:relmoveto (il:minus il:charwidth)                  0 il:window)           (il:relmoveto (il:minus il:charwidth)                  0 stream)           (il:|if| (il:ilessp (il:dspxposition nil il:window)                           (il:|fetch| (il:region il:left)                                  il:|of|                                  (il:dspclippingregion nil il:window)))                  il:|then|                  (il:scrollw il:window (il:\\fm.edit-scrollamount)                         0)                                  (il:* il:|about| il:|to| il:|backup|                                                              il:|off| il:|window:| il:|scroll.|)                  )           (il:bitblt il:bitmap il:tailptr il:boxoffset il:bitmap (il:idifference il:tailptr                                                                          il:charwidth)                  il:boxoffset                  (il:iplus il:boxoffset il:itemwidth (il:minus il:tailptr))                  (il:fontprop il:font 'il:height))           (il:\\fm.itemprop il:edititem 'il:label (il:\\fm.edit-strdelete (il:\\fm.itemprop                                                                            il:edititem                                                                            'il:label)                                                          il:stringptr il:stringptr))           (il:setq il:itemwidth (il:idifference il:itemwidth il:charwidth))           (il:setq il:tailptr (il:idifference il:tailptr il:charwidth))           (il:\\fm.edit-updateafterdelete))))(il:\\fm.edit-worddelete  (il:lambda nil                                             (il:* il:|jow| "24-Apr-86 16:54")                    (il:* il:|called| il:|on| il:^w. il:|The| il:|list| il:\\fm.edit-wroddelimchars           il:|specifies| il:\a il:|list| il:|of| il:|character| il:|codes| il:|that|           il:|stop| il:|word| il:|delete.| il:|Backup| il:|over| il:|any| il:|number|           il:|of| il:|these| il:|chars,| il:|then| il:|any| il:|number| il:|of|           il:|non-delim| il:|chars,| il:|until| il:|get| il:|to| il:|another| il:|delim|           il:|char,| il:|leaving| il:|that| il:|char| il:|in| il:|the| il:|string.|)    (il:|if| (il:neq il:stringptr 1)           il:|then|           (let ((il:end (il:sub1 il:stringptr))                 (string (il:\\fm.itemprop il:edititem 'il:label))                 (il:endtailptr il:boxoffset))                (il:|while| (and (il:neq il:end 1)                                 (il:fmemb (il:nthcharcode string (il:sub1 il:end))                                        il:\\fm.edit-worddelimchars))                       il:|do|                               (il:* il:|move| il:end il:|back|                                                              il:|to| il:|the| il:|farthest|                                                              il:|sequential| il:|delim| il:|char|)                       (il:setq il:end (il:sub1 il:end)))                (il:|while| (and (il:neq il:end 1)                                 (not (il:fmemb (il:nthcharcode string (il:sub1 il:end))                                             il:\\fm.edit-worddelimchars)))                       il:|do|                               (il:* il:|move| il:end il:|back|                                                              il:|to| il:|the| il:|farthest|                                                              il:|sequential| il:|non-delim|                                                              il:|char|)                       (il:setq il:end (il:sub1 il:end)))                    (il:* il:|now| il:end il:|is| il:|pointing| il:|to| il:|the| il:|farthest|           il:|char| il:|to| il:|be| il:|deleted|)                (il:|if| (il:neq il:end 1)                       il:|then|                       (il:setq il:endtailptr (il:iplus il:boxoffset (il:stringwidth                                                                      (il:substring string 1                                                                             (il:sub1 il:end))                                                                      il:font))))                (il:bitblt il:bitmap il:tailptr il:boxoffset il:bitmap il:endtailptr il:boxoffset                       (il:iplus il:boxoffset il:itemwidth (il:minus il:tailptr))                       (il:fontprop il:font 'il:height))                (il:\\fm.itemprop il:edititem 'il:label (il:\\fm.edit-strdelete string il:end                                                               (il:sub1 il:stringptr)))                (il:setq il:itemwidth (il:stringwidth (il:\\fm.itemprop il:edititem 'il:label)                                             il:font))                (il:setq il:stringptr il:end)                (il:setq il:tailptr il:endtailptr)                (il:dspxposition (il:iplus il:left il:tailptr)                       il:window)                (il:dspxposition il:tailptr stream)                (il:|if| (il:ilessp (il:dspxposition nil il:window)                                (il:|fetch| (il:region il:left)                                       il:|of|                                       (il:dspclippingregion nil il:window)))                       il:|then|                       (il:scrollw il:window (il:\\fm.edit-scrollamount)                              0)                             (il:* il:|about| il:|to| il:|backup|                                                              il:|off| il:|window:| il:|scroll.|)                       )                (il:\\fm.edit-updateafterdelete)))))(il:\\fm.edit-insert  (il:lambda nil                                             (il:* il:|jow| "10-Jun-86 16:09")    (il:|if| (or (not il:limitchars)                 (and (il:listp il:limitchars)                      (il:fmemb (il:character il:chcode)                             il:limitchars))                 (and (il:atom il:limitchars)                      (il:apply* il:limitchars il:edititem il:window (il:character il:chcode))))           il:|then|                                         (il:* il:|insert| il:\a il:|single|                                                              il:|character,| il:chcode il:|into|                                                              il:|the| il:|string|)           (il:setq il:charwidth (il:charwidth il:chcode il:font))           (il:|if| (or (not il:maxwidth)                        (il:ileq (il:iplus il:itemwidth il:charwidth)                               il:maxwidth))                  il:|then|                                  (il:* il:\i il:|am| il:|going| il:|to|                                                              il:|insert|)                  (il:relmoveto il:charwidth 0 il:window)                  (il:|if| (il:igreaterp (il:dspxposition nil il:window)                                  (il:iplus (il:|fetch| (il:region il:left)                                                   il:|of|                                                   (il:dspclippingregion nil il:window))                                         (il:|fetch| (il:region il:width)                                                il:|of|                                                (il:dspclippingregion nil il:window))))                         il:|then|                           (il:* il:|about| il:|to| il:|type|                                                              il:|off| il:|window:| il:|scroll|                                                              il:|back.|)                         (il:|add| (il:|fetch| (il:region il:width)                                          il:|of|                                          (il:windowprop il:window 'il:extent))                                il:\\fm.edit-blocksize)                         (il:scrollw il:window (il:minus (il:\\fm.edit-scrollamount))                                0))                  (il:|if| (il:igreaterp (il:iplus il:itemwidth il:charwidth)                                  (il:bitmapwidth il:bitmap))                         il:|then|                    (il:* il:|current| il:|bitmap| il:|too| il:|small,| il:|make| il:|new|           il:|one.| il:|This| il:|won't| il:|get| il:|done| il:|if| il:|item| il:|is|           il:|boxed.|)                         (il:\\fm.itemprop il:edititem 'il:bitmap (il:bitmapcreate                                                                   (il:iplus (il:bitmapwidth                                                                                     il:bitmap)                                                                          il:\\fm.edit-blocksize)                                                                   (il:bitmapheight il:bitmap)))                         (il:bitblt il:bitmap 0 0 (il:\\fm.itemprop il:edititem 'il:bitmap)                                0 0)                         (il:setq il:bitmap (il:\\fm.itemprop il:edititem 'il:bitmap))                         (il:dspdestination il:bitmap stream))                                                             (il:* il:|now| il:|insert|                                                              il:|character| il:|into| il:|bitmap|)                  (il:bitblt il:bitmap il:tailptr il:boxoffset il:bitmap (il:iplus il:tailptr                                                                                 il:charwidth)                         il:boxoffset                         (il:iplus il:boxoffset il:itemwidth (il:minus il:tailptr))                         (il:fontprop il:font 'il:height))                  (il:setq il:itemwidth (il:iplus il:itemwidth il:charwidth))                  (il:|if| (il:fmemb il:chcode il:\\fm.edit-controlchars)                         il:|then|                    (il:* il:|for| il:cr\, il:lf\, il:tab\, il:|etc,| il:|echo| il:|non|           il:|control| il:|action| il:|char|)                         (il:prin1 (or il:echochar (il:character il:\\fm.edit-controlcharsecho))                                stream)                         il:|else|                         (il:prin1 (or il:echochar (il:character il:chcode))                                stream))                  (il:\\caret.down)                  (il:bitblt il:bitmap 0 0 il:window il:displayleft il:displaybottom il:maxwidth)                  (il:\\fm.itemprop il:edititem 'il:label (il:\\fm.edit-strinsert (il:\\fm.itemprop                                                                                   il:edititem                                                                                   'il:label)                                                                 (il:character il:chcode)                                                                 il:stringptr))                  (il:setq il:stringptr (il:add1 il:stringptr))                  (il:setq il:tailptr (il:iplus il:tailptr il:charwidth))                  (il:extendregion (il:windowprop il:window 'il:extent)                         (il:createregion il:left 0 (il:iplus il:itemwidth il:boxoffset)                                0))))))(il:\\fm.edit-delete  (il:lambda nil                                             (il:* il:|jow| "10-Jun-86 16:12")                    (il:* il:|Called| il:|when| il:\a il:|right| il:|button| il:|event| il:|occurs|           il:|in| il:|ITEM's| il:|region,| il:|while| il:|it| il:|is| il:|being|           il:|edited.| il:|Delete| il:|the| il:|substring| il:|of| il:|the| il:|items|           il:|string| il:|starting| il:|at| il:|the| il:|current| il:|position,| il:|and|           il:|ending| il:|at| il:|the| il:|position| il:|of| il:mousex\, il:|inclusive.|)    (il:\\caret.down)    (il:|while| (il:mousestate (not il:up))           il:|bind|           (il:region il:_ (il:\\fm.itemprop il:edititem 'il:region))           (il:infinitewidth il:_ (il:\\fm.itemprop il:edititem 'il:infinitewidth))           (il:bottom il:_ (il:iplus il:boxoffset il:displaybottom))           (il:height il:_ (il:fontprop il:font 'il:height))           (il:pivot il:_ (il:iplus il:displayleft il:tailptr))           il:end il:pointer il:oldpointer il:movedoff il:|eachtime| (il:setq il:mousex (                                                                                        il:lastmousex                                                                                         il:window))           (il:setq il:mousey (il:lastmousey il:window))           il:|do|           (il:|if| (il:\\fm.onitem il:region il:mousex il:mousey il:infinitewidth)                  il:|then|                  (il:setq il:oldpointer il:pointer)                  (il:setq il:pointer (il:\\fm.edit-getpointerinfo (il:\\fm.itemprop il:edititem                                                                          'il:label)                                             il:font il:left il:mousex))                  (il:|if| (or il:movedoff (not (il:equal il:pointer il:oldpointer)))                         il:|then|                         (il:setq il:movedoff nil)                         (il:setq il:end (il:iplus il:left (cdr il:pointer)))                         (il:bitblt il:bitmap 0 0 il:window il:displayleft il:displaybottom                                 il:maxwidth)                         (il:|if| (il:igreaterp il:end il:pivot)                                il:|then|                    (il:* il:|highlight| il:|from|                                                              il:|pivot| il:|to| il:|end|)                                (il:bltshade il:blackshade il:window il:pivot il:bottom                                       (il:idifference il:end il:pivot)                                       il:height                                       'il:invert)                                il:|else|                    (il:* il:|highlight| il:|from|                                                              il:|end| il:|to| il:|pivot|)                                (il:bltshade il:blackshade il:window il:end il:bottom                                       (il:idifference il:pivot il:end)                                       il:height                                       'il:invert)))                  il:|elseif|                  (not il:movedoff)                  il:|then|                  (il:bitblt il:bitmap 0 0 il:window il:displayleft il:displaybottom il:maxwidth)                  (il:setq il:movedoff t))           il:|finally|           (il:|if| (and (il:\\fm.onitem il:region il:mousex il:mousey il:infinitewidth)                         (il:neq (car il:pointer)                                il:stringptr))                  il:|then|                  (il:|if| (il:igreaterp il:end il:pivot)                         il:|then|                    (il:* il:|from| il:|current| il:|to| il:|right:| il:|pointers| il:|and|           il:|xpositions| il:|remain| il:|the| il:|same|)                         (il:bitblt il:bitmap (il:iplus il:boxoffset (cdr il:pointer))                                il:boxoffset il:bitmap il:tailptr il:boxoffset (il:iplus il:boxoffset                                                                                       il:itemwidth                                                                                      (il:minus                                                                                       il:tailptr))                                il:height)                         (il:\\fm.itemprop il:edititem 'il:label (il:\\fm.edit-strdelete                                                                  (il:\\fm.itemprop il:edititem                                                                         'il:label)                                                                  il:stringptr                                                                  (il:sub1 (car il:pointer))))                         il:|else|                           (il:* il:|from| il:|current| il:|to|                                                              il:|left:|)                         (il:bitblt il:bitmap il:tailptr il:boxoffset il:bitmap (il:iplus                                                                                 il:boxoffset                                                                                 (cdr il:pointer))                                il:boxoffset                                (il:iplus il:boxoffset il:itemwidth (il:minus il:tailptr))                                il:height)                         (il:\\fm.itemprop il:edititem 'il:label (il:\\fm.edit-strdelete                                                                  (il:\\fm.itemprop il:edititem                                                                         'il:label)                                                                  (car il:pointer)                                                                  (il:sub1 il:stringptr)))                         (il:setq il:stringptr (car il:pointer))                         (il:setq il:tailptr (il:iplus il:boxoffset (cdr il:pointer)))                         (il:dspxposition il:end il:window)                         (il:dspxposition il:tailptr stream))                  (il:setq il:itemwidth (il:stringwidth (il:\\fm.itemprop il:edititem 'il:label)                                               il:font))                  (il:\\fm.edit-updateafterdelete)))))(il:\\fm.edit-getpointerinfo  (il:lambda (string il:font il:left il:mousex)              (il:* il:|jow| "22-Apr-86 14:58")                    (il:* il:|calculate| il:|string| il:|pointer| il:|and| il:|tail| il:|pointer|           il:|from| il:|mouse| il:|location| il:|within| il:|string.|          il:|Assume| il:|mousex| il:|in| il:|window| il:|coordinates,| il:|not|           il:region il:|coordinates.| il:|Return| il:|as| il:|dotted| il:|pair|          (il:|stringptr| . il:|tailptr|) il:-- il:|Each| il:|character| il:|is|           il:|sensitive| 2 il:|bits| il:|to| il:|the| il:|left| il:|to| il:|allow|           il:|for| il:|mousing| il:|between| il:|chars|)    (il:setq il:mousex (il:idifference il:mousex il:left))    (let ((il:ptr))         (il:|for| il:n (il:width il:_ -2)                il:|from| 1 il:|to| (il:nchars string)                il:|do|                (il:|add| il:width (il:charwidth (il:nthcharcode string il:n)                                          il:font))                (il:|if| (il:igreaterp il:width il:mousex)                       il:|then|                       (il:setq il:ptr il:n)                       (return)))         (il:|if| il:ptr il:|then|                           (il:* il:|mouse| il:|at| il:ptr                                                              il:|in| il:|string|)                (cons il:ptr (il:stringwidth (or (il:substring string 1 (il:sub1 il:ptr))                                                 "")                                    il:font))                il:|else|                                    (il:* il:|mouse| il:|at| il:|end|                                                              il:|of| il:|string|)                (cons (il:add1 (il:nchars string))                      (il:stringwidth string il:font))))))(il:\\fm.edit-movecaret  (il:lambda nil                                             (il:* il:|jow| "10-Sep-86 10:33")                    (il:* il:|mouse| il:|event| il:|has| il:|occured| il:|at| il:mousex il:|in|           il:|ITEM's| il:|region| il:|while| il:|editing.|          il:|Move| il:|the| il:|edit| il:|caret| il:|to| il:|that| il:|position|)    (il:\\caret.down)    (il:setq il:pointer (il:\\fm.edit-getpointerinfo (il:\\fm.itemprop il:edititem 'il:label)                               il:font il:left il:mousex))    (il:dspxposition (il:iplus il:left (cdr il:pointer))           il:window)                                        (il:* il:|move| il:|caret|)    (il:setq il:stringptr (car il:pointer))                  (il:* il:|update| il:|edit|                                                              il:|pointers|)    (il:setq il:tailptr (il:iplus il:boxoffset (cdr il:pointer)))    (il:dspxposition il:tailptr stream)))(il:\\fm.edit-strdelete  (il:lambda (string il:n il:m)                              (il:* il:|jow| "17-Jul-85 00:29")                    (il:* il:|delete| il:|from| il:|characters| il:n il:|through| il:m il:|of|           il:string. il:|no| il:|bounds| il:|checks| il:|are| il:|made| il:|on| il:n           il:|and| il:m. il:|returns| il:\a il:|new| il:|string|)    (il:concat (or (il:substring string 1 (il:sub1 il:n))                   "")           (or (il:substring string (il:add1 il:m)                      (il:nchars string))               ""))))(il:\\fm.edit-strinsert  (il:lambda (string il:char il:n)                           (il:* il:|jow| "17-Jul-85 00:40")                    (il:* il:|return| il:|new| il:|string| il:|with| il:char il:|inserted| il:|as|           il:|new| il:|character| il:|at| il:|position| il:n.          il:|just| il:|appends| il:char il:|if| il:n il:|is| 1 il:|greater| il:|than|           il:|nchars|)    (il:concat (or (il:substring string 1 (il:sub1 il:n))                   "")           il:char           (or (il:substring string il:n (il:nchars string))               ""))))(il:\\fm.edit-updateafterdelete  (il:lambda nil                                             (il:* il:|jow| "10-Jun-86 16:09")                    (il:* il:|called| il:|to| il:|update| il:|the| il:|screen| il:|after| il:\a           il:|delete| il:|has| il:|occured.|)    (il:\\caret.down)    (il:bltshade il:whiteshade il:bitmap (il:iplus il:boxoffset il:itemwidth)           il:boxoffset           (il:idifference (il:bitmapwidth il:bitmap)                  (il:iplus il:itemwidth il:boxoffset il:boxoffset))           (il:fontprop il:font 'il:height))                 (il:* il:|whiteout| il:|to|                                                              il:|rightmargin|)    (il:bitblt il:bitmap 0 0 il:window il:displayleft il:displaybottom il:maxwidth))))(il:declare\: il:donteval@load il:doeval@compile il:dontcopy il:compilervars (il:addtovar il:nlama )(il:addtovar il:nlaml )(il:addtovar il:lama il:fm.itemprop))(il:putprops il:freemenu il:copyright ("Xerox Corporation" 1986))(il:declare\: il:dontcopy  (il:filemap (nil (17477 39813 (il:freemenu 17490 . 19793) (il:fm.itemprop 19795 . 20457) (il:fm.getitem 20459 . 21564) (il:fm.getstate 21566 . 23983) (il:fm.highlightitem 23985 . 24523) (il:fm.changelabel 24525 . 27001) (il:fm.changestate 27003 . 29346) (il:fm.resetstate 29348 . 30145) (il:fm.resetmenu 30147 . 30894) (il:fm.resetshape 30896 . 32796) (il:fm.resetgroups 32798 . 33407) (il:fm.redisplayitem 33409 . 33935) (il:fm.redisplaymenu 33937 . 34315) (il:fm.shade 34317 . 35065) (il:fm.editp 35067 . 35268) (il:fm.edititem 35270 . 36139) (il:fm.endedit 36141 . 36348) (il:fm.skipnext 36350 . 38217) (il:fm.whichitem 38219 . 39378) (il:fm.topgroupid 39380 . 39811)) (50121 126281 (il:\\fm.format 50134 . 54195) (il:\\fm.formatbyrow 54197 . 56632) (il:\\fm.formatbycolumn 56634 . 60683) (il:\\fm.formatbygrid 60685 . 68476) (il:\\fm.formatexplicit 68478 . 73073) (il:\\fm.layoutrow 73075 . 76465) (il:\\fm.layoutcolumn 76467 . 80203) (il:\\fm.layoutgrid 80205 . 86513) (il:\\fm.justifyitems 86515 . 92555) (il:\\fm.justifygroups 92557 . 92979) (il:\\fm.pushgroup 92981 . 95729) (il:\\fm.checkdescription 95731 . 103428) (il:\\fm.checkprops 103430 . 104640) (il:\\fm.createitem 104642 . 107970) (il:\\fm.getregions 107972 . 111111) (il:\\fm.getbitmaps 111113 . 114686) (il:\\fm.makebitmap 114688 . 117056) (il:\\fm.readuserdata 117058 . 117769) (il:\\fm.makelinks 117771 . 118483) (il:\\fm.collectnways 118485 . 122015) (il:\\fm.setattachpoint 122017 . 122580) (il:\\fm.createw 122582 . 125401) (il:\\fm.startedit 125403 . 126279)) (140140 161256 (il:\\fm.redisplaymenu 140153 . 143098) (il:\\fm.reshapefn 143100 . 146208) (il:\\fm.unscrollwindow 146210 . 147205) (il:\\fm.resetclippingregion 147207 . 148892) (il:\\fm.fillwindow 148894 . 150522) (il:\\fm.initcornersfn 150524 . 152008) (il:\\fm.transposehorz 152010 . 153049) (il:\\fm.transposevert 153051 . 154101) (il:\\fm.updategroupextent 154103 . 157226) (il:\\fm.windowextent 157228 . 158449) (il:\\fm.updatewindowextent 158451 . 161254)) (163874 173589 (il:\\fm.windowentryfn 163887 . 165604) (il:\\fm.buttoneventfn 165606 . 166096) (il:\\fm.rightbuttonfn 166098 . 167259) (il:\\fm.doselection 167261 . 168103) (il:\\fm.menuhandler 168105 . 173587)) (176971 209788 (il:\\fm.getitemprop 176984 . 180208) (il:\\fm.putitemprop 180210 . 187400) (il:\\fm.cgetitemprop 187402 . 191583) (il:\\fm.cputitemprop 191585 . 200468) (il:\\fm.displayitem 200470 . 200694) (il:\\fm.highlightitem 200696 . 200925) (il:\\fm.changelabel 200927 . 204776) (il:\\fm.changestate 204778 . 206268) (il:\\fm.endedit 206270 . 207328) (il:\\fm.insurevisible 207330 . 208269) (il:\\fm.clearitem 208271 . 209786)) (209838 210870 (il:\\fm.momentary-setup 209851 . 210359) (il:\\fm.momentary-selectedfn 210361 . 210868)) (210917 214687 (il:\\fm.toggle-setup 210930 . 212445) (il:\\fm.toggle-downfn 212447 . 213183) (il:\\fm.toggle-selectedfn 213185 . 213816) (il:\\fm.toggle-changestate 213818 . 214685)) (214734 225015 (il:\\fm.3state-setup 214747 . 216160) (il:\\fm.3state-setupoffbitmap 216162 . 221552) (il:\\fm.3state-downfn 221554 . 222690) (il:\\fm.3state-selectedfn 222692 . 223620) (il:\\fm.3state-changestate 223622 . 225013)) (225061 229195 (il:\\fm.state-setup 225074 . 227043) (il:\\fm.state-selectedfn 227045 . 228553) (il:\\fm.state-changestate 228555 . 229193)) (229240 235258 (il:\\fm.nway-setup 229253 . 230377) (il:\\fm.nway-message 230379 . 230952) (il:\\fm.nway-downfn 230954 . 232264) (il:\\fm.nway-movedfn 232266 . 233595) (il:\\fm.nway-selectedfn 233597 . 234371) (il:\\fm.nway-changestate 234373 . 235256)) (235305 239399 (il:\\fm.number-setup 235318 . 238336) (il:\\fm.number-message 238338 . 238685) (il:\\fm.number-selectedfn 238687 . 238924) (il:\\fm.number-changestate 238926 . 239397)) (239445 239689 (il:\\fm.display-setup 239458 . 239687)) (239739 241574 (il:\\fm.editstart-setup 239752 . 240247) (il:\\fm.editstart-message 240249 . 240564) (il:\\fm.editstart-selectedfn 240566 . 241572)) (243666 280440 (il:\\fm.edit-setup 243679 . 246323) (il:\\fm.edit-message 246325 . 246652) (il:\\fm.edit-setupttbl 246654 . 247219) (il:\\fm.edit-item 247221 . 252548) (il:\\fm.edit-preparetoedit 252550 . 255780) (il:\\fm.edit-findnext 255782 . 256335) (il:\\fm.edit-findfirst 256337 . 256926) (il:\\fm.edit-backup 256928 . 259272) (il:\\fm.edit-worddelete 259274 . 263442) (il:\\fm.edit-insert 263444 . 269087) (il:\\fm.edit-delete 269089 . 275551) (il:\\fm.edit-getpointerinfo 275553 . 277443) (il:\\fm.edit-movecaret 277445 . 278439) (il:\\fm.edit-strdelete 278441 . 279029) (il:\\fm.edit-strinsert 279031 . 279635) (il:\\fm.edit-updateafterdelete 279637 . 280438)))))il:stop