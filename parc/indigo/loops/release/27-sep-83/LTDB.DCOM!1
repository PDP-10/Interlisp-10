(FILECREATED " 1-JUN-83 16:09:44" ("compiled on " {INDIGO}<KBVLSI>LOOPS>SOURCES>LTDB.;6) "30-MAY-83 21:21:58" tcompl'd in LOOPS.SYSOUT dated " 1-JUN-83 14:05:56")(FILECREATED " 1-JUN-83 12:59:43" {INDIGO}<KBVLSI>LOOPS>SOURCES>LTDB.;6 144567 previous date: "31-MAY-83 16:18:30" {IVY}<MITTAL>LISP>LTDB.;38)(PRETTYCOMPRINT LTDBCOMS)(RPAQQ LTDBCOMS ((INSTANCES * LTDBINSTANCES)))(RPAQQ LTDBINSTANCES (LTP86 LTP85 LTP84 LTP83 LTFSendSuper LTP82 LTFGetInitialValue LTP81 LTFPutNthValue LTFGetNthValue LTTemplate LTEMapObjectNames LTFGetObjectNames LTP80 LTECancel LTEMakeCurrent LTEThawKB LTEFreezeKB LTEAssocKB LTEDumpToKB LTESummarize LTP79 LTP78 LTP77 LTEDelete LTECommunity LTEOld LTENew LTP76 LTP75 LTP74 LTP73 LTP72 LTP71 LTP70 LTP69 LTP68 LTP67 LTP66 LTFtype? LTFClass LTFGetObjectRec LTP65 LTP64 LTP63 LTP62 LTP61 LTP60 LTP59 LTP58 LTP57 LTP56 LTP55 LAVPutValue LTP54 LTP53 LAVGetValue LTP52 LTP51 LTP50 LTP49 LTP48 LTP47 LTP46 LTP45 LTP44 LTP43 LTP42 LTP41 LTP40 LTP39 LTP38 LTP37 LTP36 LTP35 LTP34 LTP33 LTP32 LTP31 LTP30 LTP29 LTP28 LTP27 LTP26 LTDumpInstance LTLoadInstance LTP25 LTP24 LTP23 LTP22 LTP21 LTP20 LTP19 LTP18 LTP17 LTP16 LTMTitleCommandInObj LTMSetNameInObj LTMRenameInObj LTMPutInObj LTMPPV!InObj LTMPP!InObj LTMPPInObj LTMList!InObj LTMListInObj LTMInspectValueCommandInObj LTMInspectTitleMenuInObj LTMInspectTitleInObj LTMInspectStoreInObj LTMInspectPropertiesInObj LTMInspectPropCommandInObj LTMInspectFetchInObj LTMHasIVInObj LTMEditInObj LTMDumpFactsInObj LTMDestroy!InObj LTMDestroyInObj LTMTitleCommandInClass LTMSetNameInClass LTMRenameInClass LTMPutInClass LTMPPV!InClass LTMPP!InClass LTMPPInClass LTMList!InClass LTMInspectValueCommandInClass LTMInspectTitleMenuInClass LTMInspectTitleInClass LTMInspectStoreInClass LTMInspectPropertiesInClass LTMInspectPropCommandInClass LTMInspectFetchInClass LTMHasIVInClass LTMEditInClass LTMDumpFactsInClass LTMDestroy!InClass LTMDestroyInClass LTMWhereIs LTMUnderstands LTMUnSetName LTMTraceIt LTMReturnDefaultValue LTMPutIVProp LTMPrintOn LTMNoObjectForMsg LTMMessageNotUnderstood LTMInstantiate LTMInstOf! LTMInstOf LTMInspect LTMIVMissing LTMDoMethod LTMDeleteIV LTMCopyShallow LTMCopyDeep LTMClassName LTMClass LTMBreakIt LTMAt LTMAssocKB LTMAddIV LTMSubClasses LTMReplaceSupers LTMPPMethod LTMPPM LTMOnFile LTMNewWithValues LTMNewTemp LTMNew LTMMoveMethod LTMMethodDoc LTMInitialize LTMHasCV LTMFetchMethod LTMEditMethod LTMDisplaySubClasses LTMDefMethod LTMCopyMethod LTMCommentMethods LTP15 LTMDeleteInClass LTMAdd LTP14 LTP13 LTP12 LTP11 LTP10 LTP9 LTP8 LTP7 LTP6 LTP5 LTP4 LTP3 LTMListInClass LTP2 LTFReplaceActiveValue LTFPutLocalState LTFGetLocalState LTFRenameMethodFunction LTFMoveMethod LTFMoveVariable LTFMoveClassVariable LTFRenameVariable LTFCalledFns LTFRenameMethod LTP1 LTKernel LTFTryMethod LTFDoMethod LTFPutItOnly LTFGetItOnly LTFPutIt LTFGetIt LTFPutMethodOnly LTFGetMethodOnly LTFPutMethod LTFGetMethod LTFPutClassOnly LTFGetClassOnly LTFPutClass LTFGetClass LTFPutClassValueOnly LTFPutValueOnly LTFPushClassValue LTFPutClassValue LTFAddValue LTFPushValue LTFGetClassValueOnly LTFGetValueOnly LTFGetClassValue LTFDM LTFDC LTFPutValue LTFGetValue LTFSend LTActiveValue LTObject LTMethod))(DEFINST LOOPSTestPrimitive (LTP86 "Y_SC@8e") (name #(LTP86 NIL RememberName)) (CasesUsed) (PreTest) (PreTestOf) (ResetExp) (SetUp (PROGN (LTLoadFile (QUOTE LTLOAD)) (SETQ LTDUMPCCOMS LTLOADCOMS) (MAKEFILE (QUOTE LTDUMPC) (QUOTE (C F))) (for x in LTLOADINSTANCES do (_ (GetObjectRec x) Destroy)) (LOAD (QUOTE LTDUMPC.DCOM)))) (TestExpr (AND (TestLoadedInstances (%$ LD4)) (TestLoadedInstances (%$ LD1)))) (SyntaxTest) (AltTest) (AltTestOf) (TestDesc "Dumping instances to file and compiling file") (UsesObj) (Tested?) (CompletelyTested?) (StandBy) (SubTest) (AfterTest) (SubTestOf #((LTDumpInstance)										    NIL MakeBackLink)))(DEFINST LOOPSTestPrimitive (LTP85 "M]SC@=M[") (name #(LTP85 NIL RememberName)) (CasesUsed #((LSS2)											     NIL 										     MakeBackLink)) (PreTest #(NIL BuildPreTest MakeBackLink) Tested? ? Failed ?) (PreTestOf) (ResetExp (PutValue (%$ LSS2) (QUOTE ssVar1) 0)) (SetUp (ATEST (SEND (%$ LSS2) SendSuper5 (QUOTE ssVar1)) "Invoke the cascaded _Super scheme") Tested? #(? NIL FlashTestBrowser) FailedExp ?) (TestExpr (EQ (GetValue (%$ LSS2) (QUOTE ssVar1)) 30) FailedExpr ? HowFailed ?) (SyntaxTest ? Tested? ? Failed ?) (AltTest ? Tested? ? Failed ?) (AltTestOf) (TestDesc "Cascaded _Super: invoked indirectly") (UsesObj #((LOOPSTestCases LOOPSTestClass2 LOOPSTestClass1 LOOPSTestSS LOOPSTestSS2)												      											      NIL AllowRemove)) (Tested? #(? NIL InformTestBrowser) DoneOnce ?) (CompletelyTested? ?) (StandBy) (SubTest ? Tested? ? Failed ?) (AfterTest) (SubTestOf #((LTP83)						NIL MakeBackLink)))(DEFINST LOOPSTestPrimitive (LTP84 "M]SC@=MZ") (name #(LTP84 NIL RememberName)) (CasesUsed #((LSS1)											     NIL 										     MakeBackLink)) (PreTest #(NIL BuildPreTest MakeBackLink) Tested? ? Failed ?) (PreTestOf) (ResetExp (PutValue (%$ LSS1) (QUOTE ssVar1) 0)) (SetUp (ATEST (SEND (%$ LSS1) SendSuper5 (QUOTE ssVar1)) "Invoke the cascaded _Super scheme") Tested? #(? NIL FlashTestBrowser) FailedExp ?) (TestExpr (EQ (GetValue (%$ LSS1) (QUOTE ssVar1)) 30) FailedExpr ? HowFailed ?) (SyntaxTest ? Tested? ? Failed ?) (AltTest ? Tested? ? Failed ?) (AltTestOf) (TestDesc "Cascaded _Super: Invoked directly") (UsesObj #((LOOPSTestCases LOOPSTestClass2 LOOPSTestClass1 LOOPSTestSS)												    											      NIL AllowRemove)) (Tested? #(? NIL InformTestBrowser) DoneOnce ?) (CompletelyTested? ?) (StandBy) (SubTest ? Tested? ? Failed ?) (AfterTest) (SubTestOf #((LTFSendSuper)						NIL MakeBackLink)))(DEFINST LOOPSTestPrimitive (LTP83 "M]SC@=MO") (name #(LTP83 NIL RememberName)) (CasesUsed #((LSS2)											     NIL 										     MakeBackLink)) (PreTest ? Tested? ? Failed ?) (PreTestOf) (ResetExp) (SetUp ? Tested? #(? NIL FlashTestBrowser) FailedExp ?) (TestExpr (ANDALL (ATEST (EQ (SEND (%$ LSS2) SendSuper1) 6) "_Super fielded by next higher class") (ATEST (EQ (SEND (%$ LSS2) SendSuper2) 22) "_Super fielded by next higher class, which uses another _Super") (ATEST (EQ (SEND (%$ LSS2) SendSuper3) 31) "_Super fielded by the second super class") (ATEST (EQ (SEND (%$ LSS2) SendSuper4) 6) "_Super fielded by the left super class but the right super class also has the method")) FailedExpr ? HowFailed ?) (SyntaxTest ? Tested? ? Failed ?) (AltTest ? Tested? ? Failed ?) (AltTestOf) (TestDesc "_Super: invoked from the super of a class") (UsesObj #((LOOPSTestSuper LOOPSTestClass2 									LOOPSTestClass1 LOOPSTestSS)							NIL AllowRemove)) (Tested? #(? NIL 										InformTestBrowser) DoneOnce ?) (CompletelyTested? ?) (StandBy) (SubTest #((LTP85)						       NIL MakeBackLink) Tested? ? Failed ?) (AfterTest) (SubTestOf #((LTFSendSuper)			NIL MakeBackLink)))(DEFINST LOOPSTestLispFunc (LTFSendSuper "M]SC@=MN") (name #(LTFSendSuper NIL RememberName)) (CasesUsed #((LSS1)	    NIL MakeBackLink)) (PreTest #((LTFSend)					  NIL MakeBackLink) Tested? ? Failed ?) (PreTestOf) (ResetExp) (SetUp ? Tested? #(? NIL FlashTestBrowser) FailedExp ?) (TestExpr (ANDALL (ATEST (EQ (SEND (%$ LSS1) SendSuper1) 6) "_Super fielded by next higher class") (ATEST (EQ (SEND (%$ LSS1) SendSuper2) 22) "_Super fielded by next higher class, which uses another _Super") (ATEST (EQ (SEND (%$ LSS1) SendSuper3) 31) "_Super fielded by the second super class") (ATEST (EQ (SEND (%$ LSS1) SendSuper4) 6) "_Super fielded by the left super class but the right super class also has the method")) FailedExpr ? HowFailed ?) (SyntaxTest ? Tested? ? Failed ?) (AltTest ? Tested? ? Failed ?) (AltTestOf) (TestDesc "_Super: Invoked directly") (UsesObj #((LOOPSTestSuper LOOPSTestClass2 LOOPSTestClass1 LOOPSTestSS)				       NIL AllowRemove)) (Tested? #(? NIL InformTestBrowser) DoneOnce ?) (CompletelyTested? ?) (StandBy) (SubTest #((LTP84 LTP83)					      NIL MakeBackLink) Tested? ? Failed ?) (AfterTest) (LispName SENDSUPER))(DEFINST LOOPSTestPrimitive (LTP82 "M]SC@=MJ") (name #(LTP82 NIL RememberName)) (CasesUsed #((LTCA7)											     NIL 										     MakeBackLink)) (PreTest ? Tested? ? Failed ?) (PreTestOf) (ResetExp) (SetUp ? Tested? #(? NIL FlashTestBrowser) FailedExp ?) (TestExpr (AND (ATEST (EQUAL (GetInitialValue (%$ LTCA7) (QUOTE GIV1)) (QUOTE GIV1)) "GetInitialValue: simple value in class") (ATEST (EQUAL (GetInitialValue (%$ LTCA7) (QUOTE GIV2)) 6) "GetInitialValue: active value in class")) FailedExpr ? HowFailed ?) (SyntaxTest ? Tested? ? Failed ?) (AltTest ? Tested? ? Failed ?) (AltTestOf) (TestDesc "GetInitialValue: instance has values different from initial ones") (UsesObj #((LOOPSTestClass1)									       NIL AllowRemove)) (Tested? #(? NIL InformTestBrowser) DoneOnce ?) (CompletelyTested? ?) (StandBy) (SubTest ? Tested? ? Failed ?) (AfterTest) (SubTestOf #((LTFGetInitialValue)				   NIL MakeBackLink)))(DEFINST LOOPSTestLispFunc (LTFGetInitialValue "M]SC@=MG") (name #(LTFGetInitialValue NIL 										     RememberName)) (CasesUsed #((LTCA6)	    NIL MakeBackLink)) (PreTest #((LTFGetValue)					  NIL MakeBackLink) Tested? ? Failed ?) (PreTestOf) (ResetExp) (SetUp ? Tested? #(? NIL FlashTestBrowser) FailedExp ?) (TestExpr (AND (ATEST (EQUAL (GetInitialValue (%$ LTCA6) (QUOTE GIV1)) (QUOTE GIV1)) "GetInitialValue when class has simple value") (ATEST (EQUAL (GetInitialValue (%$ LTCA6) (QUOTE GIV2)) 6) "GetInitialValue when class has active value")) FailedExpr ? HowFailed ?) (SyntaxTest ? Tested? ? Failed ?) (AltTest ? Tested? ? Failed ?) (AltTestOf) (TestDesc "GetInitialValue: instance has no values") (UsesObj #((LOOPSTestClass1)						       NIL AllowRemove)) (Tested? #(? NIL 										InformTestBrowser) DoneOnce ?) (CompletelyTested? ?) (StandBy) (SubTest #((LTP82)						       NIL MakeBackLink) Tested? ? Failed ?) (AfterTest) (LispName))(DEFINST LOOPSTestPrimitive (LTP81 "M]SC@=ME") (name #(LTP81 NIL RememberName)) (CasesUsed #((LTCF3)											     NIL 										     MakeBackLink)) (PreTest ? Tested? ? Failed ?) (PreTestOf) (ResetExp) (SetUp ? Tested? #(? NIL FlashTestBrowser) FailedExp ?) (TestExpr (ATEST (EQUAL (GetLocalState (GetValueOnly (%$ LTCF3) (QUOTE GLS3)) (%$ LTCF3) (QUOTE GLS3)) (QUOTE GLS3)) "NotSetValue as local state inherits from class") FailedExpr ? HowFailed ?) (SyntaxTest ? Tested? ? Failed ?) (AltTest ? Tested? ? Failed ?) (AltTestOf) (TestDesc "GetLocalState: NotSetValue") (UsesObj #((LOOPSTestClass6)					 NIL AllowRemove)) (Tested? #(? NIL InformTestBrowser) DoneOnce ?) (CompletelyTested? ?) (StandBy) (SubTest ? Tested? ? Failed ?) (AfterTest) (SubTestOf #((LTFGetLocalState)												    											      NIL MakeBackLink)))(DEFINST LOOPSTestLispFunc (LTFPutNthValue "DCR@@E") (name #(LTFPutNthValue NIL RememberName)) (CasesUsed #((LVC2)	    NIL MakeBackLink)) (PreTest #((LTFGetNthValue)					  NIL MakeBackLink)) (PreTestOf) (ResetExp) (SetUp (PROGN (PutNthValue (%$ LVC2) 1 10) (PutNthValue (%$ LVC2) 3 30))) (TestExpr (AND (EQ (GetNthValue (%$ LVC2) 1) 10) (EQ (GetNthValue (%$ LVC2) 3) 30))) (SyntaxTest) (AltTest) (AltTestOf) (TestDesc "PutNthValue") (UsesObj) (Tested?) (CompletelyTested?) (StandBy) (SubTest) (AfterTest) (LispName PutNthValue))(DEFINST LOOPSTestLispFunc (LTFGetNthValue "DCR@@E") (name #(LTFGetNthValue NIL RememberName)) (CasesUsed #((LVC1)	    NIL MakeBackLink)) (PreTest) (PreTestOf #((LTFPutNthValue)						      NIL MakeBackLink)) (ResetExp) (SetUp) (TestExpr (AND (EQ (GetNthValue (%$ LVC1) 1) 1) (EQ (GetNthValue (%$ LVC1) 3) 3) (ATEST (EQ (SEND (%$ LVC1) Length) 3) "Length of indexedVars is correct"))) (SyntaxTest) (AltTest) (AltTestOf) (TestDesc "GetNthValue") (UsesObj #(NIL NIL AllowRemove)) (Tested?) (CompletelyTested?) (StandBy) (SubTest) (AfterTest) (LispName GetNthValue))(DEFINST LOOPSTestBasic (LTTemplate "NXR@@E") (name #(LTTemplate NIL RememberName)) (CasesUsed) (PreTest #((LTFGetValue)	  NIL MakeBackLink)) (PreTestOf) (ResetExp) (SetUp (ATEST (SETQ LTV11 (SEND (%$ LOOPSTestTemplate1) New)) "Create an instance of a Template Class")) (TestExpr (EQ LTV11 (%@ (%@ LTV11 A) A))) (SyntaxTest) (AltTest) (AltTestOf) (TestDesc "Creation of an instance of Template") (UsesObj) (Tested?) (CompletelyTested?) (StandBy) (SubTest) (AfterTest))(DEFINST LOOPSTestEnvironment (LTEMapObjectNames "NQR@@At") (name #(LTEMapObjectNames NIL 										     RememberName)) (CasesUsed) (PreTest) (PreTestOf #((LTP80)				  NIL MakeBackLink)) (ResetExp) (SetUp) (TestExpr) (SyntaxTest) (AltTest) (AltTestOf) (TestDesc "MapObjectNames") (UsesObj) (Tested?) (CompletelyTested?) (StandBy) (SubTest) (AfterTest))(DEFINST LOOPSTestLispFunc (LTFGetObjectNames "NQR@@Av") (name #(LTFGetObjectNames NIL RememberName)) (CasesUsed) (PreTest) (PreTestOf #((LTP80)				   NIL MakeBackLink)) (ResetExp) (SetUp) (TestExpr) (SyntaxTest) (AltTest) (AltTestOf) (TestDesc "GetObjectNames") (UsesObj) (Tested?) (CompletelyTested?) (StandBy) (SubTest) (AfterTest) (LispName GetObjectNames))(DEFINST LOOPSTestPrimitive (LTP80 "NQR@@Au") (name #(LTP80 NIL RememberName)) (CasesUsed) (PreTest #((LTFGetObjectNames LTEMapObjectNames)												      										     BuildPreTest MakeBackLink)) (PreTestOf) (ResetExp) (SetUp (PROGN (SEND (%$ KB) Old (QUOTE LTKB7) (QUOTE E9)) (SEND (%$ E9) Open) (SETQ LTV10 (MKNAME (CAR (LAST (GetObjectNames (GetValue (%$ LKBX) (QUOTE Link))))))) (PutValue (%$ LKBX) (QUOTE Link) NIL) (SEND (%$ E9) Close) (SEND (%$ KB) Old (QUOTE LTKB7) (QUOTE E10)) (SEND (%$ E10) Open))) (TestExpr (ATEST (FMEMB LTV10 (SEND (%$ E10) MapObjectNames)) "unferenced unnamed object is in the KB")) (SyntaxTest) (AltTest) (AltTestOf) (TestDesc "Unreferenced unnamed objects are  saved on KB") (UsesObj) (Tested?) (CompletelyTested?) (StandBy) (SubTest) (AfterTest ?) (SubTestOf #((LTP79)				    NIL MakeBackLink)))(DEFINST LOOPSTestEnvironment (LTECancel "NQR@@AP") (name #(LTECancel NIL RememberName)) (CasesUsed) (PreTest) (PreTestOf) (ResetExp) (SetUp) (TestExpr) (SyntaxTest) (AltTest) (AltTestOf) (TestDesc) (UsesObj) (Tested?) (CompletelyTested?) (StandBy) (SubTest) (AfterTest))(DEFINST LOOPSTestEnvironment (LTEMakeCurrent "NQR@@AO") (name #(LTEMakeCurrent NIL RememberName)) (CasesUsed) (PreTest) (PreTestOf) (ResetExp) (SetUp) (TestExpr) (SyntaxTest) (AltTest) (AltTestOf) (TestDesc) (UsesObj) (Tested?) (CompletelyTested?) (StandBy) (SubTest) (AfterTest))(DEFINST LOOPSTestEnvironment (LTEThawKB "NQR@@AN") (name #(LTEThawKB NIL RememberName)) (CasesUsed) (PreTest) (PreTestOf) (ResetExp) (SetUp) (TestExpr) (SyntaxTest) (AltTest) (AltTestOf) (TestDesc) (UsesObj) (Tested?) (CompletelyTested?) (StandBy) (SubTest) (AfterTest))(DEFINST LOOPSTestEnvironment (LTEFreezeKB "NQR@@AM") (name #(LTEFreezeKB NIL RememberName)) (CasesUsed) (PreTest) (PreTestOf) (ResetExp) (SetUp) (TestExpr) (SyntaxTest) (AltTest) (AltTestOf) (TestDesc) (UsesObj) (Tested?) (CompletelyTested?) (StandBy) (SubTest) (AfterTest))(DEFINST LOOPSTestEnvironment (LTEAssocKB "NQR@@AL") (name #(LTEAssocKB NIL RememberName)) (CasesUsed) (PreTest) (PreTestOf) (ResetExp) (SetUp) (TestExpr) (SyntaxTest) (AltTest) (AltTestOf) (TestDesc) (UsesObj) (Tested?) (CompletelyTested?) (StandBy) (SubTest) (AfterTest))(DEFINST LOOPSTestEnvironment (LTEDumpToKB "NQR@@AK") (name #(LTEDumpToKB NIL RememberName)) (CasesUsed) (PreTest) (PreTestOf) (ResetExp) (SetUp) (TestExpr) (SyntaxTest) (AltTest) (AltTestOf) (TestDesc) (UsesObj) (Tested?) (CompletelyTested?) (StandBy) (SubTest) (AfterTest))(DEFINST LOOPSTestEnvironment (LTESummarize "NQR@@AI") (name #(LTESummarize NIL RememberName)) (CasesUsed) (PreTest #((LTEOld LTMDestroyInClass LTMAdd)		      NIL MakeBackLink)) (PreTestOf) (ResetExp) (SetUp (PROGN (CreateLTKBS1) (SEND (%$ KB) Summarize (QUOTE LTKBS1) (QUOTE LTKB10)) (SEND (%$ KB) Old (QUOTE LTKB10) (QUOTE E11)) (SEND (%$ E11) Open))) (TestExpr (ANDALL (GetObjectRec (QUOTE LOOPSEnvSumm)) (GetObjectRec (QUOTE LOOPSEnvTest)) (GetObjectRec (QUOTE LESAA)) (GetObjectRec (QUOTE LESA2)) (ATEST (NOT (GetObjectRec (QUOTE LESA1))) "destroyed objects are deleted") (ATEST (NOT (GetObjectRec LTV11)) "unreferenced unnnamed objects are deleted") (ATEST (GetObjectRec LTV12) "referenced unnamed objects are retained:UID is same") (ATEST (EQUAL (GetValue (%$ LESAA) (QUOTE Etest)) (QUOTE New)) "new value overrides older") (ATEST (GetObjectRec (GetValue (%$ LESA2) (QUOTE Link))) "referenced unnamed objects are retained: they are objects") (ATEST (EQUAL (GetValue (GetValue (%$ LESA2) (QUOTE Link)) (QUOTE Key)) (QUOTE LESA2)) "referenced unnamed objects are retained: their structure is same"))) (SyntaxTest) (AltTest) (AltTestOf) (TestDesc "Summarize KB: single KB") (UsesObj) (Tested?) (CompletelyTested?) (StandBy) (SubTest) (AfterTest ?))(DEFINST LOOPSTestPrimitive (LTP79 "NQR@@AH") (name #(LTP79 NIL RememberName)) (CasesUsed) (PreTest #((LTFClass)												      										     BuildPreTest MakeBackLink)) (PreTestOf) (ResetExp) (SetUp (PROGN (SEND (%$ KB) New (QUOTE LTKB7) (QUOTE E7) T) (SEND (%$ E7) Open) (SEND (%$ Class) New (QUOTE LOOPSCasesEnv) (QUOTE (NamedObject))) (SEND (%$ LOOPSCasesEnv) Add (QUOTE IV) (QUOTE Link) NIL) (SEND (%$ LOOPSCasesEnv) New (QUOTE LKBX)) (PutValue (%$ LKBX) (QUOTE Link) (SEND (%$ LOOPSCasesEnv) New)) (SEND (%$ E7) Cleanup) (SEND (%$ E7) Close) (SEND (%$ KB) Old (QUOTE LTKB7) (QUOTE E8)) (SEND (%$ E8) Open))) (TestExpr (AND (GetObjectRec (QUOTE LKBX)) (ATEST (GetObjectRec (GetValue (%$ LKBX) (QUOTE Link))) "unnamed object was saved") (ATEST (EQ (Class (GetValue (%$ LKBX) (QUOTE Link))) (%$ LOOPSCasesEnv)) "unnamed object's class is correct"))) (SyntaxTest) (AltTest) (AltTestOf) (TestDesc "Unnamed objects in KB") (UsesObj) (Tested?) (CompletelyTested?) (StandBy) (SubTest #((LTP80)					NIL MakeBackLink)) (AfterTest ?) (SubTestOf #((LTEOld)										      NIL 										     MakeBackLink)))(DEFINST LOOPSTestPrimitive (LTP78 "NQR@@AG") (name #(LTP78 NIL RememberName)) (CasesUsed) (PreTest) (PreTestOf) (ResetExp) (SetUp (PROGN (SEND (%$ KB) New (QUOTE LTKB4) (QUOTE E6) T) (ATEST (SEND (%$ LTKB4) AddToContents (QUOTE LTKB2)) "add community KB") (ATEST (SEND (%$ LTKB4) AddToContents (QUOTE LTKB1)) "add user KB") (SEND (%$ E6) Open) (SEND (%$ LOOPSCasesEnv) New (QUOTE LKBA)) (SEND (%$ E6) Close) (SEND (%$ KB) Old (QUOTE LTKB4) (QUOTE E6B)) (SEND (%$ E6B) Open))) (TestExpr (AND (ATEST (GetObjectRec (QUOTE LOOPSCasesCommunity)) "class from 1st KB is there") (ATEST (GetObjectRec (QUOTE LOOPSCasesEnv)) "class from 2nd KB is there") (ATEST (GetObjectRec (QUOTE LCKBA)) "instance from 1st KB is there") (ATEST (GetObjectRec (QUOTE LKBA)) "instance created in this KB is there") (ATEST (GetObjectRec (QUOTE LKB1)) "instance from 2nd KB is there") (ATEST (GetObjectRec (QUOTE LCKB1)) "instance from original community KB is there"))) (SyntaxTest) (AltTest) (AltTestOf) (TestDesc "Adding another KB to a community KB") (UsesObj) (Tested?) (CompletelyTested?) (StandBy) (SubTest) (AfterTest) (SubTestOf #((LTECommunity)			NIL MakeBackLink)))(DEFINST LOOPSTestPrimitive (LTP77 "NPR@@A8") (name #(LTP77 NIL RememberName)) (CasesUsed) (PreTest) (PreTestOf) (ResetExp) (SetUp) (TestExpr (EQUAL (SEND (%$ LOOPSTestClassL1) FetchMethod (QUOTE GM4)) (QUOTE LOOPSTestCases.GM4))) (SyntaxTest) (AltTest) (AltTestOf) (TestDesc "FetchMethod in CLASS: inherited") (UsesObj) (Tested?) (CompletelyTested?) (StandBy) (SubTest) (AfterTest) (SubTestOf #((LTMFetchMethod)			NIL MakeBackLink)))(DEFINST LOOPSTestEnvironment (LTEDelete "NPR@@AS") (name #(LTEDelete NIL RememberName)) (CasesUsed) (PreTest #((LTMDestroyInClass LTECommunity)	  NIL MakeBackLink) Tested? ?) (PreTestOf) (ResetExp) (SetUp (PROGN (SEND (%$ KB) New (QUOTE LTKB3) (QUOTE E4) T) (SEND (%$ LTKB3) AddToContents (QUOTE LT1)) (SEND (%$ E4) Open) (SEND (%$ LCKB1) Destroy) (SEND (%$ E4) Close) (SEND (%$ KB) Old (QUOTE LTKB3) (QUOTE E5)) (SEND (%$ E5) Open)) Tested? #(? NIL FlashTestBrowser)) (TestExpr (ATEST (NULL (GetObjectRec (QUOTE LCKB1))) "destroyed object is deleted")) (SyntaxTest ? Tested? ?) (AltTest ? Tested? ?) (AltTestOf) (TestDesc "Destroyed objects are deleted from KB") (UsesObj) (Tested? #(? NIL InformTestBrowser)) (CompletelyTested? ?) (StandBy) (SubTest ? Tested? ?) (AfterTest ?))(DEFINST LOOPSTestEnvironment (LTECommunity "NPR@@A") (name #(LTECommunity NIL RememberName)) (CasesUsed) (PreTest #((LTEOld)		      NIL MakeBackLink) Tested? ?) (PreTestOf #((LTEDelete)								NIL MakeBackLink)) (ResetExp) (SetUp (PROGN (SEND (%$ KB) New (QUOTE LTKB2) (QUOTE E3) T) (ATEST (SEND (%$ LTKB2) AddToContents (QUOTE LT1)) "add a community KB") (SEND (%$ E3) Open) (SEND (%$ LOOPSCasesCommunity) New (QUOTE LCKBA)) (SEND (%$ E3) Close) (SEND (%$ KB) Old (QUOTE LTKB2) (QUOTE E3B)) (SEND (%$ E3B) Open))) (TestExpr (AND (ATEST (GetObjectRec (QUOTE LOOPSCasesCommunity)) "class from community KB is there") (ATEST (GetObjectRec (QUOTE LCKBA)) "instance created in this KB is there") (ATEST (GetObjectRec (QUOTE LCKB1)) "instance from community KB is there"))) (SyntaxTest ? Tested? ?) (AltTest ? Tested? ?) (AltTestOf) (TestDesc "Starting from a Community KB: new user KB") (UsesObj) (Tested? #(? NIL InformTestBrowser)) (CompletelyTested? ?) (StandBy) (SubTest #((LTP78 LTP75)					  NIL MakeBackLink) Tested? ?) (AfterTest ?))(DEFINST LOOPSTestEnvironment (LTEOld "NPR@@A") (name #(LTEOld NIL RememberName)) (CasesUsed) (PreTest #((LTFClass LTFtype? LTENew)	  NIL MakeBackLink) Tested? ?) (PreTestOf #((LTESummarize LTECommunity)						    NIL MakeBackLink)) (ResetExp) (SetUp (PROGN (ATEST (SEND (%$ KB) Old (QUOTE LTKB1) (QUOTE E2)) "open KB created by LTENew") (SEND (%$ E2) Open)) Tested? #(? NIL FlashTestBrowser)) (TestExpr (AND (ATEST (GetObjectRec (QUOTE LOOPSCasesEnv)) "class object is there") (ATEST (GetObjectRec (QUOTE LKB1)) "instance is there") (type? instance (%$ LKB1)) (EQ (Class (%$ LOOPSCasesEnv)) (%$ LOOPSCasesMeta)))) (SyntaxTest ? Tested? ?) (AltTest ? Tested? ?) (AltTestOf) (TestDesc "Previously created KB") (UsesObj) (Tested? #(? NIL 										InformTestBrowser)) (CompletelyTested? ?) (StandBy) (SubTest #((LTP79)					  NIL MakeBackLink) Tested? ?) (AfterTest ?))(DEFINST LOOPSTestEnvironment (LTENew "NPR@@A") (name #(LTENew NIL RememberName)) (CasesUsed) (PreTest #((LTMDestroyInObj LTMDestroyInClass LTFGetObjectRec LTP21 LTP66 LTMNew)	  NIL MakeBackLink) Tested? ?) (PreTestOf #((LTEOld)						    NIL MakeBackLink)) (ResetExp) (SetUp (PROGN (SEND (%$ KB) New (QUOTE LTKB1) (QUOTE E1) T) (SEND (%$ E1) Open) (SEND (%$ LOOPSCasesMeta) New (QUOTE LOOPSCasesEnv) (QUOTE (LOOPSTestCases))) (SEND (%$ LOOPSCasesEnv) Add (QUOTE CV) (QUOTE Instances) NIL) (SEND (%$ LOOPSCasesEnv) Add (QUOTE CV) (QUOTE InstancePrefix) (QUOTE LKB)) (SEND (%$ LOOPSCasesEnv) Add (QUOTE CV) (QUOTE UnnamedInstanceCount) 0) (SEND (%$ LOOPSCasesEnv) New) (SEND (%$ E1) Cleanup) (SEND (%$ E1) Close)) Tested? #(? NIL FlashTestBrowser)) (TestExpr (AND (NULL (GetObjectRec (QUOTE LOOPSCasesEnv))) (NULL (GetObjectRec (QUOTE LKB1))))) (SyntaxTest ? Tested? ?) (AltTest ? Tested? ?) (AltTestOf) (TestDesc "Creating a new KB") (UsesObj) (Tested? #(? NIL InformTestBrowser)) (CompletelyTested? ?) (StandBy) (SubTest #(NIL NIL MakeBackLink) Tested? ?) (AfterTest))(DEFINST LOOPSTestPrimitive (LTP76 "O]R@@E") (name #(LTP76 NIL RememberName)) (CasesUsed) (PreTest) (PreTestOf) (ResetExp) (SetUp) (TestExpr (EQUAL (SEND (%$ LOOPSTestClassL1) FetchMethod (QUOTE M2)) (QUOTE LOOPSTestClassL1.M2))) (SyntaxTest) (AltTest) (AltTestOf) (TestDesc "FetchMethod in CLASS: local over inherited") (UsesObj #((LOOPSTestClassL1 LOOPSTestCases)							 NIL AllowRemove)) (Tested?) (CompletelyTested?) (StandBy) (SubTest) (AfterTest) (SubTestOf #((LTMFetchMethod)								NIL MakeBackLink)))(DEFINST LOOPSTestPrimitive (LTP75 "NPR@@A4") (name #(LTP75 NIL RememberName)) (CasesUsed) (PreTest) (PreTestOf) (ResetExp) (SetUp (PROGN (SEND (%$ KB) New (QUOTE LTKB5) (QUOTE E12) T) (SEND (%$ LTKB5) AddToContents (QUOTE LT1)) (SEND (%$ E12) Open))) (TestExpr (ATEST (NULL (GetObjectRec (QUOTE LCKBA))) "objects added in a linked KB are not added to the original KB")) (SyntaxTest) (AltTest) (AltTestOf) (TestDesc "changes in KB do not affect community KB") (UsesObj) (Tested?) (CompletelyTested?) (StandBy) (SubTest) (AfterTest) (SubTestOf #((LTECommunity)				     NIL MakeBackLink)))(DEFINST LOOPSTestPrimitive (LTP74 "O\R@@[r") (name #(LTP74 NIL RememberName)) (CasesUsed) (PreTest) (PreTestOf) (ResetExp (SEND (%$ LOOPSTestCases) Delete (QUOTE Method) (QUOTE GM5) (QUOTE Prop1))) (SetUp (SEND (%$ LOOPSTestCases) Add (QUOTE Method) (QUOTE GM5) (QUOTE LTC) (QUOTE Prop1))) (TestExpr (EQUAL (GetMethod (%$ LOOPSTestClassL1) (QUOTE GM5) (QUOTE Prop1)) (QUOTE LTC))) (SyntaxTest) (AltTest) (AltTestOf) (TestDesc "GetMethod: newly added prop to super class") (UsesObj #((LOOPSTestClassL1										  LOOPSTestCases)										NIL AllowRemove)) (Tested?) (CompletelyTested?) (StandBy) (SubTest) (AfterTest) (SubTestOf #((LTP73)									  NIL MakeBackLink)))(DEFINST LOOPSTestPrimitive (LTP73 "O\R@@[q") (name #(LTP73 NIL RememberName)) (CasesUsed) (PreTest #((LTMAdd)  BuildPreTest MakeBackLink)) (PreTestOf) (ResetExp (SEND (%$ LOOPSTestCases) Delete (QUOTE Method) (QUOTE GM5))) (SetUp (SEND (%$ LOOPSTestCases) Add (QUOTE Method) (QUOTE GM5) (QUOTE LOOPSTestCases.GM5))) (TestExpr (EQUAL (GetMethod (%$ LOOPSTestClassL1) (QUOTE GM5)) (QUOTE LOOPSTestCases.GM5))) (SyntaxTest) (AltTest) (AltTestOf) (TestDesc "GetMethod: newly added selector to super class") (UsesObj #((LOOPSTestClassL1 LOOPSTestCases)   NIL AllowRemove)) (Tested?) (CompletelyTested?) (StandBy) (SubTest #((LTP74)									NIL MakeBackLink)) (AfterTest) (SubTestOf #((LTFGetMethod)	      NIL MakeBackLink)))(DEFINST LOOPSTestPrimitive (LTP72 "O\R@@[p") (name #(LTP72 NIL RememberName)) (CasesUsed) (PreTest) (PreTestOf) (ResetExp) (SetUp) (TestExpr (EQUAL (GetMethod (%$ LOOPSTestClassL1) (QUOTE M2) (QUOTE Prop2)) T)) (SyntaxTest) (AltTest) (AltTestOf) (TestDesc "GetMethod: local prop over inherited") (UsesObj #((LOOPSTestCases LOOPSTestClassL1)	  NIL AllowRemove)) (Tested?) (CompletelyTested?) (StandBy) (SubTest) (AfterTest) (SubTestOf #((LTP68)  NIL MakeBackLink)))(DEFINST LOOPSTestPrimitive (LTP71 "O\R@@[o") (name #(LTP71 NIL RememberName)) (CasesUsed) (PreTest) (PreTestOf) (ResetExp) (SetUp) (TestExpr (EQUAL (GetMethod (%$ LOOPSTestClassL1) (QUOTE M2) (QUOTE Prop1)) (QUOTE LTC))) (SyntaxTest) (AltTest) (AltTestOf) (TestDesc "GetMethod: local selector, inherited prop") (UsesObj #((LOOPSTestClassL1 LOOPSTestCases)							NIL AllowRemove)) (Tested?) (CompletelyTested?) (StandBy) (SubTest) (AfterTest) (SubTestOf #((LTP68)					       NIL MakeBackLink)))(DEFINST LOOPSTestPrimitive (LTP70 "O\R@@[n") (name #(LTP70 NIL RememberName)) (CasesUsed) (PreTest) (PreTestOf) (ResetExp) (SetUp) (TestExpr (AND (EQUAL (GetMethod (%$ LOOPSTestClassL1) (QUOTE GM4) (QUOTE Prop1)) (QUOTE LTC)) (EQUAL (GetMethod (%$ LOOPSTestClassL1) (QUOTE GM4) (QUOTE Prop2)) (QUOTE LTD)))) (SyntaxTest) (AltTest) (AltTestOf) (TestDesc "GetMethod: inherited prop") (UsesObj #((LOOPSTestClassL1 LOOPSTestCases)											     NIL 										      AllowRemove)) (Tested?) (CompletelyTested?) (StandBy) (SubTest) (AfterTest) (SubTestOf #((LTP68)									  NIL MakeBackLink)))(DEFINST LOOPSTestPrimitive (LTP69 "O\R@@[m") (name #(LTP69 NIL RememberName)) (CasesUsed) (PreTest) (PreTestOf) (ResetExp) (SetUp) (TestExpr (EQUAL (GetMethod (%$ LOOPSTestClassL1) (QUOTE GM4)) (QUOTE LOOPSTestCases.GM4))) (SyntaxTest) (AltTest) (AltTestOf) (TestDesc "GetMethod: inherited selector") (UsesObj #((LOOPSTestCases LOOPSTestClassL1)	  NIL AllowRemove)) (Tested?) (CompletelyTested?) (StandBy) (SubTest #(NIL NIL MakeBackLink)) (AfterTest) (SubTestOf #((LTFGetMethod)			 NIL MakeBackLink)))(DEFINST LOOPSTestPrimitive (LTP68 "O\R@@[l") (name #(LTP68 NIL RememberName)) (CasesUsed) (PreTest) (PreTestOf) (ResetExp) (SetUp) (TestExpr (AND (EQUAL (GetMethod (%$ LOOPSTestClassL1) (QUOTE M1) (QUOTE Prop1)) T) (EQUAL (GetMethod (%$ LOOPSTestClassL1) (QUOTE M1) (QUOTE args)) NIL))) (SyntaxTest) (AltTest) (AltTestOf) (TestDesc "GetMethod: prop") (UsesObj #((LOOPSTestClassL1)							      NIL AllowRemove)) (Tested?) (CompletelyTested?) (StandBy) (SubTest #((LTP72 LTP71 LTP70)					NIL MakeBackLink)) (AfterTest) (SubTestOf #((LTFGetMethod)										    NIL MakeBackLink)))(DEFINST LOOPSTestPrimitive (LTP67 "O\R@@[k") (name #(LTP67 NIL RememberName)) (CasesUsed) (PreTest) (PreTestOf) (ResetExp) (SetUp) (TestExpr (EQUAL (GetMethod (%$ LOOPSTestClassL1) (QUOTE M2)) (QUOTE LOOPSTestClassL1.M2))) (SyntaxTest) (AltTest) (AltTestOf) (TestDesc "GetMethod: local selector over inherited") (UsesObj #((LOOPSTestCases LOOPSTestClassL1)						       NIL AllowRemove)) (Tested?) (CompletelyTested?) (StandBy) (SubTest) (AfterTest) (SubTestOf #((LTFGetMethod)					      NIL MakeBackLink)))(DEFINST LOOPSTestPrimitive (LTP66 "O\R@@[j") (name #(LTP66 NIL RememberName)) (CasesUsed) (PreTest ? Tested? ?) (PreTestOf #((LTENew)			 NIL MakeBackLink)) (ResetExp) (SetUp (SETQ LTV5 (SEND (%$ LTNClass) New)) Tested? #(? NIL FlashTestBrowser)) (TestExpr (AND (type? instance LTV5) (EQ (Class LTV5) (%$ LTNClass)))) (SyntaxTest ? Tested? ?) (AltTest ? Tested? ?) (AltTestOf) (TestDesc "New method: creating an instance") (UsesObj #((LTNClass)					       NIL AllowRemove)) (Tested? #(? NIL InformTestBrowser)) (CompletelyTested? ?) (StandBy) (SubTest ? Tested? ?) (AfterTest) (SubTestOf #((LTMNew)									       NIL MakeBackLink)))(DEFINST LOOPSTestLispFunc (LTFtype? "O\R@@[i") (name #(LTFtype? NIL RememberName)) (CasesUsed) (PreTest ? Tested? ?) (PreTestOf #((LTEOld LTMNewWithValues LTMNew)				  NIL MakeBackLink)) (ResetExp) (SetUp ? Tested? #(? NIL 										 FlashTestBrowser)) (TestExpr (AND (type? class (%$ LOOPSTestLispFunc)) (type? instance (%$ LTFtype?)) (NULL (type? instance (%$ LOOPSTestLispFunc))) (NULL (type? class (%$ LTFtype?))) (NULL (type? instance (QUOTE (a b c)))))) (SyntaxTest ? Tested? ?) (AltTest ? Tested? ?) (AltTestOf) (TestDesc "type?") (UsesObj) (Tested? #(? NIL InformTestBrowser)) (CompletelyTested? ?) (StandBy) (SubTest ? Tested? ?) (AfterTest) (LispName type?))(DEFINST LOOPSTestLispFunc (LTFClass "O\R@@[h") (name #(LTFClass NIL RememberName)) (CasesUsed) (PreTest ? Tested? ?) (PreTestOf #((LTP79 LTEOld LTMNewWithValues LTMNew)				  NIL MakeBackLink)) (ResetExp) (SetUp ? Tested? #(? NIL 										 FlashTestBrowser)) (TestExpr (AND (EQ (Class (%$ LOOPSTestObject)) (%$ LOOPSTestMeta)) (EQ (Class (%$ LTFClass)) (%$ LOOPSTestLispFunc)) (EQ (Class (%$ LOOPSTestMeta)) (%$ MetaClass)))) (SyntaxTest ? Tested? ?) (AltTest ? Tested? ?) (AltTestOf) (TestDesc "Class function:") (UsesObj) (Tested? #(? NIL InformTestBrowser)) (CompletelyTested? ?) (StandBy) (SubTest ? Tested? ?) (AfterTest) (LispName Class))(DEFINST LOOPSTestLispFunc (LTFGetObjectRec "O\R@@[!") (name #(LTFGetObjectRec NIL RememberName)) (CasesUsed) (PreTest ? Tested? ?) (PreTestOf #((LTENew LTMDestroyInObj LTMDestroyInClass)					      NIL MakeBackLink)) (ResetExp) (SetUp ? Tested? #(?											       NIL 										 FlashTestBrowser)) (TestExpr (AND (EQ (GetObjectRec (QUOTE LOOPSTestObject)) (%$ LOOPSTestObject)) (EQ (GetObjectRec (%$ LOOPSTestObject)) (%$ LOOPSTestObject)) (EQ (GetObjectRec (QUOTE LTFGetObjectRec)) (%$ LTFGetObjectRec)) (NULL (GetObjectRec (QUOTE (a b c)))) (NULL (GetObjectRec (GENSYM))))) (SyntaxTest ? Tested? ?) (AltTest ? Tested? ?) (AltTestOf) (TestDesc "GetObjectRec") (UsesObj) (Tested? #(? NIL 										InformTestBrowser)) (CompletelyTested? ?) (StandBy) (SubTest ? Tested? ?) (AfterTest) (LispName GetObjectRec))(DEFINST LOOPSTestPrimitive (LTP65 "O\R@@[") (name #(LTP65 NIL RememberName)) (CasesUsed) (PreTest ? Tested? ?) (PreTestOf) (ResetExp) (SetUp) (TestExpr (AND (EQUAL (SEND (%$ LOOPSTestClassL1) List (QUOTE Method) (QUOTE M1)) (QUOTE (Prop1 args doc))) (NULL (SEND (%$ LOOPSTestClassL1) List (QUOTE Method) (QUOTE M3))))) (SyntaxTest ? Tested? ?) (AltTest ? Tested? ?) (AltTestOf) (TestDesc "List in CLASS: Method props") (UsesObj #((LOOPSTestClassL1)					  NIL AllowRemove)) (Tested? ?) (CompletelyTested? ?) (StandBy) (SubTest ? Tested? ?) (AfterTest) (SubTestOf #((LTP63)						 NIL MakeBackLink)))(DEFINST LOOPSTestPrimitive (LTP64 "O\R@@[") (name #(LTP64 NIL RememberName)) (CasesUsed) (PreTest ? Tested? ?) (PreTestOf) (ResetExp) (SetUp) (TestExpr (EQUAL (SEND (%$ LOOPSTestClassL1) List (QUOTE CVs)) (QUOTE (LC1 LC2 LC3)))) (SyntaxTest ? Tested? ?) (AltTest ? Tested? ?) (AltTestOf) (TestDesc "List method in CLASS: CVs") (UsesObj #((LOOPSTestClassL1)					NIL AllowRemove)) (Tested? ?) (CompletelyTested? ?) (StandBy) (SubTest ? Tested? ?) (AfterTest) (SubTestOf #((LTMListInClass)					       NIL MakeBackLink)))(DEFINST LOOPSTestPrimitive (LTP63 "O\R@@[") (name #(LTP63 NIL RememberName)) (CasesUsed) (PreTest ? Tested? ?) (PreTestOf) (ResetExp) (SetUp) (TestExpr (EQUAL (SEND (%$ LOOPSTestClassL1) List (QUOTE Methods)) (QUOTE (M1 M2 M3)))) (SyntaxTest ? Tested? ?) (AltTest ? Tested? ?) (AltTestOf) (TestDesc "List in CLASS: Methods") (UsesObj #((LOOPSTestClassL1)				     NIL AllowRemove)) (Tested? ?) (CompletelyTested? ?) (StandBy) (SubTest #((LTP65)	  NIL MakeBackLink) Tested? ?) (AfterTest) (SubTestOf #((LTMListInClass)								NIL MakeBackLink)))(DEFINST LOOPSTestPrimitive (LTP62 "O\R@@[") (name #(LTP62 NIL RememberName)) (CasesUsed) (PreTest ? Tested? ?) (PreTestOf #((LTMReplaceSupers)			NIL MakeBackLink)) (ResetExp) (SetUp) (TestExpr (EQUAL (SEND (%$ LOOPSTestClassL1) List (QUOTE Supers)) (QUOTE (LOOPSTestCases)))) (SyntaxTest ? Tested? ?) (AltTest ? Tested? ?) (AltTestOf) (TestDesc "List in Class: Supers") (UsesObj #((LOOPSTestClassL1)								     NIL AllowRemove)) (Tested? ?) (CompletelyTested? ?) (StandBy) (SubTest ? Tested? ?) (AfterTest) (SubTestOf #((LTMListInClass)									      NIL MakeBackLink)))(DEFINST LOOPSTestPrimitive (LTP61 "O\R@@[") (name #(LTP61 NIL RememberName)) (CasesUsed) (PreTest ? Tested? ?) (PreTestOf) (ResetExp) (SetUp) (TestExpr (EQUAL (SEND (%$ LOOPSTestClassL1) List (QUOTE Functions)) (QUOTE (LOOPSTestClassL1.M1 LOOPSTestClassL1.M2 LOOPSTestClassL1.M3)))) (SyntaxTest ? Tested? ?) (AltTest ? Tested? ?) (AltTestOf) (TestDesc "List in CLASS: Functions") (UsesObj #((LOOPSTestClassL1)											      NIL 										      AllowRemove)) (Tested? ?) (CompletelyTested? ?) (StandBy) (SubTest ? Tested? ?) (AfterTest) (SubTestOf #((LTMListInClass)											  NIL 										     MakeBackLink)))(DEFINST LOOPSTestPrimitive (LTP60 "O\R@@[") (name #(LTP60 NIL RememberName)) (CasesUsed) (PreTest ? Tested? ?) (PreTestOf) (ResetExp) (SetUp) (TestExpr (AND (EQUAL (SEND (%$ LOOPSTestClassL1) List (QUOTE IVProps) (QUOTE L2)) (QUOTE (Prop1 Prop2))) (NULL (SEND (%$ LOOPSTestClassL1) List (QUOTE IVProps) (QUOTE L3))))) (SyntaxTest ? Tested? ?) (AltTest ? Tested? ?) (AltTestOf) (TestDesc "List in CLASS: IVProps") (UsesObj #((LOOPSTestClassL1)				     NIL AllowRemove)) (Tested? ?) (CompletelyTested? ?) (StandBy) (SubTest ? Tested? ?) (AfterTest) (SubTestOf #((LTMListInClass)					      NIL MakeBackLink)))(DEFINST LOOPSTestPrimitive (LTP59 "O\R@@[") (name #(LTP59 NIL RememberName)) (CasesUsed) (PreTest ? Tested? ?) (PreTestOf) (ResetExp) (SetUp) (TestExpr (AND (EQUAL (SEND (%$ LOOPSTestClassL1) List (QUOTE CVProps) (QUOTE LC1)) (QUOTE (Prop1 Prop2))) (NULL (SEND (%$ LOOPSTestClassL1) List (QUOTE CVProps) (QUOTE LC3))))) (SyntaxTest ? Tested? ?) (AltTest ? Tested? ?) (AltTestOf) (TestDesc "List in CLASS: CVProps") (UsesObj #((LOOPSTestClassL1)				     NIL AllowRemove)) (Tested? ?) (CompletelyTested? ?) (StandBy) (SubTest ? Tested? ?) (AfterTest) (SubTestOf #((LTMListInClass)					      NIL MakeBackLink)))(DEFINST LOOPSTestPrimitive (LTP58 "OYR@@E") (name #(LTP58 NIL RememberName)) (CasesUsed #((LTCF2)											     NIL 										     MakeBackLink)) (PreTest #((LTFPutLocalState)	  BuildPreTest MakeBackLink)) (PreTestOf) (ResetExp (PutValue (%$ LTCF2) (QUOTE AV6) (QUOTE LTC6))) (SetUp (SETQ LTV21 (PutValue (%$ LTCF2) (QUOTE AV6) (QUOTE LTP58)))) (TestExpr (ANDALL (EQUAL (GetValue (%$ LTCF2) (QUOTE AV6)) (QUOTE LTP58)) (ATEST (EQUAL LTV21 (QUOTE LTP58)) "PutValue returns newValue"))) (SyntaxTest) (AltTest) (AltTestOf) (TestDesc "Embedded Active Val: Put using user fn") (UsesObj #((LOOPSTestClass6)						     NIL AllowRemove)) (Tested?) (CompletelyTested?) (StandBy) (SubTest) (AfterTest) (SubTestOf #((LAVPutValue)					    NIL MakeBackLink)))(DEFINST LOOPSTestPrimitive (LTP57 "OYR@@E") (name #(LTP57 NIL RememberName)) (CasesUsed #((LTCF1)											     NIL 										     MakeBackLink)) (PreTest #((LTFGetLocalState)	  BuildPreTest MakeBackLink) Tested? ?) (PreTestOf) (ResetExp) (SetUp) (TestExpr (EQUAL (GetValue (%$ LTCF1) (QUOTE AV5)) (QUOTE LTP57))) (SyntaxTest ? Tested? ?) (AltTest ? Tested? ?) (AltTestOf) (TestDesc "Embedded Active Val: Get using user fn") (UsesObj #((LOOPSTestClass6)									  NIL AllowRemove)) (Tested? ?) (CompletelyTested? ?) (StandBy) (SubTest ? Tested? ?) (AfterTest) (SubTestOf #((LAVGetValue)										 NIL MakeBackLink)))(DEFINST LOOPSTestPrimitive (LTP56 "OYR@@E") (name #(LTP56 NIL RememberName)) (CasesUsed #((LTCF2)											     NIL 										     MakeBackLink)) (PreTest #((LTFPutLocalState)	  BuildPreTest MakeBackLink)) (PreTestOf) (ResetExp (PutValue (%$ LTCF2) (QUOTE AV4) (QUOTE LTC6))) (SetUp (SETQ LTV21 (PutValue (%$ LTCF2) (QUOTE AV4) (QUOTE LTP56)))) (TestExpr (ANDALL (EQUAL (GetValue (%$ LTCF2) (QUOTE AV4)) (QUOTE LTP56)) (ATEST (EQUAL LTV21 (QUOTE LTP56)) "PutValue returns newValue"))) (SyntaxTest) (AltTest) (AltTestOf) (TestDesc "Active Value: Put using user fn") (UsesObj #((LOOPSTestClass6)					      NIL AllowRemove)) (Tested?) (CompletelyTested?) (StandBy) (SubTest) (AfterTest) (SubTestOf #((LAVPutValue)				     NIL MakeBackLink)))(DEFINST LOOPSTestPrimitive (LTP55 "OYR@@E") (name #(LTP55 NIL RememberName)) (CasesUsed #((LTCF2)											     NIL 										     MakeBackLink)) (PreTest) (PreTestOf) (ResetExp (PutValue (%$ LTCF2) (QUOTE AV3) (QUOTE LTCP6) (QUOTE Prop1))) (SetUp (SETQ LTV21 (PutValue (%$ LTCF2) (QUOTE AV3) (QUOTE LTP55) (QUOTE Prop1)))) (TestExpr (ANDALL (EQUAL (GetValue (%$ LTCF2) (QUOTE AV3) (QUOTE Prop1)) (QUOTE LTP55)) (ATEST (EQUAL LTV21 (QUOTE LTP55)) "PutValue returns newValue"))) (SyntaxTest) (AltTest) (AltTestOf) (TestDesc "Active Value: Put prop using default fn") (UsesObj #((LOOPSTestClass6)						      NIL AllowRemove)) (Tested?) (CompletelyTested?) (StandBy) (SubTest) (AfterTest) (SubTestOf #((LAVPutValue)					     NIL MakeBackLink)))(DEFINST LOOPSTestPrimitive (LAVPutValue "OYR@@E") (name #(LAVPutValue NIL RememberName)) (CasesUsed #((LTCF2)   NIL MakeBackLink)) (PreTest #((LAVGetValue)				 BuildPreTest MakeBackLink)) (PreTestOf) (ResetExp (PutValue (%$ LTCF2) (QUOTE AV3) (QUOTE LTC6))) (SetUp (SETQ LTV21 (PutValue (%$ LTCF2) (QUOTE AV3) (QUOTE LAVPut)))) (TestExpr (ANDALL (EQUAL (GetValue (%$ LTCF2) (QUOTE AV3)) (QUOTE LAVPut)) (ATEST (EQUAL LTV21 (QUOTE LAVPut)) "PutValue returns newValue"))) (SyntaxTest) (AltTest) (AltTestOf) (TestDesc "Active Value: Put using default fn") (UsesObj #((LOOPSTestClass6)						 NIL AllowRemove)) (Tested?) (CompletelyTested?) (StandBy) (SubTest #((LTP58 LTP56 LTP55)		    NIL MakeBackLink)) (AfterTest) (SubTestOf #((LTFPutValue)								NIL MakeBackLink)))(DEFINST LOOPSTestPrimitive (LTP54 "OYR@@E ") (name #(LTP54 NIL RememberName)) (CasesUsed #((LTCF1)											     NIL 										     MakeBackLink)) (PreTest #((LTFGetLocalState)	  BuildPreTest MakeBackLink) Tested? ?) (PreTestOf) (ResetExp) (SetUp) (TestExpr (EQUAL (GetValue (%$ LTCF1) (QUOTE AV2)) (QUOTE LTC6))) (SyntaxTest ? Tested? ?) (AltTest ? Tested? ?) (AltTestOf) (TestDesc "Active Val: Get using user fn") (UsesObj #((LOOPSTestClass6)								 NIL AllowRemove)) (Tested? ?) (CompletelyTested? ?) (StandBy) (SubTest ? Tested? ?) (AfterTest) (SubTestOf #((LAVGetValue)									      NIL MakeBackLink)))(DEFINST LOOPSTestPrimitive (LTP53 "OYR@@E") (name #(LTP53 NIL RememberName)) (CasesUsed #((LTCF1)											     NIL 										     MakeBackLink)) (PreTest ? Tested? ?) (PreTestOf) (ResetExp) (SetUp) (TestExpr (EQUAL (GetValue (%$ LTCF1) (QUOTE AV1) (QUOTE Prop1)) (QUOTE LTCP6))) (SyntaxTest ? Tested? ?) (AltTest ? Tested? ?) (AltTestOf) (TestDesc "Active Value: Get prop using default fn") (UsesObj #((LOOPSTestClass6)						      NIL AllowRemove)) (Tested? ?) (CompletelyTested? ?) (StandBy) (SubTest ? Tested? ?) (AfterTest) (SubTestOf #((LAVGetValue)							     NIL MakeBackLink)))(DEFINST LOOPSTestPrimitive (LAVGetValue "OYR@@E~") (name #(LAVGetValue NIL RememberName)) (CasesUsed #((LTCF1)   NIL MakeBackLink)) (PreTest ? Tested? ?) (PreTestOf #((LAVPutValue)							 NIL MakeBackLink)) (ResetExp) (SetUp) (TestExpr (EQUAL (GetValue (%$ LTCF1) (QUOTE AV1)) (QUOTE LTC6))) (SyntaxTest ? Tested? ?) (AltTest ? Tested? ?) (AltTestOf) (TestDesc "Active Value: default GetFn") (UsesObj #((LOOPSTestClass6)									   NIL AllowRemove)) (Tested? ?) (CompletelyTested? ?) (StandBy) (SubTest #((LTP57 LTP54 LTP53)					      NIL MakeBackLink) Tested? ?) (AfterTest) (SubTestOf #((LTFGetValue)												    											      NIL MakeBackLink)))(DEFINST LOOPSTestPrimitive (LTP52 "OYR@@E") (name #(LTP52 NIL RememberName)) (CasesUsed) (PreTest #((LTFGetMethod)												      										     BuildPreTest MakeBackLink)) (PreTestOf) (ResetExp (PROGN (PutMethod (%$ LOOPSTestCases) (QUOTE PM3) (QUOTE LTC) (QUOTE Prop1)) (SEND (%$ LOOPSTestClass3) Delete (QUOTE Method) (QUOTE PM3) (QUOTE Prop1)))) (SetUp (PutMethod (%$ LOOPSTestClass3) (QUOTE PM3) (QUOTE LTP52) (QUOTE Prop1))) (TestExpr (AND (EQUAL (GetMethod (%$ LOOPSTestClass3) (QUOTE PM3) (QUOTE Prop1)) (QUOTE LTP52)) (EQUAL (GetMethod (%$ LOOPSTestCases) (QUOTE PM3) (QUOTE Prop1)) (QUOTE LTC)))) (SyntaxTest) (AltTest) (AltTestOf) (TestDesc "PutMethod: inherited prop, local selector") (UsesObj #((LOOPSTestClass3 LOOPSTestCases)							 NIL AllowRemove)) (Tested?) (CompletelyTested?) (StandBy) (SubTest) (AfterTest) (SubTestOf #((LTFPutMethod)								NIL MakeBackLink)))(DEFINST LOOPSTestPrimitive (LTP51 "OYR@@E") (name #(LTP51 NIL RememberName)) (CasesUsed) (PreTest #((LTFGetMethod)												      										     BuildPreTest MakeBackLink) Tested? ?) (PreTestOf) (ResetExp (PROGN (SEND (%$ LOOPSTestClass3) Delete (QUOTE Method) (QUOTE PM4)) (PutMethod (%$ LOOPSTestCases) (QUOTE PM4) (QUOTE LOOPSTestCases.PM4)))) (SetUp (PutMethod (%$ LOOPSTestClass3) (QUOTE PM4) (QUOTE LOOPSTestClass3.PM4))) (TestExpr (AND (EQUAL (GetMethod (%$ LOOPSTestClass3) (QUOTE PM4)) (QUOTE LOOPSTestClass3.PM4)) (EQUAL (GetMethod (%$ LOOPSTestCases) (QUOTE PM4)) (QUOTE LOOPSTestCases.PM4)))) (SyntaxTest ? Tested? ?) (AltTest ? Tested? ?) (AltTestOf) (TestDesc "PutMethod: inherited selector") (UsesObj #((LOOPSTestClass3 LOOPSTestCases)								      NIL AllowRemove)) (Tested? ?) (CompletelyTested? ?) (StandBy) (SubTest ? Tested? ?) (AfterTest) (SubTestOf #((LTFPutMethod)									      NIL MakeBackLink)))(DEFINST LOOPSTestPrimitive (LTP50 "OYR@@E") (name #(LTP50 NIL RememberName)) (CasesUsed) (PreTest) (PreTestOf) (ResetExp) (SetUp (PutMethod (%$ LOOPSTestClass3) (QUOTE PM2) (QUOTE LTP50) (QUOTE Prop1))) (TestExpr (AND (EQUAL (GetMethod (%$ LOOPSTestClass3) (QUOTE PM2) (QUOTE Prop1)) (QUOTE LTP50)) (EQUAL (GetMethod (%$ LOOPSTestCases) (QUOTE PM2) (QUOTE Prop1)) (QUOTE LTC)))) (SyntaxTest) (AltTest) (AltTestOf) (TestDesc "PutMethod: local prop over inherited") (UsesObj #((LOOPSTestClass3 										   LOOPSTestCases)									 NIL AllowRemove)) (Tested?) (CompletelyTested?) (StandBy) (SubTest) (AfterTest) (SubTestOf #((LTP48)								NIL MakeBackLink)))(DEFINST LOOPSTestPrimitive (LTP49 "OYR@@E") (name #(LTP49 NIL RememberName)) (CasesUsed) (PreTest #((LTFGetMethod)												      										     BuildPreTest MakeBackLink)) (PreTestOf) (ResetExp (SEND (%$ LOOPSTestClass3) Delete (QUOTE Method) (QUOTE PM1) (QUOTE Prop1))) (SetUp (PutMethod (%$ LOOPSTestClass3) (QUOTE PM1) (QUOTE LTP49) (QUOTE Prop1))) (TestExpr (EQUAL (GetMethod (%$ LOOPSTestClass3) (QUOTE PM1) (QUOTE Prop1)) (QUOTE LTP49))) (SyntaxTest) (AltTest) (AltTestOf) (TestDesc "PutMethod: prop") (UsesObj #((LOOPSTestClass3)								NIL AllowRemove)) (Tested?) (CompletelyTested?) (StandBy) (SubTest) (AfterTest) (SubTestOf #((LTFPutMethod)								NIL MakeBackLink)))(DEFINST LOOPSTestPrimitive (LTP48 "OYR@@E") (name #(LTP48 NIL RememberName)) (CasesUsed) (PreTest #((LTFGetMethod)												      										     BuildPreTest MakeBackLink)) (PreTestOf) (ResetExp) (SetUp (PutMethod (%$ LOOPSTestClass3) (QUOTE PM2) (QUOTE LOOPSTestClass3.PM2))) (TestExpr (AND (EQUAL (GetMethod (%$ LOOPSTestClass3) (QUOTE PM2)) (QUOTE LOOPSTestClass3.PM2)) (EQUAL (GetMethod (%$ LOOPSTestCases) (QUOTE PM2)) (QUOTE LOOPSTestCases.PM2)))) (SyntaxTest) (AltTest) (AltTestOf) (TestDesc "PutMethod: local selector over inherited") (UsesObj #((LOOPSTestCases LOOPSTestClass3)												     											      NIL AllowRemove)) (Tested?) (CompletelyTested?) (StandBy) (SubTest #((LTP50)								 NIL MakeBackLink)) (AfterTest) (SubTestOf #((LTFPutMethod)	    NIL MakeBackLink)))(DEFINST LOOPSTestPrimitive (LTP47 "OVR@@A") (name #(LTP47 NIL RememberName)) (CasesUsed) (PreTest ? Tested? ?) (PreTestOf) (ResetExp (PROGN (SEND (%$ LOOPSTestClass5) Add (QUOTE Method) (QUOTE DM2) NIL (QUOTE Prop1)) (SEND (%$ LOOPSTestClass5) Add (QUOTE Method) (QUOTE DM2) (QUOTE (* used by LTP47)) (QUOTE doc)))) (SetUp (PROGN (SEND (%$ LOOPSTestClass5) Delete (QUOTE Method) (QUOTE DM2) (QUOTE Prop1)) (SETQ LTV3 (SEND (%$ LOOPSTestClass5) List (QUOTE Method) (QUOTE DM2))))) (TestExpr (AND (ATEST (NOT (FMEMB (QUOTE Prop1) LTV3)) "deleted property is no longer there") (ATEST (FMEMB (QUOTE doc) LTV3) "other properties were not deleted"))) (SyntaxTest ? Tested? ?) (AltTest ? Tested? ?) (AltTestOf) (TestDesc "Delete in CLASS: prop of method") (UsesObj #((LOOPSTestClass5)						       NIL AllowRemove)) (Tested? ?) (CompletelyTested? ?) (StandBy) (SubTest ? Tested? ?) (AfterTest) (SubTestOf #((LTP43)									      NIL MakeBackLink)))(DEFINST LOOPSTestPrimitive (LTP46 "OVR@@A") (name #(LTP46 NIL RememberName)) (CasesUsed) (PreTest ? Tested? ?) (PreTestOf) (ResetExp (SEND (%$ LOOPSTestClass5) Add (QUOTE CVProp) (QUOTE DCV2) (QUOTE DCV2) (QUOTE Prop1))) (SetUp (PROGN (SEND (%$ LOOPSTestClass5) Delete (QUOTE CVProp) (QUOTE DCV2) (QUOTE Prop1)) (SETQ LTV2 (SEND (%$ LOOPSTestClass5) List (QUOTE CVProps) (QUOTE DCV2))))) (TestExpr (AND (NOT (FMEMB (QUOTE Prop1) LTV2)) (FMEMB (QUOTE doc) LTV2))) (SyntaxTest ? Tested? ?) (AltTest ? Tested? ?) (AltTestOf) (TestDesc "Delete in CLASS: CVProp") (UsesObj #((LOOPSTestClass5)								       NIL AllowRemove)) (Tested? ?) (CompletelyTested? ?) (StandBy) (SubTest ? Tested? ?) (AfterTest) (SubTestOf #((LTP41)									      NIL MakeBackLink)))(DEFINST LOOPSTestPrimitive (LTP45 "OVR@@A ") (name #(LTP45 NIL RememberName)) (CasesUsed) (PreTest ? Tested? ?) (PreTestOf) (ResetExp) (SetUp) (TestExpr) (SyntaxTest ? Tested? ?) (AltTest ? Tested? ?) (AltTestOf) (TestDesc "Delete in CLASS: Meta") (UsesObj) (Tested? ?) (CompletelyTested? ?) (StandBy) (SubTest ? Tested? ?) (AfterTest) (SubTestOf #((LTMDeleteInClass)					      NIL MakeBackLink)))(DEFINST LOOPSTestPrimitive (LTP44 "OVR@@A") (name #(LTP44 NIL RememberName)) (CasesUsed) (PreTest) (PreTestOf) (ResetExp (SEND (%$ LOOPSTestClass5) Add (QUOTE Super) (QUOTE LOOPSTestSuper))) (SetUp (PROGN (SEND (%$ LOOPSTestClass5) Delete (QUOTE Super) (QUOTE LOOPSTestSuper)) (SETQ LTV1 (SEND (%$ LOOPSTestClass5) List (QUOTE Supers))))) (TestExpr (AND (NOT (FMEMB (QUOTE LOOPSTestSuper) LTV1)) (FMEMB (QUOTE NamedObject) LTV1))) (SyntaxTest) (AltTest) (AltTestOf) (TestDesc "Delete in CLASS: Supers") (UsesObj #((LOOPSTestClass5)				      NIL AllowRemove)) (Tested?) (CompletelyTested?) (StandBy) (SubTest) (AfterTest) (SubTestOf #(NIL NIL MakeBackLink)))(DEFINST LOOPSTestPrimitive (LTP43 "OVR@@A~") (name #(LTP43 NIL RememberName)) (CasesUsed) (PreTest ? Tested? ?) (PreTestOf) (ResetExp (SEND (%$ LOOPSTestClass5) Add (QUOTE Method) (QUOTE DM1) (QUOTE LOOPSTestClass5.DM1))) (SetUp (PROGN (SEND (%$ LOOPSTestClass5) Delete (QUOTE Method) (QUOTE DM1)) (SETQ LTV1 (SEND (%$ LOOPSTestClass5) List (QUOTE Methods))))) (TestExpr (AND (NOT (FMEMB (QUOTE DM1) LTV1)) (FMEMB (QUOTE DM3) LTV1))) (SyntaxTest ? Tested? ?) (AltTest ? Tested? ?) (AltTestOf) (TestDesc "Delete in CLASS: Method") (UsesObj #((LOOPSTestClass5)				       NIL AllowRemove)) (Tested? ?) (CompletelyTested? ?) (StandBy) (SubTest #((LTP47)	  NIL MakeBackLink) Tested? ?) (AfterTest) (SubTestOf #((LTMDeleteInClass)								NIL MakeBackLink)))(DEFINST LOOPSTestPrimitive (LTP42 "OVR@@A}") (name #(LTP42 NIL RememberName)) (CasesUsed) (PreTest ? Tested? ?) (PreTestOf) (ResetExp (SEND (%$ LOOPSTestClass5) Add (QUOTE IVProp) (QUOTE DIV2) (QUOTE DIV2) (QUOTE Prop1))) (SetUp (PROGN (SEND (%$ LOOPSTestClass5) Delete (QUOTE IVProp) (QUOTE DIV2) (QUOTE Prop1)) (SETQ LTV1 (SEND (%$ LOOPSTestClass5) List (QUOTE IVProps) (QUOTE DIV2))))) (TestExpr (AND (NOT (FMEMB (QUOTE Prop1) LTV1)) (FMEMB (QUOTE doc) LTV1))) (SyntaxTest ? Tested? ?) (AltTest ? Tested? ?) (AltTestOf) (TestDesc "Delete in CLASS: IVProp") (UsesObj #((LOOPSTestClass5)								       NIL AllowRemove)) (Tested? ?) (CompletelyTested? ?) (StandBy) (SubTest ? Tested? ?) (AfterTest) (SubTestOf #((LTMDeleteInClass)									      NIL MakeBackLink)))(DEFINST LOOPSTestPrimitive (LTP41 "OVR@@A|") (name #(LTP41 NIL RememberName)) (CasesUsed) (PreTest ? Tested? ?) (PreTestOf) (ResetExp (SEND (%$ LOOPSTestClass5) Add (QUOTE CV) (QUOTE DCV1) NIL)) (SetUp (SEND (%$ LOOPSTestClass5) Delete (QUOTE CV) (QUOTE DCV1))) (TestExpr (NOT (FMEMB (QUOTE DCV1) (SEND (%$ LOOPSTestClass5) List (QUOTE CVs))))) (SyntaxTest ? Tested? ?) (AltTest ? Tested? ?) (AltTestOf) (TestDesc "Delete in Class: CV") (UsesObj #((LOOPSTestClass5)					   NIL AllowRemove)) (Tested? ?) (CompletelyTested? ?) (StandBy) (SubTest #((LTP46)		    NIL MakeBackLink) Tested? ?) (AfterTest) (SubTestOf #((LTMDeleteInClass)									  NIL MakeBackLink)))(DEFINST LOOPSTestPrimitive (LTP40 "OTR@@Ak") (name #(LTP40 NIL RememberName)) (CasesUsed) (PreTest ? Tested? ?) (PreTestOf) (ResetExp (PutClassValue (%$ LOOPSTestCases) (QUOTE PCV3) (QUOTE LTC) (QUOTE Prop1))) (SetUp (PutClassValue (%$ LOOPSTestClass3) (QUOTE PCV3) (QUOTE LTP40) (QUOTE Prop1))) (TestExpr (AND (EQUAL (GetClassValue (%$ LOOPSTestClass3) (QUOTE PCV3) (QUOTE Prop1)) (QUOTE LTP40)) (EQUAL (GetClassValue (%$ LOOPSTestCases) (QUOTE PCV3) (QUOTE Prop1)) (QUOTE LTP40)))) (SyntaxTest ? Tested? ?) (AltTest ? Tested? ?) (AltTestOf) (TestDesc "PutClassValue:in a prop inherited in a class") (UsesObj #((LOOPSTestCases LOOPSTestClass3)	    NIL AllowRemove)) (Tested? ?) (CompletelyTested? ?) (StandBy) (SubTest ? Tested? ?) (AfterTest) (SubTestOf #((LTP36)			NIL MakeBackLink)))(DEFINST LOOPSTestPrimitive (LTP39 "OTR@@Aj") (name #(LTP39 NIL RememberName)) (CasesUsed) (PreTest ? Tested? ?) (PreTestOf) (ResetExp (PutClassValue (%$ LOOPSTestClass3) (QUOTE PCV2) (QUOTE LTC3) (QUOTE Prop1))) (SetUp (PutClassValue (%$ LOOPSTestClass3) (QUOTE PCV2) (QUOTE LTP39) (QUOTE Prop1))) (TestExpr (EQUAL (GetClassValue (%$ LOOPSTestClass3) (QUOTE PCV2) (QUOTE Prop1)) (QUOTE LTP39))) (SyntaxTest ? Tested? ?) (AltTest ? Tested? ?) (AltTestOf) (TestDesc "PutClassValue: local prop over inherited") (UsesObj #((LOOPSTestClass3 LOOPSTestCases)						       NIL AllowRemove)) (Tested? ?) (CompletelyTested? ?) (StandBy) (SubTest ? Tested? ?) (AfterTest) (SubTestOf #((LTP35)									      NIL MakeBackLink)))(DEFINST LOOPSTestPrimitive (LTP38 "OTR@@Ai") (name #(LTP38 NIL RememberName)) (CasesUsed #((LTCC1)											     NIL 										     MakeBackLink)) (PreTest ? Tested? ?) (PreTestOf) (ResetExp (PutClassValue (%$ LTCC1) (QUOTE PCV1) NIL (QUOTE Prop1))) (SetUp (PutClassValue (%$ LTCC1) (QUOTE PCV1) (QUOTE LTP38) (QUOTE Prop1))) (TestExpr (EQUAL (GetClassValue (%$ LTCC1) (QUOTE PCV1) (QUOTE Prop1)) (QUOTE LTP38))) (SyntaxTest ? Tested? ?) (AltTest ? Tested? ?) (AltTestOf) (TestDesc "PutClassValue: prop via an instance") (UsesObj #((LOOPSTestClass3											)										      NIL AllowRemove)) (Tested? ?) (CompletelyTested? ?) (StandBy) (SubTest ? Tested? ?) (AfterTest) (SubTestOf #((LTP34)											     NIL 										     MakeBackLink)))(DEFINST LOOPSTestPrimitive (LTP37 "OTR@@Ag") (name #(LTP37 NIL RememberName)) (CasesUsed) (PreTest ? Tested? ?) (PreTestOf) (ResetExp (PROGN (PutClassValue (%$ LOOPSTestCases) (QUOTE PCV3) (QUOTE LTC) (QUOTE Prop1)) (PutClassValue (%$ LOOPSTestClass2) (QUOTE PCV3) NotSetValue (QUOTE Prop1)))) (SetUp (PutClassValue (%$ LOOPSTestClass2) (QUOTE PCV3) (QUOTE LTP37) (QUOTE Prop1))) (TestExpr (AND (EQUAL (GetClassValue (%$ LOOPSTestClass2) (QUOTE PCV3) (QUOTE Prop1)) (QUOTE LTP37)) (EQUAL (GetClassValue (%$ LOOPSTestCases) (QUOTE PCV3) (QUOTE Prop1)) (QUOTE LTC)))) (SyntaxTest ? Tested? ?) (AltTest ? Tested? ?) (AltTestOf) (TestDesc "PutClassValue: in a inherited prop, but CV is local") (UsesObj #((LOOPSTestCases LOOPSTestClass2)												   											      NIL AllowRemove)) (Tested? ?) (CompletelyTested? ?) (StandBy) (SubTest ? Tested? ?) (AfterTest) (SubTestOf #((LTFPutClassValue)   NIL MakeBackLink)))(DEFINST LOOPSTestPrimitive (LTP36 "OTR@@Af") (name #(LTP36 NIL RememberName)) (CasesUsed) (PreTest ? Tested? ?) (PreTestOf) (ResetExp (PutClassValue (%$ LOOPSTestCases) (QUOTE PCV3) (QUOTE LTC))) (SetUp (PutClassValue (%$ LOOPSTestClass3) (QUOTE PCV3) (QUOTE LTP36))) (TestExpr (AND (EQUAL (GetClassValue (%$ LOOPSTestClass3) (QUOTE PCV3)) (QUOTE LTP36)) (EQUAL (GetClassValue (%$ LOOPSTestCases) (QUOTE PCV3)) (QUOTE LTP36)))) (SyntaxTest ? Tested? ?) (AltTest ? Tested? ?) (AltTestOf) (TestDesc "PutClassValue: inherited CV in class") (UsesObj #((LOOPSTestClass3 LOOPSTestCases)						   NIL AllowRemove)) (Tested? ?) (CompletelyTested? ?) (StandBy) (SubTest #((LTP40)		      NIL MakeBackLink) Tested? ?) (AfterTest) (SubTestOf #((LTFPutClassValue)									    NIL MakeBackLink)))(DEFINST LOOPSTestPrimitive (LTP35 "OTR@@Ae") (name #(LTP35 NIL RememberName)) (CasesUsed) (PreTest ? Tested? ?) (PreTestOf) (ResetExp (PutClassValue (%$ LOOPSTestClass3) (QUOTE PCV2) (QUOTE LTC3))) (SetUp (PutClassValue (%$ LOOPSTestClass3) (QUOTE PCV2) (QUOTE LTP35))) (TestExpr (EQUAL (GetClassValue (%$ LOOPSTestClass3) (QUOTE PCV2)) (QUOTE LTP35))) (SyntaxTest ? Tested? ?) (AltTest ? Tested? ?) (AltTestOf) (TestDesc "PutClassValue: local over inherited") (UsesObj #((LOOPSTestClass3 										   LOOPSTestCases)								       NIL AllowRemove)) (Tested? ?) (CompletelyTested? ?) (StandBy) (SubTest #((LTP39)					  NIL MakeBackLink) Tested? ?) (AfterTest) (SubTestOf #((LTFPutClassValue)												NIL 										     MakeBackLink)))(DEFINST LOOPSTestPrimitive (LTP34 "OTR@@Ad") (name #(LTP34 NIL RememberName)) (CasesUsed #((LTCC1)											     NIL 										     MakeBackLink)) (PreTest ? Tested? ?) (PreTestOf) (ResetExp (PutClassValue (%$ LTCC1) (QUOTE PCV1) NIL)) (SetUp (PutClassValue (%$ LTCC1) (QUOTE PCV1) (QUOTE LTP34))) (TestExpr (EQUAL (GetClassValue (%$ LTCC1) (QUOTE PCV1)) (QUOTE LTP34))) (SyntaxTest ? Tested? ?) (AltTest ? Tested? ?) (AltTestOf) (TestDesc "PutClassValue: in an instance") (UsesObj #((LOOPSTestClass3)					    NIL AllowRemove)) (Tested? ?) (CompletelyTested? ?) (StandBy) (SubTest #((LTP38)		    NIL MakeBackLink) Tested? ?) (AfterTest) (SubTestOf #((LTFPutClassValue)									  NIL MakeBackLink)))(DEFINST LOOPSTestPrimitive (LTP33 "OTR@@Ac") (name #(LTP33 NIL RememberName)) (CasesUsed) (PreTest ? Tested? ?) (PreTestOf) (ResetExp (PutClassValue (%$ LOOPSTestClass3) (QUOTE PCV1) NIL (QUOTE Prop1))) (SetUp (PutClassValue (%$ LOOPSTestClass3) (QUOTE PCV1) (QUOTE LTP33) (QUOTE Prop1))) (TestExpr (EQUAL (GetClassValue (%$ LOOPSTestClass3) (QUOTE PCV1) (QUOTE Prop1)) (QUOTE LTP33))) (SyntaxTest ? Tested? ?) (AltTest ? Tested? ?) (AltTestOf) (TestDesc "PutClassValue: local prop") (UsesObj #((LOOPSTestClass3)											       NIL 										      AllowRemove)) (Tested? ?) (CompletelyTested? ?) (StandBy) (SubTest ? Tested? ?) (AfterTest) (SubTestOf #((LTFPutClassValue)											  NIL 										     MakeBackLink)))(DEFINST LOOPSTestPrimitive (LTP32 "OTR@@E") (name #(LTP32 NIL RememberName)) (CasesUsed) (PreTest ? Tested? ?) (PreTestOf) (ResetExp) (SetUp) (TestExpr (EQUAL (GetClassValue (%$ LOOPSTestClass1) (QUOTE GCV2) (QUOTE Prop1)) (QUOTE LTP29))) (SyntaxTest ? Tested? ?) (AltTest ? Tested? ?) (AltTestOf) (TestDesc "GetClassValue: local prop over inherited") (UsesObj #((LOOPSTestCases LOOPSTestClass1)								NIL AllowRemove)) (Tested? ?) (CompletelyTested? ?) (StandBy) (SubTest ? Tested? ?) (AfterTest) (SubTestOf #((LTP29)									      NIL MakeBackLink)))(DEFINST LOOPSTestPrimitive (LTP31 "OTR@@E") (name #(LTP31 NIL RememberName)) (CasesUsed) (PreTest ? Tested? ?) (PreTestOf) (ResetExp) (SetUp) (TestExpr (EQUAL (GetClassValue (%$ LOOPSTestClass1) (QUOTE GCV1) (QUOTE Prop1)) (QUOTE GCV1))) (SyntaxTest ? Tested? ?) (AltTest ? Tested? ?) (AltTestOf) (TestDesc "GetClassValue: inherit prop in class") (UsesObj #((LOOPSTestClass1 LOOPSTestCases)							    NIL AllowRemove)) (Tested? ?) (CompletelyTested? ?) (StandBy) (SubTest ? Tested? ?) (AfterTest) (SubTestOf #((LTP28)									      NIL MakeBackLink)))(DEFINST LOOPSTestPrimitive (LTP30 "OTR@@E") (name #(LTP30 NIL RememberName)) (CasesUsed #((LTC7)											    NIL 										     MakeBackLink)) (PreTest ? Tested? ?) (PreTestOf) (ResetExp) (SetUp) (TestExpr (EQUAL (GetClassValue (%$ LTC7) (QUOTE GCV1) (QUOTE Prop1)) (QUOTE GCV1))) (SyntaxTest ? Tested? ?) (AltTest ? Tested? ?) (AltTestOf) (TestDesc "GetClassValue: prop in an instance") (UsesObj #((LOOPSTestCases)							  NIL AllowRemove)) (Tested? ?) (CompletelyTested? ?) (StandBy) (SubTest ? Tested? ?) (AfterTest) (SubTestOf #((LTP26)									      NIL MakeBackLink)))(DEFINST LOOPSTestPrimitive (LTP29 "OTR@@E") (name #(LTP29 NIL RememberName)) (CasesUsed) (PreTest ? Tested? ?) (PreTestOf) (ResetExp) (SetUp) (TestExpr (EQUAL (GetClassValue (%$ LOOPSTestClass1) (QUOTE GCV2)) (QUOTE LTP29))) (SyntaxTest ? Tested? ?) (AltTest ? Tested? ?) (AltTestOf) (TestDesc "GetClassValue: local over inherited") (UsesObj #((LOOPSTestCases LOOPSTestClass1)						  NIL AllowRemove)) (Tested? ?) (CompletelyTested? ?) (StandBy) (SubTest #((LTP32)		     NIL MakeBackLink) Tested? ?) (AfterTest) (SubTestOf #((LTFGetClassValue)									   NIL MakeBackLink)))(DEFINST LOOPSTestPrimitive (LTP28 "OTR@@E") (name #(LTP28 NIL RememberName)) (CasesUsed) (PreTest ? Tested? ?) (PreTestOf) (ResetExp) (SetUp) (TestExpr (EQUAL (GetClassValue (%$ LOOPSTestClass1) (QUOTE GCV1)) (QUOTE GCV))) (SyntaxTest ? Tested? ?) (AltTest ? Tested? ?) (AltTestOf) (TestDesc "GetClassValue: inherit in class") (UsesObj #((LOOPSTestClass1 LOOPSTestCases)					      NIL AllowRemove)) (Tested? ?) (CompletelyTested? ?) (StandBy) (SubTest #((LTP31)		    NIL MakeBackLink) Tested? ?) (AfterTest) (SubTestOf #((LTFGetClassValue)									  NIL MakeBackLink)))(DEFINST LOOPSTestPrimitive (LTP27 "OTR@@E") (name #(LTP27 NIL RememberName)) (CasesUsed) (PreTest ? Tested? ?) (PreTestOf) (ResetExp) (SetUp) (TestExpr (EQUAL (GetClassValue (%$ LOOPSTestCases) (QUOTE GCV1) (QUOTE Prop1)) (QUOTE GCV1))) (SyntaxTest ? Tested? ?) (AltTest ? Tested? ?) (AltTestOf) (TestDesc "GetClassValue: prop from a class") (UsesObj #((LOOPSTestCases)							NIL AllowRemove)) (Tested? ?) (CompletelyTested? ?) (StandBy) (SubTest ? Tested? ?) (AfterTest) (SubTestOf #((LTFGetClassValue)									      NIL MakeBackLink)))(DEFINST LOOPSTestPrimitive (LTP26 "OTR@@E") (name #(LTP26 NIL RememberName)) (CasesUsed #((LTC7)											    NIL 										     MakeBackLink)) (PreTest ? Tested? ?) (PreTestOf) (ResetExp) (SetUp) (TestExpr (EQUAL (GetClassValue (%$ LTC7) (QUOTE GCV1)) (QUOTE GCV))) (SyntaxTest ? Tested? ?) (AltTest ? Tested? ?) (AltTestOf) (TestDesc "GetClassValue: for an instance") (UsesObj #((LOOPSTestCases)					     NIL AllowRemove)) (Tested? ?) (CompletelyTested? ?) (StandBy) (SubTest #((LTP30)		    NIL MakeBackLink) Tested? ?) (AfterTest) (SubTestOf #((LTFGetClassValue)									  NIL MakeBackLink)))(DEFINST LOOPSTestBasic (LTDumpInstance "OSR@@A") (name #(LTDumpInstance NIL RememberName)) (CasesUsed) (PreTest #((LTMDestroyInObj LTLoadInstance)		      NIL MakeBackLink) Tested? ?) (PreTestOf) (ResetExp) (SetUp (PROGN (SETQ LTDUMPCOMS LTLOADCOMS) (MAKEFILE (QUOTE LTDUMP)) (for x in LTLOADINSTANCES do (SEND (GetObjectRec x) Destroy)) (LOAD (QUOTE LTDUMP)))) (TestExpr (AND (TestLoadedInstances (%$ LD4)) (TestLoadedInstances (%$ LD1)))) (SyntaxTest ? Tested? ?) (AltTest ? Tested? ?) (AltTestOf) (TestDesc "Dumping instances to file") (UsesObj) (Tested? ?) (CompletelyTested? ?) (StandBy) (SubTest #((LTP86)											      NIL 										     MakeBackLink) Tested? ?) (AfterTest))(DEFINST LOOPSTestBasic (LTLoadInstance "OSR@@A") (name #(LTLoadInstance NIL RememberName)) (CasesUsed) (PreTest #((LTFGetValue)		      NIL MakeBackLink) Tested? ?) (PreTestOf #((LTDumpInstance)								NIL MakeBackLink)) (ResetExp) (SetUp (LTLoadFile (QUOTE LTLOAD))) (TestExpr (AND (TestLoadedInstances (%$ LD4)) (TestLoadedInstances (%$ LD1)))) (SyntaxTest ? Tested? ?) (AltTest ? Tested? ?) (AltTestOf) (TestDesc "Loading instances from a file") (UsesObj #((LD4 LD3 LD2 LD1 LOOPSTestClassLD)					    NIL AllowRemove)) (Tested? ?) (CompletelyTested? ?) (StandBy) (SubTest ? Tested? ?) (AfterTest))(DEFINST LOOPSTestPrimitive (LTP25 "OOR@@AP") (name #(LTP25 NIL RememberName)) (CasesUsed) (PreTest ? Tested? ?) (PreTestOf) (ResetExp (SEND (%$ LOOPSTestClass4) Delete (QUOTE IVProp) (QUOTE AIV2) (QUOTE Prop1))) (SetUp (SEND (%$ LOOPSTestClass4) Add (QUOTE IVProp) (QUOTE AIV2) (QUOTE LTP25) (QUOTE Prop1))) (TestExpr (AND (EQUAL (GetValue (%$ LOOPSTestClass4) (QUOTE AIV2) (QUOTE Prop1)) (QUOTE LTP25)) (EQUAL (GetValue (%$ LOOPSTestSuper) (QUOTE AIV2) (QUOTE Prop1)) (QUOTE Orig)))) (SyntaxTest ? Tested? ?) (AltTest ? Tested? ?) (AltTestOf) (TestDesc "Add Method: IVProp to a inherited IV") (UsesObj #((LOOPSTestSuper LOOPSTestClass4)												  NIL 										      AllowRemove)) (Tested? ?) (CompletelyTested? ?) (StandBy) (SubTest ? Tested? ?) (AfterTest) (SubTestOf #(NIL NIL 										     MakeBackLink)))(DEFINST LOOPSTestPrimitive (LTP24 "OOR@@A") (name #(LTP24 NIL RememberName)) (CasesUsed) (PreTest) (PreTestOf) (ResetExp) (SetUp) (TestExpr) (SyntaxTest) (AltTest) (AltTestOf) (TestDesc) (UsesObj) (Tested?) (CompletelyTested?) (StandBy) (SubTest) (AfterTest) (SubTestOf #(NIL NIL MakeBackLink)))(DEFINST LOOPSTestPrimitive (LTP23 "OOR@@A") (name #(LTP23 NIL RememberName)) (CasesUsed) (PreTest ? Tested? ?) (PreTestOf) (ResetExp (SEND (%$ LOOPSTestClass4) Delete (QUOTE CVProp) (QUOTE ACV1) (QUOTE Prop1))) (SetUp (SEND (%$ LOOPSTestClass4) Add (QUOTE CVProp) (QUOTE ACV1) (QUOTE LTP23) (QUOTE Prop1))) (TestExpr (EQUAL (GetClassValue (%$ LOOPSTestClass4) (QUOTE ACV1) (QUOTE Prop1)) (QUOTE LTP23))) (SyntaxTest ? Tested? ?) (AltTest ? Tested? ?) (AltTestOf) (TestDesc "Add Method: CVProp") (UsesObj #((LOOPSTestClass4)												     											      NIL AllowRemove)) (Tested? ?) (CompletelyTested? ?) (StandBy) (SubTest ? Tested? ?) (AfterTest) (SubTestOf #((LTP21)   NIL MakeBackLink)))(DEFINST LOOPSTestPrimitive (LTP22 "OOR@@A") (name #(LTP22 NIL RememberName)) (CasesUsed) (PreTest #((LTP9)												      										     BuildPreTest MakeBackLink) Tested? ?) (PreTestOf) (ResetExp (SEND (%$ LOOPSTestClass4) Delete (QUOTE IVProp) (QUOTE AIV1) (QUOTE Prop1))) (SetUp (SEND (%$ LOOPSTestClass4) Add (QUOTE IVProp) (QUOTE AIV1) (QUOTE LTP22) (QUOTE Prop1))) (TestExpr (EQUAL (GetValue (%$ LOOPSTestClass4) (QUOTE AIV1) (QUOTE Prop1)) (QUOTE LTP22))) (SyntaxTest ? Tested? ?) (AltTest ? Tested? ?) (AltTestOf) (TestDesc "Add Method: IVProp") (UsesObj #((LOOPSTestClass4)	  NIL AllowRemove)) (Tested? ?) (CompletelyTested? ?) (StandBy) (SubTest ? Tested? ?) (AfterTest) (SubTestOf #((LTMAdd)			NIL MakeBackLink)))(DEFINST LOOPSTestPrimitive (LTP21 "OOR@@A") (name #(LTP21 NIL RememberName)) (CasesUsed) (PreTest #((LTFGetClassValue)												      										     BuildPreTest MakeBackLink) Tested? ?) (PreTestOf #((LTENew)				      NIL MakeBackLink)) (ResetExp (SEND (%$ LOOPSTestClass4) Delete (QUOTE CV) (QUOTE ACV1))) (SetUp (SEND (%$ LOOPSTestClass4) Add (QUOTE CV) (QUOTE ACV1) (QUOTE LTP21)) Tested? #(? NIL FlashTestBrowser)) (TestExpr (EQUAL (GetClassValue (%$ LOOPSTestClass4) (QUOTE ACV1)) (QUOTE LTP21))) (SyntaxTest ? Tested? ?) (AltTest ? Tested? ?) (AltTestOf) (TestDesc "Add method: CV") (UsesObj #((LOOPSTestClass4)	    NIL AllowRemove)) (Tested? #(? NIL InformTestBrowser)) (CompletelyTested? ?) (StandBy) (SubTest #((LTP23)	  NIL MakeBackLink) Tested? ?) (AfterTest) (SubTestOf #((LTMAdd)								NIL MakeBackLink)))(DEFINST LOOPSTestPrimitive (LTP20 "ONR@@A") (name #(LTP20 NIL RememberName)) (CasesUsed #((LTCA5)											     NIL 										     MakeBackLink)) (PreTest #(NIL BuildPreTest MakeBackLink) Tested? ?) (PreTestOf) (ResetExp (PROGN (SEND (%$ LTCA5) Destroy) (SEND (%$ LOOPSTestClass1) Delete (QUOTE IV) (QUOTE SecondNewPV1)))) (SetUp (PROGN (SEND (%$ LOOPSTestClass1) New (QUOTE LTCA5)) (SEND (%$ LOOPSTestClass1) Add (QUOTE IV) (QUOTE SecondNewPV1) (QUOTE Def)) (SEND (%$ LOOPSTestClass1) Add (QUOTE IVProp) (QUOTE SecondNewPV1) (QUOTE Def) (QUOTE Prop1)) (SETQ LTV21 (PutValue (%$ LTCA5) (QUOTE SecondNewPV1) (QUOTE LTP20) (QUOTE Prop1))))) (TestExpr (ANDALL (EQUAL (GetValue (%$ LTCA5) (QUOTE SecondNewPV1) (QUOTE Prop1)) (QUOTE LTP20)) (ATEST (EQUAL LTV21 (QUOTE LTP20)) "PutValue returns newValue"))) (SyntaxTest ? Tested? ?) (AltTest ? Tested? ?) (AltTestOf) (TestDesc "PutValue: a prop on a newly added IV to class") (UsesObj #((LOOPSTestClass1)											     NIL 										      AllowRemove)) (Tested? ?) (CompletelyTested? ?) (StandBy) (SubTest ? Tested? ?) (AfterTest) (SubTestOf #((LTP19)											  NIL 										     MakeBackLink)))(DEFINST LOOPSTestPrimitive (LTP19 "ONR@@A") (name #(LTP19 NIL RememberName)) (CasesUsed #((LTCA4)											     NIL 										     MakeBackLink)) (PreTest #((LTMNew LTMDeleteInClass LTMAdd)	  BuildPreTest MakeBackLink) Tested? ?) (PreTestOf) (ResetExp (PROGN (SEND (%$ LTCA4) Destroy) (SEND (%$ LOOPSTestClass1) Delete (QUOTE IV) (QUOTE NewPV1)))) (SetUp (PROGN (SEND (%$ LOOPSTestClass1) New (QUOTE LTCA4)) (SEND (%$ LOOPSTestClass1) Add (QUOTE IV) (QUOTE NewPV1) (QUOTE DEF)) (SETQ LTV21 (PutValue (%$ LTCA4) (QUOTE NewPV1) (QUOTE LTP19))))) (TestExpr (ANDALL (EQUAL (GetValue (%$ LTCA4) (QUOTE NewPV1)) (QUOTE LTP19)) (ATEST (EQUAL LTV21 (QUOTE LTP19)) "PutValue returns newValue"))) (SyntaxTest ? Tested? ?) (AltTest ? Tested? ?) (AltTestOf) (TestDesc "PutValue works for a newly added IV to class") (UsesObj #((LOOPSTestClass1)							   NIL AllowRemove)) (Tested? ?) (CompletelyTested? ?) (StandBy) (SubTest #((LTP20)					  NIL MakeBackLink) Tested? ?) (AfterTest) (SubTestOf #((LTFPutValue)												NIL 										     MakeBackLink)))(DEFINST LOOPSTestPrimitive (LTP18 "ONR@@A") (name #(LTP18 NIL RememberName)) (CasesUsed #((LTCA3)											     NIL 										     MakeBackLink)) (PreTest #((LTP9)	  BuildPreTest MakeBackLink)) (PreTestOf) (ResetExp (PutValue (%$ LTCA3) (QUOTE PV2) NotSetValue (QUOTE Prop1))) (SetUp (SETQ LTV21 (PutValue (%$ LTCA3) (QUOTE PV2) (QUOTE LTP18) (QUOTE Prop1)))) (TestExpr (ANDALL (EQUAL (GetValue (%$ LTCA3) (QUOTE PV2) (QUOTE Prop1)) (QUOTE LTP18)) (ATEST (EQUAL LTV21 (QUOTE LTP18)) "PutValue returns newValue"))) (SyntaxTest) (AltTest) (AltTestOf) (TestDesc "PutValue a prop on an inherited IV") (UsesObj) (Tested?) (CompletelyTested?) (StandBy) (SubTest) (AfterTest) (SubTestOf #((LTFPutValue)				  NIL MakeBackLink)))(DEFINST LOOPSTestPrimitive (LTP17 "ONR@@A") (name #(LTP17 NIL RememberName)) (CasesUsed #((LTCA3)											     NIL 										     MakeBackLink)) (PreTest) (PreTestOf) (ResetExp (PutValue (%$ LTCA3) (QUOTE PV2) NotSetValue)) (SetUp (SETQ LTV21 (PutValue (%$ LTCA3) (QUOTE PV2) (QUOTE LTP17)))) (TestExpr (ANDALL (EQUAL (GetValue (%$ LTCA3) (QUOTE PV2)) (QUOTE LTP17)) (ATEST (EQUAL LTV21 (QUOTE LTP17)) "PutValue returns newValue"))) (SyntaxTest) (AltTest) (AltTestOf) (TestDesc "PutValue on an inherited IV") (UsesObj) (Tested?) (CompletelyTested?) (StandBy) (SubTest) (AfterTest) (SubTestOf #((LTFPutValue)					     NIL MakeBackLink)))(DEFINST LOOPSTestPrimitive (LTP16 "ONR@@A") (name #(LTP16 NIL RememberName)) (CasesUsed #((LTCA2)											     NIL 										     MakeBackLink)) (PreTest #((LTP9)	  BuildPreTest MakeBackLink)) (PreTestOf) (ResetExp (PutValue (%$ LTCA2) (QUOTE PV1) (QUOTE LTP16) NIL)) (SetUp (SETQ LTV21 (PutValue (%$ LTCA2) (QUOTE PV1) (QUOTE LTP16) (QUOTE Prop1)))) (TestExpr (ANDALL (EQUAL (GetValue (%$ LTCA2) (QUOTE PV1) (QUOTE Prop1)) (QUOTE LTP16)) (ATEST (EQUAL LTV21 (QUOTE LTP16)) "PutValue returns newValue"))) (SyntaxTest) (AltTest) (AltTestOf) (TestDesc "PutValue a prop on a local IV") (UsesObj) (Tested?) (CompletelyTested?) (StandBy) (SubTest) (AfterTest) (SubTestOf #((LTFPutValue)			NIL MakeBackLink)))(DEFINST LOOPSTestMethod (LTMTitleCommandInObj "ONR@@A") (name #(LTMTitleCommandInObj NIL 										     RememberName)) (CasesUsed) (PreTest) (PreTestOf) (ResetExp) (SetUp) (TestExpr) (SyntaxTest) (AltTest) (AltTestOf) (TestDesc) (UsesObj) (Tested?) (CompletelyTested?) (StandBy) (SubTest) (AfterTest))(DEFINST LOOPSTestMethod (LTMSetNameInObj "ONR@@A") (name #(LTMSetNameInObj NIL RememberName)) (CasesUsed) (PreTest) (PreTestOf) (ResetExp) (SetUp) (TestExpr) (SyntaxTest) (AltTest) (AltTestOf) (TestDesc) (UsesObj) (Tested?) (CompletelyTested?) (StandBy) (SubTest) (AfterTest))(DEFINST LOOPSTestMethod (LTMRenameInObj "ONR@@A") (name #(LTMRenameInObj NIL RememberName)) (CasesUsed) (PreTest) (PreTestOf) (ResetExp) (SetUp) (TestExpr) (SyntaxTest) (AltTest) (AltTestOf) (TestDesc) (UsesObj) (Tested?) (CompletelyTested?) (StandBy) (SubTest) (AfterTest))(DEFINST LOOPSTestMethod (LTMPutInObj "ONR@@A") (name #(LTMPutInObj NIL RememberName)) (CasesUsed) (PreTest) (PreTestOf) (ResetExp) (SetUp) (TestExpr) (SyntaxTest) (AltTest) (AltTestOf) (TestDesc) (UsesObj) (Tested?) (CompletelyTested?) (StandBy) (SubTest) (AfterTest))(DEFINST LOOPSTestMethod (LTMPPV!InObj "ONR@@A%
") (name #(LTMPPV!InObj NIL RememberName)) (CasesUsed) (PreTest) (PreTestOf) (ResetExp) (SetUp) (TestExpr) (SyntaxTest) (AltTest) (AltTestOf) (TestDesc) (UsesObj) (Tested?) (CompletelyTested?) (StandBy) (SubTest) (AfterTest))(DEFINST LOOPSTestMethod (LTMPP!InObj "ONR@@A	") (name #(LTMPP!InObj NIL RememberName)) (CasesUsed) (PreTest) (PreTestOf) (ResetExp) (SetUp) (TestExpr) (SyntaxTest) (AltTest) (AltTestOf) (TestDesc) (UsesObj) (Tested?) (CompletelyTested?) (StandBy) (SubTest) (AfterTest))(DEFINST LOOPSTestMethod (LTMPPInObj "ONR@@A") (name #(LTMPPInObj NIL RememberName)) (CasesUsed) (PreTest) (PreTestOf) (ResetExp) (SetUp) (TestExpr) (SyntaxTest) (AltTest) (AltTestOf) (TestDesc) (UsesObj) (Tested?) (CompletelyTested?) (StandBy) (SubTest) (AfterTest))(DEFINST LOOPSTestMethod (LTMList!InObj "ONR@@A") (name #(LTMList!InObj NIL RememberName)) (CasesUsed) (PreTest) (PreTestOf) (ResetExp) (SetUp) (TestExpr) (SyntaxTest) (AltTest) (AltTestOf) (TestDesc) (UsesObj) (Tested?) (CompletelyTested?) (StandBy) (SubTest) (AfterTest))(DEFINST LOOPSTestMethod (LTMListInObj "ONR@@A") (name #(LTMListInObj NIL RememberName)) (CasesUsed #((LTCC2)  NIL MakeBackLink)) (PreTest) (PreTestOf) (ResetExp) (SetUp) (TestExpr (ATEST (MEMBER (QUOTE LIO) (SEND (%$ LTCC2) List (QUOTE IVs))) "local IV is returned by List")) (SyntaxTest) (AltTest) (AltTestOf) (TestDesc "List method in OBJECT: IVs") (UsesObj) (Tested?) (CompletelyTested?) (StandBy) (SubTest) (AfterTest))(DEFINST LOOPSTestMethod (LTMInspectValueCommandInObj "ONR@@A") (name #(LTMInspectValueCommandInObj									  NIL RememberName)) (CasesUsed) (PreTest) (PreTestOf) (ResetExp) (SetUp) (TestExpr) (SyntaxTest) (AltTest) (AltTestOf) (TestDesc) (UsesObj) (Tested?) (CompletelyTested?) (StandBy) (SubTest) (AfterTest))(DEFINST LOOPSTestMethod (LTMInspectTitleMenuInObj "ONR@@A") (name #(LTMInspectTitleMenuInObj								       NIL RememberName)) (CasesUsed) (PreTest) (PreTestOf) (ResetExp) (SetUp) (TestExpr) (SyntaxTest) (AltTest) (AltTestOf) (TestDesc) (UsesObj) (Tested?) (CompletelyTested?) (StandBy) (SubTest) (AfterTest))(DEFINST LOOPSTestMethod (LTMInspectTitleInObj "ONR@@A") (name #(LTMInspectTitleInObj NIL 										     RememberName)) (CasesUsed) (PreTest) (PreTestOf) (ResetExp) (SetUp) (TestExpr) (SyntaxTest) (AltTest) (AltTestOf) (TestDesc) (UsesObj) (Tested?) (CompletelyTested?) (StandBy) (SubTest) (AfterTest))(DEFINST LOOPSTestMethod (LTMInspectStoreInObj "ONR@@A") (name #(LTMInspectStoreInObj NIL 										     RememberName)) (CasesUsed) (PreTest) (PreTestOf) (ResetExp) (SetUp) (TestExpr) (SyntaxTest) (AltTest) (AltTestOf) (TestDesc) (UsesObj) (Tested?) (CompletelyTested?) (StandBy) (SubTest) (AfterTest))(DEFINST LOOPSTestMethod (LTMInspectPropertiesInObj "ONR@@A") (name #(LTMInspectPropertiesInObj									NIL RememberName)) (CasesUsed) (PreTest) (PreTestOf) (ResetExp) (SetUp) (TestExpr) (SyntaxTest) (AltTest) (AltTestOf) (TestDesc) (UsesObj) (Tested?) (CompletelyTested?) (StandBy) (SubTest) (AfterTest))(DEFINST LOOPSTestMethod (LTMInspectPropCommandInObj "ONR@@A ") (name #(LTMInspectPropCommandInObj									 NIL RememberName)) (CasesUsed) (PreTest) (PreTestOf) (ResetExp) (SetUp) (TestExpr) (SyntaxTest) (AltTest) (AltTestOf) (TestDesc) (UsesObj) (Tested?) (CompletelyTested?) (StandBy) (SubTest) (AfterTest))(DEFINST LOOPSTestMethod (LTMInspectFetchInObj "ONR@@A") (name #(LTMInspectFetchInObj NIL 										     RememberName)) (CasesUsed) (PreTest) (PreTestOf) (ResetExp) (SetUp) (TestExpr) (SyntaxTest) (AltTest) (AltTestOf) (TestDesc) (UsesObj) (Tested?) (CompletelyTested?) (StandBy) (SubTest) (AfterTest))(DEFINST LOOPSTestMethod (LTMHasIVInObj "ONR@@A~") (name #(LTMHasIVInObj NIL RememberName)) (CasesUsed) (PreTest) (PreTestOf) (ResetExp) (SetUp) (TestExpr) (SyntaxTest) (AltTest) (AltTestOf) (TestDesc) (UsesObj) (Tested?) (CompletelyTested?) (StandBy) (SubTest) (AfterTest))(DEFINST LOOPSTestMethod (LTMEditInObj "ONR@@A}") (name #(LTMEditInObj NIL RememberName)) (CasesUsed) (PreTest) (PreTestOf) (ResetExp) (SetUp) (TestExpr) (SyntaxTest) (AltTest) (AltTestOf) (TestDesc) (UsesObj) (Tested?) (CompletelyTested?) (StandBy) (SubTest) (AfterTest))(DEFINST LOOPSTestMethod (LTMDumpFactsInObj "ONR@@A|") (name #(LTMDumpFactsInObj NIL RememberName)) (CasesUsed) (PreTest) (PreTestOf) (ResetExp) (SetUp) (TestExpr) (SyntaxTest) (AltTest) (AltTestOf) (TestDesc) (UsesObj) (Tested?) (CompletelyTested?) (StandBy) (SubTest) (AfterTest))(DEFINST LOOPSTestMethod (LTMDestroy!InObj "ONR@@A{") (name #(LTMDestroy!InObj NIL RememberName)) (CasesUsed) (PreTest) (PreTestOf) (ResetExp) (SetUp) (TestExpr) (SyntaxTest) (AltTest) (AltTestOf) (TestDesc) (UsesObj) (Tested?) (CompletelyTested?) (StandBy) (SubTest) (AfterTest))(DEFINST LOOPSTestMethod (LTMDestroyInObj "ONR@@Az") (name #(LTMDestroyInObj NIL RememberName)) (CasesUsed) (PreTest #((LTMNew LTFGetObjectRec)		      NIL MakeBackLink) Tested? ?) (PreTestOf #((LTENew LTDumpInstance)								NIL MakeBackLink)) (ResetExp) (SetUp (PROGN (SETQ LTV4 (SEND (%$ LTDClass2) New)) (SEND LTV4 SetName (QUOTE LTDC21)) (SEND LTV4 Destroy))) (TestExpr (AND (NULL (GetObjectRec (%$ LTDC21))))) (SyntaxTest ? Tested? ?) (AltTest ? Tested? ?) (AltTestOf) (TestDesc "Destroy method in OBJECT: named object") (UsesObj #((LTDClass2)									  NIL AllowRemove)) (Tested? ?) (CompletelyTested? ?) (StandBy) (SubTest ? Tested? ?) (AfterTest))(DEFINST LOOPSTestMethod (LTMTitleCommandInClass "ONR@@Ay") (name #(LTMTitleCommandInClass NIL 										     RememberName)) (CasesUsed) (PreTest) (PreTestOf) (ResetExp) (SetUp) (TestExpr) (SyntaxTest) (AltTest) (AltTestOf) (TestDesc) (UsesObj) (Tested?) (CompletelyTested?) (StandBy) (SubTest) (AfterTest))(DEFINST LOOPSTestMethod (LTMSetNameInClass "ONR@@Ax") (name #(LTMSetNameInClass NIL RememberName)) (CasesUsed) (PreTest) (PreTestOf) (ResetExp) (SetUp) (TestExpr) (SyntaxTest) (AltTest) (AltTestOf) (TestDesc) (UsesObj) (Tested?) (CompletelyTested?) (StandBy) (SubTest) (AfterTest))(DEFINST LOOPSTestMethod (LTMRenameInClass "ONR@@Aw") (name #(LTMRenameInClass NIL RememberName)) (CasesUsed) (PreTest) (PreTestOf) (ResetExp) (SetUp) (TestExpr) (SyntaxTest) (AltTest) (AltTestOf) (TestDesc) (UsesObj) (Tested?) (CompletelyTested?) (StandBy) (SubTest) (AfterTest))(DEFINST LOOPSTestMethod (LTMPutInClass "ONR@@Av") (name #(LTMPutInClass NIL RememberName)) (CasesUsed) (PreTest) (PreTestOf) (ResetExp) (SetUp) (TestExpr) (SyntaxTest) (AltTest) (AltTestOf) (TestDesc) (UsesObj) (Tested?) (CompletelyTested?) (StandBy) (SubTest) (AfterTest))(DEFINST LOOPSTestMethod (LTMPPV!InClass "ONR@@Au") (name #(LTMPPV!InClass NIL RememberName)) (CasesUsed) (PreTest) (PreTestOf) (ResetExp) (SetUp) (TestExpr) (SyntaxTest) (AltTest) (AltTestOf) (TestDesc) (UsesObj) (Tested?) (CompletelyTested?) (StandBy) (SubTest) (AfterTest))(DEFINST LOOPSTestMethod (LTMPP!InClass "ONR@@At") (name #(LTMPP!InClass NIL RememberName)) (CasesUsed) (PreTest) (PreTestOf) (ResetExp) (SetUp) (TestExpr) (SyntaxTest) (AltTest) (AltTestOf) (TestDesc) (UsesObj) (Tested?) (CompletelyTested?) (StandBy) (SubTest) (AfterTest))(DEFINST LOOPSTestMethod (LTMPPInClass "ONR@@As") (name #(LTMPPInClass NIL RememberName)) (CasesUsed) (PreTest) (PreTestOf) (ResetExp) (SetUp) (TestExpr) (SyntaxTest) (AltTest) (AltTestOf) (TestDesc) (UsesObj) (Tested?) (CompletelyTested?) (StandBy) (SubTest) (AfterTest))(DEFINST LOOPSTestMethod (LTMList!InClass "ONR@@Ar") (name #(LTMList!InClass NIL RememberName)) (CasesUsed) (PreTest) (PreTestOf) (ResetExp) (SetUp) (TestExpr) (SyntaxTest) (AltTest) (AltTestOf) (TestDesc) (UsesObj) (Tested?) (CompletelyTested?) (StandBy) (SubTest) (AfterTest))(DEFINST LOOPSTestMethod (LTMInspectValueCommandInClass "ONR@@Ap") (name #(								    LTMInspectValueCommandInClass									   NIL RememberName)) (CasesUsed) (PreTest) (PreTestOf) (ResetExp) (SetUp) (TestExpr) (SyntaxTest) (AltTest) (AltTestOf) (TestDesc) (UsesObj) (Tested?) (CompletelyTested?) (StandBy) (SubTest) (AfterTest))(DEFINST LOOPSTestMethod (LTMInspectTitleMenuInClass "ONR@@Ao") (name #(LTMInspectTitleMenuInClass									NIL RememberName)) (CasesUsed) (PreTest) (PreTestOf) (ResetExp) (SetUp) (TestExpr) (SyntaxTest) (AltTest) (AltTestOf) (TestDesc) (UsesObj) (Tested?) (CompletelyTested?) (StandBy) (SubTest) (AfterTest))(DEFINST LOOPSTestMethod (LTMInspectTitleInClass "ONR@@An") (name #(LTMInspectTitleInClass NIL 										     RememberName)) (CasesUsed) (PreTest) (PreTestOf) (ResetExp) (SetUp) (TestExpr) (SyntaxTest) (AltTest) (AltTestOf) (TestDesc) (UsesObj) (Tested?) (CompletelyTested?) (StandBy) (SubTest) (AfterTest))(DEFINST LOOPSTestMethod (LTMInspectStoreInClass "ONR@@Am") (name #(LTMInspectStoreInClass NIL 										     RememberName)) (CasesUsed) (PreTest) (PreTestOf) (ResetExp) (SetUp) (TestExpr) (SyntaxTest) (AltTest) (AltTestOf) (TestDesc) (UsesObj) (Tested?) (CompletelyTested?) (StandBy) (SubTest) (AfterTest))(DEFINST LOOPSTestMethod (LTMInspectPropertiesInClass "ONR@@Al") (name #(LTMInspectPropertiesInClass									 NIL RememberName)) (CasesUsed) (PreTest) (PreTestOf) (ResetExp) (SetUp) (TestExpr) (SyntaxTest) (AltTest) (AltTestOf) (TestDesc) (UsesObj) (Tested?) (CompletelyTested?) (StandBy) (SubTest) (AfterTest))(DEFINST LOOPSTestMethod (LTMInspectPropCommandInClass "ONR@@Ak") (name #(								     LTMInspectPropCommandInClass									  NIL RememberName)) (CasesUsed) (PreTest) (PreTestOf) (ResetExp) (SetUp) (TestExpr) (SyntaxTest) (AltTest) (AltTestOf) (TestDesc) (UsesObj) (Tested?) (CompletelyTested?) (StandBy) (SubTest) (AfterTest))(DEFINST LOOPSTestMethod (LTMInspectFetchInClass "ONR@@Aj") (name #(LTMInspectFetchInClass NIL 										     RememberName)) (CasesUsed) (PreTest) (PreTestOf) (ResetExp) (SetUp) (TestExpr) (SyntaxTest) (AltTest) (AltTestOf) (TestDesc) (UsesObj) (Tested?) (CompletelyTested?) (StandBy) (SubTest) (AfterTest))(DEFINST LOOPSTestMethod (LTMHasIVInClass "ONR@@Ai") (name #(LTMHasIVInClass NIL RememberName)) (CasesUsed) (PreTest) (PreTestOf) (ResetExp) (SetUp) (TestExpr) (SyntaxTest) (AltTest) (AltTestOf) (TestDesc) (UsesObj) (Tested?) (CompletelyTested?) (StandBy) (SubTest) (AfterTest))(DEFINST LOOPSTestMethod (LTMEditInClass "ONR@@Ah") (name #(LTMEditInClass NIL RememberName)) (CasesUsed) (PreTest) (PreTestOf) (ResetExp) (SetUp) (TestExpr) (SyntaxTest) (AltTest) (AltTestOf) (TestDesc) (UsesObj) (Tested?) (CompletelyTested?) (StandBy) (SubTest) (AfterTest))(DEFINST LOOPSTestMethod (LTMDumpFactsInClass "ONR@@Ag") (name #(LTMDumpFactsInClass NIL RememberName)) (CasesUsed) (PreTest) (PreTestOf) (ResetExp) (SetUp) (TestExpr) (SyntaxTest) (AltTest) (AltTestOf) (TestDesc) (UsesObj) (Tested?) (CompletelyTested?) (StandBy) (SubTest) (AfterTest))(DEFINST LOOPSTestMethod (LTMDestroy!InClass "ONR@@Af") (name #(LTMDestroy!InClass NIL RememberName)) (CasesUsed) (PreTest) (PreTestOf) (ResetExp) (SetUp) (TestExpr) (SyntaxTest) (AltTest) (AltTestOf) (TestDesc) (UsesObj) (Tested?) (CompletelyTested?) (StandBy) (SubTest) (AfterTest))(DEFINST LOOPSTestMethod (LTMDestroyInClass "ONR@@Ae") (name #(LTMDestroyInClass NIL RememberName)) (CasesUsed) (PreTest #((LTFGetObjectRec)		      NIL MakeBackLink) Tested? ?) (PreTestOf #((LTENew LTESummarize LTEDelete)								NIL MakeBackLink)) (ResetExp (DC (QUOTE LTDClass) (QUOTE (LOOPSTestCases)))) (SetUp (SEND (%$ LTDClass) Destroy) Tested? #(? NIL 										 FlashTestBrowser)) (TestExpr (AND (NULL (GetObjectRec (QUOTE LTDClass))))) (SyntaxTest ? Tested? ?) (AltTest ? Tested? ?) (AltTestOf) (TestDesc "Destroy method in CLASS:") (UsesObj #((LTDClass)							     NIL AllowRemove)) (Tested? #(? NIL 										InformTestBrowser)) (CompletelyTested? ?) (StandBy) (SubTest ? Tested? ?) (AfterTest))(DEFINST LOOPSTestMethod (LTMWhereIs "ONR@@Ad") (name #(LTMWhereIs NIL RememberName)) (CasesUsed) (PreTest) (PreTestOf) (ResetExp) (SetUp) (TestExpr) (SyntaxTest) (AltTest) (AltTestOf) (TestDesc) (UsesObj) (Tested?) (CompletelyTested?) (StandBy) (SubTest) (AfterTest))(DEFINST LOOPSTestMethod (LTMUnderstands "ONR@@Ac") (name #(LTMUnderstands NIL RememberName)) (CasesUsed) (PreTest) (PreTestOf) (ResetExp) (SetUp) (TestExpr) (SyntaxTest) (AltTest) (AltTestOf) (TestDesc) (UsesObj) (Tested?) (CompletelyTested?) (StandBy) (SubTest) (AfterTest))(DEFINST LOOPSTestMethod (LTMUnSetName "ONR@@Ab") (name #(LTMUnSetName NIL RememberName)) (CasesUsed) (PreTest) (PreTestOf) (ResetExp) (SetUp) (TestExpr) (SyntaxTest) (AltTest) (AltTestOf) (TestDesc) (UsesObj) (Tested?) (CompletelyTested?) (StandBy) (SubTest) (AfterTest))(DEFINST LOOPSTestMethod (LTMTraceIt "ONR@@Aa") (name #(LTMTraceIt NIL RememberName)) (CasesUsed) (PreTest) (PreTestOf) (ResetExp) (SetUp) (TestExpr) (SyntaxTest) (AltTest) (AltTestOf) (TestDesc) (UsesObj) (Tested?) (CompletelyTested?) (StandBy) (SubTest) (AfterTest))(DEFINST LOOPSTestMethod (LTMReturnDefaultValue "ONR@@A`") (name #(LTMReturnDefaultValue NIL 										     RememberName)) (CasesUsed) (PreTest) (PreTestOf) (ResetExp) (SetUp) (TestExpr) (SyntaxTest) (AltTest) (AltTestOf) (TestDesc) (UsesObj) (Tested?) (CompletelyTested?) (StandBy) (SubTest) (AfterTest))(DEFINST LOOPSTestMethod (LTMPutIVProp "ONR@@A_") (name #(LTMPutIVProp NIL RememberName)) (CasesUsed) (PreTest) (PreTestOf) (ResetExp) (SetUp) (TestExpr) (SyntaxTest) (AltTest) (AltTestOf) (TestDesc) (UsesObj) (Tested?) (CompletelyTested?) (StandBy) (SubTest) (AfterTest))(DEFINST LOOPSTestMethod (LTMPrintOn "ONR@@A^") (name #(LTMPrintOn NIL RememberName)) (CasesUsed) (PreTest) (PreTestOf) (ResetExp) (SetUp) (TestExpr) (SyntaxTest) (AltTest) (AltTestOf) (TestDesc) (UsesObj) (Tested?) (CompletelyTested?) (StandBy) (SubTest) (AfterTest))(DEFINST LOOPSTestMethod (LTMNoObjectForMsg "ONR@@A]") (name #(LTMNoObjectForMsg NIL RememberName)) (CasesUsed) (PreTest) (PreTestOf) (ResetExp) (SetUp) (TestExpr) (SyntaxTest) (AltTest) (AltTestOf) (TestDesc) (UsesObj) (Tested?) (CompletelyTested?) (StandBy) (SubTest) (AfterTest))(DEFINST LOOPSTestMethod (LTMMessageNotUnderstood "ONR@@A\") (name #(LTMMessageNotUnderstood NIL 										     RememberName)) (CasesUsed) (PreTest) (PreTestOf) (ResetExp) (SetUp) (TestExpr) (SyntaxTest) (AltTest) (AltTestOf) (TestDesc) (UsesObj) (Tested?) (CompletelyTested?) (StandBy) (SubTest) (AfterTest))(DEFINST LOOPSTestMethod (LTMInstantiate "ONR@@A[") (name #(LTMInstantiate NIL RememberName)) (CasesUsed) (PreTest) (PreTestOf) (ResetExp) (SetUp) (TestExpr) (SyntaxTest) (AltTest) (AltTestOf) (TestDesc) (UsesObj) (Tested?) (CompletelyTested?) (StandBy) (SubTest) (AfterTest))(DEFINST LOOPSTestMethod (LTMInstOf! "ONR@@AZ") (name #(LTMInstOf! NIL RememberName)) (CasesUsed) (PreTest) (PreTestOf) (ResetExp) (SetUp) (TestExpr (ANDALL (ATEST (SEND (%$ LTMInstOf!) InstOf! (QUOTE LOOPSTestMethod)) "Instance") (ATEST (SEND (%$ LTMInstOf!) InstOf! (QUOTE LOOPSTestObject)) "Instance once removed from tested class") (ATEST (NOT (SEND (%$ LTMInstOf!) InstOf! (QUOTE LOOPSTestSuper))) "Instance NOT InstOf of tested class"))) (SyntaxTest) (AltTest) (AltTestOf) (TestDesc "InstOf! METHOD") (UsesObj) (Tested?) (CompletelyTested?) (StandBy) (SubTest) (AfterTest))(DEFINST LOOPSTestMethod (LTMInstOf "ONR@@AY") (name #(LTMInstOf NIL RememberName)) (CasesUsed) (PreTest) (PreTestOf) (ResetExp) (SetUp) (TestExpr (ANDALL (ATEST (SEND (%$ LTMInstOf) InstOf (QUOTE LOOPSTestMethod)) "check for Instance") (ATEST (NOT (SEND (%$ LTFSend) InstOf (QUOTE LOOPSTestMethod))) "check for an Instance which is NOT an InstOf the class"))) (SyntaxTest) (AltTest) (AltTestOf) (TestDesc "InstOf METHOD") (UsesObj) (Tested?) (CompletelyTested?) (StandBy) (SubTest) (AfterTest))(DEFINST LOOPSTestMethod (LTMInspect "ONR@@AX") (name #(LTMInspect NIL RememberName)) (CasesUsed) (PreTest) (PreTestOf) (ResetExp) (SetUp) (TestExpr) (SyntaxTest) (AltTest) (AltTestOf) (TestDesc) (UsesObj) (Tested?) (CompletelyTested?) (StandBy) (SubTest) (AfterTest))(DEFINST LOOPSTestMethod (LTMIVMissing "ONR@@AW") (name #(LTMIVMissing NIL RememberName)) (CasesUsed) (PreTest) (PreTestOf) (ResetExp) (SetUp) (TestExpr) (SyntaxTest) (AltTest) (AltTestOf) (TestDesc) (UsesObj) (Tested?) (CompletelyTested?) (StandBy) (SubTest) (AfterTest))(DEFINST LOOPSTestMethod (LTMDoMethod "ONR@@AV") (name #(LTMDoMethod NIL RememberName)) (CasesUsed) (PreTest) (PreTestOf) (ResetExp) (SetUp) (TestExpr) (SyntaxTest) (AltTest) (AltTestOf) (TestDesc) (UsesObj) (Tested?) (CompletelyTested?) (StandBy) (SubTest) (AfterTest))(DEFINST LOOPSTestMethod (LTMDeleteIV "ONR@@AU") (name #(LTMDeleteIV NIL RememberName)) (CasesUsed) (PreTest) (PreTestOf) (ResetExp) (SetUp) (TestExpr) (SyntaxTest) (AltTest) (AltTestOf) (TestDesc) (UsesObj) (Tested?) (CompletelyTested?) (StandBy) (SubTest) (AfterTest))(DEFINST LOOPSTestMethod (LTMCopyShallow "ONR@@AT") (name #(LTMCopyShallow NIL RememberName)) (CasesUsed) (PreTest) (PreTestOf) (ResetExp) (SetUp) (TestExpr) (SyntaxTest) (AltTest) (AltTestOf) (TestDesc) (UsesObj) (Tested?) (CompletelyTested?) (StandBy) (SubTest) (AfterTest))(DEFINST LOOPSTestMethod (LTMCopyDeep "ONR@@AS") (name #(LTMCopyDeep NIL RememberName)) (CasesUsed) (PreTest) (PreTestOf) (ResetExp) (SetUp) (TestExpr) (SyntaxTest) (AltTest) (AltTestOf) (TestDesc) (UsesObj) (Tested?) (CompletelyTested?) (StandBy) (SubTest) (AfterTest))(DEFINST LOOPSTestMethod (LTMClassName "ONR@@AR") (name #(LTMClassName NIL RememberName)) (CasesUsed) (PreTest) (PreTestOf) (ResetExp) (SetUp) (TestExpr) (SyntaxTest) (AltTest) (AltTestOf) (TestDesc) (UsesObj) (Tested?) (CompletelyTested?) (StandBy) (SubTest) (AfterTest))(DEFINST LOOPSTestMethod (LTMClass "ONR@@AQ") (name #(LTMClass NIL RememberName)) (CasesUsed) (PreTest) (PreTestOf) (ResetExp) (SetUp) (TestExpr) (SyntaxTest) (AltTest) (AltTestOf) (TestDesc) (UsesObj) (Tested?) (CompletelyTested?) (StandBy) (SubTest) (AfterTest))(DEFINST LOOPSTestMethod (LTMBreakIt "ONR@@AP") (name #(LTMBreakIt NIL RememberName)) (CasesUsed) (PreTest) (PreTestOf) (ResetExp) (SetUp) (TestExpr) (SyntaxTest) (AltTest) (AltTestOf) (TestDesc) (UsesObj) (Tested?) (CompletelyTested?) (StandBy) (SubTest) (AfterTest))(DEFINST LOOPSTestMethod (LTMAt "ONR@@AO") (name #(LTMAt NIL RememberName)) (CasesUsed) (PreTest) (PreTestOf) (ResetExp) (SetUp) (TestExpr) (SyntaxTest) (AltTest) (AltTestOf) (TestDesc) (UsesObj) (Tested?) (CompletelyTested?) (StandBy) (SubTest) (AfterTest))(DEFINST LOOPSTestMethod (LTMAssocKB "ONR@@AN") (name #(LTMAssocKB NIL RememberName)) (CasesUsed) (PreTest) (PreTestOf) (ResetExp) (SetUp) (TestExpr) (SyntaxTest) (AltTest) (AltTestOf) (TestDesc) (UsesObj) (Tested?) (CompletelyTested?) (StandBy) (SubTest) (AfterTest))(DEFINST LOOPSTestMethod (LTMAddIV "ONR@@AM") (name #(LTMAddIV NIL RememberName)) (CasesUsed) (PreTest) (PreTestOf) (ResetExp) (SetUp) (TestExpr) (SyntaxTest) (AltTest) (AltTestOf) (TestDesc) (UsesObj) (Tested?) (CompletelyTested?) (StandBy) (SubTest) (AfterTest))(DEFINST LOOPSTestMethod (LTMSubClasses "ONR@@AL") (name #(LTMSubClasses NIL RememberName)) (CasesUsed) (PreTest) (PreTestOf) (ResetExp) (SetUp) (TestExpr) (SyntaxTest) (AltTest) (AltTestOf) (TestDesc) (UsesObj) (Tested?) (CompletelyTested?) (StandBy) (SubTest) (AfterTest))(DEFINST LOOPSTestMethod (LTMReplaceSupers "ONR@@AK") (name #(LTMReplaceSupers NIL RememberName)) (CasesUsed) (PreTest #((LTP62 LTFGetValue)		      NIL MakeBackLink)) (PreTestOf) (ResetExp (SEND (%$ LOOPSTestClassRS) ReplaceSupers (QUOTE (LOOPSTestClassCF)))) (SetUp (SEND (%$ LOOPSTestClassRS) ReplaceSupers (QUOTE (LOOPSTestCases)))) (TestExpr (AND (EQUAL (SEND (%$ LOOPSTestClassRS) List (QUOTE Supers)) (QUOTE (LOOPSTestCases))) (EQUAL (GetValue (%$ LOOPSTestClassRS) (QUOTE GV1)) (QUOTE LTP10)))) (SyntaxTest) (AltTest) (AltTestOf) (TestDesc "Replace Supers method") (UsesObj #((LOOPSTestCases LOOPSTestClassRS 										 LOOPSTestClassCF)								   NIL AllowRemove)) (Tested?) (CompletelyTested?) (StandBy) (SubTest) (AfterTest))(DEFINST LOOPSTestMethod (LTMPPMethod "ONR@@AJ") (name #(LTMPPMethod NIL RememberName)) (CasesUsed) (PreTest) (PreTestOf) (ResetExp) (SetUp) (TestExpr) (SyntaxTest) (AltTest) (AltTestOf) (TestDesc) (UsesObj) (Tested?) (CompletelyTested?) (StandBy) (SubTest) (AfterTest))(DEFINST LOOPSTestMethod (LTMPPM "ONR@@AI") (name #(LTMPPM NIL RememberName)) (CasesUsed) (PreTest) (PreTestOf) (ResetExp) (SetUp) (TestExpr) (SyntaxTest) (AltTest) (AltTestOf) (TestDesc) (UsesObj) (Tested?) (CompletelyTested?) (StandBy) (SubTest) (AfterTest))(DEFINST LOOPSTestMethod (LTMOnFile "ONR@@AH") (name #(LTMOnFile NIL RememberName)) (CasesUsed) (PreTest) (PreTestOf) (ResetExp) (SetUp) (TestExpr) (SyntaxTest) (AltTest) (AltTestOf) (TestDesc) (UsesObj) (Tested?) (CompletelyTested?) (StandBy) (SubTest) (AfterTest))(DEFINST LOOPSTestMethod (LTMNewWithValues "ONR@@AG") (name #(LTMNewWithValues NIL RememberName)) (CasesUsed) (PreTest #((LTFPutValueOnly LTFGetValueOnly LTFGetValue LTFClass LTFtype?)		      NIL MakeBackLink)) (PreTestOf) (ResetExp (SEND LTV7 Destroy)) (SetUp (SETQ LTV7 (SEND (%$ LOOPSTestCases) NewWithValues (QUOTE ((name LTC0) (Var1 5) (Test1 6 BackLink 7)))))) (TestExpr (AND (type? instance LTV7) (EQ (Class LTV7) (%$ LOOPSTestCases)) (EQUAL (GetValue LTV7 (QUOTE name)) (QUOTE LTC0)) (EQUAL (GetValue LTV7 (QUOTE Var1)) 5) (EQUAL (GetValue LTV7 (QUOTE Test1)) 6) (EQUAL (GetValue LTV7 (QUOTE Test1)) (GetValueOnly LTV7 (QUOTE Test1))) (EQUAL (GetValue LTV7 (QUOTE Test1) (QUOTE BackLink)) 7))) (SyntaxTest) (AltTest) (AltTestOf) (TestDesc "NewWithValues: creating an instance") (UsesObj #((LOOPSTestCases)						  NIL AllowRemove)) (Tested?) (CompletelyTested?) (StandBy) (SubTest) (AfterTest))(DEFINST LOOPSTestMethod (LTMNewTemp "ONR@@AF") (name #(LTMNewTemp NIL RememberName)) (CasesUsed) (PreTest) (PreTestOf) (ResetExp) (SetUp) (TestExpr) (SyntaxTest) (AltTest) (AltTestOf) (TestDesc) (UsesObj) (Tested?) (CompletelyTested?) (StandBy) (SubTest) (AfterTest))(DEFINST LOOPSTestMethod (LTMNew "ONR@@AE") (name #(LTMNew NIL RememberName)) (CasesUsed) (PreTest #((LTFClass LTFtype?)												     											      NIL MakeBackLink) Tested? ?) (PreTestOf #((LTENew LTMDestroyInObj LTP19)				      NIL MakeBackLink)) (ResetExp (SEND (%$ LTNClass) Destroy)) (SetUp (SEND (%$ Class) New (QUOTE LTNClass) (QUOTE (Object))) Tested? #(? NIL FlashTestBrowser)) (TestExpr (AND (type? class (%$ LTNClass)) (EQ (Class (%$ LTNClass)) (%$ Class)))) (SyntaxTest ? Tested? ?) (AltTest ? Tested? ?) (AltTestOf) (TestDesc "New method in METACLASS: Creating a class") (UsesObj) (Tested? #(? NIL InformTestBrowser)) (CompletelyTested? ?) (StandBy) (SubTest #((LTP66)											 NIL 										     MakeBackLink) Tested? ?) (AfterTest))(DEFINST LOOPSTestMethod (LTMMoveMethod "ONR@@AD") (name #(LTMMoveMethod NIL RememberName)) (CasesUsed) (PreTest) (PreTestOf) (ResetExp) (SetUp) (TestExpr) (SyntaxTest) (AltTest) (AltTestOf) (TestDesc) (UsesObj) (Tested?) (CompletelyTested?) (StandBy) (SubTest) (AfterTest))(DEFINST LOOPSTestMethod (LTMMethodDoc "ONR@@AC") (name #(LTMMethodDoc NIL RememberName)) (CasesUsed) (PreTest) (PreTestOf) (ResetExp) (SetUp) (TestExpr) (SyntaxTest) (AltTest) (AltTestOf) (TestDesc) (UsesObj) (Tested?) (CompletelyTested?) (StandBy) (SubTest) (AfterTest))(DEFINST LOOPSTestMethod (LTMInitialize "ONR@@AB") (name #(LTMInitialize NIL RememberName)) (CasesUsed) (PreTest) (PreTestOf) (ResetExp) (SetUp) (TestExpr) (SyntaxTest) (AltTest) (AltTestOf) (TestDesc) (UsesObj) (Tested?) (CompletelyTested?) (StandBy) (SubTest) (AfterTest))(DEFINST LOOPSTestMethod (LTMHasCV "ONR@@AA") (name #(LTMHasCV NIL RememberName)) (CasesUsed) (PreTest) (PreTestOf) (ResetExp) (SetUp) (TestExpr) (SyntaxTest) (AltTest) (AltTestOf) (TestDesc) (UsesObj) (Tested?) (CompletelyTested?) (StandBy) (SubTest) (AfterTest))(DEFINST LOOPSTestMethod (LTMFetchMethod "ONR@@A@") (name #(LTMFetchMethod NIL RememberName)) (CasesUsed) (PreTest) (PreTestOf) (ResetExp) (SetUp) (TestExpr (EQUAL (SEND (%$ LOOPSTestClassL1) FetchMethod (QUOTE M1)) (QUOTE LOOPSTestClassL1.M1))) (SyntaxTest) (AltTest) (AltTestOf) (TestDesc "FetchMethod in CLASS: local") (UsesObj #((LOOPSTestCases LOOPSTestClassL1)					  NIL AllowRemove)) (Tested?) (CompletelyTested?) (StandBy) (SubTest #((LTP77 LTP76)	  NIL MakeBackLink)) (AfterTest))(DEFINST LOOPSTestMethod (LTMEditMethod "ONR@@A?") (name #(LTMEditMethod NIL RememberName)) (CasesUsed) (PreTest) (PreTestOf) (ResetExp) (SetUp) (TestExpr) (SyntaxTest) (AltTest) (AltTestOf) (TestDesc) (UsesObj) (Tested?) (CompletelyTested?) (StandBy) (SubTest) (AfterTest))(DEFINST LOOPSTestMethod (LTMDisplaySubClasses "ONR@@A>") (name #(LTMDisplaySubClasses NIL 										     RememberName)) (CasesUsed) (PreTest) (PreTestOf) (ResetExp) (SetUp) (TestExpr) (SyntaxTest) (AltTest) (AltTestOf) (TestDesc) (UsesObj) (Tested?) (CompletelyTested?) (StandBy) (SubTest) (AfterTest))(DEFINST LOOPSTestMethod (LTMDefMethod "ONR@@A=") (name #(LTMDefMethod NIL RememberName)) (CasesUsed) (PreTest) (PreTestOf) (ResetExp) (SetUp) (TestExpr) (SyntaxTest) (AltTest) (AltTestOf) (TestDesc) (UsesObj) (Tested?) (CompletelyTested?) (StandBy) (SubTest) (AfterTest))(DEFINST LOOPSTestMethod (LTMCopyMethod "ONR@@A<") (name #(LTMCopyMethod NIL RememberName)) (CasesUsed) (PreTest) (PreTestOf) (ResetExp) (SetUp) (TestExpr) (SyntaxTest) (AltTest) (AltTestOf) (TestDesc) (UsesObj) (Tested?) (CompletelyTested?) (StandBy) (SubTest) (AfterTest))(DEFINST LOOPSTestMethod (LTMCommentMethods "ONR@@A;") (name #(LTMCommentMethods NIL RememberName)) (CasesUsed) (PreTest) (PreTestOf) (ResetExp) (SetUp) (TestExpr) (SyntaxTest) (AltTest) (AltTestOf) (TestDesc) (UsesObj) (Tested?) (CompletelyTested?) (StandBy) (SubTest) (AfterTest))(DEFINST LOOPSTestPrimitive (LTP15 "ONR@@A!") (name #(LTP15 NIL RememberName)) (CasesUsed #((LTCA1)											    NIL 										     MakeBackLink)) (PreTest #((LTMDeleteInClass LTMAdd)	  BuildPreTest MakeBackLink) Tested? ?) (PreTestOf) (ResetExp (SEND (%$ LOOPSTestClass1) Delete (QUOTE IV) (QUOTE GV2) (QUOTE Prop1))) (SetUp (SEND (%$ LOOPSTestClass1) Add (QUOTE IV) (QUOTE GV2) (QUOTE LTP15) (QUOTE Prop1))) (TestExpr (EQUAL (GetValue (%$ LTCA1) (QUOTE GV2) (QUOTE Prop1)) (QUOTE LTP15))) (SyntaxTest ? Tested? ?) (AltTest ? Tested? ?) (AltTestOf) (TestDesc "GetValue works for a newly added IVProp to class") (UsesObj #((LOOPSTestClass1)							       NIL AllowRemove)) (Tested? ?) (CompletelyTested? ?) (StandBy) (SubTest ? Tested? ?) (AfterTest) (SubTestOf #((LTP14)									      NIL MakeBackLink)))(DEFINST LOOPSTestMethod (LTMDeleteInClass "ONR@@A ") (name #(LTMDeleteInClass NIL RememberName)) (CasesUsed) (PreTest #((LTMListInClass)		      NIL MakeBackLink) Tested? ?) (PreTestOf #((LTP19 LTP15 LTP14)								NIL MakeBackLink)) (ResetExp (SEND (%$ LOOPSTestClass5) Add (QUOTE IV) (QUOTE DIV1) NIL)) (SetUp (PROGN (SEND (%$ LOOPSTestClass5) Delete (QUOTE IV) (QUOTE DIV1)) (SETQ LTV1 (SEND (%$ LOOPSTestClass5) List (QUOTE IVs))))) (TestExpr (NOT (FMEMB (QUOTE DIV1) LTV1))) (SyntaxTest ? Tested? ?) (AltTest ? Tested? ?) (AltTestOf) (TestDesc "Delete method in CLASS: IV") (UsesObj #((LOOPSTestClass5)					 NIL AllowRemove)) (Tested? ?) (CompletelyTested? ?) (StandBy (LTP44)) (SubTest #((LTP45 LTP43 LTP42 LTP41)		    NIL MakeBackLink) Tested? ?) (AfterTest))(DEFINST LOOPSTestMethod (LTMAdd "ONR@@A:") (name #(LTMAdd NIL RememberName)) (CasesUsed) (PreTest #((LTFGetValue)												     											      NIL MakeBackLink) Tested? ?) (PreTestOf #((LTESummarize LTP73 LTP19 LTP15 LTP14)				      NIL MakeBackLink)) (ResetExp (SEND (%$ LOOPSTestClass4) Delete (QUOTE IV) (QUOTE AIV1))) (SetUp (SEND (%$ LOOPSTestClass4) Add (QUOTE IV) (QUOTE AIV1) (QUOTE LTMAdd)) Tested? #(? NIL FlashTestBrowser)) (TestExpr (EQUAL (GetValue (%$ LOOPSTestClass4) (QUOTE AIV1)) (QUOTE LTMAdd))) (SyntaxTest ? Tested? ?) (AltTest ? Tested? ?) (AltTestOf) (TestDesc "Add method: adding IV") (UsesObj #((LOOPSTestClass4)				    NIL AllowRemove)) (Tested? #(? NIL InformTestBrowser)) (CompletelyTested? ?) (StandBy #((LTP25)				NIL AllowRemove)) (SubTest #((LTP22 LTP21)							     NIL MakeBackLink) Tested? ?) (AfterTest))(DEFINST LOOPSTestPrimitive (LTP14 "ONR@@A") (name #(LTP14 NIL RememberName)) (CasesUsed #((LTCA1)											    NIL 										     MakeBackLink)) (PreTest #((LTMDeleteInClass LTMAdd)	  BuildPreTest MakeBackLink) Tested? ?) (PreTestOf) (ResetExp (SEND (%$ LOOPSTestClass1) Delete (QUOTE IV) (QUOTE GV2))) (SetUp (SEND (%$ LOOPSTestClass1) Add (QUOTE IV) (QUOTE GV2) (QUOTE LTP14))) (TestExpr (EQUAL (GetValue (%$ LTCA1) (QUOTE GV2)) (QUOTE LTP14))) (SyntaxTest ? Tested? ?) (AltTest ? Tested? ?) (AltTestOf) (TestDesc "GetValue works for a newly added IV to class") (UsesObj #((LOOPSTestClass1)												      											      NIL AllowRemove)) (Tested? ?) (CompletelyTested? ?) (StandBy) (SubTest #((LTP15)								     NIL MakeBackLink) Tested? ?) (AfterTest) (SubTestOf #((LTFGetValue)			NIL MakeBackLink)))(DEFINST LOOPSTestPrimitive (LTP13 "ONR@@A") (name #(LTP13 NIL RememberName)) (CasesUsed #((LTC6)											    NIL 										     MakeBackLink)) (PreTest ? Tested? ?) (PreTestOf) (ResetExp) (SetUp) (TestExpr (EQUAL (GetValue (%$ LTC6) (QUOTE GV1) (QUOTE Prop1)) (QUOTE LTP11))) (SyntaxTest ? Tested? ?) (AltTest ? Tested? ?) (AltTestOf) (TestDesc "GetValue inherits prop, though var has local value") (UsesObj) (Tested? ?) (CompletelyTested? ?) (StandBy) (SubTest ? Tested? ?) (AfterTest) (SubTestOf #((LTP12)							NIL MakeBackLink)))(DEFINST LOOPSTestPrimitive (LTP12 "ONR@@A") (name #(LTP12 NIL RememberName)) (CasesUsed #((LTC6)											    NIL 										     MakeBackLink)) (PreTest ? Tested? ?) (PreTestOf) (ResetExp) (SetUp) (TestExpr (EQUAL (GetValue (%$ LTC6) (QUOTE GV1)) (QUOTE LTP12))) (SyntaxTest ? Tested? ?) (AltTest ? Tested? ?) (AltTestOf) (TestDesc "GetValue gets local over inherited") (UsesObj #((LOOPSTestCases)						 NIL AllowRemove)) (Tested? ?) (CompletelyTested? ?) (StandBy) (SubTest #((LTP13)		    NIL MakeBackLink) Tested? ?) (AfterTest) (SubTestOf #((LTFGetValue)									  NIL MakeBackLink)))(DEFINST LOOPSTestPrimitive (LTP11 "ONR@@A") (name #(LTP11 NIL RememberName)) (CasesUsed #((LTC5)											    NIL 										     MakeBackLink)) (PreTest ? Tested? ?) (PreTestOf) (ResetExp) (SetUp) (TestExpr (EQUAL (GetValue (%$ LTC5) (QUOTE GV1) (QUOTE Prop1)) (QUOTE LTP11))) (SyntaxTest ? Tested? ?) (AltTest ? Tested? ?) (AltTestOf) (TestDesc "GetValue inherits prop") (UsesObj #((LOOPSTestCases)				     NIL AllowRemove)) (Tested? ?) (CompletelyTested? ?) (StandBy) (SubTest ? Tested? ?) (AfterTest) (SubTestOf #((LTP10)					      NIL MakeBackLink)))(DEFINST LOOPSTestPrimitive (LTP10 "ONR@@A") (name #(LTP10 NIL RememberName)) (CasesUsed #((LTC5)											    NIL 										     MakeBackLink)) (PreTest ? Tested? ?) (PreTestOf) (ResetExp) (SetUp) (TestExpr (EQUAL (GetValue (%$ LTC5) (QUOTE GV1)) (QUOTE LTP10))) (SyntaxTest ? Tested? ?) (AltTest ? Tested? ?) (AltTestOf) (TestDesc "GetValue inherits value") (UsesObj #((LOOPSTestCases)				      NIL AllowRemove)) (Tested? ?) (CompletelyTested? ?) (StandBy) (SubTest #((LTP11)	  NIL MakeBackLink) Tested? ?) (AfterTest) (SubTestOf #((LTFGetValue)								NIL MakeBackLink)))(DEFINST LOOPSTestPrimitive (LTP9 "ONR@@A") (name #(LTP9 NIL RememberName)) (CasesUsed #((LTC4)											  NIL 										     MakeBackLink)) (PreTest ? Tested? ?) (PreTestOf #((LTP22 LTP18 LTP16)				  NIL MakeBackLink)) (ResetExp) (SetUp) (TestExpr (EQUAL (GetValue (%$ LTC4) (QUOTE Var4) (QUOTE Prop1)) 2)) (SyntaxTest ? Tested? ?) (AltTest ? Tested? ?) (AltTestOf) (TestDesc "GetValue a prop") (UsesObj) (Tested? ?) (CompletelyTested? ?) (StandBy) (SubTest ? Tested? ?) (AfterTest) (SubTestOf #((LTFGetValue)			   NIL MakeBackLink)))(DEFINST LOOPSTestPrimitive (LTP8 "ONR@@A") (name #(LTP8 NIL RememberName)) (CasesUsed) (PreTest #((LTMListInClass)												    										     BuildPreTest MakeBackLink) Tested? ?) (PreTestOf) (ResetExp (MoveVariable (QUOTE LOOPSTestCases) (QUOTE LOOPSTestClass2) (QUOTE MVTest4))) (SetUp (MoveVariable (QUOTE LOOPSTestClass2) (QUOTE LOOPSTestCases) (QUOTE MVTest4))) (TestExpr (AND (EQUAL (QUOTE (Prop1 Prop2 doc)) (SEND (%$ LOOPSTestCases) List (QUOTE IVProps) (QUOTE MVTest4))) (NOT (FMEMB (QUOTE MVTest4) (SEND (%$ LOOPSTestClass2) List (QUOTE IVs)))))) (SyntaxTest ? Tested? ?) (AltTest ? Tested? ?) (AltTestOf) (TestDesc "if Move Variable moves props up the hierarchy") (UsesObj #((LOOPSTestClass2 LOOPSTestCases)							    NIL AllowRemove)) (Tested? ?) (CompletelyTested? ?) (StandBy) (SubTest ? Tested? ?) (AfterTest) (SubTestOf #((LTP7)									      NIL MakeBackLink)))(DEFINST LOOPSTestPrimitive (LTP7 "OMR@@A|") (name #(LTP7 NIL RememberName)) (CasesUsed) (PreTest #((LTMListInClass)												     										     BuildPreTest MakeBackLink) Tested? ?) (PreTestOf) (ResetExp (MoveVariable (QUOTE LOOPSTestCases) (QUOTE LOOPSTestClass2) (QUOTE MVTest3))) (SetUp (MoveVariable (QUOTE LOOPSTestClass2) (QUOTE LOOPSTestCases) (QUOTE MVTest3))) (TestExpr (AND (FMEMB (QUOTE MVTest3) (SEND (%$ LOOPSTestCases) List (QUOTE IVs))) (NOT (FMEMB (QUOTE MVTest3) (SEND (%$ LOOPSTestClass2) List (QUOTE IVs)))))) (SyntaxTest ? Tested? ?) (AltTest ? Tested? ?) (AltTestOf) (TestDesc "MoveVariable up the hierarchy") (UsesObj #((LOOPSTestCases LOOPSTestClass2)											NIL 										      AllowRemove)) (Tested? ?) (CompletelyTested? ?) (StandBy) (SubTest #((LTP8)						      NIL MakeBackLink) Tested? ?) (AfterTest) (SubTestOf #((LTFMoveVariable)	    NIL MakeBackLink)))(DEFINST LOOPSTestPrimitive (LTP6 "OMR@@A{") (name #(LTP6 NIL RememberName)) (CasesUsed) (PreTest #((LTMListInClass)												     										     BuildPreTest MakeBackLink) Tested? ?) (PreTestOf) (ResetExp (MoveVariable (QUOTE LOOPSTestClass3) (QUOTE LOOPSTestClass2) (QUOTE MVTest2))) (SetUp (MoveVariable (QUOTE LOOPSTestClass2) (QUOTE LOOPSTestClass3) (QUOTE MVTest2))) (TestExpr (AND (EQUAL (QUOTE (Prop1 Prop2 doc)) (SEND (%$ LOOPSTestClass3) List (QUOTE IVProps) (QUOTE MVTest2))) (NOT (FMEMB (QUOTE MVTest2) (SEND (%$ LOOPSTestClass2) List (QUOTE IVs)))))) (SyntaxTest ? Tested? ?) (AltTest ? Tested? ?) (AltTestOf) (TestDesc "if MoveVariable moves the props too") (UsesObj #((LOOPSTestClass3 LOOPSTestClass2)						  NIL AllowRemove)) (Tested? ?) (CompletelyTested? ?) (StandBy) (SubTest ? Tested? ?) (AfterTest) (SubTestOf #((LTFMoveVariable)							 NIL MakeBackLink)))(DEFINST LOOPSTestPrimitive (LTP5 "OMR@@Az") (name #(LTP5 NIL RememberName)) (CasesUsed) (PreTest) (PreTestOf) (ResetExp) (SetUp) (TestExpr) (SyntaxTest) (AltTest) (AltTestOf) (TestDesc) (UsesObj) (Tested?) (CompletelyTested?) (StandBy) (SubTest) (AfterTest) (SubTestOf #(NIL NIL MakeBackLink)))(DEFINST LOOPSTestPrimitive (LTP4 "OMR@@Ay") (name #(LTP4 NIL RememberName)) (CasesUsed) (PreTest) (PreTestOf) (ResetExp) (SetUp) (TestExpr) (SyntaxTest) (AltTest) (AltTestOf) (TestDesc) (UsesObj) (Tested?) (CompletelyTested?) (StandBy) (SubTest) (AfterTest) (SubTestOf #(NIL NIL MakeBackLink)))(DEFINST LOOPSTestPrimitive (LTP3 "OMR@@Ax") (name #(LTP3 NIL RememberName)) (CasesUsed) (PreTest #((LTMListInClass)												     										     BuildPreTest MakeBackLink)) (PreTestOf) (ResetExp (RenameVariable (QUOTE LOOPSTestClass1) (QUOTE RVTest4) (QUOTE RVTest3) T)) (SetUp (RenameVariable (QUOTE LOOPSTestClass1) (QUOTE RVTest3) (QUOTE RVTest4) T)) (TestExpr (AND (FMEMB (QUOTE RVTest4) (SEND (%$ LOOPSTestClass1) List (QUOTE CVs))) (NOT (FMEMB (QUOTE RVTest3) (SEND (%$ LOOPSTestClass1) List (QUOTE CVs)))))) (SyntaxTest) (AltTest) (AltTestOf) (TestDesc "Rename a CV in a class") (UsesObj #((LOOPSTestClass1)				      NIL AllowRemove)) (Tested?) (CompletelyTested?) (StandBy) (SubTest) (AfterTest) (SubTestOf #((LTFRenameVariable)				  NIL MakeBackLink)))(DEFINST LOOPSTestMethod (LTMListInClass "ONR@@Aq") (name #(LTMListInClass NIL RememberName)) (CasesUsed) (PreTest ? Tested? ?) (PreTestOf #((LTFRenameVariable LTFMoveVariable LTMDeleteInClass)					      NIL MakeBackLink)) (ResetExp) (SetUp) (TestExpr (EQUAL (SEND (%$ LOOPSTestClassL1) List (QUOTE IVs)) (QUOTE (L1 L2 L3)))) (SyntaxTest ? Tested? ?) (AltTest ? Tested? ?) (AltTestOf) (TestDesc "List method in CLASS:IVs") (UsesObj #((LOOPSTestClassL1)									NIL AllowRemove)) (Tested? ?) (CompletelyTested? ?) (StandBy) (SubTest #((LTP64 LTP63 LTP62 LTP61 LTP60 LTP59)					   NIL MakeBackLink) Tested? ?) (AfterTest))(DEFINST LOOPSTestPrimitive (LTP2 "OLR@@E") (name #(LTP2 NIL RememberName)) (CasesUsed) (PreTest #((LTFCalledFns)												    										     BuildPreTest MakeBackLink) Tested? ?) (PreTestOf) (ResetExp (MoveMethod (QUOTE LOOPSTestSuper) (QUOTE LOOPSTestClass1) (QUOTE MMTest2))) (SetUp (MoveMethod (QUOTE LOOPSTestClass1) (QUOTE LOOPSTestSuper) (QUOTE MMTest2))) (TestExpr (AND (FMEMB (QUOTE LOOPSTestSuper.MMTest2) (CalledFns (QUOTE (LOOPSTestSuper)))) (NOT (FMEMB (QUOTE LOOPSTestClass1.MMTest2) (CalledFns (QUOTE (LOOPSTestClass1))))))) (SyntaxTest ? Tested? ?) (AltTest ? Tested? ?) (AltTestOf) (TestDesc "MoveMethod up the class hierarchy") (UsesObj #((LOOPSTestSuper LOOPSTestClass1)						NIL AllowRemove)) (Tested? ?) (CompletelyTested? ?) (StandBy) (SubTest ? Tested? ?) (AfterTest) (SubTestOf #((LTFMoveMethod)							NIL MakeBackLink)))(DEFINST LOOPSTestLispFunc (LTFReplaceActiveValue "OKR@@El") (name #(LTFReplaceActiveValue NIL 										     RememberName)) (CasesUsed) (PreTest) (PreTestOf) (ResetExp) (SetUp) (TestExpr) (SyntaxTest) (AltTest) (AltTestOf) (TestDesc) (UsesObj) (Tested?) (CompletelyTested?) (StandBy) (SubTest) (AfterTest) (LispName))(DEFINST LOOPSTestLispFunc (LTFPutLocalState "OKR@@Ek") (name #(LTFPutLocalState NIL RememberName)) (CasesUsed) (PreTest #((LTFGetLocalState)		      NIL MakeBackLink)) (PreTestOf #((LTP56 LTP58)						      NIL MakeBackLink)) (ResetExp (ResetPutLocalStateVars)) (SetUp (PROGN (ATEST (PutLocalState (GetValueOnly (%$ LOOPSTestClass6) (QUOTE PLS1)) (QUOTE PLS1) (%$ LOOPSTestClass6) (QUOTE PLS1)) "put into local state of active value") (ATEST (PutLocalState (GetValueOnly (%$ LOOPSTestClass6) (QUOTE PLS3)) (QUOTE PLS3) (%$ LOOPSTestClass6) (QUOTE PLS3)) "put into local state of nested active value"))) (TestExpr (ANDALL (ATEST (EQUAL (GetLocalState (GetValueOnly (%$ LOOPSTestClass6) (QUOTE PLS1)) (%$ LOOPSTestClass6) (QUOTE PLS1)) (QUOTE PLS1)) "get local state of active value set by PutLocalState") (ATEST (EQUAL (GetLocalState (GetValueOnly (%$ LOOPSTestClass6) (QUOTE PLS3)) (%$ LOOPSTestClass6) (QUOTE PLS3)) (QUOTE PLS3)) "get local state of nested active value set by PutLocalState"))) (SyntaxTest) (AltTest) (AltTestOf) (TestDesc "PutLocalState") (UsesObj #((LOOPSTestClass6)				     NIL AllowRemove)) (Tested?) (CompletelyTested?) (StandBy) (SubTest) (AfterTest) (LispName PutLocalState))(DEFINST LOOPSTestLispFunc (LTFGetLocalState "OKR@@Ej") (name #(LTFGetLocalState NIL RememberName)) (CasesUsed) (PreTest #((LTFGetValueOnly)		      NIL MakeBackLink) Tested? ? Failed ?) (PreTestOf #((LTFPutLocalState LTP54 											   LTP57)									 NIL MakeBackLink)) (ResetExp) (SetUp ? Tested? #(? NIL FlashTestBrowser) FailedExp ?) (TestExpr (AND (ATEST (EQUAL (GetLocalState (GetValueOnly (%$ LOOPSTestClass6) (QUOTE GLS1)) (%$ LOOPSTestClass6) (QUOTE GLS1)) (QUOTE LTC6)) "GetLocalState of active value") (ATEST (EQUAL (GetLocalState (GetValueOnly (%$ LOOPSTestClass6) (QUOTE GLS2)) (%$ LOOPSTestClass6) (QUOTE GLS2)) (QUOTE LTC6)) "GetLocalState of nested active value")) FailedExpr ? HowFailed ?) (SyntaxTest ? Tested? ? Failed ?) (AltTest ? Tested? ? Failed ?) (AltTestOf) (TestDesc "GetLocalState") (UsesObj #((LOOPSTestCases LOOPSTestClass6)					NIL AllowRemove)) (Tested? #(? NIL InformTestBrowser) DoneOnce ?) (CompletelyTested? ?) (StandBy) (SubTest #((LTP81)					       NIL MakeBackLink) Tested? ? Failed ?) (AfterTest) (LispName GetLocalState))(DEFINST LOOPSTestLispFunc (LTFRenameMethodFunction "OKR@@Ei") (name #(LTFRenameMethodFunction									NIL RememberName)) (CasesUsed) (PreTest) (PreTestOf) (ResetExp) (SetUp) (TestExpr) (SyntaxTest) (AltTest) (AltTestOf) (TestDesc) (UsesObj) (Tested?) (CompletelyTested?) (StandBy) (SubTest) (AfterTest) (LispName))(DEFINST LOOPSTestLispFunc (LTFMoveMethod "OKR@@Eh") (name #(LTFMoveMethod NIL RememberName)) (CasesUsed #((LTC3)	    NIL MakeBackLink)) (PreTest #((LTFCalledFns)					  NIL MakeBackLink) Tested? ?) (PreTestOf #((LTP2)										    NIL MakeBackLink)) (ResetExp (MoveMethod (QUOTE LOOPSTestClass2) (QUOTE LOOPSTestClass1) (QUOTE MMTest1))) (SetUp (MoveMethod (QUOTE LOOPSTestClass1) (QUOTE LOOPSTestClass2) (QUOTE MMTest1))) (TestExpr (AND (FMEMB (QUOTE LOOPSTestClass2.MMTest1) (CalledFns (QUOTE (LOOPSTestClass2)))) (NOT (FMEMB (QUOTE LOOPSTestClass1.MMTest1) (CalledFns (QUOTE (LOOPSTestClass1))))))) (SyntaxTest ? Tested? ?) (AltTest ? Tested? ?) (AltTestOf) (TestDesc "Move Method across two classes") (UsesObj #((LOOPSTestClass1										 LOOPSTestClass2)									       NIL AllowRemove)) (Tested? ?) (CompletelyTested? ?) (StandBy) (SubTest #((LTP2)						      NIL MakeBackLink) Tested? ?) (AfterTest) (LispName MoveMethod))(DEFINST LOOPSTestLispFunc (LTFMoveVariable "OKR@@E") (name #(LTFMoveVariable NIL RememberName)) (CasesUsed) (PreTest #((LTMListInClass)		      NIL MakeBackLink) Tested? ?) (PreTestOf) (ResetExp (MoveVariable (QUOTE LOOPSTestClass3) (QUOTE LOOPSTestClass2) (QUOTE MVTest1))) (SetUp (MoveVariable (QUOTE LOOPSTestClass2) (QUOTE LOOPSTestClass3) (QUOTE MVTest1))) (TestExpr (AND (FMEMB (QUOTE MVTest1) (SEND (%$ LOOPSTestClass3) List (QUOTE IVs))) (NOT (FMEMB (QUOTE MVTest1) (SEND (%$ LOOPSTestClass2) List (QUOTE IVs)))))) (SyntaxTest ? Tested? ?) (AltTest ? Tested? ?) (AltTestOf) (TestDesc "Move IV across classes") (UsesObj #((LOOPSTestClass3 LOOPSTestClass2)				     NIL AllowRemove)) (Tested? ?) (CompletelyTested? ?) (StandBy) (SubTest #((LTP7 LTP6)	  NIL MakeBackLink) Tested? ?) (AfterTest) (LispName MoveVariable))(DEFINST LOOPSTestLispFunc (LTFMoveClassVariable "OKR@@E") (name #(LTFMoveClassVariable NIL 										     RememberName)) (CasesUsed) (PreTest) (PreTestOf) (ResetExp) (SetUp) (TestExpr) (SyntaxTest) (AltTest) (AltTestOf) (TestDesc) (UsesObj) (Tested?) (CompletelyTested?) (StandBy) (SubTest) (AfterTest) (LispName))(DEFINST LOOPSTestLispFunc (LTFRenameVariable "OKR@@E") (name #(LTFRenameVariable NIL RememberName)) (CasesUsed) (PreTest #((LTMListInClass)		       NIL MakeBackLink) Tested? ?) (PreTestOf) (ResetExp (RenameVariable (QUOTE LOOPSTestClass1) (QUOTE RVTest2) (QUOTE RVTest1))) (SetUp (RenameVariable (QUOTE LOOPSTestClass1) (QUOTE RVTest1) (QUOTE RVTest2))) (TestExpr (AND (FMEMB (QUOTE RVTest2) (SEND (%$ LOOPSTestClass1) List (QUOTE IVs))) (NOT (FMEMB (QUOTE RVTest1) (SEND (%$ LOOPSTestClass1) List (QUOTE IVs)))))) (SyntaxTest ? Tested? ?) (AltTest ? Tested? ?) (AltTestOf) (TestDesc "Rename a IV in a class") (UsesObj #((LOOPSTestClass1)   NIL AllowRemove)) (Tested? ?) (CompletelyTested? ?) (StandBy (LTP4 LTP5)) (SubTest #((LTP3)											NIL 										     MakeBackLink) Tested? ?) (AfterTest) (LispName RenameVariable))(DEFINST LOOPSTestLispFunc (LTFCalledFns "OGR@@E") (name #(LTFCalledFns NIL RememberName)) (CasesUsed) (PreTest ? Tested? ?) (PreTestOf #((LTFPutMethod LTP2 LTFMoveMethod LTFRenameMethod)				     NIL MakeBackLink)) (ResetExp) (SetUp) (TestExpr (EQUAL (CalledFns (QUOTE (LOOPSTestClassCF))) (QUOTE (LOOPSTestClassCF.CF1 LOOPSTestClassCF.CF2)))) (SyntaxTest ? Tested? ?) (AltTest ? Tested? ?) (AltTestOf) (TestDesc "CalledFns") (UsesObj #((LOOPSTestClassCF)									       NIL AllowRemove)) (Tested? ?) (CompletelyTested? ?) (StandBy) (SubTest ? Tested? ?) (AfterTest) (LispName CalledFns))(DEFINST LOOPSTestLispFunc (LTFRenameMethod "OGR@@E") (name #(LTFRenameMethod NIL RememberName)) (CasesUsed) (PreTest #((LTFCalledFns)		      NIL MakeBackLink) Tested? ?) (PreTestOf #(NIL NIL MakeBackLink)) (ResetExp (RenameMethod (QUOTE LOOPSTestCases) (QUOTE RMTest2) (QUOTE RMTest1))) (SetUp (RenameMethod (QUOTE LOOPSTestCases) (QUOTE RMTest1) (QUOTE RMTest2))) (TestExpr (AND (FMEMB (QUOTE LOOPSTestCases.RMTest2) (CalledFns (QUOTE (LOOPSTestCases)))) (NOT (FMEMB (QUOTE LOOPSTestCases.RMTest1) (CalledFns (QUOTE (LOOPSTestCases))))))) (SyntaxTest ? Tested? ?) (AltTest ? Tested? ?) (AltTestOf) (TestDesc "renaming of existing methods") (UsesObj #((LOOPSTestCases)					   NIL AllowRemove)) (Tested? ?) (CompletelyTested? ?) (StandBy) (SubTest ? Tested? ?) (AfterTest) (LispName RenameMethod))(DEFINST LOOPSTestPrimitive (LTP1 "OGR@@E") (name #(LTP1 NIL RememberName)) (CasesUsed #((LTC2)											  NIL 										     MakeBackLink)) (PreTest #((LTFGetValue LTFPutValue)	  BuildPreTest MakeBackLink) Tested? ?) (PreTestOf) (ResetExp (PutValue (%$ LTC2) (QUOTE Var2) NotSetValue)) (SetUp (SEND (%$ LTC2) SENDTest2 (QUOTE Var2) 7)) (TestExpr (EQ (GetValue (%$ LTC2) (QUOTE Var2)) 7)) (SyntaxTest ? Tested? ?) (AltTest ? Tested? ?) (AltTestOf) (TestDesc "local method overrides inherited method") (UsesObj #((LOOPSTestSuper)						      NIL AllowRemove)) (Tested? ?) (CompletelyTested? ?) (StandBy) (SubTest ? Tested? ?) (AfterTest) (SubTestOf #((LTMethod)							     NIL MakeBackLink)))(DEFINST LOOPSTestKernel (LTKernel "OGR@@E") (name #(LTKernel NIL RememberName)) (CasesUsed) (PreTest NIL Tested? ?) (PreTestOf #(NIL NIL MakeBackLink)) (ResetExp NIL) (SetUp) (TestExpr) (SyntaxTest ? Tested? ?) (AltTest ? Tested? ?) (AltTestOf) (TestDesc "Kernel features of LOOPS") (UsesObj) (Tested? ?) (CompletelyTested? ?) (StandBy) (SubTest ? Tested? ?) (AfterTest))(DEFINST LOOPSTestLispFunc (LTFTryMethod "OER@@EG") (name #(LTFTryMethod NIL RememberName)) (CasesUsed) (PreTest) (PreTestOf) (ResetExp) (SetUp) (TestExpr) (SyntaxTest) (AltTest) (AltTestOf) (TestDesc) (UsesObj) (Tested?) (CompletelyTested?) (StandBy) (SubTest) (AfterTest) (LispName))(DEFINST LOOPSTestLispFunc (LTFDoMethod "OER@@EF") (name #(LTFDoMethod NIL RememberName)) (CasesUsed) (PreTest) (PreTestOf) (ResetExp) (SetUp) (TestExpr) (SyntaxTest) (AltTest) (AltTestOf) (TestDesc) (UsesObj) (Tested?) (CompletelyTested?) (StandBy) (SubTest) (AfterTest) (LispName))(DEFINST LOOPSTestLispFunc (LTFPutItOnly "OER@@EE") (name #(LTFPutItOnly NIL RememberName)) (CasesUsed) (PreTest) (PreTestOf) (ResetExp) (SetUp) (TestExpr) (SyntaxTest) (AltTest) (AltTestOf) (TestDesc) (UsesObj) (Tested?) (CompletelyTested?) (StandBy) (SubTest) (AfterTest) (LispName))(DEFINST LOOPSTestLispFunc (LTFGetItOnly "OER@@ED") (name #(LTFGetItOnly NIL RememberName)) (CasesUsed) (PreTest) (PreTestOf) (ResetExp) (SetUp) (TestExpr) (SyntaxTest) (AltTest) (AltTestOf) (TestDesc) (UsesObj) (Tested?) (CompletelyTested?) (StandBy) (SubTest) (AfterTest) (LispName))(DEFINST LOOPSTestLispFunc (LTFPutIt "OER@@EC") (name #(LTFPutIt NIL RememberName)) (CasesUsed) (PreTest) (PreTestOf) (ResetExp) (SetUp) (TestExpr) (SyntaxTest) (AltTest) (AltTestOf) (TestDesc) (UsesObj) (Tested?) (CompletelyTested?) (StandBy) (SubTest) (AfterTest) (LispName))(DEFINST LOOPSTestLispFunc (LTFGetIt "OER@@EB") (name #(LTFGetIt NIL RememberName)) (CasesUsed) (PreTest) (PreTestOf) (ResetExp) (SetUp) (TestExpr) (SyntaxTest) (AltTest) (AltTestOf) (TestDesc) (UsesObj) (Tested?) (CompletelyTested?) (StandBy) (SubTest) (AfterTest) (LispName))(DEFINST LOOPSTestLispFunc (LTFPutMethodOnly "OER@@EA") (name #(LTFPutMethodOnly NIL RememberName)) (CasesUsed) (PreTest) (PreTestOf) (ResetExp) (SetUp) (TestExpr) (SyntaxTest) (AltTest) (AltTestOf) (TestDesc) (UsesObj) (Tested?) (CompletelyTested?) (StandBy) (SubTest) (AfterTest) (LispName))(DEFINST LOOPSTestLispFunc (LTFGetMethodOnly "OER@@E@") (name #(LTFGetMethodOnly NIL RememberName)) (CasesUsed) (PreTest) (PreTestOf) (ResetExp) (SetUp) (TestExpr) (SyntaxTest) (AltTest) (AltTestOf) (TestDesc) (UsesObj) (Tested?) (CompletelyTested?) (StandBy) (SubTest) (AfterTest) (LispName))(DEFINST LOOPSTestLispFunc (LTFPutMethod "OER@@E?") (name #(LTFPutMethod NIL RememberName)) (CasesUsed) (PreTest #((LTFCalledFns)		      NIL MakeBackLink) Tested? ?) (PreTestOf) (ResetExp (SEND (%$ LOOPSTestClass3) Delete (QUOTE Method) (QUOTE PM1))) (SetUp (PutMethod (%$ LOOPSTestClass3) (QUOTE PM1) (QUOTE LOOPSTestClass3.PM1))) (TestExpr (FMEMB (QUOTE LOOPSTestClass3.PM1) (CalledFns (QUOTE (LOOPSTestClass3))))) (SyntaxTest ? Tested? ?) (AltTest ? Tested? ?) (AltTestOf) (TestDesc "PutMethod: selector") (UsesObj #((LOOPSTestClass3)	  NIL AllowRemove)) (Tested? ?) (CompletelyTested? ?) (StandBy) (SubTest #((LTP52 LTP51 LTP49 											  LTP48)										   NIL MakeBackLink) Tested? ?) (AfterTest) (LispName PutMethod))(DEFINST LOOPSTestLispFunc (LTFGetMethod "OER@@E>") (name #(LTFGetMethod NIL RememberName)) (CasesUsed) (PreTest ? Tested? ?) (PreTestOf #((LTP51 LTP52 LTP48 LTP49)					      NIL MakeBackLink)) (ResetExp) (SetUp) (TestExpr (AND (EQUAL (GetMethod (%$ LOOPSTestClassL1) (QUOTE M1)) (QUOTE LOOPSTestClassL1.M1)) (EQUAL (GetMethod (%$ LOOPSTestClassL1) (QUOTE M3)) (QUOTE LOOPSTestClassL1.M3)))) (SyntaxTest ? Tested? ?) (AltTest ? Tested? ?) (AltTestOf) (TestDesc "GetMethod: local selector") (UsesObj #((LOOPSTestClassL1)									 NIL AllowRemove)) (Tested? ?) (CompletelyTested? ?) (StandBy) (SubTest #((LTP73 LTP69 LTP68 LTP67)					    NIL MakeBackLink) Tested? ?) (AfterTest) (LispName GetMethod))(DEFINST LOOPSTestLispFunc (LTFPutClassOnly "OER@@E=") (name #(LTFPutClassOnly NIL RememberName)) (CasesUsed) (PreTest) (PreTestOf) (ResetExp) (SetUp) (TestExpr) (SyntaxTest) (AltTest) (AltTestOf) (TestDesc) (UsesObj) (Tested?) (CompletelyTested?) (StandBy) (SubTest) (AfterTest) (LispName))(DEFINST LOOPSTestLispFunc (LTFGetClassOnly "OER@@E<") (name #(LTFGetClassOnly NIL RememberName)) (CasesUsed) (PreTest) (PreTestOf) (ResetExp) (SetUp) (TestExpr) (SyntaxTest) (AltTest) (AltTestOf) (TestDesc) (UsesObj) (Tested?) (CompletelyTested?) (StandBy) (SubTest) (AfterTest) (LispName))(DEFINST LOOPSTestLispFunc (LTFPutClass "OER@@E;") (name #(LTFPutClass NIL RememberName)) (CasesUsed) (PreTest) (PreTestOf #(NIL NIL MakeBackLink)) (ResetExp) (SetUp) (TestExpr) (SyntaxTest) (AltTest) (AltTestOf) (TestDesc "PutClass") (UsesObj) (Tested?) (CompletelyTested?) (StandBy) (SubTest) (AfterTest) (LispName PutClass))(DEFINST LOOPSTestLispFunc (LTFGetClass "OER@@E:") (name #(LTFGetClass NIL RememberName)) (CasesUsed) (PreTest) (PreTestOf) (ResetExp) (SetUp) (TestExpr) (SyntaxTest) (AltTest) (AltTestOf) (TestDesc) (UsesObj) (Tested?) (CompletelyTested?) (StandBy) (SubTest) (AfterTest) (LispName))(DEFINST LOOPSTestLispFunc (LTFPutClassValueOnly "OER@@E9") (name #(LTFPutClassValueOnly NIL 										     RememberName)) (CasesUsed) (PreTest) (PreTestOf) (ResetExp) (SetUp) (TestExpr) (SyntaxTest) (AltTest) (AltTestOf) (TestDesc) (UsesObj) (Tested?) (CompletelyTested?) (StandBy) (SubTest) (AfterTest) (LispName))(DEFINST LOOPSTestLispFunc (LTFPutValueOnly "OER@@E8") (name #(LTFPutValueOnly NIL RememberName)) (CasesUsed #((LTC9)	    NIL MakeBackLink)) (PreTest #((LTFGetValueOnly)					  NIL MakeBackLink)) (PreTestOf #((LTMNewWithValues)									  NIL MakeBackLink)) (ResetExp (PROGN (PutValueOnly (%$ LTC9) (QUOTE Var1) NotSetValue) (PutValueOnly (%$ LTC9) (QUOTE Test1) NotSetValue))) (SetUp (PROGN (ATEST (PutValueOnly (%$ LTC9) (QUOTE Var1) 7) "put ordinary value") (ATEST (PutValueOnly (%$ LTC9) (QUOTE Test1) (create activeValue localState_5 getFn_NIL putFn_ (QUOTE MakeBackLink))) "put active value"))) (TestExpr (ANDALL (ATEST (EQ (GetValueOnly (%$ LTC9) (QUOTE Var1)) 7) "get the ordinary value put by PutValueOnly") (ATEST (EQACTVAL (GetValueOnly (%$ LTC9) (QUOTE Test1)) (QUOTE (5 NIL MakeBackLink))) "get the active value put by PutValueOnly"))) (SyntaxTest) (AltTest) (AltTestOf) (TestDesc "PutValueOnly") (UsesObj) (Tested?) (CompletelyTested?) (StandBy) (SubTest) (AfterTest) (LispName PutValueOnly))(DEFINST LOOPSTestLispFunc (LTFPushClassValue "OER@@E7") (name #(LTFPushClassValue NIL RememberName)) (CasesUsed) (PreTest) (PreTestOf) (ResetExp) (SetUp) (TestExpr) (SyntaxTest) (AltTest) (AltTestOf) (TestDesc) (UsesObj) (Tested?) (CompletelyTested?) (StandBy) (SubTest) (AfterTest) (LispName))(DEFINST LOOPSTestLispFunc (LTFPutClassValue "OER@@E6") (name #(LTFPutClassValue NIL RememberName)) (CasesUsed) (PreTest #((LTFGetClassValue)		      NIL MakeBackLink) Tested? ?) (PreTestOf) (ResetExp (PutClassValue (%$ LOOPSTestClass3) (QUOTE PCV1) NIL)) (SetUp (PutClassValue (%$ LOOPSTestClass3) (QUOTE PCV1) (QUOTE PCV))) (TestExpr (EQUAL (GetClassValue (%$ LOOPSTestClass3) (QUOTE PCV1)) (QUOTE PCV))) (SyntaxTest ? Tested? ?) (AltTest ? Tested? ?) (AltTestOf) (TestDesc "PutClassValue: in a class") (UsesObj #((LOOPSTestClass3)											       NIL 										      AllowRemove)) (Tested? ?) (CompletelyTested? ?) (StandBy) (SubTest #((LTP37 LTP36 LTP35 LTP34 LTP33)						      NIL MakeBackLink) Tested? ?) (AfterTest) (LispName PutClassValue))(DEFINST LOOPSTestLispFunc (LTFAddValue "OER@@E5") (name #(LTFAddValue NIL RememberName)) (CasesUsed) (PreTest) (PreTestOf) (ResetExp) (SetUp) (TestExpr) (SyntaxTest) (AltTest) (AltTestOf) (TestDesc) (UsesObj) (Tested?) (CompletelyTested?) (StandBy) (SubTest) (AfterTest) (LispName))(DEFINST LOOPSTestLispFunc (LTFPushValue "OER@@E3") (name #(LTFPushValue NIL RememberName)) (CasesUsed) (PreTest) (PreTestOf) (ResetExp) (SetUp) (TestExpr) (SyntaxTest) (AltTest) (AltTestOf) (TestDesc) (UsesObj) (Tested?) (CompletelyTested?) (StandBy) (SubTest) (AfterTest) (LispName))(DEFINST LOOPSTestLispFunc (LTFGetClassValueOnly "OER@@E1") (name #(LTFGetClassValueOnly NIL 										     RememberName)) (CasesUsed) (PreTest) (PreTestOf) (ResetExp) (SetUp) (TestExpr) (SyntaxTest) (AltTest) (AltTestOf) (TestDesc) (UsesObj) (Tested?) (CompletelyTested?) (StandBy) (SubTest) (AfterTest) (LispName))(DEFINST LOOPSTestLispFunc (LTFGetValueOnly "OER@@E0") (name #(LTFGetValueOnly NIL RememberName)) (CasesUsed #((LTC8)	    NIL MakeBackLink)) (PreTest ? Tested? ? Failed ?) (PreTestOf #((LTFGetLocalState 										  LTFPutValueOnly 										 LTMNewWithValues)									   NIL MakeBackLink)) (ResetExp) (SetUp ? Tested? #(? NIL FlashTestBrowser) FailedExp ?) (TestExpr (ANDALL (ATEST (EQUAL (GetValueOnly (%$ LTC8) (QUOTE Var1)) 5) "getting ordinary value") (ATEST (EQACTVAL (GetValueOnly (%$ LTC8) (QUOTE Test1)) (QUOTE (NIL NIL MakeBackLink))) "getting active value")) FailedExpr ? HowFailed ?) (SyntaxTest ? Tested? ? Failed ?) (AltTest ? Tested? ? Failed ?) (AltTestOf) (TestDesc "GetValueOnly") (UsesObj) (Tested? #(? NIL InformTestBrowser) DoneOnce ?) (CompletelyTested? ?) (StandBy) (SubTest ? Tested? ? Failed ?) (AfterTest) (LispName GetValueOnly))(DEFINST LOOPSTestLispFunc (LTFGetClassValue "OER@@E/") (name #(LTFGetClassValue NIL RememberName)) (CasesUsed) (PreTest ? Tested? ?) (PreTestOf #((LTFPutClassValue LTP21)					      NIL MakeBackLink)) (ResetExp) (SetUp ? Tested? #(?											       NIL 										 FlashTestBrowser)) (TestExpr (EQUAL (GetClassValue (%$ LOOPSTestCases) (QUOTE GCV1)) (QUOTE GCV))) (SyntaxTest ? Tested? ?) (AltTest ? Tested? ?) (AltTestOf) (TestDesc "GetClassValue: for a class") (UsesObj #((LOOPSTestCases											 )										       NIL 										      AllowRemove)) (Tested? #(? NIL InformTestBrowser)) (CompletelyTested? ?) (StandBy) (SubTest #((LTP29 LTP28 LTP27 										      LTP26)									       NIL MakeBackLink) Tested? ?) (AfterTest) (LispName GetClassValue))(DEFINST LOOPSTestLispFunc (LTFDM "OER@@E.") (name #(LTFDM NIL RememberName)) (CasesUsed) (PreTest) (PreTestOf) (ResetExp) (SetUp) (TestExpr) (SyntaxTest) (AltTest) (AltTestOf) (TestDesc) (UsesObj) (Tested?) (CompletelyTested?) (StandBy) (SubTest) (AfterTest) (LispName))(DEFINST LOOPSTestLispFunc (LTFDC "OER@@E-") (name #(LTFDC NIL RememberName)) (CasesUsed) (PreTest) (PreTestOf #(NIL NIL MakeBackLink)) (ResetExp) (SetUp) (TestExpr) (SyntaxTest) (AltTest) (AltTestOf) (TestDesc "DC(Define Class)") (UsesObj) (Tested?) (CompletelyTested?) (StandBy) (SubTest) (AfterTest) (LispName DC))(DEFINST LOOPSTestLispFunc (LTFPutValue "OER@@E2") (name #(LTFPutValue NIL RememberName)) (CasesUsed #((LTCA2)  NIL MakeBackLink)) (PreTest #((LTFGetValue)				NIL MakeBackLink) Tested? ? Failed ?) (PreTestOf #((LTP80 LTP1 											  LTFSend)										   NIL MakeBackLink)) (ResetExp (PutValue (%$ LTCA2) (QUOTE PV1) (QUOTE Value))) (SetUp (SETQ LTV21 (PutValue (%$ LTCA2) (QUOTE PV1) (QUOTE PutValue))) Tested? #(? NIL FlashTestBrowser) FailedExp ?) (TestExpr (ANDALL (EQUAL (GetValue (%$ LTCA2) (QUOTE PV1)) (QUOTE PutValue)) (ATEST (EQUAL LTV21 (QUOTE PutValue)) "PutValue returns newValue")) FailedExpr ? HowFailed ?) (SyntaxTest ? Tested? ? Failed ?) (AltTest ? Tested? ? Failed ?) (AltTestOf) (TestDesc "PutValue") (UsesObj #((LOOPSTestClass1)								 NIL AllowRemove)) (Tested? #(?											      NIL 										InformTestBrowser) DoneOnce ?) (CompletelyTested? ?) (StandBy) (SubTest #((LAVPutValue LTP19 LTP18 LTP17 LTP16)						       NIL MakeBackLink) Tested? ? Failed ?) (AfterTest) (LispName PutValue))(DEFINST LOOPSTestLispFunc (LTFGetValue "OER@@E+") (name #(LTFGetValue NIL RememberName)) (CasesUsed) (PreTest #(NIL NIL MakeBackLink) Tested? ? Failed ?) (PreTestOf #((LTFGetInitialValue LTTemplate 										 LTMNewWithValues 										       LTP1 										 LTMReplaceSupers 										   LTLoadInstance 										       LTMAdd 										      LTFPutValue 										       LTFSend)								   NIL MakeBackLink)) (ResetExp) (SetUp ? Tested? #(? NIL FlashTestBrowser) FailedExp ?) (TestExpr (EQUAL (GetValue (%$ LOOPSTestCases) (QUOTE GV1)) (QUOTE LTP10)) FailedExpr ? HowFailed ?) (SyntaxTest ? Tested? ? Failed ?) (AltTest ? Tested? ? Failed ?) (AltTestOf) (TestDesc "GetValue") (UsesObj #((LOOPSTestCases)								 NIL AllowRemove)) (Tested? #(?											      NIL 										InformTestBrowser) DoneOnce ?) (CompletelyTested? ?) (StandBy) (SubTest #((LAVGetValue LTP14 LTP12 LTP10 LTP9)						       NIL MakeBackLink) Tested? ? Failed ?) (AfterTest) (LispName GetValue))(DEFINST LOOPSTestLispFunc (LTFSend "OER@@E*") (name #(LTFSend NIL RememberName)) (CasesUsed #((LTC1)												NIL 										     MakeBackLink)) (PreTest #((LTFPutValue LTFGetValue)	  NIL MakeBackLink) Tested? ? Failed ?) (PreTestOf #((LTFSendSuper LTMethod)							     NIL MakeBackLink)) (ResetExp (PutValue (%$ LTC1) (QUOTE Var1) NotSetValue)) (SetUp (SEND (%$ LTC1) SENDTest1 (QUOTE Var1) 5) Tested? #(?											       NIL 										 FlashTestBrowser) FailedExp ?) (TestExpr (EQ (GetValue (%$ LTC1) (QUOTE Var1)) 5) FailedExpr ? HowFailed ?) (SyntaxTest ? Tested? ? Failed ?) (AltTest ? Tested? ? Failed ?) (AltTestOf) (TestDesc "invoked message executes properly") (UsesObj) (Tested? #(? NIL InformTestBrowser) DoneOnce ?) (CompletelyTested? ?) (StandBy) (SubTest ? Tested? ? Failed ?) (AfterTest) (LispName SEND))(DEFINST LOOPSTestBasic (LTActiveValue "OER@@E8") (name #(LTActiveValue NIL RememberName)) (CasesUsed) (PreTest) (PreTestOf) (ResetExp) (SetUp) (TestExpr) (SyntaxTest) (AltTest) (AltTestOf) (TestDesc) (UsesObj) (Tested?) (CompletelyTested?) (StandBy) (SubTest) (AfterTest))(DEFINST LOOPSTestBasic (LTObject "OER@@E9") (name #(LTObject NIL RememberName)) (CasesUsed) (PreTest) (PreTestOf) (ResetExp) (SetUp) (TestExpr) (SyntaxTest) (AltTest) (AltTestOf) (TestDesc) (UsesObj) (Tested?) (CompletelyTested?) (StandBy) (SubTest) (AfterTest))(DEFINST LOOPSTestBasic (LTMethod "OER@@E#") (name #(LTMethod NIL RememberName)) (CasesUsed) (PreTest #((LTFSend)   NIL MakeBackLink) Tested? ?) (PreTestOf) (ResetExp) (SetUp ? Tested? #(? NIL FlashTestBrowser)) (TestExpr T) (SyntaxTest ? Tested? ?) (AltTest ? Tested? ?) (AltTestOf) (TestDesc "the basic mechanisms for methods") (UsesObj) (Tested? #(? NIL InformTestBrowser)) (CompletelyTested? ?) (StandBy) (SubTest #((LTP1)			NIL MakeBackLink) Tested? ?) (AfterTest))NIL