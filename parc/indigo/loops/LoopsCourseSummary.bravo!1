Filed on: {Indigo}<Loops>LoopsCourse>LoopsCourseSummary.bravoLast edited: GB June 13, 1983  6:43 PMz20320(635)LOOPS Course Summaryz20320c\ub20Uz20320\f1Accessing Objects and Variablesz20320\f1ub31U($ name) 					evaluates to the object or class named name.z20320\f1 2i5I46i4I($! atom)					evaluates to the object or class whose name is  the value of atom(@ accessExpr)			evaluates to the value of the instance variable, class variable, or property of these referred to by accessExpr(@ obj accessExpr)			evaluates to the value of the instance variable, class variable, or property of these referred to by accessExpr in  obj(_@ accessExpr newValue)	sets the value of the variable accessed by accessExpr to newValue(_@ obj accessExpr newValue)	sets the value of the variable accessed by accessExpr in obj to newValueaccessExpr is the concatenation of any combination of the following with evaluation strictly left to right	:ivName				instance variable ivName	::cvName				class variable cvName	:,propName			value of property propName	.selector				value returned by sending the unary message selector	N.B.	a ! (bang) after any of the puctuation in the four lines above will cause the atom following it to be evaluated		and that value to be used as the name (i.e. ::fee.fie:!foe:,fum will get the value of CV fee of self and send it the message fie, then it will get the instance variable whose name is the value		of foe from the object returned by the message fie, then it will get the value of property fum of that IV)z20955\f1 4i4I67i4I4i10I105i10I4i14I105i10I5i3I5i19I45i10I4i8I5i23I45i10I4i4I3i8I1i10I99i6I21i7I4i6I18i7I4i8I21i8I233b19B26b3B33b3B70b3B85b3BDefining and Editing Classesz20320\f1ub28UDC(className supersList)	(_ ($ Class) New className supersList)	create a class with name className and supers supersListEC(className)				(_ ($ className) Edit)				edit the class definition of class classNamez20320\f1 3i9I1i10I19i9I1i10I27i9I12i10I4i9I10i10I46i9Iz20320\f1Defining and Editing Methodsz20320\f1ub28UDM(className selector)			creates a function with the name className.selector to be used by the method called by selectorDM(className selector fnName)	causes the function with the name fnName to be used by the method called by selectorEM(className selector)			edit the method used by selector in class classNamez20320\f1 3i9I1i8I37i19I35i8I4i9I1i15I36i7I35i8I4i9I1i8I28i9I9i9Iz20320\f1Creating, Editing, and Inspecting Instancesz20320\f1ub43U(_ class New)						creates a new instance of class(_ class New 'name)					creates a new instance of class with the name name(_ obj Edit)		(EI obj)			edit objz20320\f1 3i5I37i5I4i5I5i5I32i5I15i4I4i3I12i3I9i3I(_ obj Inspect)		(INSPECT obj)	create an inspect window for objz20320\f1 3i3I20i3I31i3I(_New class selector arg1 ... argN)		create a new instance of class and sends it the the message selector with arguments arg1 ... argNz20320\f1 6i5I1i22I28i5I30i8I16i14ISending Messagesz20320\f1ub16UB(_ obj selector arg1 ... argN)			send obj the message selector with arguments arg1 ... argN(_Super obj selector arg1 ... argN)		send to the first super of obj which has it defined the message selector with arguments arg1 ... argN(_! obj expr arg1 ... argN)				send obj the message whose selector is the value of expr with the arguments arg1 ... argNz20320\f1 3i3I1i8I1i4I5i4I9i3I13i8I16i4I5i4I9i3I1i8I1i4I4i5I30i3I34i8I16i4I5i4I5i22I10i3I44i4I20i13IActive Valuesz20320\f1ub13UB#(localState getFn putFn)	localState is where the value is stored (this may be another active value)						getFn is the function called on read access and putFn is called on write accessz20320\f1 2i10I1i5I1i5I2i10I71i5I43i5I						the value returned by getFn in the value of the get operation and putFn has responsibility for changing						the value of localState using the function PutLocalStatez20320\f1 28i5I39i5I52i10Iz20320\f1Debuggingz20320\f1ub9UBBreakIt(obj varName)								break whenever the instance variable varName of obj is accessedBreakMethod(className selector)						break whenever the method selector is used by any instance of class classNameTraceMethod(className selector)						trace whenever the method selector is used by any instance of class classNameUNBREAK(onlyMostRecentFlg)						standard Lisp function to unbreak methodsBreakIt(obj varName propName type breakOnGetAlsoFlg)		break whenever the variable varName of obj is accessed (more general)TraceIt(obj varName propName type breakOnGetAlsoFlg)		trace whenever the variable varName of obj is accessedUnBreakIt(obj varName propName type)					remove the break on variable varName of objTo attach a gauge and monitor a variable:	(_New ($ gaugeType) Attach obj ivName)		attaches a gauge of type gaugeType to the instance variable ivName of objz20320\f1 8i3I1i7I46i7I4i3I25i9I1i8I33i8I34i9I13i9I1i8I33i8I34i9I83i3I1i7I1i31I31i7I4i3I36i43I31i7I4i3I23i25I35i7I4i3I53i9I9i3I1i6I28i9I26i6I4i3Iz20320\f1Rulesz20320\f1ub5UB^F gets you into the Rule Executive (OK gets you out of it and UE puts you in the User Executive (where OK will get you back again))Variables are accesed by using the access expressions as defined above	accessExpr			gets value of variable (do not use @)	accessExpr_newValue	variable accessed gets newValue	\lispVarName			for referring to lisp variables use backslash	.selector 				sends unary message to self  (unary message is one that requires no arguments besides self)DefRSM(className selector)			creates a new rule set for the class className invoked by selector and places you in the rule editor z20320\f1 205i10I42i10I1i8I24i8I3i11I51i8I104i9I1i8I41i9I12i8I(_ ruleSet CopyRules 'newRuleSetName)	copies the ruleset ruleSet into a new one called newRuleSetName(_ ruleSet ER)		ER(ruleSet)		edit ruleSetz20320\f1 3i7I11i15I21i7I23i14I4i7I9i7I8i7bIListRuleSets(className)				generates a listing of all the rule sets defined for the class classNamez20320\f1 13i9I68i9I1bBrowsersz20320\f1ub8UBBrowse(classList)		creates a browser window for the class lattice structure of the classes in classList and their descendants					left or middle button in title area of the browser window updates the lattice structureLeft Mouse Button		gets pop-up menu to print information about class structure and methodsMiddle Mouse Button	gets pop-up menu to aid in generating new classes or methodsz20320\f1 7i9I78i9IAn asterisk at the end of the name of any item in the menu signifies that there are multiple options for this itemTo use the default option, click the left button, for a menu of options click the middle button (i.e. EM* will get a menu with EM and EM!)To copy from class to class use the left button to "BoxNode" of recepient class then with the middle button menu select the "Move" item with					the middle button to get a menu for either copying of moving of IVs, CVs, Methods, or RuleSets"Specialize" on the middle button menu will create a new subclass of the one selected and prompt for a name"DefineMethod" on the middle button menu will create a new method for that class and prompt for its selectorz20320\f1z20320\f1Saving and Restoring Filesz20320\f1ub26UB(FILES?)				Lisp will ask you to assign a filename to each entity it does not already have a file name for					Type yes to specify the file names.  For each entity type the filename to save it or ] to not have it saved					LineFeed (LF) means the same as the previous entityMAKEFILE(filename)	saves the file on the file server on the directory currently connectedLOAD(filename)		loads the file from the file server on the directory currently connectedz20320\f1 42i8I124i8I104i8I78i8Iz20320\f1z20320\f1z20320\f1z20320\f1z20320\f1