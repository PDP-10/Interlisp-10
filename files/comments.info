<LISP>COMMENTS.INFO
Apr 13, 1975

I tend to comment my files copiously and have long observed that
when I have only a few symbolic files loaded, I overflow atom space
fairly quickly due to all the atoms in comments (which tend to
not be duplicated as much as function and variable names, etc.)

I have written the following fairly neat hack and tested it
with some encouraging results.

I have defined * as a read macro in FILERDTBL so that if
NORMALCOMMENTSFLG is NIL (original setting T) that when reading a file,
 instead of reading in the comment, it reads in the start and finish
address, the file name, and an indicator as to whether the comment was
in the right margin or centered. Also, * is defined as a
PRETTYPRINTMACRO which went to the corresponding file and did a
COPYBYTES after doing the appropriate TABs and TERPRIs.
I have loaded a file and dumped it both ways and done a SRCCOM
and they produce exactly the same results.

PP* works fine by simply copying the comments to
the teletype. in addition, I have defined an edit macro
called GET* which will read the corresponding comment and
replace the abbreviated comment  so that you can edit
comments, e.g. if you are looking at your listing
and want to change a comment, simply go to that comment,
PP* if you like, and GET*. comments that are inserted
are printed normally with no confusion (unless
you happen to have a comment which starts with two numbers).


I have made the following measurements on this package
using the file compile which is not heavily commented
by my standards.

Time to do a MAKEFILE(COMPILE NEW) when the file was loaded
in conventional fashion:  50.9 seconds, 
time to do a makefile(compile new) when the comments were
not loaded,  42.9 seconds. (faster since the comments
could just be copied from file to file). Note that in
most cases the above is not relevant since most of the
file is being copied from the sourcefile anyway by virtue
of the makefile remake. However it is encouraging to know
you dont lose anything.

the real win is the following:

after loading the file COMPILE in the two different
modes, one where comments are read and one where they are not,
and doing appropriate garbage collection, the following
differences in storage are to be observed:

	OLD(comment in)	NEW(comment not in)

8	9578		7796
12	1749		120
28	1124		74

this is in a clean system. in other words, loading the file
compile when comments were not brought in only resulted in
the creation of 120 new atoms, but with comments , 1749 new
atoms.

the only problem I have noted so far with this package is
the case where a comment is not a comment but real list structure,
e.g. in a selectq. I dont really know what to do about this.

There is one additional problem. If you load a file PROP, do
several MAKEFILES changing only some functions, and then delete
the original version you loaded... then edit a function you
have not edited before and try to MAKEFILE, that function will
contain "comments" with pointers to a file that you have deleted.

If a function is printed out to a newer version, the pseudo-comments
are modified to point to the later versions; it is only functions
that had not been changed previously that have problems. 

If you only LOADFNS the functions you are going to edit, or only
set NORMALCOMMENTSFLG to NIL when you compile, this is not a problem.

