  (PROGN (LISPXPRIN1 (QUOTE "FILE CREATED ")
                     T)
         (LISPXPRIN1 (QUOTE "26-MAR-72  1:15:18")
                     T)
         (LISPXTERPRI T))
(DEFINEQ

(DROPOFFP
  [LAMBDA (FORMS)

          (* Function to decide if a PROG expression can 'drop 
          off'. In MIT lisp this is guaranteed to return NIL, 
          so the TRANSFORMATIONS for PROG use DROPOFFP to 
          decide if they need to insert 
          (RETURN NIL) at end of PROG.)


    (PROG [(LASTFORM (CAR (LAST FORMS]
          (SELECTQ (CAR LASTFORM)
                   ((GO RETURN)
                     (RETURN))
                   [COND
                     (RETURN (OR (NEQ T (CAAR (LAST LASTFORM)))
                                 (SOME (CDR LASTFORM)
                                       (FUNCTION DROPOFFP]
                   (RETURN T])
)
  (LISPXPRINT (QUOTE XFORMSFNS)
              T)
  (RPAQQ XFORMSFNS (DROPOFFP))
  (LISPXPRINT (QUOTE XFORMSVARS)
              T)
  (RPAQQ XFORMSVARS ((TRANSAVE)))
  (RPAQQ DUMPFILE MIT.XFORMS)
  [RPAQQ USERNOTES ((*FUNCTION: 

          (* *FUNCTION is not implemented in BBN-lisp.
          FUNARG is implemented, tentatively and differently, 
          as a second argument to the function FUNCTION.
          the user must recode this expression, carefully.)

)
          (ADD1: 

          (* ADD1, ZEROP and and SUB1 in BBN lisp fix their 
          arguments before checking or incrementing, i.e. are 
          an integer functions only.)

)
          (APPLY/EVAL 

          (* TRANSOR will translate the arguments of the APPLY 
          or EVAL expression, but the user must make sure that 
          the run-time evaluation of the arguments returns a 
          BBN-compatible expression.)

)
          (ARG1: 

          (* This particular instance of the function arg 
          could not be successfully translated, because 
          TRANSOR could not find the containing lambda-atom 
          expression, thus could not identify the lambda 
          variable which must be inserted as the first 
          argument to arg. See comment on successful 
          translations of arg.)

)
          (ARG: 

          (* In maclisp, lsubrs (i.e. expr*'s) take a single 
          lambda-variable, which is bound to the number of 
          arguments actually supplied at run-time.
          So also in bbn-lisp; but whereas the reference in 
          maclisp is (ARG N), where the name of the 
          lambda-variable is implicit, in bbn-lisp the 
          reference is (ARG FOO N) where FOO is the 
          (quoted) name of the lambda variable.
          TRANSOR looks up the appropriate variable name and 
          inserts it, but users should probably check to make 
          sure TRANSOR got the right lambda-expression.
          If TRANSOR cannot find a containing expr* 
          lambda-expression, a separate note is made.)

)
          (ARRAY: 

          (* The transformation for the MACLISP function is 
          somewhat tentative. In particular, their 
          documentation names the third argument as t-or-nil, 
          and describes it by 'and t-or-nil is the garbage 
          collector switch' thus cleverly avoiding giving any 
          hint of whether T is NIL or vice-versa.
          I have assumed that T means the ARRAY is TO be 
          unboxed, i.e. not garbage collected.
          Basically, MACLISP (ARRAY FOO t/nil index1 index2 
          ...) converts to (SETQ FOO 
          (ARRAY (ITIMES INDEX1 INDEX2 ...))) and 
          (array FOO NIL i1 i2 ...) to 
          (SETQ FOO (ARRAY (ITIMES I1 I2 ...) 
          (ITIMES I1 I2 ...))). users should further note that 
          in maclisp the fifth element of the array foo is 
          accessed by (foo 5) where in bbn foo is a variable, 
          bound to a pointer to the array which itself prints 
          as #12345, i.e. the octal address.
          See manual discussion on arrays.
          The fifth element must be retrieved by 
          (ELT FOO 5). There is no way to anticipate this in 
          TRANSOR.)

)
          (ARRAYS                               (* Array function.
                                                No transformations for 
                                                these functions have 
                                                been composed yet.))
          (BASE:                                (* The MACLISP function 
                                                BASE should convert 
                                                directly to BBN's 
                                                RADIX.))
          (CHARACTERCODE 

          (* The MIT function ASCII should be directly 
          replacable by the BBN function CHARACTER.
          This transformation has been performed, but the user 
          should watch out for such problems as different use 
          of control characters, etc.)

)
          (CHRCT: 

          (* The MACLISP function CHRCT can usually be 
          replaced by the appropriate use of position, which 
          returns the number of chars already typed on the 
          line instead of the number to go.)

)
          (DEFPROP-MACRO 

          (* Use of the MACLISP system property MACRO.
          This can be translated but i didn't bother since i 
          have not encountered any uses of it as yet.)

)
          [DELETE: 

          (* The user is probably best advised to define 
          DELETE for himself. DELETE is like DREMOVE, except 
          that: -
          It matches on EQUAL, not EQ;
          -
          It takes an optional third argument which is a 
          maximum number of deletions.
          -
          It returns CDR if the CAR matches, rather than 
          always making the return be EQ to its second 
          argument if at all possible, so that in MACLISP it 
          was almost always necessary to write 
          (SETQ FOO (DELETE & FOO)) -
          Herewith my definition, untested : -
          -
          (LAMBDA (X L N) (PROG (Z) (COND 
          ((NLISTP (SETQ Z L)) (RETURN)) 
          ((EQUAL X (CAR L)) (RETURN 
          (DELETE X (CDR L) (AND N (SUB1 N)))))) LP 
          (COND ((NLISTP (CDR Z)) (RETURN L)) 
          ((EQUAL X (CAR Z)) (FRPLACA Z 
          (CADR Z)) (FRPLACD Z (CDDR Z)) 
          (AND N (ZEROP (SETQ N (SUB1 N)) 
          (RETURN L)))) (T (SETQ Z (CDR Z)))) 
          (GO LP))))

]
          [DELQ: 

          (* DELQ is like DREMOVE, except that it takes an 
          optional third argument which is a maximum number of 
          deletions. where the extra argument is not given, 
          DELQ has been converted to DREMOVE, but at the 
          places noted above, DELQ was callled with the third 
          argument and probably must be defined by the user.
          Herewith my definition, untested : -
          (LAMBDA (X L N) (PROG (Z) (COND 
          ((NLISTP (SETQ Z L)) (RETURN)) 
          ((EQ X (CAR L)) (RETURN (DELQ X 
          (CDR L) (AND N (SUB1 N)))))) LP 
          (COND ((NLISTP (CDR Z)) (RETURN L)) 
          ((EQ X (CAR Z)) (FRPLACA Z 
          (CADR Z)) (FRPLACD Z (CDDR Z)) 
          (AND N (ZEROP (SETQ N (SUB1 N)) 
          (RETURN L)))) (T (SETQ Z (CDR Z)))) 
          (GO LP))))

]
          (DO: 

          (* The MACLISP function DO has no equivalent in 
          bbnlisp as yet. Users will have to expand it 
          themselves into appropriate loops and maps.)

)
          (ED:                                  (* SRI ED converts to 
                                                BBN EDITF.))
          (ERR: 

          (* SRI lisp ERR is said to return the value of its 
          argument to the last ERRORSET or to the top level if 
          none. It is not clear to me what returning to the 
          top level is; does the value print anyway? Ignoring 
          the top level problem my translation, 
          (RETFROM (QUOTE ERRORSET) X), should work ok.
          If the toplevel case arises at runtime you will get 
          error 19, illegal stack arg.
          If the ERR is meant to reset, i.e. is thought of as 
          returning no value, then (ERROR!) will DO.)

)
          (ERRSET: 

          (* The expression (ERRSET X Y) where X and Y are 
          forms, translates to (ERRORSET 
          (QUOTE X) Y) except that it seems that in maclisp Y 
          is not evaluated until an error occurs.)

)
          (EXPR* 

          (* The MIT function type LSUBR should translate 
          without user assistance to BBN EXPR*'S.
          However, see notes on the use of the function ARG.)

)
          (FDEFPROP                             (* Funny DEFPROP: too 
                                                few args. Translation of
                                                it abandoned.))
          (FLATC:                               (* The maclisp function 
                                                FLATC has been converted
                                                to NCHARS.))
          (FLATSIZE: 

          (* the MIT LISP function FLATSIZE is like NCHARS 
          except that it counts the number of characters in 
          the bbn-prin2 representation, i.e. escape characters 
          are counted. FLATSIZE may be defined by 
          (LAMBDA (x) (FLENGTH (DCHCON X JUNKLST T))) where 
          junklst is bound to a list of about 20 conses.
          See DCHCON in LISP manual.)

)
          (GC:                                  (* maclisp GC converts 
                                                to bbn RECLAIM))
          (GCTIME 

          (* I did not think that MIT'S function GCTIME took 
          any arguments. Nothing done to this form.)

)
          (GET1: 

          (* Expression of form (GET & 
          (QUOTE PNAME)) user must recode any such direct 
          manipulations of the pname.)

)
          (GET: 

          (* Expression of the form (GET & 
          (QUOTE VALUE)) converted to 
          (CAR &). See bbn-lisp manual discussion of atom 
          value cells and global variables.)

)
          (GETSYM: 

          (* GETSYM and PUTSYM are undefined.
          functions which uses them probably have to be 
          completely recoded at a higher level.
          However, there are a large number of DDT symbols 
          already represented, however, by property entries on 
          the property coreval, which is widely used by the 
          compiler and may be added to as you wish.
          Don't clobber existing ones, though.
          COREVALS is a list of extant symbols;
          the rest have to be brought over by hand from DDT 
          and may change with new assemblies.)

)
          (GO 

          (* On MIT LISP, if the argument to GO is not a tag 
          of a containing PROG, then it is evaluated to obtain 
          a tag. This glitch has been used in the above 
          places, and has been translated by gathering up all 
          tags from the closest containing PROG, and 
          constructing a dispatch of the form 
          (SELECTQ original-form (TAG1 
          (GO TAG1)) (TAG2 (GO TAG2)) ...
          (HELP (QUOTE "ILLEGAL TAG"))). This is successful as 
          far as known, subject to two improbable exceptions: 
          TRANSOR would not notice an expression of the form 
          (GO VAR) where var was bound to a label;
          and if the value of original-form was a label from a 
          PROG which wasn't the closest containing PROG, then 
          the dispatch would call help since it only looks at 
          the nearest PROG.)

)
          (GREATERP/LESSP 

          (* MIT'S GREATERP and LESSP take an indefinite 
          number of args and test to see that they are in 
          order. Accordingly, where these functions were used 
          with exactly two args they were allowed to stand, 
          but in the cases noted here they were actually 
          called with extra arguments and must be replaced 
          with something written for the purpose.)

)
          (GRINDEF: 

          (* MACLISP GRINDEF converts to BBN PP but the change 
          has not been made since I am unsure if GRINDEF is an 
          fexpr or what.)

)
          (IBASE: 

          (* The input RADIX for lisp is always decimal.
          To input octal numbers, they must be typed or 
          printed with a Q following.)

)
          (INTEGERFN? 

          (* At the places noted above, an MIT arithmetic 
          function has been converted to a general arithmetic 
          fn in the BBN system. This choice is rather 
          conservative, since most of the time the conversion 
          could probably be made to the corresponding BBN 
          integer arithmetic function.
          For the advantages of using integer fns whenever 
          possible, see chapter 13 of the BBN lisp manual.
          Users may accept the conservative choice;
          or they may eyeball their listings and substitute 
          the integer functions themselves by hand, or they 
          may choose to revise the transformations to convert 
          to the integer functions and then search by hand for 
          those places where the general function was really 
          required. The latter approach is best when one knows 
          in advance that the object program does no floating 
          point arithmetic.)

)
          (INTERN/MAKNAM 

          (* The expression (INTERN (MAKNAM FOO)) converts to 
          (PACK FOO), but there is no BBN equivalent to INTERN 
          or MAKNAM alone; user must decide what is being 
          attempted.)

)
          (IOC: 

          (* IOC in maclisp is used to simulate the typing on 
          the tty of an interrupt (control) character.)

)
          (IOFNS 

          (* Random grubby IO functions, documented in chapter 
          14 of SRI LISP SAILON 28.2, which I am too lazy to 
          fix up.)

)
          (LABEL                                (* The LABEL device is 
                                                not implemented in BBN 
                                                lisp.))
          (LAP: 

          (* The MIT function LAP corresponds to the BBN 
          pseudo function ASSEMBLE, which permits direct 
          machine-level coding, but the code itself is of 
          course completely machine-dependent and must be 
          rewritten by the user.)

)
          (LAZY 

          (* I did not really expect this fn to appear and 
          will (may) write TRANSFORMATIONS for it if it does.)

)
          (LOAD: 

          (* SRI lisp's function LOAD is not defined in 
          bbnlisp. BBN's LOAD is a symbolic lisp-file reader 
          and has nothing to do with loading rel files.)

)
          (MACHINE-CODE                         (* Expression dependent 
                                                on machine-code.
                                                User must recode.))
          (MACRO: 

          (* The MIT function MACRO has to do with read-in 
          macros. The user will have to figure out how to 
          avoid their use. In particular, the single-quote 
          macro can probably be ignored since DWIM's 
          evaluation-time correction will accomplish the 
          desired result.)

)
          (MAKNUM: 

          (* MAKNUM converts to LOC. But users should perhaps 
          make sure that the overall sense of functions which 
          do boxing and unboxing is still reasonable.)

)
          (MAKOBLIST:                           (* The function 
                                                MAKOBLIST does not 
                                                exist. Use MAPATOMS 
                                                instead))
          (MAPFNS 

          (* User must recode here. MIT mapping functions all 
          permit an indefinite number of list arguments.
          Where only one was used, they translate correctly to 
          BBN lisp, but in the places noted above, extra list 
          arguments were utilized, and the output expression 
          will be of the form (MAPFN L1 
          (FUNCTION BLAH) L2 L3 --))

)
          [MAX/MIN 

          (* The MACLISP expr*'s MAX and MIN must be defined 
          by the user. Herewith a definition of MAX.
          (LAMBDA NARGS (PROG ((N 2) V BST) 
          (SETQ BST (ARG NARGS 1)) LP 
          (COND ((GREATERP (SETQ V (ARG NARGS N)) BST) 
          (SETQ BST V))) (COND ((IGREATERP 
          (SETQ N (ADD1 N)) NARGS) (RETURN BST))) 
          (GO LP))))

]
          (NOUUO: 

          (* NOUUO is not defined in BBN LISP.
          For discussion of linkage between compiled functions 
          see compiler chapter of BBN LISP manual.)

)
          (NUMVAL: 

          (* NUMVAL converts to VAG. But users should perhaps 
          make sure that the overall sense of functions which 
          do boxing and unboxing is still reasonable.)

)
          (PRIN1: 

          (* Maclisp PRIN1 is identical as far as known with 
          BBN-LISP PRIN2, and has been converted.)

)
          (PRINC1:                              (* PRINC converts to 
                                                PRIN1.))
          [PRINT: 

          (* Maclisp PRINT outputs a carriage-return and 
          linefeed before the argument is printed, not after, 
          and outputs a space after. Nothing has been done to 
          it on the grounds that most I/O code tends to get 
          pretty thoroughly revised anyway.
          Users may however convert all calls to PRINT in 
          their program to calls to MACPRINT by performing 
          (MAPC FNS (F/L (CHANGENAME X 'PRINT 'MACPRINT))) and 
          then define MACPRINT with (LAMBDA 
          (X) (TERPRI) (PRIN2 X) (SPACES 1)))

]
          (PUTPROP1: 

          (* Expression of form (PUTPROP & & 
          (QUOTE PNAME)) user must recode any such direct 
          manipulations of pnames.)

)
          (PUTPROP: 

          (* Expression of form (PUTPROP & & 
          (QUOTE VALUE)) converted to 
          (RPLACA & &) See BBN LISP manual discussion of atom 
          value cells and global variables.)

)
          (READCH:                              (* READCH converts to 
                                                READC))
          (READLIST 

          (* The function READLIST has been replaced with 
          PACK, although it differs from PACK in two ways.
          First, READLIST only takes the first character of 
          the elements of the list it is given.
          If some of these have more than one character, they 
          will be included entire by BBN'S PACK.
          But rather than do (NTHCHAR * 1) around every 
          element of the argument list, I have left it to the 
          user to detect when and if the MIT.
          program utilized this feature.
          Secondly, BBN'S PACK returns an atom come what may;
          MIT'S READLIST operates by 'UNREADING' and may 
          therefore return lists. Again, the user must check 
          for this, since there is no reasonable way to check 
          for it from TRANSOR.)

)
          (REMPROP 

          (* On MIT Lisp REMPROP returns T if the property was 
          there, on BBN LISP returns name of property always.
          User must check if value being used.)

)
          [RUNTIME: 

          (* The maclisp function RUNTIME converted to the BBN 
          expression (ITIMES 1000 (CLOCK 2)))

]
          (SASSOC: 

          (* A call to SASSOC failed to translate correctly.
          The last (functional) argument was not in the 
          expected format, (FUNCTION 
          (LAMBDA NIL --)). User must repair the expression.)

)
          (SASSQ: 

          (* SASSQ failed to translate correctly.
          The last (functional) argument was not in the 
          expected format, (FUNCTION 
          (LAMBDA NIL --)). User must repair the expression.)

)
          (SET 

          (* SET on MIT LISP cannot affect compiled function 
          variables which are not special.
          This may be used by some functions, to allow their 
          local variables to become invisible.
          There is nothing TRANSOR can do about this however;
          users will just have to find such usage themselves.)

)
          [SIGN: 

          (* The function SIGN does not exist.
          It may be defined by (LAMBDA 
          (N) (COND ((ZEROP N) 0) ((MINUSP N) -1) 
          (T 1))))

]
          [SLEEP: 

          (* The maclisp expression (SLEEP x) has been 
          converted to the BBN expression 
          (DISMISS (ITIMES 33 x)))

]
          (SPEAK: 

          (* MACLISP SPEAK converts to BBN CONSCOUNT.
          See manual for extra features of CONSCOUNT.)

)
          (SPECPDL 

          (* Maclisp fexprs usually convert in a 
          straightforward way to BBN fexpr*'s.
          However if two lambda variables are given, to quote 
          from the maclisp manual, 'then upon entry to the 
          function the second variable is bound to a 
          representation of the current a-list, which may 
          subsequently be given as an argument to EVAL or 
          APPLY.' This usage appears in the places noted here;
          user must recode using the BBN funarg device.)

)
          (STORE: 

          (* The MACLISP function STORE is used by 
          (STORE (name i1 i2 ...) value) where i1, i2, etc. 
          are indexes to a multiply-indexed array.
          Where only one index is given, this converts to 
          BBN's (SETA NAME I1 VALUE). Where more than one 
          index occurred, a separate remark, STOREMI, was 
          made.)

)
          (STOREMI 

          (* Use of MACLISP STORE with multiple indexes.
          User must do his own indexing since BBN arrays are 
          all one-dimensional.)

)
          (TIME 

          (* I did not think that MIT'S function TIME took any 
          arguments. Nothing done to this form.)

)
          [TYI: 

          (* The maclisp function TYI inputs one char as an 
          asciz code and has been converted to 
          (CHCON1 (READC)))

]
          (TYO: 

          (* I cannot find TYO in maclisp's so-called 
          documentation. Somebody ought to tell them about 
          alphabets and indexes. Anyway, by extension from TYI 
          I assume it outputs one character, and accepts for 
          its argument an ASCIZ number, so it has been 
          converted to (PRIN1 (CHARACTER X)). It is not clear 
          that it should have been PRIN1, however.)

)
          (UDF                                  (* This function is not 
                                                defined directly in BBN 
                                                Lisp))
          (UFILE:                               (* Not sure what UFILE 
                                                does.))
          (UREAD: 

          (* (UREAD X) converts to (INPUT 
          (INFILE X)) more or less.)

)
          (UWRITE:                              (* Not sure what UWRITE 
                                                does.))
          (VALUE 

          (* At the places noted above, reference was made to 
          the property indicators PNAME or VALUE.
          This usage probably should be revised to be 
          (CAR (QUOTE &)) or perhaps the atom should be put on 
          GLOBALVARS. I don't know what usage of pname might 
          involve since pnames are not kept on property lists 
          in bbn-lisp. To get the pname of an atom perform 
          (CDR (VAG (IPLUS 2 (LOC ATOM)))))

]
  (RPAQQ NLISTPCOMS NIL)
  [RPAQQ LAMBDACOMS ((IF [NULL (FMEMB (CAAAR L)
                                      (QUOTE (LAMBDA NLAMBDA]
                         ((REMARK BLAMBDA1)
                          (-1 APPLY*))
                         ((IF (NEQ (LENGTH (## (NTH 2)))
                                   (LENGTH (## 1 2)))
                              ((REMARK BLAMBDA2))
                              NIL)
                          MARK
                          (ORR (1 (NTH 3)
                                  DOTHESE)
                               ((REMARK BLAMBDA3)))
                          __
                          (NTH 2)
                          DOTHESE]
  (RPAQQ TRANSFORMATIONS
         (*APPEND *DIF *FUNCTION *GREAT *LESS *PLUS *QUO *TIMES ; ADD1 
                  APPLY ARG ARRAY ASCII ASSOC ASSQ BASE BOOLE BREAK 
                  CHRCT CLOCK COMMENT COND CSYM DDTIN DDTOUT DE DEFPROP 
                  DEFUN DELETE DELQ DEPOSIT DF DIFFERENCE DIVIDE DM DO 
                  ED ENTIER ERR ERRSET EVAL EXAMINE EXARRAY EXCISE 
                  EXPLODE EXPLODEC FIX FLATC FLATSIZE FORCE GC GCD 
                  GCTIME GET GETL GETSYM GO GREATERP GRINDEF IBASE INC 
                  INPUT INTERN IOC LABEL LAP LAST LESSP LOAD MACRO 
                  MAKNAM MAKNUM MAKOBLIST MAP MAPC MAPCAN MAPCAR 
                  MAPCONC MAPLIST MAX MEMQ MIN NCONS NOUUO NSTORE NTH1 
                  NUMVAL OBLIST ORV OUTC OUTPUT PRIN1 PRINC PROG PROG2 
                  PUTPROP PUTSYM QUOTE QUOTIENT RE*ARRAY READ READLIST 
                  RECIP REMAINDER REMPROP RUNTIME SASSOC SASSQ SELECTQ 
                  SET SETQ SIGN SLEEP SPEAK SSTATUS STATUS STORE SUB1 
                  SUBST TCONC TERPRI TIME TYI TYO UFILE UREAD UUO 
                  UWRITE XCONS ZEROP))
(DEFLIST(QUOTE(
  (*APPEND ((1 APPEND)))
  (*DIF ((1 DIFFERENCE)
         (REMARK INTEGERFN?)))
  (*FUNCTION ((1 FUNCTION)
              (REMARK *FUNCTION:)
              2
              (NTH 3)
              DOTHESE))
  (*GREAT ((1 GREATERP)
           (REMARK INTEGERFN?)))
  (*LESS ((1 LESSP)
          (REMARK INTEGERFN?)))
  (*PLUS ((1 PLUS)
          (REMARK INTEGERFN?)))
  (*QUO ((1 QUOTIENT)
         (REMARK INTEGERFN?)))
  (*TIMES ((1 TIMES)
           (REMARK INTEGERFN?)))
  (; (NLAM))
  (ADD1 ((REMARK ADD1:)))
  (APPLY ((REMARK APPLY/EVAL)))
  [ARG ((BIND MARK (LPQ 0 (_ LAMBDA)
                        (S #1 2)
                        (IF (LISTP #1)))
              __
              (IF (LITATOM #1)
                  ((I -2 #1)
                   (REMARK ARG:))
                  ((REMARK ARG1:]
  (ARRAY ((REMARK ARRAY:)
          (1 SETQ)
          (IF (## 5)
              ((EMBED (4 TO)
                      IN ITIMES))
              NIL)
          [IF (## 3)
              NIL
              ((I N (COPY (## 4]
          (3 ARRAY)
          (BI 3 -1)
          -1
          (NTH 2)
          DOTHESE))
  (ASCII ((1 CHARACTER)
          (REMARK CHARACTERCODE)))
  (ASSOC ((1 SASSOC)))
  (ASSQ ((1 FASSOC)))
  (BASE ((1 RADIX)
         (REMARK BASE:)))
  [BOOLE ((IF (EQ (## 2)
                  7)
              ((1 LOGOR))
              ((REMARK UDF]
  (BREAK ((1 BREAK1)
          (SW 2 4)))
  (CHRCT ((REMARK LAZY)
          (REMARK CHRCT:)))
  [CLOCK ((IF (EQ (## 2)
                  1)
              ((1 DATE)
               (2))
              ((2 0]
  (COMMENT ((1 *)))
  (COND
    (1 (LPQ NX DOTHESE)))
  (CSYM ((REMARK LAZY)))
  (DDTIN (DELETE))
  (DDTOUT (DELETE))
  (DE ((REMARK LAZY)))
  [DEFPROP ((ORR ((IF (NLISTP (CDDDAR L)))
                  (REMARK FDEFPROP)
                  NLAM)
                 ((IF (EQ (## -1)
                          (QUOTE MACRO)))
                  (REMARK DEFPROP-MACRO))
                 ((IF (EQ (## -1)
                     (QUOTE VALUE)))
                  (1 RPAQQ)
                  (4)
                  NLAM)
                 ([IF (NOT (FMEMB (## -1)
                                  (QUOTE (EXPR FEXPR]
                  (1 PUT)
                  (EMBED 2 IN QUOTE)
                  (SW 3 4)
                  (EMBED 3 IN QUOTE)
                  (EMBED 4 IN QUOTE)
                  NLAM)
                 ((1 DEFINEQ)
                  (IF (EQ (## 4)
                          (QUOTE FEXPR))
                      [(CHANGE 3 1 TO NLAMBDA)
                       (IF (## 3 2 2)
                           ((REMARK SPECPDL))
                           ((EXTRACT 1 FROM 3 2]
                      NIL)
                  (4)
                  (BI 2 3)
                  2 2 3 UP DOTHESE]
  (DEFUN ((ORR ((IF (EQ (## 2)
                        (QUOTE FEXPR)))
                (IF (## 4 2)
                    ((REMARK SPECPDL))
                    ((BO 4)))
                (EMBED (4 TO)
                       IN NLAMBDA))
               ((IF (EQ (## 2)
                        (QUOTE MACRO)))
                (REMARK DEFPROP-MACRO)
                OK)
               ((IF (EQ (## 2)
                        (QUOTE EXPR))
                    NIL
                    ((-2 EXPR)))
                (IF (LITATOM (## 4))
                    ((REMARK EXPR*))
                    NIL)
                (EMBED (4 TO)
                       IN LAMBDA)))
          (1 DEFINEQ)
          (BI -2 -1)
          (2)
          -1 -1 (NTH 3)
          DOTHESE))
  (DELETE ((REMARK DELETE:)))
  [DELQ ((IF (## 4)
             ((REMARK DELQ:))
             ((1 DREMOVE]
  (DEPOSIT ((1 CLOSER)
            (REMARK MACHINE-CODE)))
  (DF ((REMARK LAZY)))
  (DIFFERENCE ((IF (## 4)
                   ((EMBED (3 TO)
                           IN PLUS))
                   NIL)
               (REMARK INTEGERFN?)))
  (DIVIDE ((REMARK UDF)))
  (DM ((REMARK LAZY)))
  (DO ((REMARK DO:)))
  (ED ((1 EDITF)
       (REMARK ED:)))
  (ENTIER ((1 FIX)))
  (ERR ([IF (## 2)
            ((1 RETFROM)
             (-2 (QUOTE ERRORSET)))
            ((: (ERROR!]
        (REMARK ERR:)))
  [ERRSET ((ORR ((IF (EDIT4E (QUOTE (ERRSET & NIL))
                             (##)))
                 (3)
                 (1 NLSETQ))
                ((IF (EDIT4E (QUOTE (ERRSET & T))
                             (##)))
                 (3)
                 (1 ERSETQ))
                ((IF (EDIT4E (QUOTE (ERRSET &))
                             (##)))
                 (1 ERSETQ))
                ((1 ERRORSET)
                 (EMBED 2 IN QUOTE)
                 (REMARK ERRSET:]
  (EVAL ((REMARK APPLY/EVAL)))
  (EXAMINE ((1 OPENR)
            (REMARK MACHINE-CODE)))
  (EXARRAY ((REMARK ARRAYS)))
  (EXCISE ((REMARK UDF)))
  (EXPLODE ((1 UNPACK)
            (N T)))
  (EXPLODEC ((1 UNPACK)))
  (FIX ((1 IPLUS)))
  (FLATC ((REMARK FLATC:)
          (1 NCHARS)))
  (FLATSIZE ((REMARK FLATSIZE:)))
  (FORCE (DELETE))
  (GC ((1 RECLAIM)
       (REMARK GC:)))
  (GCD ((REMARK UDF)))
  [GCTIME ((IF (## 2)
               ((REMARK GCTIME))
               ((1 CLOCK)
                (N 3]
  [GET ((ORR ((IF (EDIT4E (QUOTE (GET & (QUOTE VALUE)))
                          (##)))
              (REMARK GET:)
              (1 CAR)
              (3))
             ((IF (EDIT4E (QUOTE (GET & (QUOTE PNAME)))
                          (##)))
              (REMARK GET1:))
             ((1 GETP]
  (GETL ((1 GETLIS)
         (IF (AND (EQ (## -1)
                      (QUOTE QUOTE))
                  (INTERSECTION (QUOTE (VALUE PNAME))
                                (## -1 -1)))
             ((REMARK VALUE))
             NIL)))
  (GETSYM ((REMARK GETSYM:)))
  (GO
    ((IF
       (NULL (LITATOM (## 2)))
       ((REMARK GO)
        (BIND
          MARK
          (_ PROG)
          (E [MAPC (CDDR (##))
                   (FUNCTION (LAMBDA (Y)
                       (AND Y (LITATOM Y)
                            (SETQ #1 (CONS (LIST Y (LIST (QUOTE GO)
                                                         Y))
                                           #1]
             T)
          __
          (1 SELECTQ)
          (I N #1)
          (BO -1)
          (N (HELP (QUOTE "ILLEGAL GOTO")))
          2 DOTHIS))
       NIL)))
  (GREATERP ((IF (EQ 3 (LENGTH (CAR L)))
                 NIL
                 ((REMARK GREATERP/LESSP)))
             (REMARK INTEGERFN?)))
  (GRINDEF ((REMARK GRINDEF:)))
  (IBASE ((REMARK IBASE:)))
  (INC ((REMARK IOFNS)))
  (INPUT ((REMARK IOFNS)))
  [INTERN ((IF (EDIT4E (QUOTE (INTERN (MAKNAM &)))
                       (##))
               ((1 PACK)
                (EXTRACT -1 FROM -1))
               ((REMARK INTERN/MAKNAM]
  (IOC ((REMARK IOC:)))
  (LABEL ((REMARK LABEL)))
  (LAP ((REMARK LAP:)))
  (LAST ((1 FLAST)))
  (LESSP ((IF (EQ 3 (LENGTH (CAR L)))
              NIL
              ((REMARK GREATERP/LESSP)))
          (REMARK INTEGERFN?)))
  (LOAD ((REMARK LOAD:)))
  (MACRO ((REMARK MACRO:)))
  (MAKNAM ((REMARK INTERN/MAKNAM)))
  (MAKNUM ((1 LOC)
           (REMARK MAKNUM:)))
  (MAKOBLIST ((REMARK MAKOBLIST:)))
  (MAP ((SW 2 3)
        (IF (## 4)
            ((REMARK MAPFNS))
            NIL)))
  [MAPC ((ORR (5 0 (REMARK MAPFNS))
              (4 0 (1 MAP2C)
                 (MOVE 2 TO N HERE))
              ((MOVE 2 TO N HERE]
  (MAPCAN ((1 MAPCONC)
           (SW 2 3)
           (IF (## 4)
               ((REMARK MAPFNS))
               NIL)))
  (MAPCAR ((SW 2 3)
           (IF (## 4)
               ((REMARK MAPFNS))
               NIL)))
  (MAPCONC ((SW 2 3)
            (IF (## 4)
                ((REMARK MAPFNS))
                NIL)))
  (MAPLIST ((SW 2 3)
            (IF (## 4)
                ((REMARK MAPFNS))
                NIL)))
  (MAX ((REMARK MAX/MIN)))
  (MEMQ ((1 MEMB)))
  (MIN ((REMARK MAX/MIN)))
  (NCONS ((1 CONS)))
  (NOUUO ((REMARK NOUUO:)))
  (NSTORE ((REMARK ARRAYS)))
  (NTH1 ((1 CAR)
         (EMBED (2 TO)
                IN NTH)))
  (NUMVAL ((1 VAG)
           (REMARK NUMVAL:)))
  (OBLIST ((REMARK MAKOBLIST:)))
  (ORV ((1 OR)))
  (OUTC ((REMARK IOFNS)))
  (OUTPUT ((REMARK IOFNS)))
  (PRIN1 ((1 PRIN2)
          (REMARK PRIN11:)))
  (PRINC ((1 PRIN1)
          (REMARK PRINC1:)))
  (PROG ((IF (DROPOFFP (CAR L))
             ((N (RETURN)))
             NIL)
         (NTH 3)
         DOTHESE))
  [PROG2 ((ORR ([IF (MEMBER (## 2)
                            (QUOTE (0 T NIL]
                (1 PROG1)
                (2))
               ([IF (EQ 3 (LENGTH (##]
                (1 PROGN))
               ((1 (LAMBDA (X Y)
                     Y]
  [PUTPROP ((ORR ((IF (EDIT4E (QUOTE (PUTPROP & & (QUOTE VALUE)))
                              (##)))
                  (REMARK PUTPROP:)
                  (1 RPLACA)
                  (4))
                 ((IF (EDIT4E (QUOTE (PUTPROP & & (QUOTE PNAME)))
                              (##)))
                  (REMARK PUTPROP1:))
                 ((1 PUT)
                  (SW 3 4]
  (PUTSYM ((REMARK GETSYM:)))
  (QUOTE (NLAM))
  (QUOTIENT ((IF (## 4)
                 ((EMBED (3 TO)
                         IN TIMES))
                 NIL)
             (REMARK INTEGERFN?)))
  (RE*ARRAY ((REMARK UDF)))
  (READ ((REMARK IOFNS)))
  (READLIST ((REMARK READLIST)))
  (RECIP ((1 QUOTIENT)
          (-2 1)
          -1 DOTHIS (REMARK INTEGERFN?)))
  (REMAINDER ((1 IREMAINDER)))
  (REMPROP ((REMARK REMPROP)))
  (RUNTIME ((: (ITIMES 1000 (CLOCK 2)))
            (REMARK RUNTIME:)))
  [SASSOC ((MBD OR)
           (MOVE 2 4 TO N HERE)
           -1
           (ORR ((IF (EDIT4E (QUOTE (FUNCTION [LAMBDA NIL &]))
                             (##)))
                 (XTR 2 3))
                ((IF (EDIT4E (QUOTE (FUNCTION [LAMBDA NIL & & --]))
                             (##)))
                 (XTR 2)
                 (EMBED (3 TO)
                        IN PROGN)
                 (XTR 3))
                ((REMARK SASSOC:]
  [SASSQ ((1 FASSOC)
          (MBD OR)
          (MOVE 2 4 TO N HERE)
          -1
          (ORR ((IF (EDIT4E (QUOTE (FUNCTION [LAMBDA NIL &]))
                            (##)))
                (XTR 2 3))
               ((IF (EDIT4E (QUOTE (FUNCTION [LAMBDA NIL & & --]))
                            (##)))
                (XTR 2)
                (EMBED (3 TO)
                       IN PROGN)
                (XTR 3))
               ((REMARK SASSQ:]
  [SELECTQ (2 DOTHIS (LPQ NX (IF (## NX UP)
                                 ((NTH 2)
                                  DOTHESE 0)
                                 (DOTHIS]
  (SET ((REMARK SET)))
  (SETQ ((IF (## 3)
             (3 DOTHIS)
             NIL)))
  (SIGN ((REMARK SIGN:)))
  (SLEEP ((XTR 2)
          (MBD (DISMISS (ITIMES 33 *)))
          (REMARK SLEEP:)))
  (SPEAK ((1 CONSCOUNT)
          (REMARK SPEAK:)))
  (SSTATUS ((REMARK LAZY)))
  (STATUS ((REMARK LAZY)))
  (STORE ((1 SETA)
          (MOVE 3 1 TO BEFORE 3)
          (IF (## 3 2)
              ((REMARK STOREMI))
              ((BO 3)))
          (REMARK STORE:)))
  (SUB1 ((REMARK ADD1:)))
  (SUBST ((IF (EQ (## 2)
                  (## 3))
              ((1 COPY))
              NIL)))
  (TCONC ((SW 2 3)))
  (TERPRI ((REMARK IOFNS)))
  [TIME ((IF (## 2)
             ((REMARK TIME))
             ((1 CLOCK)
              (N 0]
  (TYI ((REMARK IOFNS)
        (1 READC)
        (MBD CHCON1)))
  [TYO ((REMARK TYO:)
        (XTR 2)
        (MBD (PRIN1 (CHARACTER *]
  (UFILE ((REMARK UFILE:)))
  (UREAD ((1 INPUT)
          (EMBED 2 IN INFILE)
          (REMARK UREAD:)))
  (UUO ((REMARK MACHINE-CODE)))
  (UWRITE ((REMARK UWRITE:)))
  [XCONS ((1 (LAMBDA (X Y)
               (CONS Y X]
  [ZEROP ((IF (EDIT4E (QUOTE (ZEROP (DIFFERENCE & &)))
                      (##))
              ((1 EQP)
               (BO 2)
               (2))
              ((REMARK ADD1:]
))(QUOTE XFORM))

  [COND
    [(EQ (EVALV (QUOTE MERGE))
         T)
      [RPAQ TRANSFORMATIONS (UNION TRANSFORMATIONS
                                   (LISTP (GETP (QUOTE TRANSFORMATIONS)
                                                (QUOTE VALUE]
      (MAPC (GETP (QUOTE USERNOTES)
                  (QUOTE VALUE))
            (FUNCTION (LAMBDA (NOTE)
                (OR (ASSOC (CAR NOTE)
                           USERNOTES)
                    (SETQ USERNOTES (CONS NOTE USERNOTES]
    (T (MAPC (GETP (QUOTE TRANSFORMATIONS)
                   (QUOTE VALUE))
             (FUNCTION (LAMBDA (X)
                 (AND (NOT (MEMB X TRANSFORMATONS))
                      (/REMPROP X (QUOTE XFORM]
STOP
