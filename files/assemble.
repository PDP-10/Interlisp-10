(FILECREATED " 3-OCT-74 00:42:58" ASSEMBLE.;1 17405  


     changes to:  BINSK

     previous date: " 1-OCT-74 23:04:41" <NEWLISP>ASSEMBLE.;14)


  (LISPXPRINT (QUOTE ASSEMBLECOMS)
	      T T)
  [RPAQQ ASSEMBLECOMS
	 ((FNS * ASSEMBLEFNS)
	  (PROP MACRO LAPPUSH0 LAPPOP LAPADD1 NEWFSTKARG RELSTK 
		FCHARACTER FRPLNODE2 FGETD FSTKNAME)
	  (PROP MACRO FNOPENR FNOPENRA FNOPENRD .FNOPENR. FNCLOSER 
		FNCLOSERA FNCLOSERD .FNCLOSER.)
	  (BLOCKS * ASSEMBLEBLOCKS)
	  (DECLARE: DOEVAL@LOAD DOEVAL@COMPILE DONTCOPY (PROP MACRO 
							   GETSYNSK))
	  (DECLARE: DONTEVAL@LOAD DOEVAL@COMPILE DONTCOPY COMPILERVARS
		    (ADDVARS (NLAMA)
			     (NLAML OLDSETN]
  (RPAQQ ASSEMBLEFNS
	 (COUNT COPYBYTES SKREAD SKATOM SKSTR SKPAREN SKBRACKET BINSK 
		SETFCHAR SETLASTC MAPHASH NEWBLIPEVAL OLDSETN DOBE 
		DISMISS FIRSTLIT LASTLIT+1 NFRVARS FNOPENADR))
(DEFINEQ

(COUNT
  [LAMBDA (X)
    (ASSEMBLE NIL
	      (CQ X)
	      (PUSHJ CP , COUNT1)
	      (JRST MKN)
	  COUNT1
	      (PUSHN = 0)
	      (PUSH PP , 1)
	      (E (PSTEP))
	  B   [CQ (VAG (NTYP (AC]
	      (CAME 1 , LISTT)
	      (JRST OUT)
	      (HRRZ 1 , @ 0 (PP))
	      [CQ (VAG (NTYP (AC]
	      (CAME 1 , LISTT)
	      (JRST A)
	      (HRRZ 1 , @ 0 (PP))
	      (PUSHJ CP , COUNT1)
	      (NREF (ADDM 1 , 0))
	  A   (NREF (AOS 0))
	      (HLRZ 1 , @ 0 (PP))
	      (MOVEM 1 , 0 (PP))
	      (JRST B)
	  OUT (SUB PP , BHC 1)
	      (E (PSTEPN -1))
	      (POPN 1)
	      (POPJ CP ,])

(COPYBYTES
  [LAMBDA (SRCFIL DSTFIL START END)
    (PROG ((SRCJFN (OPNJFN SRCFIL))
	   (DSTJFN (OPNJFN DSTFIL)))
          (SFPTR SRCFIL START)
          (ASSEMBLE NIL
		    (HRROI 1 , -1)
		    (SKIPA 2 , * 1)
		    (XWD 400000Q 777Q)
		    (JSYS 56Q)                  (* PMAP to clear p.
                                                1411Q)
		    (CQ (VAG (IDIFFERENCE END START)))
		    (JUMPL 1 , PUNT)
		    (PUSHN)
		LOOP(NREF (SKIPN 1 , 0))
		    (JRST DONE)
		    (CAIG 1 , 5000Q)
		    (JRST LAST-TIME)
		    (SUBI 1 , 5000Q)
		    (NREF (MOVEM 1 , 0))
		    (MOVNI 3 , 5000Q)
		    (JRST HIT-IT)
		LAST-TIME
		    (NREF (MOVN 3 , 0))
		    (NREF (SETZM 0))
		HIT-IT
		    (PUSHN 3)
		    (CQ SRCJFN)
		    (SUBI 1 , ASZ)
		    (HRROI 2 , 777000Q)
		    (JSYS 52Q)                  (* SIN)
		    (JUMPN 3 , IOERR)
		    (CQ DSTJFN)
		    (SUBI 1 , ASZ)
		    (POPN 3)
		    (HRROI 2 , 777000Q)
		    (JSYS 53Q)                  (* SOUT)
		    (JUMPN 3 , IOERR)
		    (JRST LOOP)
		IOERR
		    [CQ (SETQ SRCJFN (LOC (AC]
		    (CQ (ERROR (QUOTE "IO ERROR IN COPYBYTES")
			       (JFNS SRCJFN)))
		PUNT(CQ (ERROR (LOC (AC))
			       "NEG. # BYTES TO COPY??"))
		DONE(POPN)
		    (CQ (RETURN T])

(SKREAD
  [LAMBDA (FILE REREADSTRING)
    (PROG ([JFN (OPNJFN (OR FILE (INPUT]
	   (ESCFLG (ESCAPE T))
	   (RRSTR (AND REREADSTRING (SUBSTRING REREADSTRING 1 -1)))
	   BUF1 LSTC UNBALFLG SKATOM-LASTC C)
          (OR ESCFLG (ESCAPE))                  (* Put ESCAPE back the 
                                                way we found it, if 
                                                nec.)
          (COND
	    ((EQ JFN 100Q)

          (* TTY complicated, with POSITION, LASTC, LINBUF, 
          SYSBUF, etc. Give error. should be fixed up to work 
          right someday?)


	      (ERROR (QUOTE "SKREAD NOT LEGAL TO TTY")
		     FILE)))
          (SETQ BUF1 (SETFCHAR FILE))
          [AND (ZEROP BUF1)
	       (SETQ BUF1 (COND
		   (RRSTR 

          (* Double-buffer: BUF1 is analog of FCHAR, RRSTR of 
          LINBUF. But convention that if there is nothing in 
          BUF1 then RRSTR not checked.
          Saves time but requires this COND check.
          BUF1 contains an ASCII code.)


			  (CHCON1 (GLC RRSTR]
      TOP [SELECTQ (LOGAND [LOC (SETQ C (GETSYNSK (BINSK]
			   7)
		   (3                           (* Left paren)
		      (SKPAREN))
		   (4                           (* Unmatched right paren
                                                terminates SKREAD.)
		      (SETQ UNBALFLG (QUOTE %))))
		   (1                           (* Ditto right square 
                                                bracket.)
		      (SETQ UNBALFLG (QUOTE %])))
		   (2                           (* Left bracket.)
		      (SKBRACKET))
		   (COND
		     ((NEQ (LOGAND (LOC C)
				   20Q)
			   0)                   (* Double-quote.)
		       (SKSTR))
		     ((NEQ (LOGAND (LOC C)
				   100Q)
			   0)                   (* Flush leading Sepr 
                                                chars)
		       (GO TOP))
		     (T (SKATOM)

          (* Anything else is atom. Put back the BREAK char 
          and reset LASTC. This only has to be done in the 
          case of SKATOM because only reading atoms ever goes 
          too far.)


			(SETFCHAR FILE BUF1)
			(SETQ LSTC SKATOM-LASTC]
          (SETLASTC LSTC FILE)

          (* Value of SKREAD is NIL normally;
          but if an unbalanced paren or square bracket 
          terminated the parse, it is returned as a character 
          atom.)


          (RETURN UNBALFLG])

(SKATOM
  [LAMBDA NIL                                   (* SUBFN of SKREAD.
                                                Blockcompiled away.)
    (PROG (C)
      TOP (COND
	    ((NEQ (LOGAND [LOC (GETSYNSK (SETQ C (BINSK]
			  300Q)
		  0)
	      (SETQ BUF1 C)                     (* Sepr or BREAK chars)
	      (RETURN))
	    (T (SETQ SKATOM-LASTC C)))
          (GO TOP])

(SKSTR
  [LAMBDA NIL                                   (* SUBFN of SKREAD.
                                                Blockcompiled away.)
    (PROG NIL
      TOP (COND
	    ((NEQ (LOGAND (LOC (GETSYNSK (BINSK)))
			  20Q)
		  0)                            (* Double-quote)
	      (RETURN))
	    (T (GO TOP])

(SKPAREN
  [LAMBDA NIL                                   (* SUBFN of SKREAD.
                                                Blockcompiled away.)
    (PROG (C)
      TOP [SELECTQ (LOGAND [LOC (SETQ C (GETSYNSK (BINSK]
			   7)
		   (3                           (* Left paren)
		      (SKPAREN)
		      (AND (EQ UNBALFLG (QUOTE %]))
			   (RETURN)))
		   (2                           (* Left bracket)
		      (SKBRACKET))
		   (4                           (* Right paren)
		      (RETURN))
		   (1 

          (* Right bracket ends this call to SKPAREN, and 
          enter unwind mode to determine scope of bracket 
          closure.)


		      (SETQ UNBALFLG (QUOTE %]))
		      (RETURN))
		   (COND
		     ((NEQ (LOGAND (LOC C)
				   20Q)
			   0)                   (* Double-quote)
		       (SKSTR]
          (GO TOP])

(SKBRACKET
  [LAMBDA NIL                                   (* SUBFN of SKREAD.
                                                Blockcompiled away.)
    (PROG (C)
      TOP [SELECTQ (LOGAND [LOC (SETQ C (GETSYNSK (BINSK]
			   7)
		   (2                           (* Left bracket)
		      (SKBRACKET))
		   (1                           (* Right bracket)
		      (RETURN))
		   (COND
		     ((NEQ (LOGAND (LOC C)
				   20Q)
			   0)                   (* Double-quote)
		       (SKSTR]
          (GO TOP])

(BINSK
  [LAMBDA NIL

          (* SUBFN of SKREAD. Blockcompiled away.
          someday fix so percent sign in RRSTR does the right 
          thing.)


    (SETQ LSTC
      (PROG ((B BUF1))
	    [COND
	      (BUF1 (RETURN (COND
			      ((NULL RRSTR)
				(SETQ BUF1)
				B)
			      ((SETQ B (GNC RRSTR))
				(CHCON1 B))
			      (T                (* RRSTR exhausted, NULL
                                                string)
				 (SETQ RRSTR)
				 (PROG1 BUF1 (SETQ BUF1]
                                                (* Buffers empty, gotta 
                                                really go to file.)
	    (RETURN (ASSEMBLE NIL
			      (CQ JFN)
			      (SUBI 1 , ASZ)
			      (JSYS 50Q)        (* BIN)
			      (JUMPE 2 , EOFP)
			      (VAR (HRRZ 3 , FILERDTBL))
			      (ADDI 3 , 2 (2))
                                                (* GET READTABLE ENTRY)
			      (HLRZ 3 , 0 (3))
			      (TRNE 3 , 10Q)    (* TEST ESCAPE BIT)
			      (JRST PC)
			      (CAIE 2 , 15Q)
			      (JRST BACKIN)
			      (JSYS 50Q)        (* BIN)
			      (CAIE 2 , 12Q)
			      (JRST LF1)
			      (MOVEI 2 , 37Q)
			  BACKIN
			      (HRRZI 1 , ASZ (2))
			      (CQ (RETURN (AC)))
			  EOFP(JSYS 24Q)        (* GTSTS If hit eof, 
                                                SKREAD returns NIL.)
			      (TLNN 2 , 1000Q)
			      (JRST BACKIN)
			      [CQ (ERRORX (LIST 20Q (OR FILE (INPUT]

          (* ESCAPE char. Read following char and return any 
          ordinary literal char, e.g. 130Q for "X")


			  PC  (VAR (HRRZ 1 , ESCFLG))
			      (CAMN 1 , KNIL)
			      (JRST BACKIN)
			      (CQ JFN)
			      (SUBI 1 , ASZ)
			      (JSYS 50Q)        (* JSYS BIN)
			      (JUMPE 2 , EOFP)
			      (CAIE 2 , 15Q)
			      (JRST PC2)
			      (JSYS 50Q)        (* BIN)
			      (CAIE 2 , 12Q)
			      (JSYS 42Q)        (* BKJFN)
			      (JFCL)
			  PC2 (CQ (RETURN 130Q))
			  LF1 (JSYS 42Q)        (* BKJFN)
			      (JFCL)
			      (MOVEI 2 , 15Q)
			      (JRST BACKIN])

(SETFCHAR
  [LAMBDA (FILE CHAR)                           (* SUBFN of SKREAD.
                                                Blockcompiled away.)

          (* This was going to be a public function, but it has some 
          real problems when FILE=T and CHAR is a double-quote, or a 
          paren, some others. So I check in SKREAD and just don't call 
          SETFCHAR with FILE=T, but that makes it not a user usable 
          fn.)


    (ASSEMBLE NIL
	      (CQ FILE)
	      (FASTCALL IFSET)
	      (VAR (HRRZ 2 , CHAR))
	      (CAMN 2 , KNIL)
	      (HRRZI 2 , ASZ)                   (* NIL=0)
	      (SUBI 2 , ASZ)
	      (HRRZ 1 , FCHAR (FX))
	      (ADDI 1 , ASZ)
	      (HRRM 2 , FCHAR (FX])

(SETLASTC
  [LAMBDA (CHAR FILE)

          (* Used only in SKREAD, to reset LASTC given numeric byte.
          Value not used.)


    (ASSEMBLE NIL
	      (CQ FILE)
	      (FASTCALL IFSET)
	      (CQ CHAR)
	      (SUBI 1 , ASZ)
	      (HRLM 1 , FILEA (10Q])

(MAPHASH
  [LAMBDA (ARRAY MAPHFN)
    (PROG ((AP (COND
		 ((NULL ARRAY)
		   SYSHASHARRAY)
		 ((LISTP ARRAY)
		   (CAR ARRAY))
		 (T ARRAY)))
	   END)
          (SETQ END (VAG (IPLUS (LOC AP)
				(ARRAYSIZE AP)
				2)))            (* First word after ARRAY.)
          (SETQ AP (VAG (IPLUS (LOC AP)
			       2)))             (* First element in ARRAY.)
      LP  [COND
	    ((EQ AP END)
	      (RETURN ARRAY))
	    ((NEQ (CAR AP)
		  (VAG 0))

          (* HASH-VALUE cell is empty if it has VAG 0 in it s right 
          half)


	      (APPLY* MAPHFN (CAR AP)
		      (CDR AP]
          [SETQ AP (VAG (ADD1 (LOC AP]
          (GO LP])

(NEWBLIPEVAL
  [LAMBDA (TYP POS CNTFLG)
    (COND
      (CNTFLG                                   (* count blips)
	      (PROG ((M 0)
		     (POS1 (STKARG 1 POS))
		     (END (STKARG 1 (STKNTH 1 POS)))
		     (CNT 0))
		LP  [COND
		      ((EQ (VAG (IPLUS (LOC POS1)
				       M))
			   END)
			(RETURN CNT))
		      ((EQ (CDR (VAG (IPLUS (LOC POS1)
					    M)))
			   (VAG 64))
			(SETQ CNT (ADD1 CNT]
		    (SETQ M (ADD1 M))
		    (GO LP)))
      ((EQ TYP (QUOTE EVAL))

          (* The STKNTH 1 is because in spaghetti, blipeval includes 
          the frame indicated by POS, so that we must begin the 
          stkscan with the next frame.)


	(AND (SETQ TYP (NEWSTKSCAN (VAG 64)
				   (STKNTH 1 POS)))
	     (CAR TYP)))
      ((EQ TYP (QUOTE PROG))

          (* The STKNTH 1 is because in spaghetti, blipeval includes 
          the frame indicated by POS, so that we must begin the 
          stkscan with the next frame.)


	(AND (SETQ TYP (NEWSTKSCAN (VAG 0)
				   (STKNTH 1 POS)))
	     (CAR TYP])

(OLDSETN
  [NLAMBDA (VAR X)
    (COND
      ((NOT (LITATOM VAR))
	(ERRORX (LIST 14 VAR)))
      (SPAGHETTIFLG (ERROR (QUOTE "WRONG SETN FOR SPAGHETTI")))
      ([NOT (NUMBERP (SETQ X (STKEVAL (STKARG 0 (QUOTE SETN))
				      X]
	(ERRORX (LIST 10 X)))
      ([AND [NUMBERP (CAR (SETQ VAR (STKSCAN VAR (STKARG 0 (STKNTH -1]
	    (NOT (SMALLP (CAR VAR]
	(CLOSER (LOC (CAR VAR))
		X)

          (* Value of CLOSER and (CAR VAR) will be the same except if 
          VAR was originally floating point and X is large integer or 
          vice versa.)


	(CAR VAR))
      (T (CAR (FRPLACA VAR X])

(DOBE
  [LAMBDA NIL                                   (* dismisses until output buffer
                                                is empty)
    (JSYS 68 65])

(DISMISS
  [LAMBDA (N)                                   (* Dismisses for N 
                                                milliseconds.)
    (JSYS 119 N)
    N])

(FIRSTLIT
  [LAMBDA (HANDLE)

          (* HANDLE is GETD of either compiled def or swapped 
          def. Value is relative (with repsect to entry point) 
          address of first literal, suitable for passing to 
          FNOPENR or FNCLOSER)


    (COND
      ((SWPARRAYP HANDLE)

          (* The -2 is because addresses are relative to 
          beginning of block in swapped space.)


	(IPLUS (LOC (FNOPENRA HANDLE 2))
	       -2))
      (T (IDIFFERENCE (LOC (FNOPENRA HANDLE 2))
		      (LOC HANDLE])

(LASTLIT+1
  [LAMBDA (HANDLE)

          (* HANDLE is GETD of either compiled def or swapped def.
          Value is relative (with repsect to entry point) address of 
          last literal + 1, suitable for passing to FNOPENR or 
          FNCLOSER)


    (IPLUS (LOC (FNOPENRD HANDLE -2))
	   -2])

(NFRVARS
  [LAMBDA (ADR)
    (LOC (FNOPENRD ADR 2])

(FNOPENADR
  [LAMBDA (HANDLE N)

          (* Value is address portion of correspondin cell, as 
          a relative address. i.e. takes into acount that in 
          swapped functions, all references are relative to 
          beginning of block, whereas in compiled code, they 
          are absolute)


    (COND
      [(SWPARRAYP HANDLE)
	(IPLUS -2 (LOC (FNOPENRA HANDLE N]
      (T (IDIFFERENCE (LOC (FNOPENRA HANDLE N))
		      (LOC HANDLE])
)
(DEFLIST(QUOTE(
  [LAPPUSH0 (NIL (ASSEMBLE NIL (PUSHN = 0]
  [LAPPOP (NIL (LOC (ASSEMBLE NIL (POPN 1]
  [LAPADD1 (NIL (ASSEMBLE NIL (NREF (AOS 0]
  [NEWFSTKARG (X (COND [(NULL SPAGHETTIFLG)
			(PROG (B)
			      (SETQ B (CARG X))
			      LP
			      (COND ((ILESSP B 3)
				     (STORIN (QUOTE (PUSH PP , KNIL)))
				     (PSTEP)
				     (SETQ B (ADD1 B))
				     (GO LP)))
			      (STORIN (QUOTE (PUSHJ CP , STKARC)))
			      (PSTEPN -3)
			      (STORIN (QUOTE (UNCOV 3)))
			      (STORIN (QUOTE (CAR1)))
			      (RETURN (QUOTE INSTRUCTIONS]
		       (T (CONS (QUOTE STKARG)
				X]
  [RELSTK (X (COND [(NULL SPAGHETTIFLG)
		    (COND ((OR VCF (LISTP (CAR X)))
			   (CAR X))
			  (T (QUOTE INSTRUCTIONS]
		   (T (SETQ X (CARG X))
		      (STORIN (LIST (QUOTE CCALL)
				    X
				    (QUOTE ,)
				    (QUOTE ')
				    (QUOTE RELSTK)))
		      (QUOTE INSTRUCTIONS]
  [FCHARACTER ((X)
	       (ASSEMBLE NIL (CQ X)
			 (ANDI 1 , 127)
			 (HRRZ 2 , @ ' FCHARAR)
			 (ADDI 1 , 2 (2))
			 (HRRZ 1 , 0 (1]
  [FRPLNODE2 ((X Y)
	      (ASSEMBLE NIL (CQ X)
			(E (CEXP2 (QUOTE Y)))
			(MOVE 2 , 0 (2))
			(MOVEM 2 , 0 (1]
  [FGETD ((X)
	  (CAR (VAG (ADD1 (LOC X]
  (FSTKNAME ((X)
	     (CDR X)))
))(QUOTE MACRO))
(DEFLIST(QUOTE(
  [FNOPENR (X (SUBPAIR (QUOTE (X Y))
		       X
		       (QUOTE (LOC (.FNOPENR. FFNOPR X Y]
  [FNOPENRA (X (SUBPAIR (QUOTE (X Y))
			X
			(QUOTE (.FNOPENR. FFNOPA X Y]
  [FNOPENRD (X (SUBPAIR (QUOTE (X Y))
			X
			(QUOTE (.FNOPENR. FFNOPD X Y]
  [.FNOPENR. ((FN X Y)
	      (ASSEMBLE NIL (CQ X)
			(PUSHP)
			(E (PSTEP))
			(CQ (VAG (FIX Y)))
			(PUSHP)
			(E (PSTEP))
			(PUSHJ CP , FN)
			(E (PSTEPN -2]
  [FNCLOSER (X (SUBPAIR (QUOTE (X Y Z))
			X
			(QUOTE (LOC (.FNCLOSER. FFNCLR X Y
						(VAG (FIX Z]
  [FNCLOSERA (X (SUBPAIR (QUOTE (X Y Z))
			 X
			 (QUOTE (.FNCLOSER. FFNCLA X Y Z]
  [FNCLOSERD (X (SUBPAIR (QUOTE (X Y Z))
			 X
			 (QUOTE (.FNCLOSER. FFNCLD X Y Z]
  [.FNCLOSER. ((FN X Y Z)
	       (ASSEMBLE NIL (CQ X)
			 (PUSHP)
			 (E (PSTEP))
			 (CQ (VAG (FIX Y)))
			 (PUSHP)
			 (E (PSTEP))
			 (CQ Z)
			 (PUSHJ CP , FN)
			 (E (PSTEPN -2]
))(QUOTE MACRO))
  (RPAQQ ASSEMBLEBLOCKS
	 ((SKREAD SKREAD SKATOM SKSTR SKPAREN SKBRACKET BINSK SETFCHAR 
		  SETLASTC
		  (LOCALFREEVARS BUF1 RRSTR JFN ESCFLG LSTC 
				 SKATOM-LASTC UNBALFLG FILE))
	  (NIL (LINKFNS . T)
	       NEWBLIPEVAL)))
[DECLARE: DONTEVAL@LOAD DOEVAL@COMPILE DONTCOPY
  (BLOCK: SKREAD SKREAD SKATOM SKSTR SKPAREN SKBRACKET BINSK SETFCHAR 
	  SETLASTC (LOCALFREEVARS BUF1 RRSTR JFN ESCFLG LSTC 
				  SKATOM-LASTC UNBALFLG FILE))
  (BLOCK: NIL (LINKFNS . T)
	  NEWBLIPEVAL)
]
[DECLARE: DOEVAL@LOAD DOEVAL@COMPILE DONTCOPY 
(DEFLIST(QUOTE(
  [GETSYNSK ((X)
	     (CDR (VAG (IPLUS (LOC FILERDTBL)
			      X 2]
))(QUOTE MACRO))
]
[DECLARE: DONTEVAL@LOAD DOEVAL@COMPILE DONTCOPY COMPILERVARS 
  (ADDTOVAR NLAMA)
  (ADDTOVAR NLAML OLDSETN)
]
(DECLARE: DONTCOPY
  (FILEMAP (NIL (868 14417 (COUNT 880 . 1491) (COPYBYTES 1495 . 2746)
(SKREAD 2750 . 5184) (SKATOM 5188 . 5575) (SKSTR 5579 . 5901) (SKPAREN
5905 . 6757) (SKBRACKET 6761 . 7279) (BINSK 7283 . 9355) (SETFCHAR
9359 . 10088) (SETLASTC 10092 . 10362) (MAPHASH 10366 . 11030) (
NEWBLIPEVAL 11034 . 12085) (OLDSETN 12089 . 12700) (DOBE 12704 . 12869)
(DISMISS 12873 . 13041) (FIRSTLIT 13045 . 13576) (LASTLIT+1 13580
. 13890) (NFRVARS 13894 . 13947) (FNOPENADR 13951 . 14414)))))
STOP
