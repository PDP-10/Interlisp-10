  (PROGN (LISPXPRIN1 (QUOTE "FILE CREATED ")
                     T)
         (LISPXPRIN1 (QUOTE "26-JUL-72 17:22:46")
                     T)
         (LISPXTERPRI T))
(DEFINEQ

(DROPOFFP
  [LAMBDA (FORMS)

          (* Function to decide if a PROG expression can 'drop 
          off'. In SRI lisp this is guaranteed to return NIL, 
          so the TRANSFORMATIONS for PROG use DROPOFFP to 
          decide if they need to insert 
          (RETURN NIL) at end of PROG.)


    (PROG [(LASTFORM (CAR (LAST FORMS]
          (SELECTQ (CAR LASTFORM)
                   ((GO RETURN)
                    (RETURN))
                   [COND
                     (RETURN (OR (NEQ T (CAAR (LAST LASTFORM)))
                                 (SOME (CDR LASTFORM)
                                       (FUNCTION DROPOFFP]
                   (RETURN T])
)
  (LISPXPRINT (QUOTE XFORMSFNS)
              T)
  (RPAQQ XFORMSFNS (DROPOFFP))
  (LISPXPRINT (QUOTE XFORMSVARS)
              T)
  (RPAQQ XFORMSVARS ((TRANSAVE)))
  (RPAQQ DUMPFILE SRI.XFORMS)
  [RPAQQ USERNOTES ((*FUNCTION:

          (* *FUNCTION is not implemented in BBN-lisp.
          FUNARG is implemented, tentatively and differently, 
          as a second argument to the function function.
          The user must recode this expression, carefully.)

)
          (APPLY/EVAL 

          (* TRANSOR will translate the arguments of the APPLY 
          or EVAL expression, but the user must make sure that 
          the run-time evaluation of the arguments returns a 
          BBN-compatible expression.)

)
          (ARRAYS                               (* Array function.
                                                No transformations for 
                                                these functions have 
                                                been composed yet.))
          (CHARACTERCODE 

          (* The SRI function ASCII should be directly 
          replacable by the BBN function CHARACTER.
          This transformation has been performed, but the user 
          should watch out for such problems as different use 
          of control characters, etc.)

)
          (DEFPROP-MACRO 

          (* * macro properties go here eventually.
          I don't have any to do in QA3 except SELECTQ and 
          ORV, which disappear anyway, so this clause 
          temporarily shorted out.)

)
          (EXPR*

          (* The function ARG is currently implemented to take 
          two arguments, the (quoted) name of the lambda 
          variable, which is bound to the number of args 
          supplied, and the number of the ARG desired.
          Thus PROGN becomes (LAMBDA 
          (X) (ARG X X)). This implementation is somewhat 
          tentative. In other respects EXPR*'S work as on the 
          94O. SRI LEXPR'S should therefore TRANSOR without 
          user assistance, until BBN EXPR*'S are changed, if 
          that happens.)

)
          (FDEFPROP                             (* Funny DEFPROP: too 
                                                few args. Translation of
                                                it abandoned.))
          (GCTIME 

          (* I did not think that sri's function GCTIME took 
          any arguments. Nothing done to this form.)

)
          (GO 

          (* Non-atomic args to GO are evaluated repeatedly to 
          get a tag on SRI-LISP, when interpreting.
          Compiled, this glitch does not work, even at SRI.
          It can probably be accomplished on BBN Lisp, while 
          interpreting only, by (APPLY 
          (FUNCTION GO) non-atomic-form). This glitch has been 
          used at the above places in the object code.
          TRANSOR has generated the APPLY expression and 
          translated its argument, but the user is advised to 
          beware of gross bummery.)

)
          (GREATERP/LESSP 

          (* SRI'S GREATERP and LESSP take an indefinite 
          number of args and test to see that they are in 
          order. Accordingly, where these functions were used 
          with exactly two args they were allowed to stand, 
          but in the cases noted here they were actually 
          called with extra arguments and must be replaced 
          with something written for the purpose.)

)
          (INTERN                               (* No direct match for 
                                                INTERN exists on BBN 
                                                Lisp.))
          (IOFNS 

          (* Random grubby IO functions, documented in chapter 
          14 of SAILON 28.2, which I am too lazy to fix up.)

)
          (LABEL                                (* The LABEL device is 
                                                not implemented in BBN 
                                                lisp.))
          (LAZY 

          (* I did not really expect this fn to appear and 
          will (may) write TRANSFORMATIONS for it if it does.)

)
          (MACHINE-CODE                         (* Expression dependent 
                                                on machine-code.
                                                User must recode.))
          (READLIST 

          (* The function READLIST has been replaced with 
          PACK, although it differs from PACK in two ways.
          First, it only takes the first character of the 
          elements of the list it is given.
          If some of these have more than one character, they 
          will be included entire by BBN'S PACK.
          But rather than do (NTHCHAR * 1) around every 
          element of the argument list, I have left it to the 
          user to detect when and if the SRI program utilized 
          this feature. Secondly, BBN'S PACK returns an atom 
          come what may; SRI'S READLIST operates by 
          'UNREADING' and may therefore return lists.
          Again, the user must check for this, since there is 
          no reasonable way to check for it from TRANSOR.)

)
          (REMPROP 

          (* On SRI Lisp REMPROP returns T if the property was 
          there, on BBN returns name of property always.
          User must check if value being used.)

)
          (SASSOC:

          (* This expression is a  correct translation of 
          SRI's function SASSOC, but the code is ugly and 
          users may want to rewrite it.)

)
          (SET 

          (* SET on SRI lisp cannot affect compiled function 
          VARS which are not special.
          This may be used by some functions, to allow their 
          local variables to become invisible.
          There is nothing TRANSOR can do about this however;
          users will just have to debug it themselves.)

)
          (SPEAK:

          (* The bbn-lisp function CONSCOUNT takes one 
          optional argument which resets the count of conses 
          done in this core image. I don't know what the 
          argument TO SPEAK does, but values other than NIL 
          will cause BBN's CONSCOUNT TO reset and should be 
          avoided IF that's not intended.
          SPEAK was used here with an argument provided;
          check it out.)

)
          (SPECPDL 

          (* SRI LISP expects fexpr's to be of the form 
          (lambda (ARG) --) or (lambda 
          (ARG SPECIAL/THINGY) --). The former is converted by 
          TRANSOR to the BBN equivalent, 
          (nlambda arg --). The latter has no direct 
          equivalent and the user will have to hack it out 
          himself should it arise. At the places noted here, 
          it arose.)

)
          (TIME 

          (* I did not think that SRI'S function TIME took any 
          arguments. Nothing done to this form.)

)
          (UDF                                  (* This function is not 
                                                defined directly in BBN 
                                                Lisp)]
  (RPAQQ NLISTPCOMS NIL)
  [RPAQQ LAMBDACOMS ((IF [NULL (FMEMB (CAAAR L)
                                      (QUOTE (LAMBDA NLAMBDA]
                         ((REMARK BLAMBDA1)
                          (-1 APPLY*))
                         ((IF (NEQ (LENGTH (## (NTH 2)))
                                   (LENGTH (## 1 2)))
                              ((REMARK BLAMBDA2))
                              NIL)
                          MARK
                          (ORR (1 (NTH 3)
                                  DOTHESE)
                               ((REMARK BLAMBDA3)))__(NTH 2)
                          DOTHESE]
  (RPAQQ APPLYINPUTFLG NIL)
  (RPAQQ APPLYOUTPUTFLG NIL)
  (RPAQQ TRANSFORMATIONS (DEFPROP SELECTQ))
(DEFLIST(QUOTE(
  [DEFPROP ((ORR ((IF (NLISTP (CDDDAR L)))
                  (REMARK FDEFPROP)
                  NLAM)
                 ((IF (EQ (## -1)
                          (QUOTE MACRO)))
                  (REMARK DEFPROP-MACRO))
                 ((IF (EQ (## -1)
                          (QUOTE VAL)))
                  (1 RPAQQ)
                  (4)
                  NLAM)
                 ((IF (SELECTQ (## -1)
                               ((EXPR FEXPR)
                                NIL)
                               T))
                  (1 PUT)
                  (EMBED 2 IN QUOTE)
                  (SW 3 4)
                  (EMBED 3 IN QUOTE)
                  (EMBED 4 IN QUOTE)
                  NLAM)
                 ((1 DEFINEQ)
                  (IF (EQ (## 4)
                          (QUOTE FEXPR))
                      [(CHANGE 3 1 TO NLAMBDA)
                       (IF (## 3 2 2)
                           ((REMARK SPECPDL))
                           ((EXTRACT 1 FROM 3 2]
                      NIL)
                  (4)
                  (BI 2 3)
                  2 2 3 UP DOTHESE]
  [SELECTQ (2 DOTHIS (LPQ NX (IF (## NX UP)
                                 ((NTH 2)
                                  DOTHESE 0)
                                 (DOTHIS]
))(QUOTE XFORM))

  [COND
    [(EQ (EVALV (QUOTE MERGE))
         T)
     (MAPC (QUOTE (TRANSFORMATIONS USERNOTES XFORMSFNS XFORMSVARS))
           (FUNCTION (LAMBDA (VAR)
               (/SET VAR (UNION (LISTP (GETP VAR (QUOTE VALUE)))
                                (EVAL VAR]
    (T (MAPC (GETP (QUOTE TRANSFORMATIONS)
                   (QUOTE VALUE))
             (FUNCTION (LAMBDA (X)
                 (AND (NOT (MEMB X TRANSFORMATONS))
                      (/REMPROP X (QUOTE XFORM]
STOP
