(FILECREATED "13-SEP-74 03:44:36" LOADFNS.;3 21826  

     changes to:  LOADFNS0 LOADFNS1

     previous date: "11-SEP-74 03:13:01" LOADFNS.;2)


  (LISPXPRINT (QUOTE LOADFNSCOMS)
	      T)
  (RPAQQ LOADFNSCOMS ((FNS * LOADFNSFNS)
	  (BLOCKS * LOADFNSBLOCKS)))
  (RPAQQ LOADFNSFNS (LOADFROM LOADBLOCK LOADVARS LOADFNS LOADFNS0 LOADFNS1 
			      GETBLOCKDEC SCANFILE0 SCANFILE1 SCANFILE2 
			      TMPSUBFN))
(DEFINEQ

(LOADFROM
  [LAMBDA (FILE FNS LDFLG)                      (* 'notices' file.)
    (LOADFNS FNS FILE LDFLG T)
    [AND DWIMFLG FNS (SETQ LASTWORD (COND
	     ((ATOM FNS)
	       FNS)
	     (T (CAR (LAST FNS]
    FILE])

(LOADBLOCK
  [LAMBDA (FN FILE LDFLG)
    (PROG (TEM)
          (OR FILE (SETQ FILE (LOADFNS0 FN)))
          (AND [SETQ TEM (SUBSET (OR (GETBLOCKDEC FN FILE T)
				     (LIST FN))
				 (FUNCTION (LAMBDA (FN)
				     (NOT (EXPRP (VIRGINFN FN]
	       (LOADFNS TEM FILE LDFLG])

(LOADVARS
  [LAMBDA (VARS FILE LDFLG)
    (LOADFNS NIL FILE LDFLG VARS])

(LOADFNS
  [LAMBDA (FNS FILE LDFLG VARS)
    (RESETLST
      (RESETSAVE DFNFLG LDFLG)
      (RESETSAVE FILECREATEDLST NIL)
      (PROG [FNLST VARLST DONELST FL DICT TEM
		   (PRLST (MAPCAR PRETTYTYPELST (FUNCTION (LAMBDA (X)
				      (CONS (CAR X)
					    (CAAR X]
	    [AND LISPXHIST (COND
		   ((SETQ TEM (FMEMB (QUOTE SIDE)
				     LISPXHIST))
		     (FRPLACA (CADR TEM)
			      -1))
		   (T (LISPXPUT (QUOTE SIDE)
				(LIST -1)
				NIL LISPXHIST]

          (* So that UNDOSAVE will keep saving regardless of how many 
          undosaves are involved)


	    (SETQ FNLST (LOADFNS1 FNS T))
	    [OR FILE (SETQ FILE (LOADFNS0 (CAR FNLST]
	    (RESETSAVE NIL (LIST (QUOTE INPUT)
				 (INFILE FILE)))
	    (SFPTR NIL 0)                       (* In case file was previously 
                                                opened.)
	    (SETQ FILE (INPUT))

          (* Gets full file name. Also note thatthee may have been 
          some error correction done in INFILE< e.g. spelling 
          correction or obtaining another directory)


	    (SETQ FL (NAMEFIELD FILE T))
	    [SETQ VARLST (COND
		((NULL VARS)
		  NIL)
		((EQ VARS (QUOTE VARS))         (* Means load ALL non-DEFINEQs.)
		  (QUOTE VARS))
		[(EQ VARS (QUOTE FNS/VARS))
		  (LIST (FILECOMS FL (QUOTE COMS))
			(FILECOMS FL (QUOTE BLOCKS]
		(T (LOADFNS1 VARS]
	    (SETQ DICT (SCANFILE0 (GETFILEMAP FILE FL)))

          (* SCANFILE0 rturns a 'map' for the file.
          The form of the map is (ADR ADRLST ADRLST ...) where ADR is 
          last address scanned to in file, or NIL if entire file was 
          scanned, or (ADR) where the scan stopped after a function in 
          the middle of a DEFINEQ. Each ADRLST is either of the form 
          (ADR1 ADR2 . FN) or (ADR1 ADR2 
          (FN ADRX . ADRY) (FN ADRX . ADRY) ...) The first case 
          corresponds to a compiled function, the second to a DEFINEQ.
          In the first case, ADR1 is the address of the first 
          character AFTER the function name in the file 
          (for use by LAPRD) and ADR2 the address of the first 
          character after the de definition, i.e. aater LAPRD or 
          LCSKIP has finished. In the second case, ADR1 is the address 
          of the lef paren before the DEFINEQ, and ADR2 either the 
          address of the first character after the entire DEFINEQ 
          expression, or the address of the first chracter after the 
          last function that was scanned.
          In (FN ADRX . ADRY), ADR is the address of of the left 
          prentheses before the function name, ADRY the address of the 
          character after the right paren that closes the definition.
          -
          A map of non-function's is not kept because 
          (a) it would not be of use to MAKEFILE since it always 
          recomputes VARS, and (B) most requests for other than 
          functions require scanning the entire file anyway, e.g. to 
          find all RPAQQ's, and (C) the expressions are usually small 
          compared to DEFINEQ's.)


	    [COND
	      (DICT (/PUT FL (QUOTE FILEMAP)
			  (CONS FILE DICT))
		    (COND
		      ((AND DWIMFLG (LISTP FNLST))
			[SETQ TEM (MAPCONC
			    (CDR DICT)
			    (FUNCTION (LAMBDA (X)
				(COND
				  ((LISTP (SETQ TEM (CDDR X)))
				    (MAPCAR TEM (FUNCTION CAR)))
				  (TEM (LIST TEM]
                                                (* makes a list of functions 
                                                found for use for spelling 
                                                correction.)
			(AND [SETQ TEM (MAPCON
				 FNLST
				 (FUNCTION (LAMBDA (X)
				     (AND (SETQ X (FIXSPELL (CAR X)
							    70 TEM NIL X))
					  (LIST X]
			     (SCANFILE1 DICT TEM]
	    (AND (OPENP FILE (QUOTE INPUT))
		 (CLOSEF FILE))
	    [COND
	      ((LISTP FNLST)
		(SETQ DONELST (CONS (CONS (QUOTE not-found:)
					  FNLST)
				    DONELST]
	    [COND
	      ([AND
		  (LISTP VARLST)
		  (SETQ TEM
		    (SUBSET
		      VARLST
		      (FUNCTION (LAMBDA (X)

          (* Reason for this is if user says LOADVARS 
          (DEFLIST file), then DEFLIST is not removed from VARLST, 
          since you want all such instances.)


			  (NOT (SOME DONELST
				     (FUNCTION (LAMBDA (Y)
					 (COND
					   [(ATOM X)
					     (OR (EQ X (CAR Y))
						 (EQ X (CADR Y]
					   (T (EDIT4E X Y]
		(SETQ DONELST (CONS (CONS (QUOTE not-found:)
					  TEM)
				    DONELST]
	    (ADDFILE FILE (COND
		       ((EQ VARS T)
			 (QUOTE LOADFNS))
		       (T 

          (* In this case, if user tries to do a MAKEFILE before doing 
          a LOADFROM, the syste will automatically 'upgrade' the load.
          Note that unless fileCOMS has a value at this point, the 
          file will not be 'noticed' at all.
          However, if user does LOADFNS (mumble fl FOOCOMS) we are 
          covered because a subsequent makefile will get the rest.)


			  (QUOTE loadfns)))
		     PRLST FILECREATEDLST)
	    (RETURN (DREVERSE DONELST])

(LOADFNS0
  [LAMBDA (FN)
    (PROG (FILE)
          (RETURN (COND
		    ([SETQ FILE (CAR (WHEREIS FN (QUOTE FNS]
		      (SETQ FILE (OR [CDAR (LISTP (GETP FILE (QUOTE FILEDATES]
				     FILE))

          (* VAlue returned by WHEREIS is just the root name, e.g. as 
          obtained from a FNS/VARS file. If there is a FILEDATES 
          property, can get version and directory as wel, e.g. user 
          does LOADFROM (<TEITELMAN>FOO), now system knows where to 
          look for stuff in FOO.)


		      (PRINT (LIST (QUOTE from)
				   FILE)
			     T T)
		      FILE)
		    (T (ERROR FN (QUOTE "'s file not found")
			      T])

(LOADFNS1
  [LAMBDA (X FNSFLG)
    (COND
      ((EQ X T)                                 (* Eleanor's option, load every 
                                                fn found in FILE.)
	T)
      ((NULL X)
	NIL)
      ((LITATOM X)
	(LIST X))
      ((NLISTP X)
	(ERROR (QUOTE "illegal arg")
	       X))
      ((NULL FNSFLG)
	X)
      (T (MAPCONC
	   X
	   (FUNCTION (LAMBDA (X)
	       (COND
		 ((LITATOM X)
		   (LIST X))
		 (T (LISPXPRIN2 X T T)
		    (LISPXPRIN1 (QUOTE " isn't a function name -- ignored.
"))
		    NIL])

(GETBLOCKDEC
  [LAMBDA (FN FILE FNSONLY)
    (PROG (BLOCKS BLOCK)
          (OR FILE (SETQ FILE (LOADFNS0 FN)))
          (AND [LISTP (SETQ BLOCKS (NEWFILE2 NIL (CAR (FILECOMS FILE))
					     (QUOTE BLOCKS]
	       [SOME BLOCKS (FUNCTION (LAMBDA (X)
			 (MEMB FN (SETQ BLOCK X]
	       (RETURN (COND
			 ((NULL FNSONLY)
			   BLOCK)
			 (T (OR [AND (CAR BLOCK)
				     (SETQ BLOCKS
				       (SUBSET (CDR BLOCK)
					       (FUNCTION ATOM]
				(LIST FN])

(SCANFILE0
  [LAMBDA (DICT RECFLG)
    (COND
      (RECFLG 

          (* Called from rECOMPILE. Scans file, builds map, sets 
          DONELST to all non-defineq expressions it sees.)


	      (EVQ FNLST)
	      (EVQ VARLST)
	      (EVQ DONELST)))
    (PROG (NXT NXT1 NXT2 FNAME ADR FNADRLST (DICT0 (CDR DICT))
	       (SEPRS (GETSEPR FILERDTBL)))
          [COND
	    [(NULL DICT)
	      (AND BUILDMAPFLG (SETQ DICT (LIST 0]
	    ((AND FNLST DICT)
	      (SCANFILE1 (CDR DICT))
	      (COND
		(VARLST 

          (* Note that at this point there may or may not be some 
          functions to be scanned for. in any event, since there are 
          VARS to be obtained, we have to start scanning at the 
          beginning, although DICT can be of use to save scanning of 
          DEFINEQ's.)


			(SFPTR NIL 0))
		((OR (NULL FNLST)
		     (NULL (CAR DICT)))

          (* Either all functions were found, or else the entire file 
          having been scaaned, no point in scanning further)


		  (RETURN DICT))
		((LISTP (CAR DICT))             (* The scan stopped in the 
                                                middle of a DEFINEQ.)
		  (SFPTR NIL (CAAR DICT))
		  [AND BUILDMAPFLG (SETQ FNADRLST (LCONC NIL
							 (CAR (LAST DICT]
		  (SETQ DICT0 NIL)
		  (GO DEFQLP))
		(T                              (* Scan stopped after a compiled
                                                function.)
		   (SFPTR NIL (CAR DICT))
		   (SETQ DICT0 NIL)
		   (GO PEEKLP]
      PEEKLP
          (SETQ NXT (PEEKC))
          [SELECTQ (SETQ NXT1 (CHCON1 NXT))
		   ((40 91)                     (* Opening paren and bracket.)
		     (GO LST))
		   (COND
		     ((FMEMB NXT1 SEPRS)        (* Flush sepr chars.)
		       (READC)
		       (GO PEEKLP]
          (COND
	    ((OR (EQ (SETQ NXT (READ NIL FILERDTBL))
		     (QUOTE STOP))
		 (NULL NXT))                    (* End of file.)
	      (SETQ ADR NIL)
	      (GO OUT))
	    ((NULL (LITATOM NXT))
	      (GO PEEKLP)))                     (* Compiled function.)
          (SETQ ADR (SFPTR))
          [COND
	    (DICT0 (AND (NOT (EQP (CAAR DICT0)
				  ADR))
			(GO HELP))              (* redudnacy check)
		   (SFPTR NIL (CADAR DICT0))

          (* We know this function is not of interest, or it ould have 
          been picked up in SCANFILE1. Furthermore, we know its final 
          address, so no need to LCSKIP)


		   (SETQ DICT0 (CDR DICT0))
		   (GO PEEKLP))
	    (BUILDMAPFLG (NCONC1 DICT (SETQ FNADRLST (CONS (SFPTR)
							   (CONS NIL NXT]
          [COND
	    [[AND FNLST (OR (EQ FNLST T)
			    (MEMB NXT FNLST)
			    (SOME FNLST (FUNCTION (LAMBDA (X)
				      (TMPSUBFN NXT X]

          (* We want NXT if it is on FNLST, or a SUBFN of anything on 
          FNLST. or if FNLST, is T, i.e. load everything.)


	      (LAPRD NXT)
	      (SETQ DONELST (CONS NXT DONELST))
	      (AND (OR (EQ DFNFLG (QUOTE PROP))
		       (EQ DFNFLG (QUOTE ALLPROP)))
		   (UNSAVEDEF NXT))
	      [AND FNADRLST (RPLACA (CDR FNADRLST)
				    (SETQ ADR (SFPTR]
	      (COND
		((AND (NEQ FNLST T)
		      (NULL (SETQ FNLST (DREMOVE NXT FNLST)))
		      (NULL VARLST))
		  (GO OUT]
	    (T (LCSKIP)
	       (AND FNADRLST (RPLACA (CDR FNADRLST)
				     (SFPTR]
          (GO PEEKLP)
      LST (SETQ ADR (SFPTR))
          (READC)                               (* Flush the peeked-at paren.)
          (SETQ NXT1 (RATOM NIL FILERDTBL))
          [COND
	    ((NEQ NXT1 (QUOTE DEFINEQ))
	      (COND
		(VARLST (GO VARLP))
		(T (GO LST1]                    (* We have found a DEFINEQ.)
          (AND DICT0 (NOT (EQP (CAAR DICT0)
			       ADR))
	       (GO HELP))

          (* Double check. Now we know that CAR of DICT0 corrresponds 
          to this DEFINEQ. We process DEFINEQ's the same when there 
          are functions to be found, i.e. when FNLST is non-NIL, as 
          when there aren't any, on the grounds that it takes about as 
          long to do many little SKREAD's as one big SKREAD, and this 
          way we also get to build the map.)


          [COND
	    ((CADAR DICT0)

          (* This entire DEFINEQ was scanned, and ADR is the address 
          of the first character after it.
          SFPTR and go on, i.e. dont have to do SKREAD Note thatthis 
          applies even if we are looking for functions,, i.e. FNLST 
          not NIL, because in this case all function of interest would 
          have been picked up by SCANFILE1.)


	      (SFPTR NIL (CADAR DICT0))
	      (SETQ DICT0 (CDR DICT0))
	      (GO PEEKLP))
	    (DICT0 

          (* The scan previously stopped in the middle of a DEFINEQ.
          The address of the end of the scan, i.e. 
          (CAAR DICT), corresponds to the character after the last 
          function scanned.)


		   [SFPTR NIL (COND
			    ((LISTP (CAR DICT))
			      (CAAR DICT))
			    (T 

          (* Another redudancy check. If the entire DEFINEQ had been 
          processed, then CADAR of DICT0 would be non-NIL, and caught 
          above. Therefore, processing stopped in the middle of the 
          DEFINEQ, and CAR of DICT should be a list.)


			       (GO HELP]
		   [AND BUILDMAPFLG (SETQ FNADRLST (LCONC NIL (CAR DICT0]
		   (SETQ DICT0 NIL)
		   (GO DEFQLP))
	    (BUILDMAPFLG (SETQ FNADRLST (TCONC NIL ADR))
			 (TCONC FNADRLST NIL)
			 (NCONC1 DICT (CAR FNADRLST]
          (GO DEFQLP)
      LST1                                      (* Flush this expression.)
          (SFPTR NIL ADR)
          (SKREAD)
          (GO PEEKLP)
      DEFQLP
          (SELECTQ (SETQ NXT1 (RATOM NIL FILERDTBL))
		   (%)                          (* Closes DEFINEQ.)
		       (AND FNADRLST (RPLACA (CDAR FNADRLST)
					     (SFPTR)))

          (* FNADRLST is a ONC format list, hence want to RPLACA CDAR, 
          not just CDR.)


		       (GO PEEKLP))
		   (%] (GO HELP))
		   [(%( %[)
		     (SETQ ADR (SUB1 (SFPTR)))
                                                (* The address of the position 
                                                of the left paren.)
		     (SETQ FNAME (READ NIL FILERDTBL))
		     (AND FNADRLST (TCONC FNADRLST (LIST FNAME ADR]
		   (GO HELP))
          (SFPTR NIL ADR)

          (* Positions file pointer at left paren or brakcet so if 
          fn/def pair is closed bby either right paren or bracket, 
          read or skread will do the right thing.)


          (COND
	    [(AND FNLST (OR (EQ FNLST T)
			    (MEMB FNAME FNLST)))
	      (SETQ DONELST (NCONC (DEFINE (LIST (READ NIL FILERDTBL)))
				   DONELST))
	      (AND (NEQ FNLST T)
		   (SETQ FNLST (DREMOVE FNAME FNLST]
	    (T (SKREAD)))
          (AND FNADRLST (RPLACD (CDADR FNADRLST)
				(SFPTR)))

          (* FNADRLST is a TCONC format, so its CADR is its last 
          element. This is supposed to be of the form 
          (FN ADRX . ADRY). This adds the ADRY.)


          (COND
	    ((AND (NULL FNLST)
		  (NULL VARLST))

          (* Actually this check only need be made in the case that a 
          function was actually read, i.e. second clause in above 
          COND, but its cheap enough.)


	      [SETQ ADR (LIST (ADD1 (SFPTR]
	      (GO OUT)))
          (GO DEFQLP)
      VARLP
          (SETQ NXT NIL)
          (SETQ NXT2 (RATOM NIL FILERDTBL))     (* Corresponds to CADR of the 
                                                expression. in the file)
          (SFPTR NIL ADR)                       (* file pointer now points to 
                                                just before the expression..)
          (COND
	    ((EQ VARLST T)
	      (GO YES))
	    [(EQ VARLST (QUOTE VARS))
	      (COND
		((OR (EQ NXT1 (QUOTE RPAQQ))
		     (EQ NXT1 (QUOTE RPAQ)))
		  (GO YES]
	    ([SOME (LISTP VARLST)
		   (FUNCTION (LAMBDA (X)
		       (COND
			 ((OR (EQ NXT1 X)
			      (EQ NXT2 X)))
			 ((LISTP X)             (* edit pattern)
			   [COND
			     ((NULL NXT)

          (* The expression on VARLST is a list, which is interpred as 
          an edit pattern, therefore we have to read the entire 
          expression from the file. Note that this is only done once, 
          i.e. if there are several patterns on VARLST, the expression 
          from the file is read only once.)


			       (SETQ NXT (READ NIL FILERDTBL]
			   (EDIT4E X NXT]
	      (GO YES)))                        (* expression NOT one of those 
                                                specified by VARLST.)
          (COND
	    ((EQ NXT1 (QUOTE FILECREATED))
	      [SETQ FILECREATEDLST (NCONC1 FILECREATEDLST
					   (CDR (OR NXT (READ NIL FILERDTBL]
                                                (* So that ADDFILE will have 
                                                necessary information when it is
                                                called.)
	      )
	    ((NULL NXT)

          (* If NXT is non-null, means for some eason it had to be 
          READ, e.g. there was an dit pattern in VARLST.
          IN this case not necessary to SKREAD since we have already 
          passed over that expression.)


	      (SKREAD)))
          (GO PEEKLP)
      YES                                       (* This IS one of the 
                                                expressions specified by 
                                                VARLST.)
          [COND
	    ((NULL NXT)                         (* For certain flavors of 
                                                VARLST, the expresion has 
                                                already been read.)
	      (SETQ NXT (READ NIL FILERDTBL]
          (SETQ DONELST (CONS NXT DONELST))
          (COND
	    ((NULL RECFLG)

          (* RECFLG=T on calls from RECOMPILE in which case it just 
          wants to obtain the expressions, not evaluate them.
          This option may at some point be moved out to be user 
          accessible)


	      (EVAL NXT)))
          (GO PEEKLP)
      OUT (RETURN (AND DICT (RPLACA DICT ADR)))
      HELP(HELP
	    (CONCAT
	      (QUOTE "something is wrong with either the filemap or format of ")
	      (INPUT))
	    (QUOTE "sysout and inform W. Teitelman."])

(SCANFILE1
  [LAMBDA (DICT LST)
    (AND (NULL LST)
	 (SETQ LST FNLST))

          (* looks up functions on FNLST1, if given, but removes them 
          from FNLST. This so can be called directly from LOADFNS.)


    (PROG (($$LST1 DICT)
	   X FNAME TEM)

          (* This prog is the result of dwimifying the following clisp 
          expression: (FOR X IN DICT BIND FNAME TEM DO 
          (COND ((NLISTP (SETQ FNAME (CDDR X))) 
          (* compiled definition.) (COND 
          ((OR (EQ LST T) (MEMB FNAME LST) 
          (SOME LST (FUNCTION (LAMBDA (Y) 
          (TMPSUBFN FNAME Y))))) (SFPTR NIL 
          (CAR X)) (LAPRD FNAME) (AND (OR 
          (EQ DFNFLG (QUOTE PROP)) (EQ DFNFLG 
          (QUOTE ALLPROP))) (UNSAVEDEF FNAME)) 
          (SCANFILE2 FNAME)))) (T (* DEFINEQ.) 
          (FOR Y IN (CDDR X) DO (COND ((OR 
          (EQ LST T) (MEMB (CAR Y) LST)) 
          (SFPTR NIL (CADR Y)) (COND ((NEQ 
          (CAR Y) (CAR (SETQ TEM (READ NIL FILERDTBL)))) 
          (ERROR (QUOTE "filemap does not agree with contents of") 
          FILE T))) (DEFINE (LIST TEM)) (SCANFILE2 
          (CAR Y)))) WHILE LST))) WHILE LST))


      $$LP(SETQ X (CAR $$LST1))
          (COND
	    ((OR (NLISTP $$LST1)
		 (NOT LST))
	      (RETURN NIL)))
          (COND
	    [(NLISTP (SETQ FNAME (CDDR X)))     (* compiled definition.)
	      (COND
		([OR (EQ LST T)
		     (MEMB FNAME LST)
		     (SOME LST (FUNCTION (LAMBDA (Y)
			       (TMPSUBFN FNAME Y]
		  (SFPTR NIL (CAR X))
		  (LAPRD FNAME)
		  (AND (OR (EQ DFNFLG (QUOTE PROP))
			   (EQ DFNFLG (QUOTE ALLPROP)))
		       (UNSAVEDEF FNAME))
		  (SCANFILE2 FNAME]
	    (T                                  (* DEFINEQ.)
	      (FOR Y IN (CDDR X)
		 DO
		  [COND
		    ((OR (EQ LST T)
			 (MEMB (CAR Y)
			       LST))
		      (SFPTR NIL (CADR Y))
		      (COND
			([NEQ (CAR Y)
			      (CAR (SETQ TEM (READ NIL FILERDTBL]
			  (ERROR
			    (QUOTE "filemap does not agree with contents of")
			    FILE T)))
		      (DEFINE (LIST TEM))
		      (SCANFILE2 (CAR Y]
		 WHILE LST)))
      $$ITERATE
          (SETQ $$LST1 (CDR $$LST1))
          (GO $$LP])

(SCANFILE2
  [LAMBDA (FNAME)
    (SETQ DONELST (CONS FNAME DONELST))
    (AND (NEQ FNLST T)
	 (SETQ FNLST (DREMOVE FNAME FNLST])

(TMPSUBFN
  [LAMBDA (X FN)

          (* New version of SUBFN, to be moved into misc and supplant 
          the old version in COMPILE. Had to MOVE it to misc for 
          LOADFNS along with LCSKIP; rewrote it along the way to use 
          string fns. it's much more economical with STORAGE, and 
          rather faster in the cases where the first STRPOS succeeds.
          for now it's inside the LOADFNS block.)


    (AND (STRPOS FN X)
	 (PROG [(NX (ADD1 (NCHARS X)))
		(N (ADD1 (NCHARS FN]
	   LP  (OR (STRPOS (QUOTE "A0ZZZ")
			   X N (QUOTE Z)
			   T)
		   (RETURN))                    (* Anchored match starting at 
                                                position N, z a wild card.)
	       (SETQ N (IPLUS N 5))
	       (COND
		 ((EQ N NX)
		   (RETURN T)))
	       (GO LP])
)
  [RPAQQ LOADFNSBLOCKS ((LOADFNSBLOCK LOADFNS LOADFNS1 SCANFILE0 SCANFILE1 
				      SCANFILE2 TMPSUBFN
				      (LOCALFREEVARS FNLST VARLST DONELST FILE)
				      (ENTRIES LOADFNS SCANFILE0 TMPSUBFN]
[DECLARE: DONTEVAL@LOAD DOEVAL@COMPILE DONTCOPY
  (BLOCK: LOADFNSBLOCK LOADFNS LOADFNS1 SCANFILE0 SCANFILE1 SCANFILE2 TMPSUBFN
	  (LOCALFREEVARS FNLST VARLST DONELST FILE)
	  (ENTRIES LOADFNS SCANFILE0 TMPSUBFN))
]
(DECLARE: DONTCOPY
  (FILEMAP (NIL (423 21374 (LOADFROM 435 . 659) (LOADBLOCK 663 . 947) (LOADVARS
951 . 1025) (LOADFNS 1029 . 6156) (LOADFNS0 6160 . 6819) (LOADFNS1 6823 .
7373) (GETBLOCKDEC 7377 . 7849) (SCANFILE0 7853 . 18219) (SCANFILE1 18223
. 20409) (SCANFILE2 20413 . 20545) (TMPSUBFN 20549 . 21371)))))
STOP
