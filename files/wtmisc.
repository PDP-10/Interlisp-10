(FILECREATED "15-OCT-74 23:14:59" WTMISC.;37 36113  

     changes to:  UNSAVED1

     previous date: "10-OCT-74 22:42:17" <LISP>WTMISC.;2)


  (LISPXPRINT (QUOTE WTMISCCOMS)
	      T T)
  [RPAQQ WTMISCCOMS
	 ((FNS * WTMISCFNS)
	  [P (COND ((EQ (CAR (QUOTE LISPXHISTORY))
			(QUOTE NOBIND))
		    (MAP2C (QUOTE (APPLY APPLY* RPLACA RPLACD STKNTH STKNAME CHARACTER STKARG 
					 NEWSTKARG CHCON UNPACK READ READP ADDPROP ATTACH 
					 DREMOVE DSUBST NCONC NCONC1 PUT PUTD REMPROP RPLACA 
					 RPLACD SET PRINT PRIN1 PRIN2 SPACES TERPRI PUTHASH 
					 QUOTE FNCLOSER FNCLOSERA FNCLOSERD))
			   (QUOTE (BLKAPPLY BLKAPPLY* FRPLACA FRPLACD FSTKNTH FSTKNAME 
					    FCHARACTER FSTKARG NEWFSTKARG DCHCON DUNPACK 
					    LISPXREAD LISPXREADP /ADDPROP /ATTACH /DREMOVE 
					    /DSUBST /NCONC /NCONC1 /PUT /PUTD /REMPROP /RPLACA 
					    /RPLACD SAVESET LISPXPRINT LISPXPRIN1 LISPXPRIN2 
					    LISPXSPACES LISPXTERPRI /PUTHASH * /FNCLOSER 
					    /FNCLOSERA /FNCLOSERD))
			   (FUNCTION MOVD))
		    (SAVEDEF (QUOTE EVALQT))
		    (DEFINEQ [EVALQT (LAMBDA NIL (PROG (TEM)
						       (COND
							 ((EQ CLEARSTKLST T)
							  (* Follwoing control-d Do a CLEARSTK. 
							     Standard case.)
							  (CLEARSTK))
							 (T (* BREAK1, ERRORX2 SAVESET, and a 
							       few other system functions store 
							       frames on this list that can be 
							       eliminated after a control-D.)
							    (MAPC CLEARSTKLST
								  (FUNCTION RELSTK))
							    (SETQ CLEARSTKLST NIL)))
						       (RESETRESTORE)
						       LP
						       (PROMPTCHAR (QUOTE _)
								   T)
						       (LISPX (LISPXREAD T))
						       (GO LP]
			     (LISPX [LAMBDA (LISPXX)
					    (PRINT (COND ([COND [(LISTP LISPXX)
								 (OR (EQ (CAR LISPXX)
									 (QUOTE LAMBDA))
								     (EQ (CAR LISPXX)
									 (QUOTE NLAMBDA]
								((LITATOM LISPXX)
								 (* READP would fail if there 
								    was type-ahead. This isnt 
								    quite as good as LISPXREADP 
								    would be because it doesnt 
								    do the right thing if a 
								    space is typed before a 
								    c.r.)
								 (NEQ (PEEKC T)
								      (QUOTE %
]
							  (APPLY LISPXX (LISPXREAD T)))
							 (T (EVAL LISPXX)))
						   T])
			     (LISPX/ [LAMBDA (X)
					     X])
			     [LOWERCASE (LAMBDA (FLG)
						(PROG1 LCASEFLG (RAISE (NULL FLG))
						       (RPAQ LCASEFLG FLG]
			     (FILEPOS [LAMBDA NIL T]))
		    (SETQQ CHCONLST
			   (NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL 
				NIL NIL NIL))
		    (SETQQ LISPXREADFN READ)
		    (SETQQ CLISPTRANFLG CLISP% )
		    (SETQ RAISEFLG T)
		    (MAPC (QUOTE (DFNFLG LISPXHISTORY EDITHISTORY LISPXFNS LISPXCOMS LISPXHIST 
					 LISPXBUFS REREADFLG CHCONLST1 CHCONLST2 READBUF 
					 LISPXPRINTFLG LCASEFLG CLISPFLG CLISPARRAY NOFIXFNSLST 
					 NOFIXVARSLST USERWORDS SPELLINGS1 SPELLINGS2 
					 SPELLINGS3 EDITCALLS P.A.STATS EDITUNDOSTATS 
					 EDITUNDOSAVES SPELLSTATS1))
			  (FUNCTION SET))
		    (SETQ CTRLU (GETP (QUOTE CTRLU)
				      (QUOTE COREVAL)))
		    (SETQQ HISTSTR0 "<c.r.>")
		    (SETQQ HISTSTR1 "see readline")
		    (SETQQ HISTSTR2 "repeat")
		    (MAPC (QUOTE ((STORAGE PRIN1 LISPXPRIN1)
				  (STORAGE TERPRI LISPXTERPRI)
				  (STORAGE SPACES LISPXSPACES)
				  (TIME PRIN1 LISPXPRIN1)
				  (TIME SPACES LISPXSPACES)
				  (TIME PRINT LISPXPRINT)
				  (DEFC PRINT LISPXPRINT)
				  (DEFC PUTD /PUTD)
				  (DEFC PUT /PUT)
				  (DOLINK FNCLOSERD /FNCLOSERD)
				  (DOLINK FNCLOSERA /FNCLOSERA)
				  (DEFLIST PUT /PUT)
				  (SAVEDEF1 PUT /PUT)
				  (MKSWAPBLOCK PUTD /PUTD)))
			  (FUNCTION (LAMBDA (X)
					    (APPLY (QUOTE CHANGENAME)
						   X]
	  (BLOCKS * WTMISCBLOCKS)
	  (PROP BLKLIBRARYDEF LISPXWATCH)
	  (DECLARE: DONTEVAL@LOAD DOEVAL@COMPILE DONTCOPY COMPILERVARS (ADDVARS (NLAMA 
										  RESETSAVE 
										   RESETLST)
										(NLAML RESETVAR 
										  RESETFORM]
  (RPAQQ WTMISCFNS
	 (CHANGENAME CHANGENAME1 CHNGNM DEFINE FNCHECK LISPXSTATS LISPXSTATS1 LISPXWATCH 
		     MAPRINT PRINTARRAY RESETFORM RESETLST RESETRESTORE RESETSAVE RESETVAR LOAD 
		     STATINIT FILEDATE READLINE CLBUFS BKBUFS PROMPTCHAR RAISEP FNTYP1 
		     UNSAVEDEF UNSAVED1))
(DEFINEQ

(CHANGENAME
  [LAMBDA (FN FROM TO)
    (COND
      ((CHANGENAME1 (GETD FN) FROM TO)
	(AND FILEPKGFLG (EXPRP FN)
	     (NEWFILE? FN))
	FN])

(CHANGENAME1
  [LAMBDA (DEF X Y)                             (* Included in assemble because 
                                                it uses LOC and VAG.)
    (COND
      ((EXPRP DEF)
	(NLSETQ (ESUBST Y X DEF)))
      ((OR (CCODEP DEF)
	   (SWPARRAYP DEF))
	(PROG ((ADR (FIRSTLIT DEF))
	       (END (LASTLIT+1 DEF))
	       Z V TEM)
	  LP  (COND
		((EQP ADR END)
		  (RETURN V)))
	      (SETQ Z (FNOPENRA DEF ADR))
	      (COND
		[(NEQ (SETQ TEM (FNOPENRD DEF ADR))
		      (VAG 0))                  (* Block compiled function -
                                                tight link.)
		  (COND
		    ((EQ TEM X)
		      (DOLINK DEF ADR Y FN)
		      (SETQ V T]
		((COND
		    ((ATOM X)
		      (EQ X Z))
		    (T (EQUAL X Z)))
		  (/FNCLOSERA DEF ADR Y)
		  (SETQ V T))
		((ATOM Z)
		  (AND (EQ (NTHCHAR Z -5)
			   (QUOTE A))
		       (EQ (NTHCHAR Z -4)
			   0)
		       (CHANGENAME1 (GETD Z)
				    X Y)
		       (SETQ V T)))
		((NLISTP Z)                     (* E.g. A string.)
		  NIL)
		[(AND (ATOM (CAR Z))
		      (EQ (NTHCHAR (CAR Z)
				   -5)
			  (QUOTE A))
		      (EQ (NTHCHAR (CAR Z)
				   -4)
			  0))
		  (COND
		    ((CHANGENAME1 (GETD (CAR Z))
				  X Y)
		      (SETQ V T]
		((CHANGENAME1 Z X Y)
		  (SETQ V T)))
	      (SETN ADR (ADD1 ADR))
	      (GO LP])

(CHNGNM
  [LAMBDA (FN OLD FLG)
    (PROG (NEW DEF X Y Z)
          (SETQ FN (FNCHECK FN NIL T))

          (* No error, becuase maybe OLD isnt efined yet, e.g. BREAK 
          ((FOO IN FUM)) where FOO not defined.)


          (SETQ OLD (OR (FNCHECK OLD T T) OLD))
          (SETQ DEF (GETD (OR (GETP FN (QUOTE ADVISED))
			      (GETP FN (QUOTE BROKEN))
			      FN)))
          (SETQ NEW (PACK (LIST OLD (QUOTE -IN-)
				    FN)))
          [COND
	    (FLG (AND (NULL (STKPOS NEW))
		      (/PUTD NEW))
		 [COND
		   ([SETQ Z (/DREMOVE OLD (GETP FN (QUOTE NAMESCHANGED]
		     (/PUT FN (QUOTE NAMESCHANGED)
			   Z))
		   (T (/REMPROP FN (QUOTE NAMESCHANGED]
		 (/REMPROP NEW (QUOTE ALIAS))
		 (SETQ Y OLD)
		 (SETQ X NEW))
	    (T (SETQ Y NEW)
	       (SETQ X OLD)
	       (COND
		 ((AND (MEMB OLD (GETP FN (QUOTE NAMESCHANGED)))
		       (GETD NEW)
		       (GETP NEW (QUOTE ALIAS)))
		   (RETURN NEW]
          [COND
	    [(NULL DEF)
	      (RETURN (CONS DEF (QUOTE (NOT DEFINED]
	    ((NULL (RESETVAR NOLINKMESS T (CHANGENAME1 DEF X Y)))
	      (RETURN (CONS X (APPEND (QUOTE (not found in))
				      (LIST FN]
          [COND
	    ((NULL FLG)
	      (COND
		((NULL (SETQ DEF (GETD OLD)))
		  (SETQ DEF (LIST (QUOTE NLAMBDA)
				  (GENSYM)))
		  (PRINT (CONS OLD (QUOTE (was undefined)))
			 T T)))
	      (/PUTD NEW (SAVED OLD NIL DEF OLD))
	      (/ADDPROP FN (QUOTE NAMESCHANGED) OLD)
	      (/PUT NEW (QUOTE ALIAS)
		    (CONS FN OLD]
          (RETURN Y])

(DEFINE
  [LAMBDA (X)
    (MAPCAR X
	    (FUNCTION (LAMBDA (X)
		(PROG (CX DEF)
		      (COND
			((NLISTP X)
			  (ERROR (QUOTE "incorrect defining form")
				 X)))
		      (SETQ CX (CAR X))
		      [SETQ DEF (COND
			  ((NULL (CDDR X))
			    (CADR X))
			  (T (CONS (QUOTE LAMBDA)
				   (CDR X]
		      (COND
			((OR (NULL DFNFLG)
			     (EQ DFNFLG T))
			  (COND
			    [(GETD CX)
			      (VIRGINFN CX T)
			      (COND
				((NULL DFNFLG)
				  (LISPXPRINT (CONS CX (QUOTE (redefined)))
					      T T)
				  (SAVEDEF CX]
			    ((GETP CX (QUOTE CLISPWORD))
			      (LISPXPRINT (CONS CX
						(QUOTE (defined, therefore 
								 disabled
							  in CLISP)))
					  T T)))
			  (COND
			    (DWIMFLG (ADDSPELL CX)))
			  (COND
			    (FILEPKGFLG (NEWFILE? CX)))
			  (/PUTD CX DEF))
			(T 

          (* DFNFLG is PROP or ALLPROP. However, treat anything else 
          the same as PROP.)


			   (AND DWIMFLG (ADDSPELL CX 0))
			   (/PUT CX (QUOTE EXPR)
				 DEF)))
		      (RETURN CX])

(FNCHECK
  [LAMBDA (FN NOMESSFLG SPELLFLG PROPFLG)
    (PROG (X)
      TOP (COND
	    ((NOT (LITATOM FN))
	      (GO ERROR))
	    ((GETD FN))
	    ((GETP FN (QUOTE EXPR))
	      (AND (NULL PROPFLG)
		   (GO ERROR)))
	    ((AND DWIMFLG [CAR (NLSETQ (SETQ X (MISSPELLED?
					   FN 70 USERWORDS SPELLFLG NIL
					   (FUNCTION GETD]
		  (NEQ X FN))
	      (SETQ FN X)
	      (GO TOP))
	    (T (GO ERROR)))
          (AND DWIMFLG (ADDSPELL FN 0))
          (RETURN FN)
      ERROR
          (COND
	    (NOMESSFLG (RETURN NIL)))
          (ERROR FN (QUOTE "not a function")
		 T])

(LISPXSTATS
  [LAMBDA (FLG)                                 (* Used by LISPX.
                                                Included in ASSEMBLE because of 
                                                LOC/VAG.)
    (PROG (X)
          [SETQ X
	    (NCONC
	      [MAPCONC
		SYSTATS
		(FUNCTION (LAMBDA (X)
		    (AND
		      [OR
			(NLISTP X)
			(AND
			  (CDR X)
			  (NOT
			    (ZEROP (CAR (SETQ X
					  (CONS (OPENR (LOC (CAAR X)))
						(CDR X]
		      (LIST X]
	      (LIST NIL (LISPXSTATS1 (IPLUS CONSOLETIME (IDIFFERENCE
					      (CLOCK 0)
					      CONSOLETIME0))
				     (QUOTE (CONSOLE TIME)))
		    (LISPXSTATS1 EDITIME (QUOTE (OF IT IN THE EDITOR)))
		    NIL
		    (LISPXSTATS1 (IPLUS CPUTIME (IDIFFERENCE (CLOCK 2)
							     CPUTIME0))
				 (QUOTE (CPU TIME)))
		    (LISPXSTATS1 (OPENR (LOC FIXTIME))
				 (QUOTE (OF IT IN DWIM]
          (RETURN (COND
		    (FLG X)
		    (T [MAPC X (FUNCTION (LAMBDA (X)
				 (AND X (LISPXPRIN1 X T))
				 (LISPXTERPRI T]
		       T])

(LISPXSTATS1
  [LAMBDA (X Y)
    (SETQ X (IQUOTIENT X 1000))
    (CONS (PACK (LIST (IQUOTIENT X 3600)
		      (QUOTE :)
		      (IQUOTIENT (IREMAINDER X 3600)
				 60)
		      (QUOTE :)
		      (IREMAINDER X 60)))
	  Y])

(LISPXWATCH
  [LAMBDA (STAT N)

          (* The functios LISPXWATCH, LISPXSTATS, LISPXSTATS1, 
          STATINIT, PRINTARRAY, CHNGNM, CHANGENAME, CHANGENAME1 are 
          included in BOOTSTRAP because they are machine dependent, 
          and normally would be in ASSEMBLE, but they are 'warrens' 
          functions. The other functions are included in bootstrap 
          because they need to be loaded early, and are not in basic 
          or misc again because they are warrens functions.)


    (AND (ARRAYP STAT)
	 (VAG (CLOSER (LOC STAT)
		      (IPLUS (OPENR (LOC STAT))
			     (OR N 1])

(MAPRINT
  [LAMBDA (LST FILE LEFT RIGHT SEP PFN LSPXPRNTFLG)
    (RESETVAR LISPXPRINTFLG LSPXPRNTFLG (PROG NIL
					      [COND
						((NULL PFN)
						  (SETQ PFN
						    (FUNCTION LISPXPRIN1]
					      [COND
						((NULL SEP)
						  (SETQ SEP (QUOTE % ]
					      (COND
						(LEFT (LISPXPRIN1 LEFT FILE)))
					      (COND
						((NULL LST)
						  (GO EXIT)))
					  LP  (APPLY* PFN (CAR LST)
						      FILE)
					      (COND
						((NULL (SETQ LST (CDR LST)))
						  (GO EXIT))
						((NLISTP LST)
						  (LISPXPRIN1 (QUOTE " . ")
							      FILE)
						  (APPLY* PFN LST FILE)
						  (GO EXIT)))
					      (LISPXPRIN1 SEP FILE)
					      (GO LP)
					  EXIT(COND
						(RIGHT (LISPXPRIN1 RIGHT FILE])

(PRINTARRAY
  [LAMBDA (V)                                   (* Used by prettydef.
                                                Included in asemble because it 
                                                uses LOC and VAG.)
    (PROG (A N M N1 FLG)
          [COND
	    ([OR (NOT (LITATOM V))
		 (NOT (ARRAYP (SETQ A (EVALV V (QUOTE PRINTARRAY]
	      (RETURN (HELP (CONS V (QUOTE (NOT ARRAY]
          [PRINT
	    (LIST (QUOTE SETQ)
		  V
		  (LIST (QUOTE READARRAY)
			(SETQ N (ARRAYSIZE A))
			(SETQ N1
			  (IPLUS [LOC (CAR (VAG (ADD1 (LOC A]
				 -2]            (* The -2 is because it is 
                                                relative to beginning of ARRAY.)
          (PRIN1 (QUOTE %())
          (SETQ M 1)
      LP  (COND
	    ((NOT (IGREATERP M N))
	      (PRINT (ELT A M))
	      (AND (IGREATERP M N1)
		   (ELTD A M)
		   (SETQ FLG T))
	      (SETQ M (ADD1 M))
	      (GO LP))
	    ((NULL (PRINT FLG))
	      (GO OUT)))
          (SETQ M (ADD1 N1))
      LP1 (COND
	    ((NOT (IGREATERP M N))
	      (PRINT (ELTD A M))
	      (SETQ M (ADD1 M))
	      (GO LP1)))
      OUT (PRIN1 (QUOTE %)))
          (RETURN A])

(RESETFORM
  [NLAMBDA (RESETX RESETY RESETZ)
    (PROG (MACROX MACROY)

          (* Similar to RESETVAR. Permits evaluation of a form while 
          resetting a system state, and provides for the system to be 
          returned to that state after evaluation.
          RESETX is a form, e.g. (OUTPUT T), 
          (PRINTLEVEL 2) etc. RESETX is evaluated and its value saved.
          Then RESETY is evaaluated under errorset protection and then 
          (CAR RESETX) is applied to the result of the evaluation of 
          X. If an error occurs during the evaluation of FORM, the 
          effect of RESETX is still 'undone', and in addition RESETZ 
          is evaluated, and then an error is generated.
          If a control-D occurs during the evaluation of FORM, the 
          effect of RESETX is still undone by EVALQT because its 
          effects are saved on RESETVARSLST.)


          (SETQ MACROX (SETQ RESETVARSLST (CONS (LIST (LIST (CAR RESETX)
							    (EVAL RESETX)))
						RESETVARSLST)))
          (SETQ MACROY (ERRORSET RESETY (QUOTE INTERNAL)))
          (SETQ RESETVARSLST (CDR MACROX))
          (APPLY (CAR (SETQ MACROX (CAAR MACROX)))
		 (CDR MACROX))
          [COND
	    (MACROY (RETURN (CAR MACROY]
          (ERROR!])

(RESETLST
  [NLAMBDA RESETX

          (* RESETLST and RESETSAVE together permit the user to 
          combine the effects of several RESETVAR's and RESETFORM's 
          under one function. RESETLST acts like an ERRORSET which 
          takes an indefinite number of forms, i.e. like PROGN, and 
          errorset protects them, and restores all RESETSAVE's 
          performed while inside of RESETLST.
          It also adds the appropriate entries to RESETVARSLST so that 
          control-D will cause restoration.
          RESETLST compiles open.)


    (PROG ((RESETVARSLST0 RESETVARSLST)
	   RESETY RESETZ)
          (SETQ RESETVARSLST0 RESETVARSLST)
          (SETQ RESETY (ERRORSET (CONS (QUOTE PROGN)
				       RESETX)
				 (QUOTE INTERNAL)))
          (RESETRESTORE RESETVARSLST0)
          [COND
	    (RESETY (RETURN (CAR RESETY]
          (ERROR!])

(RESETRESTORE
  [LAMBDA (RESETVARSLST0)                       (* Goes down RESETVARSLST doing 
                                                restoration until it gets to NIL
                                                or RESETVARSLST0.)
    (PROG (RESETZ)
      LP  (COND
	    ((AND RESETVARSLST (NEQ RESETVARSLST RESETVARSLST0))
	      (SETQ RESETZ (CAR RESETVARSLST))
	      (SETQ RESETVARSLST (CDR RESETVARSLST))
	      [COND
		((LISTP (CAR RESETZ))
		  (APPLY (CAAR RESETZ)
			 (CDAR RESETZ)))
		(T (FRPLACA (CAR RESETZ)
			    (CDR RESETZ]
	      (GO LP])

(RESETSAVE
  [NLAMBDA RESETX

          (* for use under a RESETLST. If RESETX is atmic, like 
          RESETVAR, otherwise like RESETFORM, i.e. performs the 
          resetting and saving associated with these functions.
          The restoration aad errorset protectionis done by RESETLST.
          Note that its value is not any particularly useful quanitty.
          When used a la RESETFORM, can take a second argument whose 
          value (computed before firt argument) is restoration form, 
          e.g. (RESETSAVE (SETSEPR --) (LIST 
          (QUOTE SETSEPR) (GETSEPR))) (RESETSAVE NIL form) means just 
          add value of form to RESETVARLST>)


    (SETQ RESETVARSLST
      (CONS [COND
	      [(AND (CAR RESETX)
		    (ATOM (CAR RESETX)))
		(PROG1 (CONS (CAR RESETX)
			     (CAAR RESETX))
		       (FRPLACA (CAR RESETX)
				(EVAL (CADR RESETX]
	      (T (LIST (COND
			 [(CDR RESETX)
			   (PROG1 (EVAL (CADR RESETX))
				  (EVAL (CAR RESETX]
			 (T (LIST (CAAR RESETX)
				  (EVAL (CAR RESETX]
	    RESETVARSLST])

(RESETVAR
  [NLAMBDA (RESETX RESETY RESETZ)
    (PROG (MACROX MACROY)

          (* Permits evaluation of a form while resetting a top level 
          variable, and provides for the variable to be automatcally 
          restored after valuation. In this way, the user pays when he 
          wants to 'rebind' a globalvariable, but does not have to pay 
          for the possiblity, as would be the case if variables such 
          as DFNFLG, LISPXHISTORY, etc. were not global, i.e. were 
          looked up. In the event of a control-D, or control-C 
          reenter, the variabes will still be restored by EVALQT.
          Note that STKEVALs will not do the right t on variables 
          reset by RESETVAR.)


          (SETQ MACROX (SETQ RESETVARSLST (CONS (CONS RESETX (CAR RESETX))
						RESETVARSLST)))
          (SETQ MACROY (ERRORSET (LIST (QUOTE PROGN)
				       (LIST (QUOTE RPLACA)
					     (LIST (QUOTE QUOTE)
						   RESETX)
					     RESETY)
				       RESETZ)
				 (QUOTE INTERNAL)))
          (FRPLACA (CAAR MACROX)
		   (CDAR MACROX))
          (SETQ RESETVARSLST (CDR MACROX))
          [COND
	    (MACROY (RETURN (CAR MACROY]
          (ERROR!])

(LOAD
  [LAMBDA (FILE LDFLG PRINTFLG)
    (RESETLST (RESETSAVE DFNFLG LDFLG)
	      (RESETSAVE FILECREATEDLST NIL)
	      (PROG (LOADA [PRLST (MAPCAR PRETTYTYPELST
					  (FUNCTION (LAMBDA (X)
					      (CONS (CAR X)
						    (CAAR X]
			   FIRSTLD FILEMAP FNADRLST ADR)
		    (COND
		      ((OPENP FILE (QUOTE INPUT))
			(CLOSEF FILE)))
		    (RESETSAVE NIL (LIST (QUOTE INPUT)
					 (INFILE FILE)))
		    (SETQ FILE (INPUT))
		    [AND LISPXHIST (COND
			   ((SETQ LOADA (FMEMB (QUOTE SIDE)
					       LISPXHIST))
			     (FRPLACA (CADR LOADA)
				      -1))
			   (T (LISPXPUT (QUOTE SIDE)
					(LIST -1)
					NIL LISPXHIST]

          (* So that UNDOSAVE will keep saving regardless of how many 
          undosaves are involved)


		    (SETQ FIRSTLD (READ NIL FILERDTBL))
                                                (* Used by ADDFILE.)
		    (SFPTR FILE 0)
		    (AND BUILDMAPFLG [NOT (AND USEMAPFLG (EQ (CAR FIRSTLD)
							     (QUOTE FILECREATED)
							     )
					       (NUMBERP (CADDDR FIRSTLD]
			 (SETQ FILEMAP (TCONC NIL NIL)))

          (* If there is a number there, means there is already a map 
          on the file, so no need to build one.)


		LP  (SETQ LOADA (RATOM NIL FILERDTBL))
		    (SETQ ADR (SFPTR FILE))
		    (SELECTQ LOADA
			     ((STOP NIL)
			       (SETQ FILE (CLOSEF FILE))
			       (COND
				 (FILEPKGFLG (ADDFILE FILE T PRLST 
						      FILECREATEDLST)

          (* do not want any functions or variables added to 
          CHANGEDFNSLST or CHANGEDVARSLST as a resut of being mentiond 
          in this file to remain on CHANGEDFNSLST or CHANGEDVARSLST.
          Also, we want functions or variables mentioned earlier to be 
          deleted if they are taken care of by this file.
          The extra argument to ADDFILE allows it to restore each 
          CHANGEDLST to the intersection of its current value and its 
          previous value.)


					     ))
			       [AND FILEMAP (/PUT (NAMEFIELD FILE T)
						  (QUOTE FILEMAP)
						  (CONS FILE (CAR FILEMAP]
			       (RETURN FILE))
			     ((%( %[)
			       (SETQ ADR (SUB1 ADR))
			       (COND
				 ((EQ (RATOM NIL FILERDTBL)
				      (QUOTE DEFINEQ))
				   [COND
				     (FILEMAP (SETQ FNADRLST (TCONC NIL ADR))
					      (TCONC FNADRLST NIL)
					      (TCONC FILEMAP (CAR FNADRLST]
				   (GO DEFQLP)))
			       (SFPTR FILE ADR)
			       (SETQ LOADA (EVAL (READ NIL FILERDTBL)))
			       (GO LP1))
			     NIL)               (* Atom found. compiled code 
                                                defintion.)
		    (COND
		      (DWIMFLG (ADDSPELL LOADA)))
		    (LAPRD LOADA)

          (* The system readtable is not reset for entire load so that 
          if user does a setbrk or setsepr as result of load, he wont 
          clobber it. instead we reset the readtable before calling 
          laprd and then restoreit. we are protected against control-d 
          or eror by resetsave on setreadtable at top of function.
          thus we dont have to do a resetform each time we go in and 
          out of laprd.)


		    (TCONC FILEMAP (CONS ADR (CONS (SFPTR FILE)
						   LOADA)))
		LP1 (COND
		      (PRINTFLG (PRINT LOADA T T)))
		    (GO LP)
		DEFQLP
		    (SELECTQ (RATOM NIL FILERDTBL)
			     (%)                (* Closes DEFINEQ.)
				 (AND FNADRLST (RPLACA (CDAR FNADRLST)
						       (SFPTR)))

          (* FNADRLST is a ONC format list, hence want to RPLACA CDAR, 
          not just CDR.)


				 (SETQ LOADA (DEFINE (DREVERSE LOADA)))
				 (GO LP1))
			     ((%( %[)           (* function/definition pair)
			       [SFPTR NIL (SETQ ADR (SUB1 (SFPTR]

          (* BAcks up over %( or %[. Done this way instead of PEEKC 
          because RATOM will also skip over any separators between 
          last %) and next %(, such as c.r.)


			       (SETQ LOADA (CONS (READ NIL FILERDTBL)
						 LOADA))
			       [AND FNADRLST (TCONC FNADRLST
						    (CONS (CAAR LOADA)
							  (CONS ADR (SFPTR]
			       (GO DEFQLP))
			     NIL)
		    (ERROR "illegal argument in defineq"])

(STATINIT
  [LAMBDA (ARRAY)                               (* Used by LISPX.
                                                Included in ASSEMBLE because of 
                                                LOC/VAG.)
    (PROG (TEM)
          [COND
	    ((NULL ARRAY)
	      (/RPLACA (QUOTE STATARRAY)
		       (ARRAY (SETQ TEM (LENGTH SYSTATS))
			      TEM]
          (SETQ TEM 1)
          (MAPC SYSTATS (FUNCTION (LAMBDA (X)

          (* Makes the value of the statistic, e.g. LISPXSTATS, be the 
          corresponding slot in STATARRAY.)


		    (AND (LISTP X)
			 (/RPLACA (CAR X)
				  (VAG (IPLUS (LOC STATARRAY)
					      (SETQ TEM (ADD1 TEM])

(FILEDATE
  [LAMBDA (FILE CFLG)                           (* CFLG IS T FOR COMPILED FILES)
    (AND FILE (CAR (XNLSETQ (PROG (X Y)
			          [SETQ FILE (COND
				      ((SETQ X (OPENP FILE (QUOTE INPUT)))
					(INFILEP FILE))
				      (T        (* INFILE used instead of 
                                                INFILEP to allow for error 
                                                correction.)
					 (INPUT (INFILE FILE]
			          (COND
				    ([AND (NOT (FILEPOS (QUOTE "(PROGN")
							FILE NIL
							(IPLUS (SFPTR FILE)
							       20)))
					  (NOT (FILEPOS (QUOTE "(FILECREATED")
							FILE NIL
							(IPLUS (SFPTR FILE)
							       20]
				      (RETURN NIL)))
			          (AND CFLG (READ FILE FILERDTBL))
			          [SETQ Y (COND
				      [(NLISTP (SETQ Y (READ FILE FILERDTBL]
				      ((EQ (CAR Y)
					   (QUOTE FILECREATED))
					(CADR Y))
				      ((EQ (CAR Y)
					   (QUOTE PROGN))
					(CADADR (CADDR Y]
			          (AND (NULL X)
				       (CLOSEF FILE))
			          (RETURN Y))
			    NOBREAK])

(READLINE
  [LAMBDA (RDTBL LINE LISPXFLG)
    (PROG (TEM L SPACEFLG CHR)
          (COND
	    ((LISTP READBUF)
	      (GO LP2))
	    ((NULL (READP T))
	      (CLEARBUF T)

          (* This is in case there is a c.r.
          in the single character buffer.
          Note that if there were other atoms on the line terminated 
          by a c.r., after readline finished, the c.r.
          would be gone. Thus this check for consistency.)


	      (RETURN LINE)))
      LP  (SETQ SPACEFLG NIL)
      LP1 (COND
	    [(SYNTAXP [SETQ CHR (CHCON1 (SETQ TEM (PEEKC T T]
		      (QUOTE EOL))              (* C.R.)
	      (READC T)
	      (COND
		((AND L SPACEFLG)
		  (PRIN1 (QUOTE ...)
			 T)
		  (GO LP))
		(T (GO OUT]
	    ((OR (SYNTAXP CHR (QUOTE RIGHTPAREN)
			  RDTBL)
		 (SYNTAXP CHR (QUOTE RIGHTBRACKET)
			  RDTBL))
	      (READ T RDTBL)
	      (AND LISPXFLG (NULL L)
		   (SETQ L (LIST NIL)))

          (* The "]" is treated as NIL if it is the only thing on the 
          line when READLINE is called with LISPXFLG=T.)


	      (GO OUT))
	    ((EQ TEM (QUOTE % ))                (* SPACE)
	      (SETQ SPACEFLG T)
	      (READC T)
	      (GO LP1)))
          [SETQ L (NCONC1 L (SETQ TEM (COND
			      ((EQ LISPXREADFN (QUOTE READ))

          (* So the call will be linked, so the user can break on 
          read.)


				(READ T RDTBL))
			      (T (APPLY* LISPXREADFN T RDTBL]
          (COND
	    ((SYNTAXP (SETQ TEM (CHCON1 (LASTC T)))
		      (QUOTE RIGHTBRACKET)
		      RDTBL)

          (* The reason why readline is driven by the last character 
          insead of doing a peekc before reding is that due to 
          eadmacros, it is possible for several things to be read, 
          e.g. A B C %' (FOO) terminated by square bracket should 
          terminate the line. However, it is not sufficient just to 
          check whether the value read is a list or not since "()" and 
          NIL must also be treated differently.)


	      (GO OUT))
	    ((NULL (SYNTAXP TEM (QUOTE RIGHTPAREN)
			    RDTBL))
	      (GO LP))
	    ((AND LISPXFLG (NULL SPACEFLG)
		  (NULL (CDR L)))

          (* A list terminates the line if if called from LISPX and is 
          both the firt thing on a line and not preceded by a space.)


	      (GO OUT))
	    (T (PRIN1 (QUOTE ...)
		      T)
	       (GO LP)))
          (GO LP)
      OUT (SETQ LINE (NCONC LINE L))
          [COND
	    ([AND (LISTP LINE)
		  (NOT (ZEROP (OPENR CTRLU]     (* User typed control-u during 
                                                reading.)
	      (CLOSER CTRLU 0)
	      (COND
		((NULL (NLSETQ (EDITE LINE)))   (* Exited with a STOP.)
		  (SETQ REREADFLG (QUOTE ABORT]
          (RETURN LINE)
      LP2 (SETQ TEM (CAR READBUF))
          (SETQ READBUF (CDR READBUF))
          (COND
	    ((EQ TEM HISTSTR0)
	      (RETURN LINE))
	    ((EQ TEM HISTSTR1)

          (* Normally, end of READBUF terminates line.
          HISTSTR1 Indicates to continue reading from teletype until 
          line is completed.)


	      (GO LP))
	    ((EQ TEM HISTSTR2)                  (* Used for REPEATING.
                                                Form is "repeat" x 
                                                (input) --.)
	      [SETQ READBUF
		(NCONC (COPY (CADR READBUF))
		       (COND
			 ((AND (NUMBERP (CAR READBUF))
			       (NOT (IGREATERP (CAR READBUF)
					       1)))

          (* Done repeating. Checks for 1, instead of 0, because the 
          last iteration corresponds to the first argument to NCONC.)


			   (CDDR READBUF))
			 (T (CONS HISTSTR0
				  (CONS HISTSTR2
					(CONS (COND
						((NUMBERP (CAR READBUF))
						  (SUB1 (CAR READBUF)))
						(T (CAR READBUF)))
					      (CDR READBUF]
	      (GO LP2)))
          (SETQ LINE (NCONC1 LINE TEM))
          (COND
	    ((NULL READBUF)
	      (RETURN LINE)))
          (GO LP2])

(CLBUFS
  [LAMBDA (NOCLEARFLG NOTYPEFLG BUF)

          (* NOCLEARFLG=T means CLEARBUF has already been done, and 
          anything in the buffer now is type-ahead, e.g. calls from 
          EVALQT, and call from BREAK on control-h INTERRUPT.)



          (* NOTYPEFLG=T means user should not be typing ahead.
          If READP is T, warn him to stop and wait.
          Occurs when CLBUFS is being done BEFORE some action, e.g. 
          DWIM interaction, loading SYSBUF for EXEC commands, etc. as 
          opposed to AFTER some action, e.g. an error occurred.)


    (PROG (LBUF SBUF)
          (COND
	    (NOCLEARFLG (GO SKIP))
	    ((AND NOTYPEFLG (READP T))
	      (PRIN1 BELLS T)
	      (DOBE)))
          (CLEARBUF T T)
          (SETQ READBUF BUF)
      SKIP(CLOSER CTRLU 0)

          (* In case user control-e's or control-d's after typing 
          control-u and changing his mind.)


          (SETQ LBUF (LINBUF T))
          (SETQ SBUF (SYSBUF T))
          (LINBUF)
          (SYSBUF)
          (COND
	    ((STREQUAL LBUF (QUOTE "
"))
	      (SETQ LBUF NIL)))
          (RETURN (COND
		    ((OR SBUF LBUF)
		      (CONS LBUF SBUF])

(BKBUFS
  [LAMBDA (BUFS ID)
    (PROG (L S)
          [COND
	    ((NULL BUFS)
	      (RETURN))
	    (T (SETQ L (CAR BUFS))
	       (SETQ S (CDR BUFS]
          (COND
	    ((READP T)

          (* User types ahead before command causing buffer to be 
          restored was executed. In this case, his type-ahead would 
          come BEFORE the restored buffer, when it should be after it, 
          because the command causing the buffer to be restored had to 
          have been given before the type-ahead.)


	      (PRIN1 BELLS T)
	      (DOBE)
	      (CLEARBUF T T)
	      (BKSYSBUF S)
	      (BKSYSBUF (SYSBUF T))
	      (SYSBUF))
	    (S (BKSYSBUF S)))
          (COND
	    (L (AND ID (PRIN1 ID T))

          (* ID will be suppressed by LISPX to prevent it being typed 
          in middle of input. Note that anything put back in SYSBUF 
          will be printed (echoed) as it is read.)


	       (PRIN1 L T)
	       (BKLINBUF L)))
          (RETURN])

(PROMPTCHAR
  [LAMBDA (ID FLG HIST)

          (* If READBUF is not NIL, never prints ID.
          Otherwise prints ID if FLG is T, or if READP is NIL.
          FLG is T for calls from EVALQT and BREAK, NIL from editor.)


    (PROG (N MOD)
          (COND
	    ((OR READBUF (AND (NULL FLG)
			      (LISPXREADP)))
	      (RETURN NIL))
	    ((AND HIST PROMPT#FLG)
	      (PRIN2 (COND
		       ((IGREATERP (SETQ N (ADD1 (CADR HIST)))
				   (SETQ MOD (OR (CADDDR HIST)
						 100)))
                                                (* This event is the roll-over 
                                                event.)
			 (IDIFFERENCE N MOD))
		       (T N))
		     T)))
          (PRIN1 ID T])

(RAISEP
  [LAMBDA NIL

          (* True if lisp is in mode where it raises lower case inputs 
          to uppercase.)


    (PROG (X)
          (RAISE (SETQ X (RAISE)))
          (RETURN X])

(FNTYP1
  [LAMBDA (X)
    (AND CLISPARRAY (SETQ X (GETHASH X CLISPARRAY))
	 (FNTYP X])

(UNSAVEDEF
  [LAMBDA (X TYP)
    (COND
      ((ATOM X)
	(UNSAVED1 X TYP))
      (T (MAPCAR X (FUNCTION (LAMBDA (X)
		     (UNSAVED1 X TYP])

(UNSAVED1
  [LAMBDA (FN TYP)
    (PROG (DEF PROP)
      TOP (COND
	    ((NOT (LITATOM FN)))
	    ([SETQ DEF (COND
		  ((SETQ PROP TYP)
		    (GETP FN TYP))
		  [(GETP FN (SETQ PROP (QUOTE EXPR]
		  [(GETP FN (SETQ PROP (QUOTE CODE]
		  ((GETP FN (SETQ PROP (QUOTE SUBR]
	      (AND (GETD FN)
		   (UNBREAK0 FN))
	      (/REMPROP FN PROP)
	      (COND
		((NULL DFNFLG)
		  (SAVEDEF FN)))
	      (/PUTD FN DEF)
	      (AND DWIMFLG (ADDSPELL FN))
	      (RETURN PROP))
	    [(OR (GETD FN)
		 (CDR FN))                                  (* Not a misspelling)
	      (RETURN (COND
			[TYP (CONS TYP (QUOTE (not found]
			(T (QUOTE (nothing found]
	    ((SETQ PROP (FNCHECK FN T))
	      (SETQ FN PROP)
	      (GO TOP)))
          (ERROR FN (QUOTE "not a function"])
)
  [COND ((EQ (CAR (QUOTE LISPXHISTORY))
	     (QUOTE NOBIND))
	 (MAP2C (QUOTE (APPLY APPLY* RPLACA RPLACD STKNTH STKNAME CHARACTER STKARG NEWSTKARG 
			      CHCON UNPACK READ READP ADDPROP ATTACH DREMOVE DSUBST NCONC 
			      NCONC1 PUT PUTD REMPROP RPLACA RPLACD SET PRINT PRIN1 PRIN2 
			      SPACES TERPRI PUTHASH QUOTE FNCLOSER FNCLOSERA FNCLOSERD))
		(QUOTE (BLKAPPLY BLKAPPLY* FRPLACA FRPLACD FSTKNTH FSTKNAME FCHARACTER FSTKARG 
				 NEWFSTKARG DCHCON DUNPACK LISPXREAD LISPXREADP /ADDPROP 
				 /ATTACH /DREMOVE /DSUBST /NCONC /NCONC1 /PUT /PUTD /REMPROP 
				 /RPLACA /RPLACD SAVESET LISPXPRINT LISPXPRIN1 LISPXPRIN2 
				 LISPXSPACES LISPXTERPRI /PUTHASH * /FNCLOSER /FNCLOSERA 
				 /FNCLOSERD))
		(FUNCTION MOVD))
	 (SAVEDEF (QUOTE EVALQT))
	 (DEFINEQ [EVALQT (LAMBDA NIL (PROG (TEM)
					    (COND ((EQ CLEARSTKLST T)
						   (* Follwoing control-d Do a CLEARSTK. 
						      Standard case.)
						   (CLEARSTK))
						  (T (* BREAK1, ERRORX2 SAVESET, and a few 
							other system functions store frames on 
							this list that can be eliminated after 
							a control-D.)
						     (MAPC CLEARSTKLST (FUNCTION RELSTK))
						     (SETQ CLEARSTKLST NIL)))
					    (RESETRESTORE)
					    LP
					    (PROMPTCHAR (QUOTE _)
							T)
					    (LISPX (LISPXREAD T))
					    (GO LP]
		  (LISPX [LAMBDA (LISPXX)
				 (PRINT (COND ([COND [(LISTP LISPXX)
						      (OR (EQ (CAR LISPXX)
							      (QUOTE LAMBDA))
							  (EQ (CAR LISPXX)
							      (QUOTE NLAMBDA]
						     ((LITATOM LISPXX)
						      (* READP would fail if there was 
							 type-ahead. This isnt quite as good as 
							 LISPXREADP would be because it doesnt 
							 do the right thing if a space is typed 
							 before a c.r.)
						      (NEQ (PEEKC T)
							   (QUOTE %
]
					       (APPLY LISPXX (LISPXREAD T)))
					      (T (EVAL LISPXX)))
					T])
		  (LISPX/ [LAMBDA (X)
				  X])
		  [LOWERCASE (LAMBDA (FLG)
				     (PROG1 LCASEFLG (RAISE (NULL FLG))
					    (RPAQ LCASEFLG FLG]
		  (FILEPOS [LAMBDA NIL T]))
	 (SETQQ CHCONLST
		(NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL NIL 
		     NIL))
	 (SETQQ LISPXREADFN READ)
	 (SETQQ CLISPTRANFLG CLISP% )
	 (SETQ RAISEFLG T)
	 (MAPC (QUOTE (DFNFLG LISPXHISTORY EDITHISTORY LISPXFNS LISPXCOMS LISPXHIST LISPXBUFS 
			      REREADFLG CHCONLST1 CHCONLST2 READBUF LISPXPRINTFLG LCASEFLG 
			      CLISPFLG CLISPARRAY NOFIXFNSLST NOFIXVARSLST USERWORDS SPELLINGS1 
			      SPELLINGS2 SPELLINGS3 EDITCALLS P.A.STATS EDITUNDOSTATS 
			      EDITUNDOSAVES SPELLSTATS1))
	       (FUNCTION SET))
	 (SETQ CTRLU (GETP (QUOTE CTRLU)
			   (QUOTE COREVAL)))
	 (SETQQ HISTSTR0 "<c.r.>")
	 (SETQQ HISTSTR1 "see readline")
	 (SETQQ HISTSTR2 "repeat")
	 (MAPC (QUOTE ((STORAGE PRIN1 LISPXPRIN1)
		       (STORAGE TERPRI LISPXTERPRI)
		       (STORAGE SPACES LISPXSPACES)
		       (TIME PRIN1 LISPXPRIN1)
		       (TIME SPACES LISPXSPACES)
		       (TIME PRINT LISPXPRINT)
		       (DEFC PRINT LISPXPRINT)
		       (DEFC PUTD /PUTD)
		       (DEFC PUT /PUT)
		       (DOLINK FNCLOSERD /FNCLOSERD)
		       (DOLINK FNCLOSERA /FNCLOSERA)
		       (DEFLIST PUT /PUT)
		       (SAVEDEF1 PUT /PUT)
		       (MKSWAPBLOCK PUTD /PUTD)))
	       (FUNCTION (LAMBDA (X)
				 (APPLY (QUOTE CHANGENAME)
					X]
  [RPAQQ WTMISCBLOCKS ((CHANGENAMEBLOCK CHANGENAME CHANGENAME1 CHNGNM (ENTRIES CHANGENAME 
									       CHNGNM)
					(LOCALFREEVARS FN))
	  (NIL CLBUFS BKBUFS READLINE PROMPTCHAR (LINKFNS . T]
[DECLARE: DONTEVAL@LOAD DOEVAL@COMPILE DONTCOPY
  (BLOCK: CHANGENAMEBLOCK CHANGENAME CHANGENAME1 CHNGNM (ENTRIES CHANGENAME CHNGNM)
	  (LOCALFREEVARS FN))
  (BLOCK: NIL CLBUFS BKBUFS READLINE PROMPTCHAR (LINKFNS . T))
]
(DEFLIST(QUOTE(
  [LISPXWATCH (LAMBDA (STAT N)
		      (AND (ARRAYP STAT)
			   (VAG (CLOSER (LOC STAT)
					(IPLUS (OPENR (LOC STAT))
					       (OR N 1]
))(QUOTE BLKLIBRARYDEF))
[DECLARE: DONTEVAL@LOAD DOEVAL@COMPILE DONTCOPY COMPILERVARS 
  (ADDTOVAR NLAMA RESETSAVE RESETLST)
  (ADDTOVAR NLAML RESETVAR RESETFORM)
]
(DECLARE: DONTCOPY
  (FILEMAP (NIL (4318 31972 (CHANGENAME 4330 . 4474) (CHANGENAME1 4478 . 5825) (CHNGNM 5829
. 7348) (DEFINE 7352 . 8394) (FNCHECK 8398 . 8996) (LISPXSTATS 9000 . 10033) (LISPXSTATS1
10037 . 10266) (LISPXWATCH 10270 . 10889) (MAPRINT 10893 . 11641) (PRINTARRAY 11645 . 12822)
(RESETFORM 12826 . 14114) (RESETLST 14118 . 15011) (RESETRESTORE 15015 . 15596) (RESETSAVE
15600 . 16668) (RESETVAR 16672 . 17880) (LOAD 17884 . 22049) (STATINIT 22053 . 22727) (FILEDATE
22731 . 23812) (READLINE 23816 . 27805) (CLBUFS 27809 . 29004) (BKBUFS 29008 . 30008) (
PROMPTCHAR 30012 . 30731) (RAISEP 30735 . 30936) (FNTYP1 30940 . 31029) (UNSAVEDEF 31033 .
31178) (UNSAVED1 31182 . 31969)))))
STOP
