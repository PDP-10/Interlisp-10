<LISP>READMACROS.INFO
Apr 13, 1975

Extension to readmacros.

In specifying a read-macro character via
SETSYNTAX, the normal specification of (type fn)
where type=MACRO, SPLICE, or INFIX can be augmented
by giving SETSYNTAX (type options fn) , options
a SEGMENT of atoms, e.g. (MACRO FIRST IMMEDIATE fn),
with the following interpretations:

a) ALWAYS, FIRST or ALONE

 ALWAYS - the default. read macro is a break character. it is
 always effective (in calls to READ except when
  preceded by a %)

 FIRST - read macro function is called ONLY when the read macro
  character is the first character seen after a break or 
  separator, e.g. if ' were made a FIRST
  read-macro, then one could use ' anywhere in a function
  name except for the first character, without having to
  preceded with %, e.g. FOO'

 ALONE -  character is activated only when, if it
  were not a read macro, it would have been read as a
  1 character atom. In other words, its immediate neighbors
  are both break or separator characters. E.g.
  if ? were an ALONE read-macro, then (?) or
  (FOO ?) or (FOO ? FIE) would cause ? to activate,
  but (FOO ??), (FOO? X), and (FOO ?X) would not.

b) ESCQUOTE or NOESCQUOTE

ESCQUOTE - makes the readmacro character print with a %.

NOESCQUOTE - makes the readmacro character print without a %.
  (primarily for use with FIRST and ALONE read macros,
  since ALWAYS read macro characters are break characters and
  presumably one would want to print them preceded by a %.)


c) IMMEDIATE or NONIMMEDIATE

 IMMEDIATE - causes the read-macro character to be immediately
  activated, i.e. the character is essentially seen
  by the line bufferer as an eol, and the rest of
  the line is passed to LISP. (Note that this means that
  you can then no longer ^A or ^Q into these characters.)
  This allows the user to specify a character that will immediately
  take effect without having to read everything in CONTROL(T)
  mode and thereby lose the line buffering action of LISP.
  NOTE: when CONTROL(NIL) is set (as it is normally) TENEX does
  not send ALPHABETIC characters (a-z, A-Z, and 0-9) to LISP
  until a non-alphabetic character is typed. This means that,
  even if A is an IMMEDIATE readmacro character, if you type
  ABCD<space> it will not activate until the <space> is typed.
  Thus IMMEDIATE readmacros are most useful for control 
  characters.  

  
 NONIMMEDIATE -  character is just a normal character with
  respect to the line buffering, and so will not be activated until
  a carriage return or matching right paren or bracket is seen.

default options are: ALWAYS, ESCAPE, NONIMMEDIATE.

synonyms  ESC=ESCQUOTE, NOESC=NOESCQUOTE,
IMMED=IMMEDIATE, and NONIMMED=NONIMMEDIATE.

Note: making a read-macro character be ALONE and
IMMEDIATE is a contradiction, since ALONE requires that
the next character be input in order to see if the atm
in fact does stand by itself. In order to do this,
the line-buffering routine has to again be called to
begin collecting input. as a result, ALONE
macros are always NONIMMEDIATE.

Note that ALONE and FIRST read macro characters are not
break characters, and that ALWAYS read macro characters are.
Making an ALWAYS read macro character be a break character
is a nop. Making an ALONE or FIRST read macro character
be a break character disables it, i.e. converts
it to syntax class BREAKCHAR.

-------------------


When an infix macro character is encountered not in a list,
the third argument given to its macro function
is NIL. If it returns a tconc ptr list, this is taken
as the value of that call to READ, if NIL, the macro
character is essentially ignored and reading continues.

for example, if $ is an INFIX macro defined as
(LAMBDA (X Y Z) (AND Z (TCONC Z mumble]
then $ within a list will be read as mumble,
outside of a list it will be ignored.

The function INREADMACROP is  available for determining
whether a particular read is under a read macro function or not.
Presumably for use in conjunction with read macro functions.
it returns NIL if not under a read macro, otherwise
the number of unclosed left parens or brackets.

-------------------

SETREADMACROFLG[flg]  resets the
'read-macro' flag, i.e. the one that tells
read that you are in a read macro, and causes
errors to be generated when you see an unmatched
] or ). Value is previous value of flg.
If there is no read flag on the stack, fn is a nop,
so you can simply put (SETREADMACROFLG) on
breakresetforms if you are debugging read
macros.

