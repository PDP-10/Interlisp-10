(FILECREATED " 5-OCT-74 07:02:04" COMP.;2 74476  

     changes to:  CSYNTAXP

     previous date: " 2-OCT-74 08:45:57" <NEWLISP>COMP.;9)


  (LISPXPRINT (QUOTE COMPCOMS)
	      T T)
  [RPAQQ COMPCOMS
	 ((FNS * COMPFNS)
	  (PROP CROPS CAAR CADR CDAR CDDR CAAAR CAADR CADAR CADDR CDAAR 
		CDADR CDDAR CDDDR CAAAAR CAAADR CAADAR CAADDR CADAAR 
		CADADR CADDAR CADDDR CDAAAR CDAADR CDADAR CDADDR CDDAAR 
		CDDADR CDDDAR CDDDDR)
	  (PROP CTYPE CAAR CADR CDAR CDDR CAAAR CAADR CADAR CADDR CDAAR 
		CDADR CDDAR CDDDR CAAAAR CAAADR CAADAR CAADDR CADAAR 
		CADADR CADDAR CADDDR CDAAAR CDAADR CDADAR CDADDR CDDAAR 
		CDDADR CDDDAR CDDDDR)
	  (PROP CTYPE COND AND OR EQ NULL NOT ATOM LITATOM SELECTQ PROG 
		GO RETURN PROGN PROG2 PROG1 NUMBERP MINUSP FIXP LISTP 
		ARRAYP SMALLP FLOATP STRINGP HANDLEP IGREATERP ILESSP 
		FGTP SWPARRAYP IPLUS ITIMES LOGOR LOGXOR LOGAND LSH RSH 
		LLSH LRSH IMINUS IDIFFERENCE IQUOTIENT FIX IREMAINDER 
		LOC OPENR CLOSER FPLUS FTIMES FDIFFERENCE FQUOTIENT 
		FLOAT)
	  (PROP MACRO NEQ NLISTP ZEROP ADD1 AC SUB1 SETQQ FMEMB FLENGTH 
		FLAST FASSOC FNTH ERSETQ NLSETQ .ERRSETQ. .ERSET. 
		MAPLIST MAPCAR MAPCON MAPCONC MAP MAPC SOME EVERY 
		NOTEVERY NOTANY SUBSET * DECLARE SUB1VAR ADD1VAR 
		FSTKARG FSTKNTH RPTQ NTYP TYPEP SYNTAXP)
	  (PROP AMAC PUSHN POPN NREF)
	  (DECLARE: DOEVAL@COMPILE DONTCOPY (PROP MACRO * COMPMACROS))
	  (PROP MAKE GEN FIXT FLOATT)
	  (PROP UBOX GEN FIXT FLOATT)
	  (PROP CONVERT GEN FIXT FLOATT)
	  (BLOCKS * COMPBLOCKS)
	  (VARS (NLAMA)
		(NLAML)
		(LAMS)
		(ALAMS)
		(COMPILEUSERFN)
		(COMPILETYPELST))
	  SYS SYSFNS LAPFLG SVFLG STRF LSTFIL LCFIL
	  (DECLARE: DONTEVAL@LOAD DOEVAL@COMPILE DONTCOPY COMPILERVARS
		    (ADDVARS (NLAMA)
			     (NLAML]
  (RPAQQ COMPFNS
	 (BLOCKCOMPILE2 NOLINKP BLKFNP TESTNM COMPILE2 COMPILE2A IDP 
			QUOP CONP EVQ CEXP CSTA CPRD CVPRD CCEXP COMP 
			EXPANDCOMP LQE RESP RESPN LQ LDCOMP VARCOMP 
			GENTAG STORETAG STORIN STOREJ PSTEP PSTEPN 
			CEXP2 CEXP2P CARG CANYF CATCOMP CPROG PROGUDT 
			PROGCKT CBIND CRETURN GOTOCOMP CGO CPROGN 
			CPROG1 CSETQ CFASTCALL CLIST CCRF CCRF2 LZP 
			CVAG CCRF CEVQ CFUNC CFA CPI CSF CAPPLY* 
			CBLKAPPLY CBLKAPPLY* CLAM CFNP CARGN CSETARG 
			CPREX CCOND CAND COR CNULL CEQ CEQN CATOM PRED2 
			CNUMP CMINUSP CPREDT CSELECTQ CNEXP CNEXP2 
			CNFNS NRESP LQN LDFIX LDNUM IMMP IMSP CNUMOP2 
			CGTLS CNUMOP CLSH CCLOSER CINF CFNF CASSEM 
			ASSEM1 CMAP CSYNTAXP))
(DEFINEQ

(BLOCKCOMPILE2
  (LAMBDA (BLKNAME BLKDEFS ENTRIES)
    (PROG (FN DEF CODE1 CODE ARGS FREE OTHERVARS (ARGTY 0)
	      (TAGNUM 0)
	      (BLKFLG T)
	      (BNDLEV 0)
	      (SBNDLEV 0))
      LP1 (COND
	    ((NULL (SETQ CODE1 (COMPILE2A (SETQ FN (CAAR BLKDEFS))
					  (SETQ DEF (CADDAR BLKDEFS)))))
	      (HELP (CONS FN (QUOTE BOMBED)))

          (* Should never happen -
          already checked to see if there was a definition.)


	      ))
          (COND
	    ((OR (FMEMB FN ENTRIES)
		 (FMEMB FN BLKAPPLYFNS))
	      (STORIN (LIST (QUOTE XWD)
			    (FLENGTH ARGS)
			    ARGTY))))
          (SETQ CODE (CONS (CADAR BLKDEFS)
			   CODE))
          (STORIN (CONS (QUOTE SUBFN)
			(CONS (LIST (QUOTE BLKBIND)
				    ARGS NIL (IMINUS (FLENGTH ARGS)))
			      CODE1)))          (* This is the gadget 
                                                that rebinds FREE 
                                                variables if necessary)
          (RPLACA (CDDAR BLKDEFS)
		  (LIST (CAR (CADDAR BLKDEFS))
			(CADR (CADDAR BLKDEFS))))

          (* The RPLACA allows the function definitions to be 
          reclamed. The original value OF BLKDEFS is still 
          bound to the FREE variable CALLTAGS and is needed by 
          BLKFNP.)


          (COND
	    ((SETQ BLKDEFS (CDR BLKDEFS))
	      (GO LP1)))
          (COND
	    (LOCALFREEVARS (PROG ((L LOCALFREEVARS)
				  A)
			     A   (COND
				   (L (COND
					((FMEMB (CAR L)
						FREE)
					  (SETQ A (CONS (CAR L)
							A))))
				      (SETQ L (CDR L))
				      (GO A))
				   (T (RETURN (SETQ LOCALFREEVARS A)))))
			   ))
          (SETQ CODE (CONS (LIST (QUOTE MKENTRY)
				 (APPEND ENTRIES BLKAPPLYFNS)
				 LOCALFREEVARS)
			   (DREVERSE CODE)))
          (SETQ ARGS (PACK (LIST BLKNAME (QUOTE #0))))
          (COND
	    ((OR ENTRIES BLKAPPLYFNS)
	      (SETQ ARGS (CONS ARGS))
	      (SETQ ARGTY 2)                    (* NORMAL BLOCK IS 
                                                LAMBDA ATOM)
	      )
	    (T 

          (* SPECIAL CASE -
          NO ENTRIES MEANS SINGLE ENTRY IS FIRST FN IN BLOCK)


	       (SETQ DEF (CADDAR CALLTAGS))
	       (SETQ ARGTY (SELECTQ (CAR DEF)
				    (LAMBDA 0)
				    1))
	       (COND
		 ((AND (SETQ ARGS (CADR DEF))
		       (ATOM ARGS))
		   (SETQ ARGTY (IPLUS ARGTY 2))
		   (SETQ ARGS (LIST ARGS))))))
          (LAP BLKNAME ARGS FREE (PROG1 CODE (SETQ CODE))
	       ARGTY)                           (* Use LAP to make one 
                                                big BLOCK FUNCTION)
          (RETURN
	    (MAPCAR
	      ENTRIES
	      (FUNCTION (LAMBDA (X)
		  (COMPILE2
		    X
		    (LIST
		      (CAR (SETQ DEF (CADDR (FASSOC X CALLTAGS))))
		      (CADR DEF)
		      (SUBPAIR
			(QUOTE (V W))
			(LIST X BLKNAME)
			(QUOTE
			  (ASSEMBLE NIL
				    (PUSH PP , ' V)
				    (HLRZ 1 , -2 (CP))
                                                (* # ARGS TO ENTRY FN)
				    (ADDI 1 , 1)
                                                (* + 1 FOR NAME)
				    (E
				      (STORIN
					(LIST (QUOTE LNCAL2)
					      (LIST (QUOTE MKLCL)
						    (QUOTE W))))))))))))
	      )))))

(NOLINKP
  (LAMBDA (FN)
    (COND
      ((AND (LISTP NOLINKFNS)
	    (FMEMB FN NOLINKFNS))               (* Explicit non LINK)
	T)
      ((AND BLKFLG (FASSOC FN CALLTAGS))        (* LINK inside block)
	NIL)
      ((AND (LISTP LINKFNS)
	    (FMEMB FN LINKFNS))                 (* Explicit LINK)
	NIL)
      ((EQ NOLINKFNS T)                         (* Default nolink)
	T)
      ((OR BLKFLG (EQ LINKFNS T))               (* Standard LINK)
	NIL)
      (T T))))

(BLKFNP
  (LAMBDA (FN)
    (AND BLKFLG (OR (FMEMB FN RETFNS)
		    (NLISTP NOLINKFNS)
		    (NOT (FMEMB FN NOLINKFNS)))
	 (OR (CADR (FASSOC FN CALLTAGS))
	     (PROG (DEF)
	       LP  (COND
		     ((NULL (FMEMB FN BLKLIBRARY))
		       (RETURN))
		     ((NULL (SETQ DEF (GETP FN (QUOTE BLKLIBRARYDEF))))
		       (HELP (CONS FN (QUOTE (- NO LIBRARY DEFINITION)))
			     )
		       (GO LP)))
	           (NCONC1 CALLTAGS (LIST FN (GENTAG)
					  DEF))
                                                (* This adds FN once to 
                                                CALLTAGS and BLKDEFS 
                                                since they are EQ)
	           (RETURN TAGNUM))))))

(TESTNM
  (LAMBDA (F1 L)
    (COND
      (L (PROG (A)
	   LP  (RETURN (COND
			 ((EQ F1 (SETQ A (CAR L))))
			 ((AND (LISTP A)
			       (EQ F1 (CAR A)))
			   (OR (NULL (SETQ A (CDR A)))
			       (FMEMB F1 A)))
			 ((SETQ L (CDR L))
			   (GO LP)))))))))

(COMPILE2
  [LAMBDA (FN DEF)
    (PROG [CODE ARGS FREE ARGTY BLKFLG (TAGNUM 0)
		(OTHERVARS (AND (STKPOS (QUOTE COMPILE2A))
				(APPEND (EVQ OTHERVARS)
					(EVQ ARGS]
          (COND
	    ((SETQ CODE (COMPILE2A FN DEF))
	      (LAP FN ARGS FREE (PROG1 CODE (SETQ CODE))
		   ARGTY)
	      (RETURN FN))
	    (T (RETURN (PRINT (CONS FN (QUOTE (NOT COMPILABLE)))
			      T T])

(COMPILE2A
  [LAMBDA (FN DEF)
    (PROG (CODE SP NP FE TAGS RETSYM IARGS UDFTGS)
          (SETQ SP (SETQ NP 0))
      RETRY
          (COND
	    ((NLISTP DEF)
	      (GO NG)))
          [SETQ ARGTY (SELECTQ (CAR DEF)
			       [LAMBDA 0]
			       [NLAMBDA 1]
			       (COND
				 ((AND COMPILEUSERFN
				       (SETQ DEF (APPLY* COMPILEUSERFN 
							 NIL DEF)))
				   (GO RETRY))
				 (T (GO NG]
          [COND
	    ((AND (SETQ ARGS (CADR DEF))
		  (ATOM ARGS))
	      (SETQ ARGTY (IPLUS ARGTY 2))
	      (SETQ ARGS (LIST ARGS]
          (SETQ IARGS ARGS)
          (PRINT (CONS FN (QUOTE (compiling)))
		 T T)
          (STORETAG (SETQ FE (GENTAG)))
          (SETQ RETSYM (GENTAG))
          (SETQ TAGS (QUOTE EMPTY))
          (COMP [CONS (QUOTE PROGN)
		      (COND
			(BLKFLG (PSTEP)
				(CONS (QUOTE (ASSEMBLE NIL
						       (PUSH PP , FF)))
				      (CDDR DEF)))
			(T (CDDR DEF]
		T NIL T)
          (STORETAG RETSYM)
          [COND
	    (BLKFLG                             (* Blkflg = T in BLOCK 
                                                compiling. Puts unbinder
                                                at end of CODE)
		    (STORIN (QUOTE (UNBIND)))
		    (STORIN (CONS (QUOTE UNCOV)
				  (COND
				    [(EQ ARGTY 2)
                                                (* LAMBDA ATOM)
				      (STORIN (LIST (QUOTE LDV2)
						    (CAR ARGS)
						    SP 2))
				      (STORIN (QUOTE (SUBI 2 , ASZ -2)))
				      (QUOTE ((2]
				    (T (CONS (ADD1 (FLENGTH ARGS]
          (STORIN (QUOTE (RET)))
          (RETURN (DREVERSE CODE))
      NG  (RETURN NIL])

(IDP
  (LAMBDA (I)
    (AND I (LITATOM I)
	 (NEQ I T))))

(QUOP
  (LAMBDA (Q)                                   (* QUOTE PREDICATE)
    (AND (LISTP Q)
	 (EQ (CAR Q)
	     (QUOTE QUOTE)))))

(CONP
  (LAMBDA (A)                                   (* CONSTANT PREDICATE)
    (OR (NULL A)
	(EQ A T)
	(NUMBERP A)
	(QUOP A)
	(COND
	  ((LISTP A)
	    (AND (EQ (CAR A)
		     (QUOTE VAG))
		 (NUMBERP (CADR A))))
	  ((NOT (LITATOM A))
	    (NULL (CDR (FASSOC (NTYP A)
			       COMPILETYPELST))))))))

(EVQ
  (NLAMBDA (X)
    (EVAL X)))

(CEXP
  (LAMBDA (E)                                   (* COMPILE EXPR FOR 
                                                VALUE)
    (COMP E T NIL NIL)))

(CSTA
  (LAMBDA (E)                                   (* COMPILE EXPR AS 
                                                STATEMENT, NO VALUE 
                                                NEEDED)
    (COMP E NIL NIL NIL)))

(CPRD
  (LAMBDA (E BRT BRF)

          (* COMPILE EXPR AS PREDICATE, NO VALUE, BRANCH BRT 
          IF TRUE, BRF IF NIL)


    (COMP E NIL T NIL)))

(CVPRD
  (LAMBDA (E BRT BRF)                           (* COMPILE EXPR AS 
                                                PREDICATE WITH VALUE)
    (COMP E T T NIL)))

(CCEXP
  (LAMBDA (E)                                   (* COMPILE EXPR IN 
                                                CURRENT CONTEXT)
    (COMP E VCF PCF PIF NCF)))

(COMP
  (LAMBDA (E VCF PCF PIF NCF)

          (* COMPILE EXPR, VCF VALUE FLAG, PCF PREDICATE FLAG, 
          PIF RECURSION TO PROG FLAG, NCF NUMBER CONTEXT FLAG)


    (PROG (F F2)
      TOP (COND
	    ((NLISTP E)
	      (COND
		((NUMBERP E)
		  (COND
		    (NCF (LQN E NCF))
		    (T (LQE E)))
		  (RETURN))
		((IDP E)
		  (COND
		    ((EQ NCF (QUOTE FIXT))
		      (RETURN (STORIN (LIST (QUOTE PIUNBX)
					    (LIST (VARCOMP E)
						  E SP)))))
		    (T (LDCOMP E))))
		((AND (SETQ F (CDR (FASSOC (NTYP E)
					   COMPILETYPELST)))
		      (NEQ E (SETQ E (APPLY* F E))))
		  (COND
		    ((NEQ E (QUOTE INSTRUCTIONS))
		      (GO TOP))))
		(T (LQE E)
		   (RETURN))))
	    ((ATOM (SETQ F (CAR E)))
	      (COND
		((EQ F (QUOTE QUOTE))
		  (LQE E)
		  (RETURN))
		((SETQ F2 (GETP F (QUOTE MACRO)))
		  (COND
		    ((NEQ (SETQ E (EXPANDCOMP F2 (CDR E)
					      E))
			  (QUOTE INSTRUCTIONS))
		      (GO TOP)                  (* IF MACRO RETURNS 
                                                'INSTRUCTIONS ,DONE, 
                                                ELSE COMPILE RESULT)
		      )))
		((SELECTQ (GETP F (QUOTE CTYPE))
			  (PRED (RETURN (CPREX F (CDR E))))
			  (INF (RETURN (CINF F (CDR E))))
			  (CR (CCRF (CADR E)
				    (GETP F (QUOTE CROPS))))
			  (FNF (RETURN (CFNF F (CDR E))))
			  (RETURN (CATCOMP F (CDR E)
					   E))))))
	    ((SELECTQ (CAAR E)
		      ((LAMBDA NLAMBDA)
			T)
		      NIL)
	      (RETURN (CANYF (CADAR E)
			     (CAR E)
			     (CDR E))))
	    (T (CSF E)))
          (RESP)
          (RETURN))))

(EXPANDCOMP
  (LAMBDA (MF A EXP)
    (COND
      ((SELECTQ (CAR MF)
		((LAMBDA NLAMBDA)
		  (CONS MF A))
		NIL))
      ((AND (CAR MF)
	    (ATOM (CAR MF)))
	(EVAL (CONS (CONS (QUOTE NLAMBDA)
			  MF)
		    A)))
      ((CDDR MF)
	(CONS (QUOTE PROGN)
	      (MAPCAR (CDR MF)
		      (FUNCTION (LAMBDA (Z)
			  (SUBPAIR (CAR MF)
				   A Z))))))
      (T (SUBPAIR (CAR MF)
		  A
		  (CADR MF))))))

(LQE
  (LAMBDA (E)                                   (* RESPOND TO PREDICATE 
                                                CONTEXT FOR KNOWN 
                                                NON-NIL OR NIL CASES)
    (COND
      (VCF (LQ E)))
    (COND
      (PCF (COND
	     ((OR (AND E BRT)
		  (AND (NULL E)
		       BRF))
	       (STORIN (LIST (QUOTE J)
			     (OR BRF BRT))))))
      (NCF                                      (* MAYBE THIS SHOULDNT 
                                                HAPPEN??)
	   (STORIN (COND
		     ((EQ NCF (QUOTE FIXT))
		       (QUOTE (FCLL IUNBOX)))
		     (T (LIST (QUOTE FASTCALL)
			      (GETP NCF (QUOTE UBOX))
			      SP))))))))

(RESP
  (LAMBDA NIL
    (COND
      (PCF (STORIN (COND
		     (BRT (LIST (QUOTE BNN)
				BRT))
		     (T (LIST (QUOTE BN)
			      BRF)))))
      (NCF (STORIN (COND
		     ((EQ NCF (QUOTE FIXT))
		       (QUOTE (FCLL IUNBOX)))
		     (T (LIST (QUOTE FASTCALL)
			      (GETP NCF (QUOTE UBOX))
			      SP))))))))

(RESPN
  (LAMBDA NIL
    (STORIN (COND
	      ((EQ NCF (QUOTE FIXT))
		(QUOTE (FCLL IUNBOX)))
	      (T (LIST (QUOTE FASTCALL)
		       (GETP NCF (QUOTE UBOX))
		       SP))))))

(LQ
  (LAMBDA (X AC)
    (COND
      ((QUOP X)
	(SETQ X (CADR X))))
    (STORIN (COND
	      ((AND AC (NEQ AC 1))
		(LIST (COND
			((SMALLP X)
			  (QUOTE LQ2I))
			(T (QUOTE LQ2)))
		      X AC))
	      (T (LIST (COND
			 ((SMALLP X)
			   (QUOTE LQI))
			 (T (QUOTE LQ)))
		       X))))))

(LDCOMP
  (LAMBDA (V A)                                 (* LOAD FREE OR LOCAL V 
                                                TO AC A OR 1)
    (OR A (SETQ A 1))
    (COND
      ((AND (EQ A 1)
	    (LISTP (CAR CODE))
	    (SELECTQ (CAAR CODE)
		     ((STV STF)
		       T)
		     NIL)
	    (EQ (CADAR CODE)
		V))
	NIL)
      (T (STORIN (SELECTQ (VARCOMP V)
			  (VREF (SELECTQ A
					 (1 (LIST (QUOTE LDV)
						  V SP))
					 (LIST (QUOTE LDV2)
					       V SP A)))
			  (GREF (SELECTQ A
					 (1 (LIST (QUOTE CARQ)
						  V))
					 (LIST (QUOTE CARQ2)
					       V A)))
			  (SELECTQ A
				   (1 (LIST (QUOTE LDF)
					    V SP))
				   (LIST (QUOTE LDF2)
					 V SP A))))))))

(VARCOMP
  (LAMBDA (V)
    (COND
      ((FMEMB V ARGS)
	(QUOTE VREF))
      ((OR (GETP V (QUOTE GLOBALVAR))
	   (FMEMB V GLOBALVARS))
	(QUOTE GREF))
      (T (OR (FMEMB V FREE)
	     (SETQ FREE (NCONC FREE (CONS V))))
	 (QUOTE FREF)))))

(GENTAG
  (LAMBDA NIL
    (SETQ TAGNUM (ADD1 TAGNUM))))

(STORETAG
  (LAMBDA (TG)
    (SETQ CODE (CONS TG CODE))))

(STORIN
  (LAMBDA (IN)
    (SETQ CODE (CONS IN CODE))))

(STOREJ
  (LAMBDA (B)                                   (* USE TO STORE JUMP 
                                                AFTER SKIPS, SO GOTOCOMP
                                                WON'T FLUSH)
    (SETQ CODE (CONS (LIST (QUOTE JR)
			   B)
		     CODE))))

(PSTEP
  (LAMBDA NIL
    (SETQ SP (ADD1 SP))))

(PSTEPN
  (LAMBDA (N)
    (SETQ SP (IPLUS SP N))))

(CEXP2
  (LAMBDA (E FLG)                               (* COMPILE EXPRESSION TO
                                                AC2, PRESERVING AC1)

          (* If FLG=T, ac1 and ac2 may be switched.
          If they are, CEXP2 returns T, in all other cases NIL 
          is returned.)


    (COND
      ((CEXP2P E)
	(COND
	  ((CONP E)
	    (LQ E 2))
	  ((LITATOM E)
	    (LDCOMP E 2))
	  (T (CCRF2 (CADR E)
		    (SELECTQ (CAR E)
			     (CAR (QUOTE (A)))
			     (CDR (QUOTE (D)))
			     (GETP (CAR E)
				   (QUOTE CROPS))))))
	NIL)
      (T (PSTEP)
	 (STORIN (QUOTE (PUSHP)))
	 (CEXP E)
	 (SETQ SP (SUB1 SP))
	 (COND
	   (FLG (STORIN (QUOTE (POPP2)))
		T)
	   (T (STORIN (QUOTE (MOV21)))
	      (STORIN (QUOTE (POPP)))
	      NIL))))))

(CEXP2P
  (LAMBDA (E)                                   (* Determines if E can 
                                                be computed entirely in 
                                                AC2)
    (OR (CONP E)
	(LITATOM E)
	(AND (SELECTQ (CAR E)
		      ((CAR CDR)
			T)
		      (GETP (CAR E)
			    (QUOTE CROPS)))
	     (NULL (CDDR E))
	     (CEXP2P (CADR E))))))

(CARG
  (LAMBDA (L EVF)                               (* COMPILE ARG LIST, EVF
                                                T FOR NLAMBDA, RETURNS 
                                                LENGTH OF ARG LIST)
    (PROG (LNTH)
          (SETQ LNTH 0)
          (MAPC L (FUNCTION (LAMBDA (X)
		    (STORIN (COND
			      ((OR EVF (CONP X))
				(LIST (QUOTE PUSHQ)
				      (COND
					((OR EVF (NULL (QUOP X)))
					  X)
					(T (CADR X)))))
			      ((LZP X)
				(LIST (QUOTE PUSHV)
				      X SP))
			      (T (CEXP X)
				 (QUOTE (PUSHP)))))
		    (PSTEP)
		    (SETQ LNTH (ADD1 LNTH)))))
          (RETURN LNTH))))

(CANYF
  (LAMBDA (V X L)

          (* COMPILE open lambda or nlambda, V is variable 
          list, X is the form, L is list of values)


    (STORIN (PROG ((SP SP)
		   (SP0 SP)
		   (SSP SP)
		   CODE R2)
	          (PROG ((ARGS ARGS)
			 (PCF PCF)
			 (VCF VCF)
			 (BRT (COND
				((AND PCF BRT)
				  (COND
				    (V (SETQ R2 (GENTAG)))
				    (T BRT)))
				(T NIL)))
			 (BRF (COND
				((AND PCF BRF)
				  (COND
				    (V (SETQ R2 (GENTAG)))
				    (T BRF)))
				(T NIL)))
			 LL V1)
		        (SETQ LL (COND
			    ((EQ (CAR X)
				 (QUOTE NLAMBDA))
			      (CARG (COND
				      ((AND V (ATOM V))
					(SETQ V (LIST V))
					(SETQ L (LIST L)))
				      (T L))
				    T))
			    ((AND V (ATOM V))
			      (SETQ LL (CARG L))
			      (SETQ SSP SP)
			      (STORIN (LIST (QUOTE LQI)
					    LL))
			      (PSTEP)
			      (STORIN (QUOTE (PUSHP)))
			      (SETQ V (LIST V))
			      1)
			    (T (CARG L))))
		        (COND
			  ((IGREATERP (SETQ V1 (IDIFFERENCE
					  LL
					  (FLENGTH V)))
				      0)        (* TOO MANY ARGS GIVEN?)
			    (STORIN (LIST (QUOTE UNCOV)
					  V1))
			    (PSTEPN (IMINUS V1))))
		        (SETQ ARGS (APPEND V ARGS))
		        (COND
			  ((NEQ LL 0)
			    (SETQ V (CDR (SETQ L (NTH (SETQ V1
							(COPY V))
						      LL))))
			    (FRPLACD L))
			  (T (SETQ V1)))
		        (COND
			  (BLKFLG (STORIN (LIST (QUOTE BLKBIND)
						V1 V SSP))
				  (SETQ BNDLEV (ADD1 BNDLEV)))
			  (T (COND
			       (V1 (STORIN (LIST (QUOTE BIND)
						 V1 SSP))))
			     (COND
			       (V (STORIN (LIST (QUOTE BINDNIL)
						V SP))))))
		        (COND
			  (V (PSTEPN (FLENGTH V))))
		        (CPROGN (CDDR X))
		        (RETURN))
	          (COND
		    (R2 (GOTOCOMP (SETQ X (GENTAG)))
			(STORETAG R2)
			(COND
			  (BLKFLG (STORIN (QUOTE (UNBIND)))))
			(STORIN (LIST (QUOTE UNCOV)
				      (IDIFFERENCE SP SP0)))
			(GOTOCOMP (OR BRT BRF))
			(STORETAG X)))
	          (COND
		    (BLKFLG (STORIN (QUOTE (UNBIND)))
			    (SETQ BNDLEV (SUB1 BNDLEV))))
	          (COND
		    ((NEQ SP SP0)
		      (STORIN (LIST (QUOTE UNCOV)
				    (IDIFFERENCE SP SP0)))))
	          (RETURN (CONS (QUOTE LAM)
				(DREVERSE CODE)))))))

(CATCOMP
  (LAMBDA (N CD E)

          (* COMPILE SIMPLE FORM IF CAR HAS NO CTYPE, N IS CAR 
          OF FORM, CD IS CDR)


    (PROG (CAD AT)
          (SETQ CAD (CAR CD))
          (SELECTQ N
		   (SETQ (CSETQ CAD (CADR CD)))
		   (CAR (CCRF CAD (QUOTE (A))))
		   (CDR (CCRF CAD (QUOTE (D))))
		   (CONS (CFASTCALL CAD (CADR CD)
				    (QUOTE CONS)))
		   (LIST (CLIST CD))
		   (VAG (CVAG CAD))
		   (FUNCTION (CLAM CD))
		   (ASSEMBLE (CASSEM CD))
		   (ARG (CARGN CAD (CADR CD)))
		   (SETARG (CSETARG CD))
		   (APPLY* (CAPPLY* CD))
		   (BLKAPPLY (CBLKAPPLY CD))
		   (BLKAPPLY* (CBLKAPPLY* CD))
		   (SETN (CNEXP (CADR CD)
				(QUOTE GEN))
			 (STORIN (LIST (QUOTE PSETN)
				       (LIST (VARCOMP CAD)
					     CAD SP))))
		   (FRPLACD (CEXP CAD)
			    (COND
			      ((CEXP2 (CADR CD)
				      (NULL VCF))
				(STORIN (QUOTE (HRLM 1 , 0 (2)))))
			      (T (STORIN (QUOTE (HRLM 2 , 0 (1)))))))
		   (FRPLACA (CEXP CAD)
			    (COND
			      ((CEXP2 (CADR CD)
				      (NULL VCF))
				(STORIN (QUOTE (HRRM 1 , 0 (2)))))
			      (T (STORIN (QUOTE (HRRM 2 , 0 (1)))))))
		   (GETHASH (CFASTCALL CAD (CADR CD)
				       (QUOTE GETHSH)))
		   (EVQ (CEVQ CAD))
		   (COND
		     ((FMEMB N LAMS)
		       (COND
			 ((EQ N FN)
			   (CFUNC N CD))
			 (T (CFA N CD))))
		     ((FMEMB N NLAML)
		       (CFA N CD T))
		     ((FMEMB N NLAMA)
		       (CFA N (LIST CD)
			    T))
		     ((SETQ AT
			 (ARGTYPE (OR (AND BLKFLG (FMEMB N BLKLIBRARY)
					   (GETP N (QUOTE BLKLIBRARYDEF)
						 ))
				      (GETD N)
				      (GETP N (QUOTE EXPR)))))
                                                (* IS DEFINED FUNCTION)
		       (SELECTQ (LOGAND AT 3)
				(1 (CFA N CD T))
				(3 (CFA N (LIST CD)
					T))
				(CFUNC N CD)))
		     (COMPILEUSERFN (COND
				      ((EQ (SETQ AT
					     (APPLY* COMPILEUSERFN CD E)
					     )
					   (QUOTE INSTRUCTIONS)))
				      ((NULL AT)
					(GO ANY))
				      (T (CCEXP AT)
					 (RETURN))))
		     (T                         (* This handles unknown 
                                                fcns)
			(GO ANY))))
      OUT (RESP)
          (RETURN)
      ANY (COND
	    ((NULL (FMEMB N ALAMS))
	      (SETQ ALAMS (CONS N ALAMS))))
          (CFA N CD NIL T)
          (GO OUT))))

(CPROG
  (LAMBDA (V PG)                                (* COMPILE PROG, V is 
                                                variable list, PG is 
                                                PROG statements)
    (COND
      ((EQ TAGS (QUOTE EMPTY))
	(SETQ UDFTGS NIL)))
    (STORIN
      (PROG ((SP SP)
	     (SSP SP)
	     (PR (GENTAG))
	     (SBNDLEV (COND
			(BLKFLG BNDLEV)))
	     (BNDLEV (COND
		       (BLKFLG BNDLEV)))
	     CODE TAGS DFTG W U R2 RE)
	    (PROG ((ARGS ARGS)
		   (PRPCF PCF)
		   (PRVCF VCF)
		   (PRPIF PIF)
		   (PRNCF NCF)
		   (BRT (COND
			  ((AND PCF BRT)
			    (COND
			      (V (SETQ R2 (GENTAG)))
			      (T BRT)))
			  (T NIL)))
		   (BRF (COND
			  ((AND PCF BRF)
			    (COND
			      (V (SETQ R2 (GENTAG)))
			      (T BRF)))
			  (T NIL))))            (* Tags is list of 
                                                referenced tags, dftg is
                                                list of defined tags)
	          (OR (NULL V)
		      (SETQ V (CBIND V)))
	          (COND
		    (BLKFLG (STORIN (QUOTE (SETP)))))
	      A   (COND
		    (PG (COND
			  ((ATOM (SETQ W (CAR PG)))
			    (STORETAG W)
			    (OR (FMEMB W TAGS)
				(SETQ TAGS (CONS W TAGS)))
			    (COND
			      ((FMEMB W DFTG)
				(COMPEM (CONS W
					      (QUOTE (- MULTIPLE 
							DEFINED TAG)))))
			      (T (SETQ DFTG (CONS W DFTG)))))
			  ((CDR PG)
			    (CSTA W))
			  (T (CCEXP W)))
			(SETQ PG (CDR PG))
			(GO A))))
	    (COND
	      (R2 (GOTOCOMP PR)
		  (STORETAG R2)
		  (COND
		    (BLKFLG (STORIN (QUOTE (UNBIND)))))
		  (STORIN (LIST (QUOTE UNCOV)
				V))
		  (GOTOCOMP (OR BRT BRF))))
	    (STORETAG PR)
	    (COND
	      (BLKFLG (STORIN (QUOTE (UNBIND)))))
	    (COND
	      (V (STORIN (LIST (QUOTE UNCOV)
			       V))))
	    (SETQ U (PROGUDT))
	    (RETURN (CONS (QUOTE PROG)
			  (CONS (LIST (QUOTE SETU)
				      U)
				(DREVERSE CODE))))))
    (COND
      ((EQ TAGS (QUOTE EMPTY))
	(PROGCKT)))))

(PROGUDT
  (LAMBDA NIL
    (PROG (U)
          (MAPC TAGS (FUNCTION (LAMBDA (E)
		    (OR (FMEMB E DFTG)
			(SETQ U (CONS (LIST E NIL
					    (CONS (COND
						    (BLKFLG SBNDLEV)
						    (T 0))
						  SSP))
				      U))))))
          (SETQ UDFTGS (CONS U UDFTGS))

          (* U = ((TAG NIL SP) (TAG NIL SP) ...) FOR UNDEFINED 
          TAGS IN A PROG)


          (MAPC
	    DFTG
	    (FUNCTION (LAMBDA (TG)
		(PROG (L W)
		      (SETQ L UDFTGS)           (* SEE IF ANY TAGS 
                                                DEFINED HERE WERE NEEDED
                                                IN A LOWER PROG)
		  A   (COND
			((SETQ L (CDR L))
			  (COND
			    ((SETQ W (CDR (FASSOC TG (CAR L))))
			      (COND
				((NULL (CAR W))
                                                (* STILL NEEDED)
				  (FRPLACA
				    W
				    (COND
				      (BLKFLG (IDIFFERENCE
						(CAADR W)
						SBNDLEV))
				      (T 0)))
				  (FRPLACA (CDR W)
					   (IDIFFERENCE (CDADR W)
							SSP))))))
			  (GO A))
			(T (RETURN)))))))
          (RETURN U))))

(PROGCKT
  (LAMBDA NIL
    (MAPC UDFTGS (FUNCTION (LAMBDA (E)
	      (MAPC E (FUNCTION (LAMBDA (X)
			(COND
			  ((NULL (CADR X))
			    (COMPEM (CONS (CAR X)
					  (QUOTE (- UNDEFINED TAG)))))))
		      )))))))

(CBIND
  (LAMBDA (V)                                   (* BIND PROG variables)
    (PROG ((V1 V)
	   (N 0)
	   (LS 0)
	   (LN 0)
	   V2)

          (* LS is pos of last non atom in arg list, LN is 
          length of arg list)


      A   (SETQ LN (ADD1 LN))
          (COND
	    ((LISTP (CAR V))
	      (SETQ LS LN)))
          (COND
	    ((SETQ V (CDR V))
	      (GO A)))
          (COND
	    ((EQ LN (ADD1 LS))                  (* ONLY 1 BOUND TO NIL)
	      (SETQ LS LN)))
      B   (COND
	    ((EQ LS N)
	      (GO C)))
          (SETQ N (ADD1 N))
          (COND
	    ((ATOM (CAR V1))
	      (STORIN (QUOTE (PUSH PP , KNIL)))
	      (SETQ V2 (NCONC V2 (LIST (CAR V1)))))
	    (T (CEXP (CADAR V1))
	       (STORIN (QUOTE (PUSHP)))
	       (SETQ V2 (NCONC V2 (LIST (CAAR V1))))))
          (PSTEP)
          (COND
	    ((SETQ V1 (CDR V1))
	      (GO B)))
      C   (COND
	    (BLKFLG (STORIN (LIST (QUOTE BLKBIND)
				  V2 V1 SSP))
		    (SETQ SBNDLEV (SETQ BNDLEV (ADD1 BNDLEV))))
	    (T (COND
		 (V2 (STORIN (LIST (QUOTE BIND)
				   V2 SSP))))
	       (COND
		 (V1 (STORIN (LIST (QUOTE BINDNIL)
				   V1 SP))))))
          (COND
	    (V1 (PSTEPN (IDIFFERENCE LN LS))))
          (SETQ ARGS (APPEND (SETQ V2 (APPEND V2 V1))
			     ARGS))
          (SETQ SSP SP)
          (RETURN LN))))

(CRETURN
  (LAMBDA (X RX)                                (* COMPILE RETURN, X IS 
                                                RETURN VALUE, RX NOT 
                                                SUPPLIED)
    (COND
      ((EQ TAGS (QUOTE EMPTY))
	(COMPEM (QUOTE (ILLEGAL RETURN))))
      ((AND (EQ SP SSP)
	    (SETQ RX (SASSOC X RE)))
	(GOTOCOMP (CDR RX)))
      (T (STORETAG (SETQ RX (GENTAG)))
	 (COMP X PRVCF PRPCF PRPIF PRNCF)
	 (COND
	   ((NEQ SP SSP)
	     (STORIN (LIST (QUOTE UNCOV)
			   (IDIFFERENCE SP SSP))))
	   (T (SETQ RE (CONS (CONS X RX)
			     RE))))
	 (COND
	   ((AND BLKFLG (NEQ SBNDLEV BNDLEV))
	     (STORIN (LIST (QUOTE UNBINDN)
			   (IDIFFERENCE BNDLEV SBNDLEV)))))
	 (GOTOCOMP PR)))))

(GOTOCOMP
  (LAMBDA (B)
    (COND
      ((OR (ATOM (CAR CODE))
	   (NEQ (CAAR CODE)
		(QUOTE J)))
	(STORIN (LIST (QUOTE J)
		      B))))))

(CGO
  (LAMBDA (TG)
    (COND
      ((EQ TAGS (QUOTE EMPTY))
	(COMPEM (CONS TG (QUOTE (- ILLEGAL GO))))
	NIL)
      (T (COND
	   ((NULL (FMEMB TG TAGS))
	     (SETQ TAGS (CONS TG TAGS))))
	 (COND
	   ((NEQ SP SSP)
	     (STORIN (LIST (QUOTE UNCOV)
			   (IDIFFERENCE SP SSP)))))
	 (COND
	   ((AND BLKFLG (NEQ SBNDLEV BNDLEV))
	     (STORIN (LIST (QUOTE UNBINDN)
			   (IDIFFERENCE BNDLEV SBNDLEV)))))
	 (GOTOCOMP TG)))))

(CPROGN
  (LAMBDA (L)
    (MAP L (FUNCTION (LAMBDA (Z)
	     (COND
	       ((CDR Z)
		 (CSTA (CAR Z)))
	       (T (CCEXP (CAR Z)))))))))

(CPROG1
  (LAMBDA (L)
    (COND
      ((NULL (CDR L))
	(CCEXP (CAR L)))
      (T (COND
	   (NCF (CNEXP (CAR L)
		       NCF)
		(STORIN (QUOTE (LPUSHN))))
	   (T (CEXP (CAR L))
	      (PSTEP)
	      (STORIN (QUOTE (PUSHP)))))
	 (MAPC (CDR L)
	       (FUNCTION CSTA))
	 (COND
	   (NCF (STORIN (QUOTE (LPOPN))))
	   (T (STORIN (QUOTE (POPP)))
	      (SETQ SP (SUB1 SP))
	      (RESP)))))))

(CSETQ
  (LAMBDA (V E)                                 (* COMPILE SETQ)
    (CEXP E)
    (STORIN (SELECTQ (VARCOMP V)
		     (GREF                      (* This makes SETQ 
                                                COMPILE like RPAQ)
			   (LIST (QUOTE RPQ)
				 V))
		     (VREF (LIST (QUOTE STV)
				 V SP))
		     (LIST (QUOTE STF)
			   V SP)))))

(CFASTCALL
  (LAMBDA (L R S)                               (* COMPILE CONS)
    (CEXP L)
    (CEXP2 R)
    (STORIN (LIST (QUOTE FASTCALL)
		  S SP))))

(CLIST
  (LAMBDA (L)                                   (* Special treatment for
                                                0 or 1 args)
    (COND
      ((NULL (CDR L))
	(COND
	  (L (CFASTCALL (CAR L)
			NIL
			(QUOTE CONS)))
	  (T (LQE NIL))))
      (T (STORIN (LIST (QUOTE LDI)
		       (SETQ L (CARG L))))
	 (SETQ SP (IDIFFERENCE SP L))
	 (STORIN (LIST (QUOTE FASTCALL)
		       (QUOTE LIST)
		       SP))))))

(CCRF
  (LAMBDA (E OPL)                               (* CAR, CDR TYPE FNS- 
                                                OPL IS LIST OF A'S AND 
                                                D'S)
    (COND
      ((LZP E)
	(STORIN (LIST (SELECTQ (CAR OPL)
			       (A (QUOTE CARV))
			       (QUOTE CDRV))
		      E SP))
	(SETQ OPL (CDR OPL)))
      (T (CEXP E)))
    (MAPC OPL (FUNCTION (LAMBDA (Z)
	      (STORIN (SELECTQ Z
			       (A (QUOTE (CAR1)))
			       (QUOTE (CDR1)))))))))

(CCRF2
  (LAMBDA (E OPL)                               (* CAR, CDR TYPE FNS- 
                                                OPL IS LIST OF A'S AND 
                                                D'S)
    (COND
      ((LZP E)
	(STORIN (LIST (SELECTQ (CAR OPL)
			       (A (QUOTE CAR2V))
			       (QUOTE CDR2V))
		      E SP 2))
	(SETQ OPL (CDR OPL)))
      (T (CEXP2 E)))
    (MAPC OPL (FUNCTION (LAMBDA (Z)
	      (STORIN (SELECTQ Z
			       (A (QUOTE (CAR2 2)))
			       (QUOTE (CDR2 2)))))))))

(LZP
  (LAMBDA (E)                                   (* LEFT ZERO P)
    (AND BLKFLG (IDP E)
	 (FMEMB E ARGS)
	 (NULL (FMEMB E SPECVARS)))))

(CVAG
  (LAMBDA (E)
    (CNEXP E (QUOTE GEN))
    (COND
      ((AND (EQ (CAAR CODE)
		(QUOTE MOVE))
	    (EQ (CADAR CODE)
		2))
	(SETQ CODE (CDR CODE))))))

(CCRF
  (LAMBDA (E OPL)                               (* CAR, CDR TYPE FNS- 
                                                OPL IS LIST OF A'S AND 
                                                D'S)
    (COND
      ((LZP E)
	(STORIN (LIST (SELECTQ (CAR OPL)
			       (A (QUOTE CARV))
			       (QUOTE CDRV))
		      E SP))
	(SETQ OPL (CDR OPL)))
      (T (CEXP E)))
    (MAPC OPL (FUNCTION (LAMBDA (Z)
	      (STORIN (SELECTQ Z
			       (A (QUOTE (CAR1)))
			       (QUOTE (CDR1)))))))))

(CEVQ
  (LAMBDA (E)
    (COND
      ((LITATOM E)
	(LQ E)
	(STORIN (QUOTE (PUSHJ CP , PPLOOK)))
	(STORIN (QUOTE (JFCL)))
	(COND
	  ((AND BLKFLG (FMEMB E LOCALFREEVARS))
	    (STORIN (LIST (QUOTE HRRZM)
			  1
			  (QUOTE ,)
			  (LIST (QUOTE FREBND)
				E)))))
	(STORIN (QUOTE (CAR1))))
      (T (CFA (QUOTE EVAL)
	      (CONS (LIST (QUOTE QUOTE)
			  E)))))))

(CFUNC
  (LAMBDA (N L)
    (COND
      ((AND (EQ N FN)
	    (EQ SP 0)
	    PIF)
	(CPI L))
      (T (CFA N L)))))

(CFA
  (LAMBDA (N L EVF FLG)

          (* COMPILE call to function -
          N is name, L is arg list, EVF is T for nlambda -
          FLG T IF FNTYP UNKNOWN)


    (PROG ((BLF (BLKFNP N))
	   (NLP (NOLINKP N))
	   A)
          (SETQ L (CARG L EVF))
          (COND
	    (BLF (PROG NIL
		       (SETQ A (CADDR (FASSOC N CALLTAGS)))
		       (COND
			 ((AND (NULL EVF)
			       (CADR A)
			       (ATOM (CADR A)))
			   (STORIN (LIST (QUOTE PUSHQ)
					 L))
			   (PSTEP)
			   (SETQ L (ADD1 L))
			   (GO A)))
		       (SETQ A (NARGS A))
		   B   (COND
			 ((EQ A L))
			 ((IGREATERP A L)       (* TOO FEW ARGS GIVEN)
			   (STORIN (QUOTE (PUSH PP , KNIL)))
			   (PSTEP)
			   (SETQ L (ADD1 L))
			   (GO B))
			 (T (STORIN (LIST (QUOTE UNCOV)
					  (SETQ A (IDIFFERENCE L A))))))
		   A   (SETQ A (LIST (QUOTE TREF)
				     BLF))
		       (COND
			 ((TESTNM N RETFNS)
			   (STORIN (LIST (QUOTE RCLL)
					 N L A)))
			 (T (STORIN (LIST (QUOTE FCLL)
					  A))))))
	    (T
	      (COND
		((AND FLG (FMEMB N ARGS))
		  (COMPEM (CONS N
				(QUOTE (- NO LONGER INTERPRETED
					  AS FUNCTIONAL ARGUMENT)))))
		(NLP
		  (STORIN
		    (LIST (COND
			    ((IGREATERP L 15)
			      (QUOTE CLL2))
			    ((AND (EQ (CAR (LISTP (CAR CODE)))
				      (QUOTE PUSHP))
				  (NULL (CDAR CODE)))
                                                (* Use ACCALL UUO to 
                                                eliminate in-line PUSH 
                                                instruction)
			      (SETQ CODE (CDR CODE))
			      (QUOTE ACLL))
			    (T (QUOTE CLL)))
			  N L)))
		(T (STORIN (LIST (COND
				   ((IGREATERP L 15)
				     (QUOTE LCLL2))
				   (T (QUOTE LCLL)))
				 N L))))))
          (SETQ SP (IDIFFERENCE SP L))
          (COND
	    ((AND BLKFLG (NULL BLF))            (* RESTORE FF IF GOING 
                                                OUTSIDE BLOCK)
	      (STORIN (LIST (QUOTE MOVE)
			    (QUOTE FF)
			    (QUOTE ,)
			    (ADD1 (IMINUS SP))
			    (QUOTE (PP)))))))))

(CPI
  (LAMBDA (L)
    (PROG (U V W Y Z)
          (SETQ U (LIST NIL))
          (SETQ V IARGS)
      C   (COND
	    ((NULL V)
	      (CARG (CAR U))                    (* STACK UP NEW VALUES)
	      (GO A))
	    ((NEQ (SETQ Z (CAR V))
		  (SETQ Y (CAR L)))
	      (TCONC U Y)                       (* U IS LIST OF NEW 
                                                VALUE EXPRS FOR THOSE 
                                                VARS THAT CHANGE)
                                                (* W IS LIST OF NAMES OF
                                                THOSE VARS THAT CHANGE)
	      (SETQ W (CONS Z W))))
          (SETQ V (CDR V))
          (SETQ L (CDR L))
          (GO C)
      A   (COND
	    (W (STORIN (QUOTE (POPP)))
	       (SETQ SP (SUB1 SP))
	       (STORIN (LIST (QUOTE STV)
			     (CAR W)
			     SP))               (* SET ORIG ARGS TO NEW 
                                                VALUES)
	       (SETQ W (CDR W))
	       (GO A)))
      B   (RETURN (GOTOCOMP FE)))))

(CSF
  (LAMBDA (L X)
    (COND
      ((AND COMPILEUSERFN (COND
	      ((EQ (SETQ X (APPLY* COMPILEUSERFN (CDR L)
				   L))
		   (QUOTE INSTRUCTIONS)))
	      (X (CCEXP X)
		 T))))
      (T (COMPEM (CONS (CAR L)
		       (QUOTE (- NON ATOMIC CAR OF FORM))))
	 (CAPPLY* L)))))

(CAPPLY*
  (LAMBDA (L)
    (SETQ L (CARG L))
    (STORIN (LIST (QUOTE CLLA)
		  (SUB1 L)))
    (SETQ SP (IDIFFERENCE SP L))
    (COND
      (BLKFLG (STORIN (LIST (QUOTE MOVE)
			    (QUOTE FF)
			    (QUOTE ,)
			    (ADD1 (IMINUS SP))
			    (QUOTE (PP))))))))

(CBLKAPPLY
  (LAMBDA (L)
    (COND
      ((NULL BLKFLG)
	(CEXP (CONS (QUOTE APPLY)
		    L)))
      (T (SETQ L (CARG L))
	 (COND
	   ((NEQ L 2)
	     (COND
	       ((IGREATERP L 2)
		 (STORIN (LIST (QUOTE UNCOV)
			       (IDIFFERENCE L 2))))
	       (T (STORIN (QUOTE (PUSHQ NIL)))))))
	 (STORIN (QUOTE (MOVEI 2 , **BLKENT)))
	 (STORIN (QUOTE (PUSHJ CP , BLKAPP)))
	 (SETQ SP (IDIFFERENCE SP L))))))

(CBLKAPPLY*
  (LAMBDA (L)
    (COND
      ((NULL BLKFLG)
	(CAPPLY* L))
      (T (SETQ L (CARG L))
	 (STORIN (LIST (QUOTE BA*)
		       L))
	 (SETQ SP (IDIFFERENCE SP L))))))

(CLAM
  (LAMBDA (L)                                   (* COMPILE (FUNCTION 
                                                ...))
    (COND
      ((ATOM (CAR L))
	(COND
	  ((NULL (CDR L))
	    (LQ (CAR L)))
	  (T (CFA (QUOTE FUNCTION)
		  L T))))
      (T (PROG (G)
	       (SETQ G (PACK (LIST (COND
				     (BLKFLG BLKNAME)
				     (T FN))
				   (GENSYM))))
	       (COMPILE2 G (CAR L))
	       (RETURN (COND
			 ((NULL (CDR L))
			   (LQ G))
			 (T (CFA (QUOTE FUNCTION)
				 (CONS G (CDR L))
				 T)))))))))

(CFNP
  (LAMBDA (A)
    (COND
      ((AND (LISTP A)
	    (EQ (CAR A)
		(QUOTE FUNCTION)))
	(COND
	  ((NULL (CDDR A))
	    (CADR A)))))))

(CARGN
  (LAMBDA (X N)
    (CNEXP N (QUOTE FIXT))
    (LDCOMP X 2)
    (STORIN (QUOTE (SUBI 1 , 1 (2))))
    (STORIN (LIST (QUOTE ADDI)
		  1
		  (QUOTE ,)
		  (LIST (VARCOMP X)
			X SP)))
    (STORIN (QUOTE (HRRZ 1 , ASZ (1))))))

(CSETARG
  (LAMBDA (L)
    (CNEXP (CADR L)
	   (QUOTE FIXT))
    (LDCOMP (CAR L)
	    2)
    (STORIN (QUOTE (SUBI 1 , 1 (2))))
    (STORIN (LIST (QUOTE ADDI)
		  1
		  (QUOTE ,)
		  (LIST (VARCOMP (CAR L))
			(CAR L)
			SP)))
    (OR (CEXP2 (CADDR L)
	       T)
	(STORIN (QUOTE (EXCH 1 , 2))))
    (STORIN (QUOTE (HRRM 1 , ASZ (2))))))

(CPREX
  [LAMBDA (F L)

          (* COMPILE FUNCTIONS WITH BUILT IN RESPONSE TO 
          PREDICATE CONTEXT, F IS NAME, L IS ARG LIST)


    (SELECTQ F
	     (COND
	       (CCOND L))
	     (AND (CAND L))
	     (OR (COR L))
	     (SELECTQ (CSELECTQ L))
	     (PROG (CPROG (CAR L)
			  (CDR L)))
	     (GO (CGO (CAR L)))
	     (RETURN (CRETURN (CAR L)))
	     (PROG1 (CPROG1 L))
	     ((PROGN PROG2)
	       (CPROGN L))
	     (PROGN [SELECTQ F
			     (EQ (CEQ (CAR L)
				      (CADR L)))
			     ((NULL NOT)
			       (CNULL (CAR L)))
			     (ATOM (CATOM (CAR L)))
			     [LITATOM (CEXP (CAR L))
				      (PRED2 (QUOTE STE)
					     (QUOTE STN)
					     (QUOTE (ATOMT]
			     (NUMBERP (CNUMP (CAR L)
					     (QUOTE SKNM)
					     (QUOTE SKNNM)))
			     (MINUSP (CMINUSP (CAR L)))
			     (FIXP (CNUMP (CAR L)
					  (QUOTE SKI)
					  (QUOTE SKNI)))
			     [IGREATERP (CGTLS (CAR L)
					       (CADR L)
					       (QUOTE FIXT)
					       (QUOTE (CAMG . CAMLE))
					       (QUOTE (CAIG . CAILE]
			     [ILESSP (CGTLS (CAR L)
					    (CADR L)
					    (QUOTE FIXT)
					    (QUOTE (CAML . CAMGE))
					    (QUOTE (CAIL . CAIGE]
			     [FGTP (CGTLS (CAR L)
					  (CADR L)
					  (QUOTE FLOATT)
					  (QUOTE (CAMG . CAMLE]
			     (CPREDT (CAR L)
				     (SELECTQ
				       F
				       (LISTP (QUOTE LISTT))
				       (ARRAYP (QUOTE ARRAYT))
				       (FLOATP (QUOTE FLOATT))
				       (SMALLP (QUOTE SMALLT))
				       (STRINGP (QUOTE STPTT))
				       ((SWPARRAYP HANDLEP)
					 (QUOTE HANDLT))
				       (EVAL (GETP F (QUOTE STRUCPRED]
		    (COND
		      (NCF [COMPEM (CONS F
					 (QUOTE (- USED AS ARG
						   TO NUMBER FUNCTION?]
			   (STORIN (LIST (QUOTE FASTCALL)
					 (GETP NCF (QUOTE UBOX))
					 SP])

(CCOND
  (LAMBDA (CX)
    (PROG (CR CLR)                              (* CR IS COND RETURN, 
                                                CLR IS CLAUSE RETURN)
          (COND
	    ((NULL CX)
	      (LQE NIL)
	      (GO R)))
      A   (COND
	    ((CDR CX)                           (* NOT LAST CLAUSE)
	      (COND
		((CDAR CX)                      (* EFFECT EXISTS)
		  (CPRD (CAAR CX)
			NIL
			(SETQ CLR (GENTAG)))
		  (CPROGN (CDAR CX))
		  (GOTOCOMP (OR CR (SETQ CR (GENTAG))))
		  (STORETAG CLR))
		(T                              (* NO EFFECT)
		   (PROG ((PCF T)
			  (BRT (COND
				 (NCF NIL)
				 (T (OR (AND PCF BRT)
					CR
					(SETQ CR (GENTAG))))))
			  (BRF (COND
				 (NCF (SETQ CLR (GENTAG)))))
			  PIF NCF)
		         (CCEXP (CAAR CX)))
		   (COND
		     (NCF (RESPN)
			  (GOTOCOMP (OR CR (SETQ CR (GENTAG))))
			  (STORETAG CLR))))))
	    ((CDAR CX)                          (* LAST CLAUSE, EFFECT 
                                                EXISTS)
	      (COND
		((NEQ (CAAR CX)
		      (QUOTE T))
		  (PROG ((PCF T)
			 (BRF (OR (AND PCF BRF)
				  CR
				  (SETQ CR (GENTAG))))
			 BRT PIF NCF)
		        (CCEXP (CAAR CX)))))
	      (CPROGN (CDAR CX))
	      (GO R))
	    (T (CCEXP (CAAR CX))                (* LAST CLAUSE, NO 
                                                EFFECT)
	       (GO R)))
          (SETQ CX (CDR CX))
          (GO A)
      R   (COND
	    (CR (STORETAG CR)))
          (RETURN))))

(CAND
  (LAMBDA (CX)
    (PROG (CD R RNIL)
          (COND
	    ((NULL CX)
	      (LQE T)
	      (RETURN)))
      A   (COND
	    ((SETQ CD (CDR CX))
	      (CPRD (CAR CX)
		    NIL
		    (COND
		      (VCF (OR RNIL (SETQ RNIL (GENTAG))))
		      (T (OR (AND PCF BRF)
			     R
			     (SETQ R (GENTAG))))))
	      (SETQ CX CD)
	      (GO A))
	    (T (CCEXP (CAR CX))))
          (COND
	    (RNIL (OR (AND PCF BRT)
		      (GOTOCOMP (OR R (SETQ R (GENTAG)))))
		  (STORETAG RNIL)
		  (LQE NIL)))
          (COND
	    (R (STORETAG R))))))

(COR
  (LAMBDA (CX)
    (PROG (R)
          (COND
	    ((NULL CX)
	      (LQE NIL)
	      (RETURN)))
          (PROG ((PCF T)
		 (BRT (OR (AND PCF BRT)
			  (SETQ R (GENTAG))))
		 BRF PIF NCF)                   (* LEAVE VCF SAME, SET 
                                                PCF)
	    A   (COND
		  ((CDR CX)
		    (CCEXP (CAR CX))
		    (COND
		      ((AND (EQ (CAAR CODE)
				(QUOTE LQ))
			    (NULL (CADAR CODE)))
			(SETQ CODE (CDR CODE))))
                                                (* REALLY ONLY NEED 
                                                VALUE IF NOT NIL)
		    (SETQ CX (CDR CX))
		    (GO A))
		  (T (RETURN))))
          (CCEXP (CAR CX))
          (COND
	    (R (COND
		 (NCF (GOTOCOMP (SETQ CX (GENTAG)))))
	       (STORETAG R)
	       (COND
		 (NCF (RESPN)
		      (STORETAG CX))))))))

(CNULL
  (LAMBDA (E)
    (COND
      ((NULL VCF)
	(COND
	  (PCF (CPRD E BRF BRT))
	  (T (CSTA E))))
      (T (PROG ((A (GENTAG)))
	       (COND
		 ((AND PCF BRF)
		   (CPRD E NIL A))
		 (T (CPRD E A)))
	       (COND
		 ((NULL PCF)
		   (STORIN (QUOTE (LQTS))))
		 (T (LQE (AND BRT T))))
	       (STORETAG A)
	       (LQ (AND PCF BRF T)))))))

(CEQ
  (LAMBDA (A1 A2)
    (COND
      ((AND (NULL (ATOM A2))
	    (NULL (QUOP A2))
	    (CONP A1))
	(PROG ((C A1))
	      (SETQ A1 A2)
	      (SETQ A2 C))))
    (COND
      ((NULL A2)
	(CNULL A1))
      (T (CEXP A1)
	 (COND
	   ((SMALLP A2)
	     (CEQN A2))
	   ((OR (EQ A2 T)
		(NUMBERP A2)
		(COND
		  ((QUOP A2)
		    (SETQ A2 (CADR A2)))))
	     (PRED2 (QUOTE SKEQ)
		    (QUOTE SKNEQ)
		    (CONS A2)))
	   (T (CEXP2 A2 T)
	      (PRED2 (QUOTE SKE)
		     (QUOTE SKNE)
		     (QUOTE (2)))))))))

(CEQN
  (LAMBDA (A2)
    (COND
      ((AND (LISTP (CAR CODE))
	    (OR (EQ (CAAR CODE)
		    (QUOTE FASTCALL))
		(EQ (CAAR CODE)
		    (QUOTE FCLL)))
	    (EQ (CADAR CODE)
		(GETP (QUOTE FIXT)
		      (QUOTE MAKE))))
	(SETQ CODE (CDR CODE))
	(COND
	  ((IMMP A2)
	    (PRED2 (QUOTE SKEI)
		   (QUOTE SKNEI)
		   (CONS A2)))
	  (T (PRED2 (QUOTE SKEN)
		    (QUOTE SKNEN)
		    (CONS A2)))))
      (T (PRED2 (QUOTE SKES)
		(QUOTE SKNES)
		(CONS A2))))))

(CATOM
  (LAMBDA (E)
    (CEXP E)
    (PRED2 (QUOTE SKA)
	   (QUOTE SKNA))))

(PRED2
  (LAMBDA (SKT SKF ADR)

          (* USED BY PREDICATES WHOSE VALUE IS T OR NIL, SKT 
          IS MACRO TO SKIP IF TRUE, SKF SKIP IF FALSE, ADR IS 
          ADDRESS OF OPERAND IF ANY)


    (COND
      ((NULL VCF)
	(COND
	  (PCF (STORIN (CONS (COND
			       (BRT SKF)
			       (T SKT))
			     ADR))
	       (STOREJ (OR BRT BRF)))))
      ((NULL PCF)
	(STORIN (CONS SKT ADR))
	(STORIN (QUOTE (LQNS)))
	(LQ T))
      (T (STORIN (CONS (COND
			 (BRF SKT)
			 (T SKF))
		       ADR))
	 (COND
	   (BRF (STORIN (QUOTE (LQNS)))
		(STORIN (QUOTE (LQTS))))
	   (T (STORIN (QUOTE (LQTS)))
	      (STORIN (QUOTE (LQNS)))))
	 (STOREJ (OR BRT BRF))))))

(CNUMP
  (LAMBDA (E SKT SKF)                           (* NUMBERP AND FIXP, 
                                                VALUE IS SELF OF NIL, 
                                                NOT SIMPLE TYPE CHECK)
    (CEXP E)
    (COND
      ((NULL VCF)
	(PRED2 SKT SKF))
      ((NULL PCF)
	(STORIN (CONS SKT))
	(LQ NIL))
      (T (PROG (A)
	       (STORIN (CONS SKF))
	       (STOREJ (OR BRT (SETQ A (GENTAG))))
	       (LQ NIL)
	       (COND
		 (BRF (STOREJ BRF)
		      (STORETAG A))))))))

(CMINUSP
  (LAMBDA (E)
    (CNEXP E (QUOTE GEN))
    (COND
      ((AND (EQ (CAAR CODE)
		(QUOTE MOVE))
	    (EQ (CADAR CODE)
		2))
	(SETQ CODE (CDR CODE))))
    (COND
      ((NULL VCF)
	(COND
	  (PCF (STORIN (CONS (COND
			       (BRT (QUOTE JL))
			       (T (QUOTE JGE)))
			     (CONS (OR BRT BRF)))))))
      (T (PRED2 (QUOTE SKIPL)
		(QUOTE SKIPGE)
		(QUOTE (1)))))))

(CPREDT
  (LAMBDA (E TYP)                               (* COMPILE SIMPLE 
                                                PREDICATE USING TYPE 
                                                CHECK, VALUE SELF OR 
                                                NIL)
    (PROG (A)
          (CEXP E)
          (STORIN (CONS (COND
			  ((AND PCF (OR VCF BRT))
			    (COND
			      ((LISTP TYP)
				(QUOTE PSTNI))
			      (T (QUOTE STN))))
			  ((LISTP TYP)
			    (QUOTE PSTEI))
			  (T (QUOTE STE)))
			(OR (LISTP TYP)
			    (CONS TYP))))
          (COND
	    (PCF (STOREJ (COND
			   (BRT)
			   ((NULL VCF)
			     BRF)
			   (T (SETQ A (GENTAG)))))))
          (COND
	    (VCF (LQ NIL)
		 (COND
		   (A (GOTOCOMP BRF)
		      (STORETAG A))))))))

(CSELECTQ
  (LAMBDA (L)
    (PROG ((SR (GENTAG))
	   CLR CA)
          (COND
	    ((NULL L)
	      (LQE NIL)
	      (RETURN)))
          (CEXP (CAR L))
      A   (SETQ L (CDR L))
          (COND
	    ((CDR L)
	      (COND
		((NLISTP (SETQ CA (CAAR L)))
		  (STORIN (LIST (COND
				  ((SMALLP CA)
				    (QUOTE SKES))
				  (T (QUOTE SKEQ)))
				CA))
		  (STOREJ (SETQ CLR (GENTAG))))
		(T
		  (PROG ((CE (GENTAG)))
		    B   (COND
			  ((CDR CA)
			    (STORIN (LIST (COND
					    ((SMALLP (CAR CA))
					      (QUOTE SKNES))
					    (T (QUOTE SKNEQ)))
					  (CAR CA)))
			    (STOREJ CE)
			    (SETQ CA (CDR CA))
			    (GO B))
			  (T (STORIN (LIST (COND
					     ((SMALLP (CAR CA))
					       (QUOTE SKES))
					     (T (QUOTE SKEQ)))
					   (CAR CA)))
			     (STOREJ (SETQ CLR (GENTAG)))
			     (STORETAG CE))))))
	      (CPROGN (CDAR L))
	      (GOTOCOMP SR)
	      (STORETAG CLR)
	      (GO A))
	    (T (CCEXP (CAR L))
	       (STORETAG SR))))))

(CNEXP
  (LAMBDA (E NTYP)                              (* COMPILE NUMERIC 
                                                EXPRESSION, NTYP IS 
                                                DESIRED NUMBER TYPE)
    (COMP E T NIL NIL NTYP)))

(CNEXP2
  (LAMBDA (E NTYP)                              (* COMPILE NUMBER EXPR 
                                                TO AC2, PRESERVING 
                                                NUMBER IN AC1)
    (COND
      ((NUMBERP E)
	(LQN E NTYP 2))
      (T (STORIN (QUOTE (LPUSHN)))
	 (CNEXP E NTYP)
	 (STORIN (QUOTE (MOV21)))
	 (STORIN (QUOTE (LPOPN)))))))

(CNFNS
  (LAMBDA (L NTYP OP OPM OPI)

          (* COMPILE NUMBER FN, INDEF.
          ARGS, L ARG LIST, NTYP DESIRED TYPE, OP OPCODE)


    (COND
      ((NULL (CDR L))
	(CNEXP (CAR L)
	       NTYP))
      (T
	(PROG ((L1 L)
	       CFLG)
	      (CNEXP (CAR L1)
		     NTYP)
	      (COND
		((EQ (CAAR CODE)
		     (QUOTE LPOPN))
		  (SETQ CODE (CDR CODE)))
		(T (STORIN (QUOTE (LPUSHN)))))
	  A   (COND
		((SETQ L1 (CDR L1))
		  (COND
		    ((NUMBERP (CAR L1))
		      (SETQ CFLG T))
		    (T (CNEXP (CAR L1)
			      NTYP)
		       (STORIN (LIST OPM 1 (QUOTE ,)
				     0
				     (QUOTE (NP))))))
		  (GO A)))
	      (COND
		((EQ (CAAR CODE)
		     (QUOTE LPUSHN))
		  (SETQ CODE (CDR CODE)))
		(T (STORIN (QUOTE (LPOPN)))))
	      (COND
		((NULL CFLG)
		  (RETURN)))
	  B   (COND
		((NULL (SETQ L (CDR L)))
		  (RETURN))
		((NUMBERP (CAR L))
		  (COND
		    ((AND (EQ NTYP (QUOTE FIXT))
			  (IMMP (CAR L)))
		      (STORIN (LIST OPI 1 (QUOTE ,)
				    (FIX (CAR L)))))
		    (T (STORIN
			 (LIST OP 1 (QUOTE ,)
			       (QUOTE =)
			       (SELECTQ NTYP
					(FIXT (FIX (CAR L)))
					(FLOAT (CAR L)))))))))
	      (GO B))))))

(NRESP
  (LAMBDA (TY)

          (* RESPOND TO NCF AND PCF FOR FUNCTIONS WITH NUMERIC 
          RESULTS -
          TY IS RESULT TYPE, NCF IF NOT NIL IS DESIRED TYPE)


    (COND
      ((NULL NCF)                               (* NUMBER NOT WANTED, 
                                                BOX IT IF VALUE NEEDED)
	(COND
	  (VCF (STORIN (COND
			 ((EQ TY (QUOTE FIXT))
			   (QUOTE (FCLL MKN)))
			 (T (LIST (QUOTE FASTCALL)
				  (GETP TY (QUOTE MAKE))
				  SP))))))
	(COND
	  ((AND PCF BRT)
	    (GOTOCOMP BRT))))
      ((EQ NCF TY))
      ((EQ NCF (QUOTE GEN))
	(STORIN (APPEND (QUOTE (MOVE 2 ,))
			(CONS TY))))
      ((EQ TY (QUOTE GEN))
	(STORIN (APPEND (QUOTE (MOVE 3 ,))
			(CONS TY)))
	(STORIN (LIST (QUOTE FASTCALL)
		      (QUOTE CNVNUM)
		      SP)))
      (T (STORIN (LIST (QUOTE FASTCALL)
		       (CDR (ASSOC NCF (GETP TY (QUOTE CONVERT))))
		       SP))))))

(LQN
  (LAMBDA (N NTYP AC)
    (SELECTQ NTYP
	     (FIXT (LDFIX (FIX N)
			  AC))
	     (FLOATT (LDNUM (FLOAT N)
			    AC))
	     (GEN (COND
		    ((FIXP N)
		      (LDFIX N AC)
		      (STORIN (QUOTE (MOVE 2 , FIXT))))
		    ((FLOATP N)
		      (LDNUM N AC)
		      (STORIN (QUOTE (MOVE 2 , FLOATT))))))
	     NIL)))

(LDFIX
  (LAMBDA (N AC)
    (STORIN (LIST (COND
		    ((IMSP N)
		      (SELECTQ AC
			       ((NIL 1)
				 (QUOTE LDI))
			       (QUOTE LDI2)))
		    (T (SELECTQ AC
				((NIL 1)
				  (QUOTE LDN))
				(QUOTE LDN2))))
		  N))))

(LDNUM
  (LAMBDA (N AC)
    (STORIN (LIST (SELECTQ AC
			   ((NIL 1)
			     (QUOTE LDN))
			   (QUOTE LDN2))
		  N))))

(IMMP
  (LAMBDA (N)                                   (* IMMEDIATE PREDICATE, 
                                                POSITIVE NUMBERS)
    (AND (ILESSP N 262144)
	 (IGREATERP N -1))))

(IMSP
  (LAMBDA (N)                                   (* IMMEDIATE PREDICATE, 
                                                SIGNED NUMBER)
    (AND (ILESSP N 131072)
	 (IGREATERP N -131073))))

(CNUMOP2
  (LAMBDA (A1 A2 TYP)

          (* CALLED BY CGTLS AND CNUMOP TO COMPILE 2 NUMERIIC 
          OPERANDS, A1 AND A2, CHOOSE REGULAR OR IMMEDIATE 
          OPCODE AND SET UP ADDRESS FIELD FOR A2, AS A2, = A2, 
          OR 2)


    (COND
      ((AND (NUMBERP A1)
	    (NULL (NUMBERP A2)))
	(CNEXP A2 TYP)
	(STORIN (QUOTE (MOV21)))
	(LQN A1 TYP)
	(QUOTE (2)))
      (T (CNEXP A1 TYP)
	 (COND
	   ((NUMBERP A2)
	     (COND
	       ((AND (EQ TYP (QUOTE FIXT))
		     (IMMP (SETQ A2 (FIX A2))))
		 (SETQ OP OPI)
		 (CONS A2))
	       (T (COND
		    ((EQ TYP (QUOTE FLOATT))
		      (SETQ A2 (FLOAT A2))))
		  (LIST (QUOTE =)
			A2))))
	   (T (CNEXP2 A2 TYP)
	      (QUOTE (2))))))))

(CGTLS
  (LAMBDA (A1 A2 TYP OP OPI)                    (* I AND F -
                                                GREATER AND LESS)
    (SETQ A2 (CNUMOP2 A1 A2 TYP))
    (PRED2 (CAR OP)
	   (CDR OP)
	   (APPEND (QUOTE (1 ,))
		   A2))))

(CNUMOP
  (LAMBDA (A1 A2 TYP OP OPI)                    (* I AND F -
                                                QUOTIENT REMAINDER 
                                                DIFFERENCE, ETC)
    (SETQ A2 (CNUMOP2 A1 A2 TYP))
    (STORIN (CONS OP (APPEND (QUOTE (1 ,))
			     A2)))))

(CLSH
  (LAMBDA (N M OP)
    (CNEXP N (QUOTE FIXT))
    (STORIN (NCONC (LIST OP 1 (QUOTE ,))
		   (COND
		     ((NUMBERP M)
		       (LIST (FIX M)))
		     (T (CNEXP2 M (QUOTE FIXT))
			(QUOTE (0 (2)))))))))

(CCLOSER
  (LAMBDA (A V)
    (CNEXP A (QUOTE FIXT))
    (COND
      ((NUMBERP V)
	(STORIN (QUOTE (MOV21)))
	(CVAG V))
      (T (STORIN (QUOTE (PUSHP)))
	 (PSTEP)
	 (CVAG V)
	 (STORIN (QUOTE (POP PP , 2)))
	 (SETQ SP (SUB1 SP))))
    (STORIN (QUOTE (MOVEM 1 , 0 (2))))))

(CINF
  (LAMBDA (F L)                                 (* COMPILE INTEGER 
                                                NUMBER FUNCTIONS, F IS 
                                                NAME, L IS ARG LIST)
    (SELECTQ F
	     (IPLUS (CNFNS L (QUOTE FIXT)
			   (QUOTE ADD)
			   (QUOTE ADDM)
			   (QUOTE ADDI)))
	     (ITIMES (CNFNS L (QUOTE FIXT)
			    (QUOTE IMUL)
			    (QUOTE IMULM)
			    (QUOTE IMULI)))
	     (LOGOR (CNFNS L (QUOTE FIXT)
			   (QUOTE IOR)
			   (QUOTE IORM)
			   (QUOTE IORI)))
	     (LOGAND (CNFNS L (QUOTE FIXT)
			    (QUOTE AND)
			    (QUOTE ANDM)
			    (QUOTE ANDI)))
	     (LOGXOR (CNFNS L (QUOTE FIXT)
			    (QUOTE XOR)
			    (QUOTE XORM)
			    (QUOTE XORI)))
	     (LSH (CLSH (CAR L)
			(CADR L)
			(QUOTE ASH)))
	     (RSH (CLSH (CAR L)
			(COND
			  ((NUMBERP (CADR L))
			    (IMINUS (CADR L)))
			  (T (LIST (QUOTE IMINUS)
				   (CADR L))))
			(QUOTE ASH)))
	     (LLSH (CLSH (CAR L)
			 (CADR L)
			 (QUOTE LSH)))
	     (LRSH (CLSH (CAR L)
			 (COND
			   ((NUMBERP (CADR L))
			     (IMINUS (CADR L)))
			   (T (LIST (QUOTE IMINUS)
				    (CADR L))))
			 (QUOTE LSH)))
	     (IMINUS (CNEXP (CAR L)
			    (QUOTE FIXT))
		     (STORIN (QUOTE (MOVN 1 , 1))))
	     (IDIFFERENCE (CNUMOP (CAR L)
				  (CADR L)
				  (QUOTE FIXT)
				  (QUOTE SUB)
				  (QUOTE SUBI)))
	     (IQUOTIENT (CNUMOP (CAR L)
				(CADR L)
				(QUOTE FIXT)
				(QUOTE IDIV)
				(QUOTE IDIVI)))
	     (IREMAINDER (CNUMOP (CAR L)
				 (CADR L)
				 (QUOTE FIXT)
				 (QUOTE IDIV)
				 (QUOTE IDIVI))
			 (STORIN (QUOTE (MOVE 1 , 2))))
	     (FIX (CNEXP (CAR L)
			 (QUOTE FIXT)))
	     (LOC (CEXP (CAR L)))
	     (OPENR (CNEXP (CAR L)
			   (QUOTE FIXT))
		    (STORIN (QUOTE (MOVE 1 , 0 (1)))))
	     (CLOSER (CCLOSER (CAR L)
			      (CADR L)))
	     NIL)
    (NRESP (QUOTE FIXT))))

(CFNF
  (LAMBDA (F L)                                 (* COMPILE FLOATING 
                                                NUMBER FUNCTIONS)
    (SELECTQ F
	     (FPLUS (CNFNS L (QUOTE FLOATT)
			   (QUOTE FADR)
			   (QUOTE FADRM)))
	     (FTIMES (CNFNS L (QUOTE FLOATT)
			    (QUOTE FMPR)
			    (QUOTE FMPRM)))
	     (FMINUS (CNEXP (CAR L)
			    (QUOTE FLOATT))
		     (STORIN (QUOTE (MOVN 1 , 1))))
	     (FDIFFERENCE (CNUMOP (CAR L)
				  (CADR L)
				  (QUOTE FLOATT)
				  (QUOTE FSBR)))
	     (FQUOTIENT (CNUMOP (CAR L)
				(CADR L)
				(QUOTE FLOATT)
				(QUOTE FDVR)))
	     (FLOAT (CNEXP (CAR L)
			   (QUOTE FLOATT)))
	     NIL)
    (NRESP (QUOTE FLOATT))))

(CASSEM
  (LAMBDA (L)
    (COND
      ((EQ TAGS (QUOTE EMPTY))
	(SETQ UDFTGS NIL)))
    (STORIN
      (CONS
	(QUOTE PROG)
	(COND
	  ((CAR L)
	    (EVAL
	      (LIST (QUOTE PROG)
		    (APPEND (CAR L)
			    (QUOTE ((SSP SP)
				    TAGS DFTG CODE)))
		    (QUOTE (PROGN (ASSEM1 (CDR L))
				  (RETURN (CONS (LIST (QUOTE SETU)
						      (PROGUDT))
						(DREVERSE CODE))))))))
	  (T (PROG ((SSP SP)
		    TAGS DFTG CODE)
	           (ASSEM1 (CDR L))
	           (RETURN (CONS (LIST (QUOTE SETU)
				       (PROGUDT))
				 (DREVERSE CODE))))))))
    (COND
      ((EQ TAGS (QUOTE EMPTY))
	(PROGCKT)))))

(ASSEM1
  [LAMBDA (L)
    (PROG (CA P)
      A   (COND
	    ((NULL L)
	      (RETURN)))
          [COND
	    [(ATOM (SETQ CA (CAR L)))
	      (STORETAG CA)
	      (OR (FMEMB CA TAGS)
		  (SETQ TAGS (CONS CA TAGS)))
	      (COND
		[(FMEMB CA DFTG)
		  (COMPEM (CONS CA (QUOTE (- MULTIPLE DEFINED TAG, 
					     ASSEMBLE]
		(T (SETQ DFTG (CONS CA DFTG]
	    ((NUMBERP (CAR CA))
	      (STORIN CA))
	    [(SETQ P (GETP (CAR CA)
			   (QUOTE OPD)))
	      (COND
		((NUMBERP P)
		  [COND
		    ([AND [SETQ P (COND
			      ((EQ (CADDR CA)
				   (QUOTE ,))
				(CDDDR CA))
			      (T (CDR CA]
			  (SETQ P (SELECTQ (CAR P)
					   ((@ =)
					     (CADR P))
					   (CAR P)))
			  (LITATOM P)
			  (SELECTQ P
				   ((' *)
				     NIL)
				   T)
			  (NULL (GETP P (QUOTE COREVAL]
		      (SETQ TAGS (CONS P TAGS]
		  (STORIN CA))
		(T (STORIN (CONS (CAR CA)
				 (MAPCAR (CDR CA)
					 (FUNCTION EVAL]
	    [(SETQ P (GETP (CAR CA)
			   (QUOTE AMAC)))
	      (ASSEM1 (COND
			((SELECTQ (CAR P)
				  ([LAMBDA NLAMBDA]
				    T)
				  NIL)
			  (APPLY P (CDR CA)))
			(T (SUBPAIR (CAR P)
				    (CDR CA)
				    (CDR P]
	    (T (SELECTQ
		 (CAR CA)
		 [FASTCALL (COND
			     ((NULL BLKFLG)
			       (STORIN CA))
			     (T (STORIN (LIST (QUOTE FASTCALL)
					      (CADR CA)
					      SP]
		 (CQ (MAPC (CDR CA)
			   (FUNCTION CEXP)))
		 (CQ2 (MAPC (CDR CA)
			    (FUNCTION CEXP2)))
		 [C (MAPC (CDR CA)
			  (FUNCTION (LAMBDA (ASSEMX)
			      (CEXP (EVAL ASSEMX]
		 (VAR (PROG (A B)
			    [SETQ B (CDR (SETQ A (COPY (CADR CA]
			    [COND
			      ((AND (CDR B)
				    (EQ (CADR B)
					(QUOTE ,)))
				(SETQ B (CDDR B]
			    (RPLACA B (LIST (VARCOMP (CAR B))
					    (CAR B)
					    SP))
			    (STORIN A)))
		 (E (MAPC (CDR CA)
			  (FUNCTION EVAL)))
		 (SETQ (STORIN (LIST (SELECTQ (VARCOMP (CADR CA))
					      (VREF (QUOTE STV))
					      (GREF (QUOTE RPQ))
					      (QUOTE STF))
				     (CADR CA)
				     SP)))
		 (* NIL)
		 (PROGN [COMPEM (CONS CA (QUOTE (OPCODE? - ASSEMBLE]
			(STORIN CA]
          (SETQ L (CDR L))
          (GO A])

(CMAP
  (LAMBDA (X LPART PROGSTUFF LL)

          (* COMPILE MAP FUNCTION, X IS CDR OF MAP FORM, LPART 
          IS THE LIST OF ARGS THAT FN1 IS DONE TO ..
          EITHER (MACROX) OR ((CAR MACROX)), PROGSTUFF IS BODY 
          OF RESULTING PROG WHERE MACROX IS BOUND TO THE LIST, 
          MAPF IS DUMMY FOR PROPER FORM TO DO FN1 TO LPART AND 
          MAPF2 IS DUMMY FOR FORM TO DO FN2 OR CDR TO LIST , 
          LL IS LIST OF EXTRA DUMMY ARGS NEEDED IN PROG 
          (E. G. MACROY ETC.))


    (PROG (Q)
          (RETURN
	    (SUBPAIR
	      (QUOTE (MAPX MAPF MAPF2 B))
	      (LIST
		(CAR X)
		(COND
		  ((SETQ Q (CFNP (CADR X)))
		    (CONS Q LPART))
		  (T (SETQ LL (CONS (LIST (QUOTE MACROF)
					  (CADR X))
				    LL))
		     (CONS (QUOTE APPLY*)
			   (CONS (QUOTE MACROF)
				 LPART))))
		(COND
		  ((CDDR X)
		    (COND
		      ((SETQ Q (CFNP (CADDR X)))
			(CONS Q (QUOTE (MACROX))))
		      (T (SETQ LL
			   (CONS (LIST (QUOTE MACROF2)
				       (LIST (QUOTE OR)
					     (CADDR X)
					     (QUOTE (QUOTE CDR))))
				 LL))
			 (QUOTE (APPLY* MACROF2 MACROX)))))
		  (T (QUOTE (CDR MACROX))))
		LL)
	      (CONS (QUOTE PROG)
		    (CONS (QUOTE ((MACROX MAPX) . B))
			  PROGSTUFF)))))))

(CSYNTAXP
  [LAMBDA (CH CLASS TABLE)
    (COND
      [(NOT (QUOP CLASS))
	(SUBPAIR (QUOTE (CH CLASS TABLE))
		 (LIST CH CLASS TABLE)
		 (QUOTE (ASSEMBLE NIL
			          (CQ CH)
			          (PUSHP)
			          (E (PSTEP))
			          (CQ CLASS)
			          (PUSHP)
			          (E (PSTEP))
			          (CQ TABLE)
			          (PUSHP)
			          (E (PSTEP))
			          (CCALL 3 , ' SYNTAXP)
			          (E (PSTEPN -3]
      [(FMEMB (SETQ CLASS (CADR CLASS))
	      (QUOTE (DELETECHAR CHARDELETE DELETELINE LINEDELETE 
				 RETYPE CNTRLV CTRLV EOL)))
	(LIST (QUOTE EQ)
	      (LIST (QUOTE VAG)
		    (LIST (QUOTE LOGAND)
			  CH 127))
	      (LIST (QUOTE CAR)
		    (LIST (QUOTE VAG)
			  (LIST (QUOTE IPLUS)
				(LIST (QUOTE LOC)
				      (LIST (QUOTE GETTERMTABLE)
					    TABLE))
				(SELECTQ CLASS
					 ((DELETECHAR CHARDELETE)
					   2)
					 ((LINEDELETE DELETELINE)
					   3)
					 (RETYPE 4)
					 ((CNTRLV CTRLV)
					   5)
					 (EOL 6)
					 (HELP]
      [(EQ CLASS (QUOTE NONE))
	(SUBPAIR
	  (QUOTE (TABLE CH))
	  (LIST TABLE CH)
	  (QUOTE
	    (ASSEMBLE NIL
		      (CQ (VAG (LOGAND CH 177Q)))
		      [C
			(COND
			  [(CEXP2
			      (QUOTE (VAG (IPLUS (LOC (GETTERMTABLE
							TABLE))
						 2)))
			      T)
			    (QUOTE (ASSEMBLE NIL
					     (HRLI 1 , -5)
					 LP  (CAMN 2 , 0 (1))
					     (JRST * 3)
					     (AOBJN 1 , LP]
			  (T (QUOTE (ASSEMBLE NIL
					      (HRLI 2 , -5)
					  LP  (CAMN 1 , 0 (2))
					      (JRST * 3)
					      (AOBJN 2 , LP]
		      (SKIPA 1 , KT)
		      (MOVE 1 , KNIL]
      (T [SETQ CH
	   (LIST (QUOTE LOC)
		 (LIST (QUOTE CDR)
		       (LIST (QUOTE VAG)
			     (LIST (QUOTE IPLUS)
				   (LIST (QUOTE LOGAND)
					 CH 127)
				   2
				   (LIST (QUOTE LOC)
					 (LIST (QUOTE GETREADTABLE)
					       TABLE]
	 (SELECTQ CLASS
		  [(BREAK SEPR)
		    (LIST (QUOTE NEQ)
			  0
			  (LIST (QUOTE LOGAND)
				CH
				(SELECTQ CLASS
					 (BREAK 128)
					 (SEPR 64)
					 (HELP]
		  [(MACRO SPLICE INFIX LEFTPAREN RIGHTPAREN LEFTBRACKET 
			  RIGHTBRACKET BREAKCHAR SEPRCHAR STRINGDELIM 
			  ESCAPE OTHER)
		    (LIST (QUOTE EQ)
			  CH
			  (SELECTQ CLASS
				   (MACRO 165)
				   (SPLICE 166)
				   (INFIX 167)
				   (LEFTPAREN 163)
				   (RIGHTPAREN 164)
				   (LEFTBRACKET 162)
				   (RIGHTBRACKET 161)
				   (BREAKCHAR 160)
				   (SEPRCHAR 96)
				   (STRINGDELIM 176)
				   (ESCAPE 40)
				   (OTHER 0)
				   (HELP]
		  (COMPEM (CONS CLASS
				(QUOTE (- ILLEGAL SYNTAX CLASS GIVEN
					  TO SYNTAXP])
)
(DEFLIST(QUOTE(
  (CAAR (A A))
  (CADR (D A))
  (CDAR (A D))
  (CDDR (D D))
  (CAAAR (A A A))
  (CAADR (D A A))
  (CADAR (A D A))
  (CADDR (D D A))
  (CDAAR (A A D))
  (CDADR (D A D))
  (CDDAR (A D D))
  (CDDDR (D D D))
  (CAAAAR (A A A A))
  (CAAADR (D A A A))
  (CAADAR (A D A A))
  (CAADDR (D D A A))
  (CADAAR (A A D A))
  (CADADR (D A D A))
  (CADDAR (A D D A))
  (CADDDR (D D D A))
  (CDAAAR (A A A D))
  (CDAADR (D A A D))
  (CDADAR (A D A D))
  (CDADDR (D D A D))
  (CDDAAR (A A D D))
  (CDDADR (D A D D))
  (CDDDAR (A D D D))
  (CDDDDR (D D D D))
))(QUOTE CROPS))
(DEFLIST(QUOTE(
  (CAAR CR)
  (CADR CR)
  (CDAR CR)
  (CDDR CR)
  (CAAAR CR)
  (CAADR CR)
  (CADAR CR)
  (CADDR CR)
  (CDAAR CR)
  (CDADR CR)
  (CDDAR CR)
  (CDDDR CR)
  (CAAAAR CR)
  (CAAADR CR)
  (CAADAR CR)
  (CAADDR CR)
  (CADAAR CR)
  (CADADR CR)
  (CADDAR CR)
  (CADDDR CR)
  (CDAAAR CR)
  (CDAADR CR)
  (CDADAR CR)
  (CDADDR CR)
  (CDDAAR CR)
  (CDDADR CR)
  (CDDDAR CR)
  (CDDDDR CR)
))(QUOTE CTYPE))
(DEFLIST(QUOTE(
  (COND PRED)
  (AND PRED)
  (OR PRED)
  (EQ PRED)
  (NULL PRED)
  (NOT PRED)
  (ATOM PRED)
  (LITATOM PRED)
  (SELECTQ PRED)
  (PROG PRED)
  (GO PRED)
  (RETURN PRED)
  (PROGN PRED)
  (PROG2 PRED)
  (PROG1 PRED)
  (NUMBERP PRED)
  (MINUSP PRED)
  (FIXP PRED)
  (LISTP PRED)
  (ARRAYP PRED)
  (SMALLP PRED)
  (FLOATP PRED)
  (STRINGP PRED)
  (HANDLEP PRED)
  (IGREATERP PRED)
  (ILESSP PRED)
  (FGTP PRED)
  (SWPARRAYP PRED)
  (IPLUS INF)
  (ITIMES INF)
  (LOGOR INF)
  (LOGXOR INF)
  (LOGAND INF)
  (LSH INF)
  (RSH INF)
  (LLSH INF)
  (LRSH INF)
  (IMINUS INF)
  (IDIFFERENCE INF)
  (IQUOTIENT INF)
  (FIX INF)
  (IREMAINDER INF)
  (LOC INF)
  (OPENR INF)
  (CLOSER INF)
  (FPLUS FNF)
  (FTIMES FNF)
  (FDIFFERENCE FNF)
  (FQUOTIENT FNF)
  (FLOAT FNF)
))(QUOTE CTYPE))
(DEFLIST(QUOTE(
  [NEQ ((X Y)
	(NULL (EQ X Y]
  [NLISTP ((X)
	   (NULL (LISTP X]
  (ZEROP ((X)
	  (EQ X 0)))
  (ADD1 ((X)
	 (IPLUS X 1)))
  (AC (X (QUOTE INSTRUCTIONS)))
  (SUB1 ((X)
	 (IDIFFERENCE X 1)))
  [SETQQ ((X V)
	  (SETQ X (QUOTE V]
  [FMEMB ((MACROX MACROY)
	  (ASSEMBLE NIL (CQ MACROX)
		    (E (CEXP2 (QUOTE MACROY)))
		    (PUSHJ CP , FMEMB]
  [FLENGTH ((MACROX)
	    (ASSEMBLE NIL (CQ MACROX)
		      (SETZ 2 , 0)
		      FLENGTHLOOP
		      (CAMN 1 , KNIL)
		      (JRST FLENGTHDONE)
		      (HLRZ 1 , 0 (1))
		      (AOJA 2 , FLENGTHLOOP)
		      FLENGTHDONE
		      (MOVE 1 , 2)
		      (FASTCALL MKN]
  [FLAST ((MACROX)
	  (ASSEMBLE NIL (CQ MACROX)
		    (MOVE 2 , 1)
		    FLASTLOOP
		    (MOVE 1 , 2)
		    (HLRZ 2 , 0 (2))
		    (CAME 2 , KNIL)
		    (JRST FLASTLOOP]
  [FASSOC ((MACROX MACROY)
	   (ASSEMBLE NIL (CQ MACROX)
		     (CQ2 MACROY)
		     (MOVE 4 , 2)
		     (SKIPA 2 , 1)
		     ASSOCTOP
		     (HLRZ 4 , 0 (4))
		     (HRRZ 1 , 0 (4))
		     (HRRZ 3 , 0 (1))
		     (CAIN 3 , 0 (2))
		     (JRST ASSOCBOTTOM 1)
		     (CAME 4 , KNIL)
		     ASSOCBOTTOM
		     (JRST ASSOCTOP]
  [FNTH (LAMBDA (MACROX MACROY)
		(COND ((IGREATERP 1 MACROY)
		       (CONS NIL MACROX))
		      (T (ASSEMBLE NIL (CQ (VAG (FIX MACROY)))
				   (MOVE 2 , 1)
				   (CQ MACROX)
				   (SKIPA)
				   FNTHLOOP
				   (HLRZ 1 , 0 (1))
				   (CAME 1 , KNIL)
				   (SOJG 2 , FNTHLOOP]
  (ERSETQ ((X)
	   (.ERRSETQ. X T)))
  (NLSETQ ((X)
	   (.ERRSETQ. X NIL)))
  [.ERRSETQ. (X (COND (BLKFLG (LIST (QUOTE .ERSET.)
				    (CAR X)
				    (CADR X)
				    (CADDR X)))
		      (T (SUBPAIR (QUOTE (ERF))
				  (PROG (G)
					[SETQ G (PACK (LIST FN
							    (GENSYM]
					(COMPILE2 G
						  (LIST (QUOTE LAMBDA)
							NIL
							(CAR X)))
					(RETURN (LIST G)))
				  (LIST (QUOTE ERRORSET)
					(QUOTE (QUOTE (ERF)))
					(LIST (QUOTE QUOTE)
					      (CADR X))
					(LIST (QUOTE QUOTE)
					      (CADDR X]
  (.ERSET. ((VAL FLG FN)
	    (ASSEMBLE NIL (PUSHQ (QUOTE (DUMMY)))
		      (PUSHQ (QUOTE FLG))
		      (PUSHQ (QUOTE FN))
		      (RCLL (QUOTE ERRORSET)
			    3
			    (QUOTE DOERR))
		      (JRST ON)
		      DOERR
		      (MOVSI 2 , ERRSET)
		      (HRRI 2 , 0 (CP))
		      (PUSH PP , 2)
		      (E (PSTEPN 4))
		      (CQ VAL)
		      (MOVE 2 , KNIL)
		      (FASTCALL CONS)
		      (E (PSTEPN -4))
		      (RET)
		      ON)))
  [MAPLIST
    (X (CMAP X (QUOTE (MACROX))
	     (QUOTE (MAPCLP (COND ((NLISTP MACROX)
				   (RETURN MACROY)))
			    (SETQ MACROW MAPF)
			    [COND [MACROZ (FRPLACD
					    MACROZ
					    (SETQ MACROZ
						  (FRPLACD
						    (CONS MACROW MACROZ]
				  (T (SETQ MACROY (SETQ MACROZ
							(CONS MACROW]
			    (SETQ MACROX MAPF2)
			    (GO MAPCLP)))
	     (QUOTE (MACROY MACROZ MACROW]
  [MAPCAR
    (X (CMAP X (QUOTE ((CAR MACROX)))
	     (QUOTE (MAPCLP (COND ((NLISTP MACROX)
				   (RETURN MACROY)))
			    (SETQ MACROW MAPF)
			    [COND [MACROZ (FRPLACD
					    MACROZ
					    (SETQ MACROZ
						  (FRPLACD
						    (CONS MACROW MACROZ]
				  (T (SETQ MACROY (SETQ MACROZ
							(CONS MACROW]
			    (SETQ MACROX MAPF2)
			    (GO MAPCLP)))
	     (QUOTE (MACROY MACROZ MACROW]
  [MAPCON
    (X (CMAP X (QUOTE (MACROX))
	     (QUOTE (MAPCLP [COND ((NLISTP MACROX)
				   (RETURN MACROY))
				  ((LISTP (SETQ MACROW MAPF))
				   (SETQ MACROZ
					 (FLAST (COND
						  (MACROZ (FRPLACD
							    MACROZ 
							    MACROW))
						  (T (SETQ MACROY 
							   MACROW]
			    (SETQ MACROX MAPF2)
			    (GO MAPCLP)))
	     (QUOTE (MACROY MACROZ MACROW]
  [MAPCONC
    (X (CMAP X (QUOTE ((CAR MACROX)))
	     (QUOTE (MAPCLP [COND ((NLISTP MACROX)
				   (RETURN MACROY))
				  ((LISTP (SETQ MACROW MAPF))
				   (SETQ MACROZ
					 (FLAST (COND
						  (MACROZ (FRPLACD
							    MACROZ 
							    MACROW))
						  (T (SETQ MACROY 
							   MACROW]
			    (SETQ MACROX MAPF2)
			    (GO MAPCLP)))
	     (QUOTE (MACROY MACROZ MACROW]
  [MAP (X (CMAP X (QUOTE (MACROX))
		(QUOTE (MAPLP (COND ((NLISTP MACROX)
				     (RETURN)))
			      MAPF
			      (SETQ MACROX MAPF2)
			      (GO MAPLP]
  [MAPC (X (CMAP X (QUOTE ((CAR MACROX)))
		 (QUOTE (MAPCLP (COND ((NLISTP MACROX)
				       (RETURN)))
				MAPF
				(SETQ MACROX MAPF2)
				(GO MAPCLP]
  [SOME (X (CMAP X (QUOTE ((CAR MACROX)
			   MACROX))
		 (QUOTE (SOMELP (COND ((NLISTP MACROX)
				       (RETURN))
				      (MAPF (RETURN MACROX)))
				(SETQ MACROX MAPF2)
				(GO SOMELP]
  [EVERY (X (CMAP X (QUOTE ((CAR MACROX)
			    MACROX))
		  (QUOTE (MAPCLP (COND ((NLISTP MACROX)
					(RETURN T))
				       ((NULL MAPF)
					(RETURN)))
				 (SETQ MACROX MAPF2)
				 (GO MAPCLP]
  [NOTEVERY (X (CMAP X (QUOTE ((CAR MACROX)
			       MACROX))
		     (QUOTE (MAPCLP (COND ((NLISTP MACROX)
					   (RETURN))
					  ((NULL MAPF)
					   (RETURN T)))
				    (SETQ MACROX MAPF2)
				    (GO MAPCLP]
  [NOTANY (X (CMAP X (QUOTE ((CAR MACROX)
			     MACROX))
		   (QUOTE (SOMELP (COND ((NLISTP MACROX)
					 (RETURN T))
					(MAPF (RETURN)))
				  (SETQ MACROX MAPF2)
				  (GO SOMELP]
  [SUBSET
    (X
      (CMAP
	X
	(QUOTE ((CAR MACROX)))
	(QUOTE
	  (MAPCLP
	    [COND ((NLISTP MACROX)
		   (RETURN MACROY))
		  (MAPF (COND
			  [MACROZ (FRPLACD
				    MACROZ
				    (SETQ MACROZ
					  (FRPLACD (CONS (CAR MACROX)
							 MACROZ]
			  (T (SETQ MACROY (SETQ MACROZ
						(CONS (CAR MACROX]
	    (SETQ MACROX MAPF2)
	    (GO MAPCLP)))
	(QUOTE (MACROY MACROZ]
  (* (X (QUOTE INSTRUCTIONS)))
  [DECLARE (X (PROGN (MAPC X (FUNCTION EVAL))
		     (QUOTE INSTRUCTIONS]
  (SUB1VAR (X (STORIN (LIST (QUOTE SOS)
			    1
			    (QUOTE ,)
			    (LIST (VARCOMP (CAR X))
				  (CAR X)
				  SP)))
	      (QUOTE INSTRUCTIONS)))
  (ADD1VAR (X (STORIN (LIST (QUOTE AOS)
			    1
			    (QUOTE ,)
			    (LIST (VARCOMP (CAR X))
				  (CAR X)
				  SP)))
	      (QUOTE INSTRUCTIONS)))
  [FSTKARG (X (PROG (B)
		    (SETQ B (CARG X))
		    LP
		    (COND ((ILESSP B 3)
			   (STORIN (QUOTE (PUSH PP , KNIL)))
			   (PSTEP)
			   (SETQ B (ADD1 B))
			   (GO LP)))
		    (STORIN (QUOTE (PUSHJ CP , STKARC)))
		    (PSTEPN -3)
		    (STORIN (QUOTE (UNCOV 3)))
		    (RETURN (QUOTE INSTRUCTIONS]
  [FSTKNTH (X (PROG (B)
		    (SETQ B (CARG X))
		    LP
		    (COND ((ILESSP B 3)
			   (STORIN (QUOTE (PUSH PP , KNIL)))
			   (PSTEP)
			   (SETQ B (ADD1 B))
			   (GO LP)))
		    (STORIN (QUOTE (PUSHJ CP , STKNTC)))
		    (PSTEPN -3)
		    (STORIN (QUOTE (UNCOV 3)))
		    (RETURN (QUOTE INSTRUCTIONS]
  [RPTQ ((N F)
	 (PROG ((RPTN N)
		RPTV)
	       RPTQLAB
	       (COND ((IGREATERP RPTN 0)
		      (SETQ RPTV F)
		      (SETQ RPTN (SUB1 RPTN))
		      (GO RPTQLAB)))
	       (RETURN RPTV]
  [NTYP ((X)
	 (LOC (ASSEMBLE NIL (CQ X)
			(LSH 1 , -9)
			(HRRZ 1 , TYPTAB (1))
			(ANDI 1 , 63]
  (TYPEP ((X Y)
	  (EQ (NTYP X)
	      Y)))
  [SYNTAXP (X (CSYNTAXP (CAR X)
			(CADR X)
			(CADDR X]
))(QUOTE MACRO))
(DEFLIST(QUOTE(
  (PUSHN [NLAMBDA ADR [STORIN (APPEND (QUOTE (PUSH NP ,))
				      (OR ADR (QUOTE (1]
		  NIL])
  (POPN [NLAMBDA ADR [STORIN (APPEND (QUOTE (POP NP ,))
				     (OR ADR (QUOTE (1]
		 NIL])
  (NREF [NLAMBDA (I)
		 [STORIN (APPEND I (QUOTE ((NP]
		 NIL])
))(QUOTE AMAC))
[DECLARE: DOEVAL@COMPILE DONTCOPY 
  (RPAQQ COMPMACROS (PSTEP PSTEPN CEXP CSTA STORIN STORETAG GENTAG IDP 
			   QUOP))
(DEFLIST(QUOTE(
  [PSTEP (NIL (SETQ SP (ADD1 SP]
  [PSTEPN ((N)
	   (SETQ SP (IPLUS SP N]
  (CEXP ((E)
	 (COMP E T)))
  (CSTA ((E)
	 (COMP E)))
  [STORIN ((X)
	   (SETQ CODE (CONS X CODE]
  [STORETAG ((X)
	     (SETQ CODE (CONS X CODE]
  [GENTAG (NIL (SETQ TAGNUM (ADD1 TAGNUM]
  [IDP ((I)
	(AND I (LITATOM I)
	     (NEQ I T]
  [QUOP ((Q)
	 (* QUOTE PREDICATE)
	 (AND (LISTP Q)
	      (EQ (CAR Q)
		  (QUOTE QUOTE]
))(QUOTE MACRO))
]
(DEFLIST(QUOTE(
  (GEN GBOX)
  (FIXT MKN)
  (FLOATT MKFN)
))(QUOTE MAKE))
(DEFLIST(QUOTE(
  (GEN GUNBOX)
  (FIXT IUNBOX)
  (FLOATT FUNBOX)
))(QUOTE UBOX))
(DEFLIST(QUOTE(
  (GEN NIL)
  (FIXT ((FLOATT . FXFLT)))
  (FLOATT ((FIXT . FLTFX)))
))(QUOTE CONVERT))
  [RPAQQ COMPBLOCKS
	 ((NIL BLKFNP (LINKFNS . T))
	  (COMPBLOCK NOLINKP BLKFNP CONP EVQ CEXP CSTA CPRD CVPRD CCEXP 
		     COMP EXPANDCOMP LQE RESP RESPN LQ LDCOMP VARCOMP 
		     STOREJ CEXP2 CEXP2P CARG CANYF CATCOMP CPROG 
		     PROGUDT PROGCKT CBIND CRETURN GOTOCOMP CGO CPROGN 
		     CPROG1 CSETQ CFASTCALL CLIST CCRF CCRF2 LZP CVAG 
		     CCRF CEVQ CFUNC CFA CPI CSF CAPPLY* CBLKAPPLY 
		     CBLKAPPLY* CLAM CARGN CSETARG CPREX CCOND CAND COR 
		     CNULL CEQ CEQN CATOM PRED2 CNUMP CMINUSP CPREDT 
		     CSELECTQ CNEXP CNEXP2 CNFNS NRESP LQN LDFIX LDNUM 
		     IMMP IMSP CNUMOP2 CGTLS CNUMOP CLSH CCLOSER CINF 
		     CFNF CASSEM ASSEM1
		     (ENTRIES COMP CEXP CEXP2 CNEXP CNEXP2 CSTA CPRD 
			      CARG VARCOMP ASSEM1)
		     (SPECVARS VCF PCF PIF NCF CODE SP SSP TAGS ARGS 
			       DFTG L EXP BRT BRF)
		     (LOCALFREEVARS FN RE PRVCF PRPCF PRPIF PRNCF PR FE 
				    OP OPI DFTG]
[DECLARE: DONTEVAL@LOAD DOEVAL@COMPILE DONTCOPY
  (BLOCK: NIL BLKFNP (LINKFNS . T))
  (BLOCK: COMPBLOCK NOLINKP BLKFNP CONP EVQ CEXP CSTA CPRD CVPRD CCEXP 
	  COMP EXPANDCOMP LQE RESP RESPN LQ LDCOMP VARCOMP STOREJ CEXP2 
	  CEXP2P CARG CANYF CATCOMP CPROG PROGUDT PROGCKT CBIND CRETURN 
	  GOTOCOMP CGO CPROGN CPROG1 CSETQ CFASTCALL CLIST CCRF CCRF2 
	  LZP CVAG CCRF CEVQ CFUNC CFA CPI CSF CAPPLY* CBLKAPPLY 
	  CBLKAPPLY* CLAM CARGN CSETARG CPREX CCOND CAND COR CNULL CEQ 
	  CEQN CATOM PRED2 CNUMP CMINUSP CPREDT CSELECTQ CNEXP CNEXP2 
	  CNFNS NRESP LQN LDFIX LDNUM IMMP IMSP CNUMOP2 CGTLS CNUMOP 
	  CLSH CCLOSER CINF CFNF CASSEM ASSEM1
	  (ENTRIES COMP CEXP CEXP2 CNEXP CNEXP2 CSTA CPRD CARG VARCOMP 
		   ASSEM1)
	  (SPECVARS VCF PCF PIF NCF CODE SP SSP TAGS ARGS DFTG L EXP 
		    BRT BRF)
	  (LOCALFREEVARS FN RE PRVCF PRPCF PRPIF PRNCF PR FE OP OPI 
			 DFTG))
]
  (RPAQ NLAMA)
  (RPAQ NLAML)
  (RPAQ LAMS)
  (RPAQ ALAMS)
  (RPAQ COMPILEUSERFN)
  (RPAQ COMPILETYPELST)
  (RPAQQ SYS NIL)
  (RPAQQ SYSFNS NIL)
  (RPAQQ LAPFLG T)
  (RPAQQ SVFLG NIL)
  (RPAQQ STRF NIL)
  (RPAQQ LSTFIL T)
  (RPAQQ LCFIL NIL)
[DECLARE: DONTEVAL@LOAD DOEVAL@COMPILE DONTCOPY COMPILERVARS 
  (ADDTOVAR NLAMA)
  (ADDTOVAR NLAML)
]
(DECLARE: DONTCOPY
  (FILEMAP (NIL (2452 62150 (BLOCKCOMPILE2 2464 . 5699) (NOLINKP 5703
. 6175) (BLKFNP 6179 . 6892) (TESTNM 6896 . 7163) (COMPILE2 7167 .
7554) (COMPILE2A 7558 . 9199) (IDP 9203 . 9262) (QUOP 9266 . 9400)
(CONP 9404 . 9718) (EVQ 9722 . 9758) (CEXP 9762 . 9919) (CSTA 9923
. 10152) (CPRD 10156 . 10311) (CVPRD 10315 . 10485) (CCEXP 10489 .
10662) (COMP 10666 . 12276) (EXPANDCOMP 12280 . 12694) (LQE 12698
. 13399) (RESP 13403 . 13728) (RESPN 13732 . 13916) (LQ 13920 . 14226)
(LDCOMP 14230 . 14943) (VARCOMP 14947 . 15193) (GENTAG 15197 . 15254)
(STORETAG 15258 . 15317) (STORIN 15321 . 15378) (STOREJ 15382 . 15662)
(PSTEP 15666 . 15714) (PSTEPN 15718 . 15770) (CEXP2 15774 . 16550)
(CEXP2P 16554 . 16944) (CARG 16948 . 17596) (CANYF 17600 . 19862)
(CATCOMP 19866 . 22189) (CPROG 22193 . 24215) (PROGUDT 24219 . 25323)
(PROGCKT 25327 . 25547) (CBIND 25551 . 26899) (CRETURN 26903 . 27642)
(GOTOCOMP 27646 . 27791) (CGO 27795 . 28232) (CPROGN 28236 . 28378)
(CPROG1 28382 . 28786) (CSETQ 28790 . 29156) (CFASTCALL 29160 . 29315)
(CLIST 29319 . 29750) (CCRF 29754 . 30261) (CCRF2 30265 . 30782) (LZP
30786 . 30930) (CVAG 30934 . 31097) (CCRF 31101 . 31608) (CEVQ 31612
. 31988) (CFUNC 31992 . 32111) (CFA 32115 . 34195) (CPI 34199 . 35240)
(CSF 35244 . 35530) (CAPPLY* 35534 . 35806) (CBLKAPPLY 35810 . 36226)
(CBLKAPPLY* 36230 . 36411) (CLAM 36415 . 36949) (CFNP 36953 . 37097)
(CARGN 37101 . 37341) (CSETARG 37345 . 37696) (CPREX 37700 . 39510)
(CCOND 39514 . 41010) (CAND 41014 . 41575) (COR 41579 . 42434) (CNULL
42438 . 42796) (CEQ 42800 . 43327) (CEQN 43331 . 43803) (CATOM 43807
. 43887) (PRED2 43891 . 44572) (CNUMP 44576 . 45091) (CMINUSP 45095
. 45485) (CPREDT 45489 . 46269) (CSELECTQ 46273 . 47278) (CNEXP 47282
. 47528) (CNEXP2 47532 . 47908) (CNFNS 47912 . 49099) (NRESP 49103
. 50019) (LQN 50023 . 50355) (LDFIX 50359 . 50599) (LDNUM 50603 .
50728) (IMMP 50732 . 50929) (IMSP 50933 . 51132) (CNUMOP2 51136 .
51853) (CGTLS 51857 . 52102) (CNUMOP 52106 . 52406) (CLSH 52410 .
52625) (CCLOSER 52629 . 52910) (CINF 52914 . 54799) (CFNF 54803 .
55498) (CASSEM 55502 . 56130) (ASSEM1 56134 . 58285) (CMAP 58289 .
59546) (CSYNTAXP 59550 . 62147)))))
STOP
