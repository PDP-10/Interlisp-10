(FILECREATED "12-JUL-74 23:37:04" ARITH 30734 )


(DEFINEQ

(SIN
  (LAMBDA (X RADIANSFLG)

          (* X is angle, assumed to be in degrees unless 
          RADIANSFLG is non-nil. Value is sine of angle as 
          floating number. This code has been cribbed by Jim 
          Goodwin from FORTRAN. As I do not understand the 
          algorithm, all subsequent comments are borrowed 
          also. -
          -
          This routine calculates sines after reducing the 
          argument to the first quadrant and checking to 
          overflow bits to determine the quadrant of the 
          original argument. "000" means first quadrant, "001" 
          2nd, "010" 3rd, and "011" the 4th quadrant.
          -
          The algorithm uses a modified Taylor series to 
          calculate the sine of the normalized argument.)


    (ASSEMBLE NIL                               (* E (RADIX 10Q))
	      (CQ (VAG (FLOAT X)))
	      (LDV2 (QUOTE RADIANSFLG)
		    SP 2)
	      (CAMN 2 , KNIL)
	      (FDVR 1 , RFACTOR)                (* Convert to radians)
	      (JFCL)                            (* Clear ovtrap)
	      (PUSHN)                           (* Save arg)
	      (MOVMS 1)                         (* Get abs val of arg)
	      (CAMG 1 , SP2)                    (* Sine of X is X if X 
                                                is smaller than 2^-9)
	      (JRST BOXRET)
	      (FDV 1 , PI/2)                    (* Divide X by PI over 
                                                2)
	      (CAMG 1 , ONE)
	      (JRST NORMALIZED)                 (* arg was in first 
                                                quadrant already)
	      (MULI 1 , 400Q)                   (* Separate fraction and
                                                exponent)
	      (ASH 2 , -202Q (1))               (* Get X modulo 2PI)
	      (JFCL)                            (* Suppress ovtrap.)
	      (MOVEI 1 , 200Q)                  (* Prepare floating 
                                                fraction)
	      (ROT 2 , 3)                       (* Save three bits to 
                                                determine quadrant)
	      (LSHC 1 , 33Q)                    (* Argument now in the 
                                                range (-1,1))
	      (FAD 1 , SP3)                     (* Normalize the 
                                                argument)
	      (JUMPE 2 , NORMALIZED)            (* Reduced to first quad
                                                if bits are "000")
	      (TLCE 2 , 1000Q)                  (* Subtract 1.0 from arg
                                                if bits are "001" or 
                                                "011")
	      (FSB 1 , ONE)
	      (TLCE 2 , 3000Q)                  (* Check for first 
                                                quadrant, "001")
	      (TLNN 2 , 3000Q)                  (* Check for third 
                                                quadrant, "010")
	      (MOVNS 1)                         (* "001" and "010")
	  NORMALIZED
	      (NREF (SKIPGE 0))                 (* Check sign of 
                                                original arg)
	      (MOVNS 1)                         (* Sine of minus X is 
                                                minus sine of X)
	      (NREF (MOVEM 1 , 0))              (* Store reduced arg)
	      (FMPR 1 , 1)                      (* Calculate X squared)
	      (MOVE 2 , SC9)                    (* Get first constant)
	      (FMP 2 , 1)                       (* Multiply by X 
                                                squared)
	      (FAD 2 , SC7)                     (* Add in next constant)
	      (FMP 2 , 1)                       (* Multiply by X 
                                                squared)
	      (FAD 2 , SC5)                     (* Add in next constant)
	      (FMP 2 , 1)                       (* Multiply by X 
                                                squared)
	      (FAD 2 , SC3)                     (* Add in next constant)
	      (FMP 2 , 1)                       (* Multiply by X 
                                                squared)
	      (FAD 2 , PI/2)                    (* Add in last constant)
	      (NREF (FMPRM 2 , 0))

          (* Multiply by X; this is multiply to memory so 
          answer resides at 0<NP>)


	      (JRST BOXRET)
	  SC3 (XWD 577265Q 210372Q)             (* SC3 thru SC11 are 
                                                constants for the taylor
                                                series magic)
	  SC5 (XWD 175506Q 321276Q)
	  SC7 (XWD 606315Q 546346Q)
	  SC9 (XWD 164475Q 536722Q)
	  SP2 (XWD 170000Q 0)
	  SP3 (0)                               (* Floating multiply by 
                                                zero normalizes 
                                                argument)
	  RFACTOR
	      (XWD 206712Q 273406Q)             (* Radians conversion 
                                                factor. Floating value 
                                                of 180/PI)
	  PI/2(XWD 201622Q 77325Q)              (* Floating value of 
                                                PI/2)
	  ONE (XWD 201400Q 0)                   (* Floating value 1.0)
	  BOXRET
	      (POPN)
	      (FASTCALL MKFN)

          (* Be sure to use MKFN, MaKe Floating Number, rather 
          than the normal MKN, MaKe Number, which would treat 
          ac1 as signed integer and make a type 22Q large 
          number.)


	  )))

(COS
  (LAMBDA (X RADIANSFLG)

          (* Just like SIN but after getting arg into radians 
          add PI/2 radians to it.)


    (ASSEMBLE NIL
	      (CQ (VAG (FLOAT X)))
	      (LDV2 (QUOTE RADIANSFLG)
		    SP 2)
	      (CAMN 2 , KNIL)
	      (FDVR 1 , RFACTOR)
	      (JFCL)
	      (FADR 1 , PI/2)                   (* Add PI/2)
	      (PUSHN)
	      (MOVMS 1)
	      (CAMG 1 , SP2)
	      (JRST BOXRET)
	      (FDV 1 , PI/2)
	      (CAMG 1 , ONE)
	      (JRST NORMALIZED)
	      (MULI 1 , 400Q)
	      (ASH 2 , -202Q (1))
	      (JFCL)
	      (MOVEI 1 , 200Q)
	      (ROT 2 , 3)
	      (LSHC 1 , 33Q)
	      (FAD 1 , SP3)
	      (JUMPE 2 , NORMALIZED)
	      (TLCE 2 , 1000Q)
	      (FSB 1 , ONE)
	      (TLCE 2 , 3000Q)
	      (TLNN 2 , 3000Q)
	      (MOVNS 1)
	  NORMALIZED
	      (NREF (SKIPGE 0))
	      (MOVNS 1)
	      (NREF (MOVEM 1 , 0))
	      (FMPR 1 , 1)
	      (MOVE 2 , SC9)
	      (FMP 2 , 1)
	      (FAD 2 , SC7)
	      (FMP 2 , 1)
	      (FAD 2 , SC5)
	      (FMP 2 , 1)
	      (FAD 2 , SC3)
	      (FMP 2 , 1)
	      (FAD 2 , PI/2)
	      (NREF (FMPRM 2 , 0))
	      (JRST BOXRET)
	  SC3 (XWD 577265Q 210372Q)
	  SC5 (XWD 175506Q 321276Q)
	  SC7 (XWD 606315Q 546346Q)
	  SC9 (XWD 164475Q 536722Q)
	  SP2 (XWD 170000Q 0)
	  SP3 (0)
	  RFACTOR
	      (XWD 206712Q 273406Q)
	  PI/2(XWD 201622Q 77325Q)
	  ONE (XWD 201400Q 0)
	  BOXRET
	      (POPN)
	      (FASTCALL MKFN))))

(TAN
  (LAMBDA (X RADIANSFLG)

          (* Computes tangent as sine/cosine.
          The basic sine routine has been made into a 
          subroutine which is called by 
          (PUSHJ CP , BASICSIN) with unboxed floating angle in 
          ac1.)


    (ASSEMBLE NIL
	      (CQ (VAG (FLOAT X)))
	      (LDV2 (QUOTE RADIANSFLG)
		    SP 2)                       (* Do degrees to radians
                                                conversion if necessary 
                                                just as in SIN.)
	      (CAMN 2 , KNIL)
	      (JUMPE 2 , * 4)                   (* If value of cosine 
                                                was non-zero,)
	      (FDVR 1 , RFACTOR)
	      (JFCL)
	      (PUSHN)                           (* Save arg)
	      (FADR 1 , PI/2)                   (* Compute cosine: add 
                                                PI/2 and call basic 
                                                routine)
	      (PUSHJ CP , BASICSIN)
	      (NREF (EXCH 1 , 0))               (* Save value of cosine 
                                                and retrieve arg)
	      (PUSHJ CP , BASICSIN)             (* Compute sine)
	      (POPN 2)                          (* Retrieve cosine)
	      (JUMPE 2 , * 4)
	      (FDVR 1 , 2)                      (* Divide)
	      (JFCL)                            (* Suppress ovtrap)
	      (JRST BOXRET)                     (* Return floating as in
                                                SIN)
	      (JUMPG 1 , * 2)

          (* Otherwise, if value of sine was positive, return 
          plus infinity; if negative, minus infinity.)


	      (SKIPA 1 , MININF)
	      (HRLOI 1 , 377777Q)               (* Make plus infinity.)
	      (JRST BOXRET)
	  MININF
	      (XWD 400000Q 1)                   (* Minus infinity.)
	  BASICSIN

          (* Rest of this pretty much identical to body of 
          SIN, except return by RET instruction and don't box 
          answer.)


	      (PUSHN)
	      (MOVMS 1)
	      (CAMG 1 , SP2)
	      (JRST BSRETURN)
	      (FDV 1 , PI/2)
	      (CAMG 1 , ONE)
	      (JRST NORMALIZED)
	      (MULI 1 , 400Q)
	      (ASH 2 , -202Q (1))
	      (JFCL)
	      (MOVEI 1 , 200Q)
	      (ROT 2 , 3)
	      (LSHC 1 , 33Q)
	      (FAD 1 , SP2)
	      (JUMPE 2 , NORMALIZED)
	      (TLCE 2 , 1000Q)
	      (FSB 1 , ONE)
	      (TLCE 2 , 3000Q)
	      (TLNN 2 , 3000Q)
	      (MOVNS 1)
	  NORMALIZED
	      (NREF (SKIPGE 0))
	      (MOVNS 1)
	      (NREF (MOVEM 1 , 0))
	      (FMPR 1 , 1)
	      (MOVE 2 , SC9)
	      (FMP 2 , 1)
	      (FAD 2 , SC7)
	      (FMP 2 , 1)
	      (FAD 2 , SC5)
	      (FMP 2 , 1)
	      (FAD 2 , SC3)
	      (FMP 2 , 1)
	      (FAD 2 , PI/2)
	      (NREF (FMPRM 2 , 0))
	  BSRETURN
	      (POPN)
	      (RET)

          (* This returns from the basic sine routine to the 
          calls at the top of this function, not from the 
          tangent function itself. Value of BASICSINE is 
          unboxed floating number in ac1.)


	  SC3 (XWD 577265Q 210372Q)
	  SC5 (XWD 175506Q 321276Q)
	  SC7 (XWD 606315Q 546346Q)
	  SC9 (XWD 164475Q 536722Q)
	  SP2 (XWD 170000Q 0)
	  SP3 (0)
	  RFACTOR
	      (XWD 206712Q 273406Q)
	  PI/2(XWD 201622Q 77325Q)
	  ONE (XWD 201400Q 0)
	  BOXRET                                (* Answer is in ac1, not
                                                on numberstack as in SIN
                                                and COS.)
	      (FASTCALL MKFN))))

(EXPT
  (LAMBDA (M N)
    (PROG NIL
          (ASSEMBLE NIL
		    (CQ (VAG M))
		    (PUSHN)
		    (SETZ 1 , 0)
		    (PUSHN)
		    (CAME 2 , FLOATT)
		    (NREF (SETOM 0))
		    (CQ (VAG N))
		    (PUSHN)
		    (SETZ 1 , 0)
		    (PUSHN)
		    (CAME 2 , FLOATT)
		    (NREF (SETOM 0))

          (* We have now stacked: -
          0<NP> flag, -1 if N was floating, else 0;
          -1<NP> unboxed value of N; -
          -2<NP> flag for M; -
          -3<NP> value of M. Now dispatch to appropriate 
          routine, depending on type, sign, etc. of 
          arguments.)


		    (NREF (SKIPN -3))           (* If M, the base, is 0 
                                                use MZERO.)
		    (JRST MZERO)
		    (NREF (SKIPL 0))            (* If N is fixed point, 
                                                we can use MULTORNOT.)
		    (JRST FIXABLE?)             (* Otherwise, call 
                                                FIXABLE to see.)
		    (PUSHJ CP , MULTORNOT)      (* Use MULTORNOT to 
                                                generate value.)
		    (JUMPE 2 , FLOATEND)        (* MULTORNOT returns 
                                                unboxed value in 1, and 
                                                type in 2.0)
		    (JRST FIXEND)

          (* The point of FIXABLE? is to decide if N, which is 
          known to be a floating-point value, is in a range 
          which can be represented in fixed-point format 
          without loss of significance.
          If so, convert it and call MULTORNOT, but do not 
          then forget to return the value in floating format.)


		FIXABLE?
		    (NREF (MOVE 1 , -1))        (* Pick up N.)
		    (PUSHJ CP , FLTFX)          (* Float N.)
		    (PUSHN)                     (* Save fixed version.)
		    (PUSHJ CP , FXFLT)          (* Convert back to 
                                                floating,)
		    (POPN 2)                    (* Retrieve fixed 
                                                version,)
		    (NREF (CAME 1 , -1))        (* And compare the two.)
		    (JRST NEGBASE?)

          (* Not fixable. We must use logs eventually but 
          gotta check for negative base, i.e. value of M, 
          first.)


		    (NREF (MOVEM 2 , -1))

          (* We can use MULTORNOT, using the freshly fixed 
          value of M currently in ac 2.0 First, write the 
          fixed value back on its place on the stack and reset 
          the flag for its new type.)


		    (NREF (SETOM 0))
		    (PUSHJ CP , MULTORNOT)
		    (JUMPE 2 , FLOATEND)        (* Now format return 
                                                depending only on type 
                                                of return in ac 2)
		    (PUSHJ CP , FXFLT)
		    (JRST FLOATEND)             (* Error checks 
                                                preliminary to 
                                                exponentiating with 
                                                logs.)
		NEGBASE?
		    (NREF (SKIPLE -3))          (* If M is positive,)
		    (JRST USELOGS)              (* use logs,)
		    (NREF (SKIPE -3))           (* If M is negative, 
                                                error.)
		    (JRST ILLARG)
		    (NREF (SKIPG -1))           (* Zero to a 
                                                non-positive power is an
                                                error,)
		    (JRST ILLARG)
		    (SETZ 1 ,)                  (* Zero to a positive 
                                                power is floating zero, 
                                                since N was floating.)
		    (JRST FLOATEND)

          (* Compute: -
          (ANTILOG (FTIMES N (LOG M))). From here thru the 
          POPNN just below LOGOUT is borrowed en bloc from the 
          function LOG.)


		USELOGS
		    (PUSHN)
		    (PUSHN)
		    (CQ (VAG (FLOAT M)))
		    (MOVM 1 , 1)
		    (JUMPLE 1 , ILLARG)
		    (CAMN 1 , ONE)
		    (JRST ZERANS)
		    (ASHC 1 , -33Q)
		    (ADDI 1 , 211000Q)
		    (NREF (MOVSM 1 , -1))
		    (MOVSI 1 , 567377Q)
		    (NREF (FADM 1 , -1))
		    (ASH 2 , -10Q)
		    (TLC 2 , 200000Q)
		    (FAD 2 , L1)
		    (MOVE 1 , 2)
		    (FAD 1 , L2)
		    (FDV 2 , 1)
		    (NREF (MOVEM 2 , 0))
		    (FMP 2 , 2)
		    (MOVE 1 , L3)
		    (FMP 1 , 2)
		    (FAD 1 , L4)
		    (FMP 1 , 2)
		    (FAD 1 , L5)
		    (NREF (FMP 1 , 0))
		    (NREF (FAD 1 , -1))
		    (FMP 1 , L6)
		    (JRST LOGOUT)
		ZERANS
		    (SETZ 1)
		LOGOUT
		    (POPNN 2)                   (* LOG of M is in ac1;
                                                multiply by N)
		    (PUSHN)
		    (CQ (VAG (FLOAT N)))
		    (POPN 2)
		    (FMP 1 , 2)

          (* Product in ac1; now take ANTILOG.
          From here down to MULTORNOT is borrowed en bloc from 
          ANTILOG.)


		    (CAML 1 , E8)
		    (CAMLE 1 , E7)
		    (JRST ERRANGE)
		    (MOV21)
		    (SETZ 1 ,)
		    (PUSHN)
		    (PUSHN)
		    (MULI 2 , 400Q)
		    (TSC 2 , 2)
		    (MUL 3 , E5)
		    (ASHC 3 , -242Q (2))
		    (AOSG 3)
		    (AOS 3)
		    (NREF (HRRZM 3 , -1))
		    (JUMPG 4 , ASHH)
		    (TRNN 4 , 377Q)
		    (JRST ASHH)
		    (ADDI 4 , 200Q)
		ASHH(ASH 4 , -10Q)
		    (TLC 4 , 200000Q)
		    (NREF (FADB 4 , 0))
		    (FMP 4 , 4)
		    (MOVE 1 , E2)
		    (FMP 1 , 4)
		    (FAD 4 , E4)
		    (MOVE 2 , E3)
		    (FDV 2 , 4)
		    (FSB 1 , 2)
		    (NREF (MOVE 3 , 0))
		    (FSB 1 , 3)
		    (FAD 1 , E1)
		    (FDVM 3 , 1)
		    (FAD 1 , E6)
		    (NREF (FSC 1 , @ -1))
		    (POPNN 2)
		    (JRST FLOATEND)

          (* MULTORNOT exponentiates by iterative 
          multiplication. N must be fixed point, but M need 
          not be: if M is floating just use floating 
          multiply.)


		MULTORNOT
		    (NREF (SKIPL -2))
		    (JRST FMUL)
		    (NREF (MOVE 1 , -3))
		    (NREF (SKIPGE 2 , -1))
		    (MOVNS 2)
		    (HRRZI 3 , 1)
		IMULP
		    (TRNN 2 , 1)
		    (JRST SUBIMULP)
		    (MUL 3 , 1)
		    (CAME 3 , MONE)
		    (JUMPN 3 , FIXFORFMUL)
		    (ASHC 3 , 1)
		    (CAME 3 , MONE)
		    (JUMPN 3 , FIXFORFMUL)
		    (ASHC 3 , 42Q)
		SUBIMULP
		    (IMUL 1 , 1)
		    (LSH 2 , -1)
		    (JUMPN 2 , IMULP)
		    (MOVE 1 , 3)
		    (SETO 2 ,)
		    (NREF (SKIPL -1))
		    (POPJ CP ,)
		    (PUSHJ CP , FXFLT)
		    (HRLZI 2 , 201400Q)
		    (FDVM 2 , 1)
		    (SETZ 2 ,)
		    (POPJ CP ,)
		FIXFORFMUL
		    (NREF (SETZM -2))
		    (NREF (MOVE 1 , -3))
		    (PUSHJ CP , FXFLT)
		    (NREF (MOVEM 1 , -3))
		FMUL(NREF (MOVE 1 , -3))
		    (NREF (SKIPGE 2 , -1))
		    (MOVNS 2)
		    (HRLZI 3 , 201400Q)
		FMULP
		    (TRNE 2 , 1)
		    (FMP 3 , 1)
		    (FMP 1 , 1)
		    (LSH 2 , -1)
		    (JUMPN 2 , FMULP)
		    (MOVE 1 , 3)
		    (NREF (SKIPL -1))
		    (JRST FMULOUT)

          (* The instruction (JUMPE 1 , ERR) used to be here 
          before the HRLZI. Seems to be check for zero M, 
          which is already thrown out.)


		    (HRLZI 2 , 201400Q)
		    (FDVM 2 , 1)
		FMULOUT
		    (SETZ 2 ,)
		    (POPJ CP ,)
		ERRANGE
		    (CQ (ERROR (QUOTE "VALUE OUT OF RANGE")
			       (QUOTE "EXPT")))
		ILLARG
		    (CQ (ERROR (QUOTE "ILLEGAL EXPONENTIATION:")
			       (LIST (QUOTE EXPT)
				     M N)))
		MONE(XWD -1 -1)
		ONE (XWD 201400Q 0)
		L1  (XWD 577225Q 754146Q)
		L2  (XWD 201552Q 23632Q)
		L3  (XWD 200462Q 532521Q)
		L4  (XWD 200754Q 213604Q)
		L5  (XWD 202561Q 251002Q)
		L6  (XWD 200542Q 710300Q)
		E1  (XWD 204476Q 430062Q)
		E2  (XWD 174433Q 723400Q)
		E3  (XWD 212464Q 770715Q)
		E4  (XWD 207535Q 527022Q)
		E5  (XWD 270524Q 354513Q)
		E6  (XWD 200400Q 0)
		E7  (XWD 207540Q 74636Q)
		E8  (XWD 570232Q 254037Q)
		MZERO
		    (NREF (SKIPGE -1))          (* M is zero.
                                                If N is negatve, that's 
                                                error.)
		    (JRST ILLARG)
		    (SETZM 1)                   (* Zero to positive 
                                                power is zero,)
		    (NREF (SKIPN -1))           (* And zero to zero is 
                                                one.)
		    (HRRZI 1 , 1)
		    (NREF (SKIPN 0))            (* With floating-point 
                                                contagion.)
		    (JRST * 3)
		    (NREF (SKIPE -2))
		    (JRST FIXEND)
		    (PUSHJ CP , FXFLT)
		FLOATEND
		    (PUSHJ CP , MKFN)
		    (CQ (RETURN (AC)))
		FIXEND
		    (PUSHJ CP , MKN)
		    (CQ (RETURN (AC)))))))

(LOG
  (LAMBDA (X)
    (ASSEMBLE NIL
	      (PUSHN)
	      (PUSHN)
	      (CQ (VAG (FLOAT X)))
	      (MOVM 1 , 1)
	      (JUMPLE 1 , ILLARG)
	      (CAMN 1 , ONE)
	      (JRST ZERANS)
	      (ASHC 1 , -33Q)
	      (ADDI 1 , 211000Q)
	      (NREF (MOVSM 1 , -1))
	      (MOVSI 1 , 567377Q)
	      (NREF (FADM 1 , -1))
	      (ASH 2 , -10Q)
	      (TLC 2 , 200000Q)
	      (FAD 2 , L1)
	      (MOVE 1 , 2)
	      (FAD 1 , L2)
	      (FDV 2 , 1)
	      (NREF (MOVEM 2 , 0))
	      (FMP 2 , 2)
	      (MOVE 1 , L3)
	      (FMP 1 , 2)
	      (FAD 1 , L4)
	      (FMP 1 , 2)
	      (FAD 1 , L5)
	      (NREF (FMP 1 , 0))
	      (NREF (FAD 1 , -1))
	      (FMP 1 , L6)
	      (JRST OUT)
	  ILLARG
	      (CQ (ERROR (QUOTE "LOG OF NON-POSITIVE NUMBER:")
			 X))
	  ONE (XWD 201400Q 0)
	  L1  (XWD 577225Q 754146Q)
	  L2  (XWD 201552Q 23632Q)
	  L3  (XWD 200462Q 532521Q)
	  L4  (XWD 200754Q 213604Q)
	  L5  (XWD 202561Q 251002Q)
	  L6  (XWD 200542Q 710300Q)
	  ZERANS
	      (SETZ 1 , 0)
	  OUT (POPNN 2)
	      (FASTCALL MKFN))))

(ANTILOG
  (LAMBDA (X)
    (ASSEMBLE NIL
	      (CQ (VAG (FLOAT X)))
	      (CAML 1 , E8)
	      (CAMLE 1 , E7)
	      (JRST ER)
	      (MOV21)
	      (SETZ 1 ,)
	      (PUSHN)
	      (PUSHN)
	      (MULI 2 , 400Q)
	      (TSC 2 , 2)
	      (MUL 3 , E5)
	      (ASHC 3 , -242Q (2))
	      (AOSG 3)
	      (AOS 3)
	      (NREF (HRRZM 3 , -1))
	      (JUMPG 4 , ASHH)
	      (TRNN 4 , 377Q)
	      (JRST ASHH)
	      (ADDI 4 , 200Q)
	  ASHH(ASH 4 , -10Q)
	      (TLC 4 , 200000Q)
	      (NREF (FADB 4 , 0))
	      (FMP 4 , 4)
	      (MOVE 1 , E2)
	      (FMP 1 , 4)
	      (FAD 4 , E4)
	      (MOVE 2 , E3)
	      (FDV 2 , 4)
	      (FSB 1 , 2)
	      (NREF (MOVE 3 , 0))
	      (FSB 1 , 3)
	      (FAD 1 , E1)
	      (FDVM 3 , 1)
	      (FAD 1 , E6)
	      (NREF (FSC 1 , @ -1))
	      (JRST OUT)
	  ER  (CQ (ERROR (QUOTE "ARG NOT IN RANGE")
			 X))
	  E1  (XWD 204476Q 430062Q)
	  E2  (XWD 174433Q 723400Q)
	  E3  (XWD 212464Q 770715Q)
	  E4  (XWD 207535Q 527022Q)
	  E5  (XWD 270524Q 354513Q)
	  E6  (XWD 200400Q 0)
	  E7  (XWD 207540Q 74636Q)
	  E8  (XWD 570232Q 254037Q)
	      (POPNN 2)
	  OUT (FASTCALL MKFN))))

(GCD
  (LAMBDA (X Y)

          (* Computes the Greatest Common Divisor of X and Y 
          by the euclidean algorithm.
          GCD always returns a positive integer.)


    (LOC (ASSEMBLE NIL
	           (CQ (VAG (FIX Y)))
	           (PUSHN)
	           (CQ (VAG (FIX X)))
	           (POPN 2)
	           (MOVM 1 , 1)
	           (MOVM 2 , 2)
	           (JUMPE 1 , L3)
	           (JUMPE 2 , L4)
	           (CAML 1 , 2)
	           (EXCH 1 , 2)
	           (JRST L2)
	       L1  (MOV21)
	           (MOVE 1 , 3)
	       L2  (IDIV 2 , 1)
	           (JUMPN 3 , L1)
	           (SKIPA)
	       L4  (MOVE 1 , 2)
	       L3))))

(SQRT
  (LAMBDA (N)
    (ASSEMBLE NIL
	      (CQ (VAG (FLOAT N)))
	      (JUMPLE 1 , SQRT4)
	      (MOV21)
	      (SETZ 1 ,)
	      (LSHC 1 , 11Q)
	      (SUBI 1 , 201Q)
	      (ROT 1 , -1)
	      (PUSHN)
	      (JUMPL 1 , SQRT3)
	      (LSH 2 , -11Q)
	      (FSC 2 , 177Q)
	      (MOVE 3 , 2)
	      (FMPRI 2 , 200640Q)
	      (FADRI 2 , 177465Q)
	  SQRT1
	      (MOVE 1 , 3)
	      (FDV 1 , 2)
	      (FAD 2 , 1)
	      (FSC 2 , -1)
	      (MOVE 1 , 3)
	      (FDV 1 , 2)
	      (FADR 1 , 2)
	  SQRT2
	      (POPN 2)
	      (FSC 1 , 0 (2))
	      (JRST BOX)
	  SQRT3
	      (LSH 2 , -11Q)
	      (FSC 2 , 200Q)
	      (MOVEM 2 , 3)
	      (FMPRI 2 , 200450Q)
	      (FADRI 2 , 177660Q)
	      (JRST SQRT1)
	  SQRT4
	      (JUMPE 1 , BOX)
	      (CQ (ERROR (QUOTE "SQRT OF NEGATIVE VALUE")
			 N))
	  BOX (FASTCALL MKFN))))

(ARCCOS
  (LAMBDA (X RADIANSFLG)

          (* Arrcos of X computed by: -
          If X positive, "ARCTAN((SQRT(1-X^2))/X)" -
          If X negative, "PI + ARCTAN((SQRT(1-X^2))/X)" -
          If X zero, PI/2)


    (ASSEMBLE NIL
	      (CQ (VAG (FLOAT X)))
	      (PUSHN)
	      (MOVM 1 , 1)
	      (CAMLE 1 , ONE)
	      (JRST TOOLRG)
	      (JUMPE 1 , ZERARG)
	      (FMPR 1 , 1)
	      (MOVNS 1)
	      (FAD 1 , ONE)

          (* This is the definition of SQRT, without boxing 
          and checks for negative args.)


	      (CQ (ASSEMBLE NIL
			    (JUMPE 1 , OUT)
			    (MOV21)
			    (SETZ 1 ,)
			    (LSHC 1 , 11Q)
			    (SUBI 1 , 201Q)
			    (ROT 1 , -1)
			    (PUSHN)
			    (JUMPL 1 , SQRT3)
			    (LSH 2 , -11Q)
			    (FSC 2 , 177Q)
			    (MOVE 3 , 2)
			    (FMPRI 2 , 200640Q)
			    (FADRI 2 , 177465Q)
			SQRT1
			    (MOVE 1 , 3)
			    (FDV 1 , 2)
			    (FAD 2 , 1)
			    (FSC 2 , -1)
			    (MOVE 1 , 3)
			    (FDV 1 , 2)
			    (FADR 1 , 2)
			SQRT2
			    (POPN 2)
			    (FSC 1 , 0 (2))
			    (JRST OUT)
			SQRT3
			    (LSH 2 , -11Q)
			    (FSC 2 , 200Q)
			    (MOVEM 2 , 3)
			    (FMPRI 2 , 200450Q)
			    (FADRI 2 , 177660Q)
			    (JRST SQRT1)
			OUT))
	      (NREF (FDVR 1 , 0))
	      (CQ (ASSEMBLE NIL
			    (MOVM 2 , 1)
			    (CAMG 2 , A1)
			    (JRST OUT)
			    (HLLO 4 , 1)
			    (CAML 2 , A2)
			    (JRST AT4)
			    (MOVSI 3 , 201400Q)
			    (CAMG 2 , 3)
			    (TRZA 4 , -1)
			    (FDVM 3 , 2)
			    (TLC 4 , 0 (4))
			    (PUSHN 2)
			    (FMP 2 , 2)
			    (MOVE 3 , KB3)
			    (FAD 3 , 2)
			    (MOVE 1 , KA3)
			    (FDVM 1 , 3)
			    (FAD 3 , 2)
			    (FAD 3 , KB2)
			    (MOVE 1 , KA2)
			    (FDVM 1 , 3)
			    (FAD 3 , 2)
			    (FAD 3 , KB1)
			    (MOVE 1 , KA1)
			    (FDV 1 , 3)
			    (FAD 1 , KB0)
			    (NREF (FMP 1 , 0))
			    (TRNE 4 , -1)
			    (FSB 1 , PIOT)
			    (SKIPA)
			AT4 (MOVE 1 , PIOT)
			    (SKIPGE 4)
			    (MOVNS 1)
			    (JRST OUT)
			A1  (XWD 145000Q 0)
			A2  (XWD 233000Q 0)
			KB0 (XWD 176545Q 543401Q)
			KB1 (XWD 203660Q 615617Q)
			KB2 (XWD 202650Q 373270Q)
			KB3 (XWD 201562Q 663021Q)
			KA1 (XWD 202732Q 621643Q)
			KA2 (XWD 574071Q 125540Q)
			KA3 (XWD 600360Q 700773Q)
			PIOT(XWD 201622Q 77325Q)
			PI  (XWD 202622Q 77174Q)
			OUT (POPN 2)
			    (JUMPGE 1 , * 2)
			    (FADR 1 , PI)))
	      (SKIPGE 2)
	      (FAD 1 , PII)
	      (JRST OUT)
	  ZERARG
	      (MOVE 1 , PI2)
	      (JRST OUT)
	  TOOLRG
	      (CQ (ERROR (QUOTE "ARCCOS: ARG NOT IN RANGE")
			 X))
	  ONE (XWD 201400Q 0)
	  PI2 (XWD 201622Q 77325Q)
	  PII (XWD 202622Q 77325Q)
	  FUDGE
	      (XWD 206712Q 273407Q)
	  OUT (LDV2 (QUOTE RADIANSFLG)
		    SP 2)
	      (CAMN 2 , KNIL)
	      (FMPR 1 , FUDGE)
	      (FASTCALL MKFN)
	      (POPNN 1))))

(ARCTAN
  (LAMBDA (X RADIANSFLG)
    (ASSEMBLE NIL
	      (CQ (VAG (FLOAT X)))
	      (MOVM 2 , 1)
	      (CAMG 2 , A1)
	      (JRST OUT)
	      (HLLO 4 , 1)
	      (CAML 2 , A2)
	      (JRST AT4)
	      (MOVSI 3 , 201400Q)
	      (CAMG 2 , 3)
	      (TRZA 4 , -1)
	      (FDVM 3 , 2)
	      (TLC 4 , 0 (4))
	      (PUSHN 2)
	      (FMP 2 , 2)
	      (MOVE 3 , KB3)
	      (FAD 3 , 2)
	      (MOVE 1 , KA3)
	      (FDVM 1 , 3)
	      (FAD 3 , 2)
	      (FAD 3 , KB2)
	      (MOVE 1 , KA2)
	      (FDVM 1 , 3)
	      (FAD 3 , 2)
	      (FAD 3 , KB1)
	      (MOVE 1 , KA1)
	      (FDV 1 , 3)
	      (FAD 1 , KB0)
	      (NREF (FMP 1 , 0))
	      (TRNE 4 , -1)
	      (FSB 1 , PIOT)
	      (SKIPA)
	  AT4 (MOVE 1 , PIOT)
	      (SKIPGE 4)
	      (MOVNS 1)
	      (JRST OUT)
	  A1  (XWD 145000Q 0)
	  A2  (XWD 233000Q 0)
	  KB0 (XWD 176545Q 543401Q)
	  KB1 (XWD 203660Q 615617Q)
	  KB2 (XWD 202650Q 373270Q)
	  KB3 (XWD 201562Q 663021Q)
	  KA1 (XWD 202732Q 621643Q)
	  KA2 (XWD 574071Q 125540Q)
	  KA3 (XWD 600360Q 700773Q)
	  PIOT(XWD 201622Q 77325Q)
	  PI  (XWD 202622Q 77174Q)
	  FUDGE
	      (XWD 206712Q 273407Q)
	  OUT (JUMPGE 1 , * 2)
	      (FADR 1 , PI)

          (* Value is in range +pi/2 to -pi/2 and we want it 
          in range 0 to pi.)


	      (LDV2 (QUOTE RADIANSFLG)
		    SP 2)
	      (CAMN 2 , KNIL)
	      (FMPR 1 , FUDGE)
	      (POPNN 1)
	      (FASTCALL MKFN))))

(ARCSIN
  (LAMBDA (X RADIANSFLG)                        (* ARCSIN computed by: 
                                                "ARCTAN(X/SQRT(1-X^2))")
    (ASSEMBLE NIL
	      (CQ (VAG (FLOAT X)))
	      (PUSHN)
	      (MOVM 1 , 1)
	      (CAMLE 1 , ONE)
	      (JRST TOOLRG)
	      (FMPR 1 , 1)
	      (MOVNS 1)
	      (FAD 1 , ONE)
	      (JUMPN 1 , ASIN1)
	      (MOVE 1 , PIOT)
	      (NREF (SKIPG 0))
	      (MOVNS 1)
	      (JRST OUT)
	  ASIN1                                 (* Definition of SQRT.)
	      (CQ (ASSEMBLE NIL
			    (JUMPE 1 , OUT)
			    (MOV21)
			    (SETZ 1 ,)
			    (LSHC 1 , 11Q)
			    (SUBI 1 , 201Q)
			    (ROT 1 , -1)
			    (PUSHN)
			    (JUMPL 1 , SQRT3)
			    (LSH 2 , -11Q)
			    (FSC 2 , 177Q)
			    (MOVE 3 , 2)
			    (FMPRI 2 , 200640Q)
			    (FADRI 2 , 177465Q)
			SQRT1
			    (MOVE 1 , 3)
			    (FDV 1 , 2)
			    (FAD 2 , 1)
			    (FSC 2 , -1)
			    (MOVE 1 , 3)
			    (FDV 1 , 2)
			    (FADR 1 , 2)
			SQRT2
			    (POPN 2)
			    (FSC 1 , 0 (2))
			    (JRST OUT)
			SQRT3
			    (LSH 2 , -11Q)
			    (FSC 2 , 200Q)
			    (MOVEM 2 , 3)
			    (FMPRI 2 , 200450Q)
			    (FADRI 2 , 177660Q)
			    (JRST SQRT1)
			OUT))
	      (POPN 2)
	      (FDVRM 2 , 1)

          (* This is basically the definition of ARCTAN, 
          without the boxing and unboxing, and radians 
          assumed. Note that the regular ARCTAN, and the 
          version used open in ARCCOS, adjust the range of the 
          return to be 0 thru 180, but this version returns 
          -132Q thru +90, like fortran.)


	      (CQ (ASSEMBLE NIL
			    (MOVM 2 , 1)
			    (CAMG 2 , A1)
			    (JRST OUT)
			    (HLLO 4 , 1)
			    (CAML 2 , A2)
			    (JRST AT4)
			    (MOVSI 3 , 201400Q)
			    (CAMG 2 , 3)
			    (TRZA 4 , -1)
			    (FDVM 3 , 2)
			    (TLC 4 , 0 (4))
			    (PUSHN 2)
			    (FMP 2 , 2)
			    (MOVE 3 , KB3)
			    (FAD 3 , 2)
			    (MOVE 1 , KA3)
			    (FDVM 1 , 3)
			    (FAD 3 , 2)
			    (FAD 3 , KB2)
			    (MOVE 1 , KA2)
			    (FDVM 1 , 3)
			    (FAD 3 , 2)
			    (FAD 3 , KB1)
			    (MOVE 1 , KA1)
			    (FDV 1 , 3)
			    (FAD 1 , KB0)
			    (NREF (FMP 1 , 0))
			    (TRNE 4 , -1)
			    (FSB 1 , PIOT)
			    (SKIPA)
			AT4 (MOVE 1 , PIOT)
			    (SKIPGE 4)
			    (MOVNS 1)
			    (JRST OUT)
			A1  (XWD 145000Q 0)
			A2  (XWD 233000Q 0)
			KB0 (XWD 176545Q 543401Q)
			KB1 (XWD 203660Q 615617Q)
			KB2 (XWD 202650Q 373270Q)
			KB3 (XWD 201562Q 663021Q)
			KA1 (XWD 202732Q 621643Q)
			KA2 (XWD 574071Q 125540Q)
			KA3 (XWD 600360Q 700773Q)
			PIOT(XWD 201622Q 77325Q)
			OUT (POPNN 1)))
	      (JRST OUT)
	  TOOLRG
	      (CQ (ERROR (QUOTE "ARCSIN: ARG NOT IN RANGE")
			 X))
	  ONE (XWD 201400Q 0)
	  PIOT(XWD 201622Q 77325Q)
	  FUDGE
	      (XWD 206712Q 273407Q)
	  OUT (LDV2 (QUOTE RADIANSFLG)
		    SP 2)
	      (CAMN 2 , KNIL)
	      (FMPR 1 , FUDGE)
	      (FASTCALL MKFN))))
)
  (LISPXPRINT (QUOTE ARITHFNS)
	      T)
  (RPAQQ ARITHFNS
	 (SIN COS TAN EXPT LOG ANTILOG GCD SQRT ARCCOS ARCTAN ARCSIN))
  (LISPXPRINT (QUOTE ARITHVARS)
	      T)
  (RPAQQ ARITHVARS ((E (RADIX 10))))
(PROGN (QUOTE JUSTEVALUATE)
(FILEMAP (NIL (53 30494 (SIN 65 . 5663) (COS 5667 . 7128) (TAN 7132
. 10705) (EXPT 10709 . 19403) (LOG 19407 . 20475) (ANTILOG 20479 .
21645) (GCD 21649 . 22307) (SQRT 22311 . 23175) (ARCCOS 23179 . 26047)
(ARCTAN 26051 . 27500) (ARCSIN 27504 . 30491)))))
STOP
