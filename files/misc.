(FILECREATED "15-OCT-74 23:38:29" MISC.;2 30577  

     changes to:  DEFC

     previous date: "15-OCT-74 23:22:50" MISC.;1)


  (LISPXPRINT (QUOTE MISCCOMS)
	      T T)
  [RPAQQ MISCCOMS
	 ((FNS * MISCFNS)
	  (BLOCKS * MISCBLOCKS)
	  (DECLARE: DONTEVAL@LOAD DOEVAL@COMPILE DONTCOPY COMPILERVARS
		    (ADDVARS (NLAMA DEFINEQ ADDTOVAR)
			     (NLAML TIME SUB1VAR SETQQ RPAQQ RPAQ RPTQ 
				    NLSETQ ERSETQ ADD1VAR]
  (RPAQQ MISCFNS
	 (ADD1VAR ADDTOVAR ADDPROP APPEND ASSOC ATTACH CHANGEPROP COPY 
		  DEFLIST DREMOVE DREVERSE DSUBST ERSETQ EVERY FASSOC 
		  FGETD FLAST FLENGTH FMEMB FNTH GET GETP GETLIS 
		  INTERSECTION KWOTE LAST LASTN LCONC LDIFF LENGTH 
		  DEFINEQ DEFC LSUBST MAP MAPC MAP2C MAPCAR MAP2CAR 
		  MAPCON MAPCONC MAPLIST MEMB MEMBER NLEFT NLSETQ 
		  NOTANY NOTEVERY PROP PUTL READFILE REMOVE REMPROP 
		  REVERSE RPT RPTQ RPAQ RPAQQ SASSOC SAVEDEF SAVEDEF1 
		  SETQQ SOME SUB1VAR SUBLIS SUBPAIR SUBPR SUBST SUBSET 
		  TAILP TCONC TIME UNION WRITEFILE))
(DEFINEQ

(ADD1VAR
  (NLAMBDA (ADD1X)
    (SET ADD1X (ADD1 (EVAL ADD1X)))))

(ADDTOVAR
  [NLAMBDA X
    (PROG (VAR)
          (SAVESET (SETQ VAR (CAR X))
		   [UNION (CDR X)
			  (COND
			    ((LISTP (CAR VAR))
			      (CAR VAR]
		   T)
          (RETURN VAR])

(ADDPROP
  [LAMBDA (ATM PROP NEW FLG)
    [COND
      [(NULL ATM)
	(ERRORX (LIST 7 (LIST PROP NEW]
      ((NOT (LITATOM ATM))
	(ERRORX (LIST 14 ATM]
    (PROG ((X ATM))

          (* If FLG is T, NEW is consed onto the front, otherwise 
          NCONCED onto the end.)

                                                (* Value is new PROP value.)
      LOOP[COND
	    [(NLISTP (CDR X))                   (* End of PROP list reached.)
	      (FRPLACD X (LIST PROP (SETQ NEW (LIST NEW]
	    [(EQ (CADR X)
		 PROP)                          (* PROP found.)
	      (FRPLACA (CDDR X)
		       (SETQ NEW (COND
			   (FLG (CONS NEW (CADDR X)))
			   (T (NCONC1 (CADDR X)
				      NEW]
	    ((SETQ X (CDDR X))
	      (GO LOOP))
	    (T 

          (* PROP list ran out on odd cycle.
          Add to beginning of PROP list.)


	       (FRPLACD ATM (CONS PROP (CONS (SETQ NEW (LIST NEW))
					     (CDR ATM]
          (RETURN NEW])

(APPEND
  (LAMBDA L
    (PROG (VAL X TEM (N 0)
	       Y Z)
      LP  (COND
	    ((EQ N L)
	      (RETURN VAL)))
          (SETQ TEM (ARG L (SETQ N (ADD1 N))))
          (COND
	    ((OR (AND (EQ N L)
		      (NEQ L 1))
		 (NLISTP TEM))                  (* Only last one of more
                                                than one is not copied.)
	      (GO LP2)))
          (SETQ Z (SETQ Y (CONS (CAR TEM)
				(CDR TEM))))
      LP1                                       (* Copies top level of 
                                                TEM.)
          (COND
	    ((LISTP (SETQ TEM (CDR TEM)))
	      (SETQ Y (CDR (FRPLACD Y (CONS (CAR TEM)
					    (CDR TEM)))))
	      (GO LP1)))
          (SETQ TEM Z)
      LP2 (COND
	    ((LISTP X)
	      (FRPLACD (SETQ X (LAST X))
		       TEM))
	    (T (SETQ VAL (SETQ X TEM))))
          (GO LP))))

(ASSOC
  (LAMBDA (X Y)
    (PROG NIL
      LP  (COND
	    ((NLISTP Y)
	      (RETURN))
	    ((EQ (CAAR Y)
		 X)
	      (RETURN (CAR Y))))
          (SETQ Y (CDR Y))
          (GO LP))))

(ATTACH
  (LAMBDA (X Y)
    (COND
      ((LISTP Y)
	(FRPLACA (FRPLACD Y (CONS (CAR Y)
				  (CDR Y)))
		 X))
      ((NULL Y)
	(ERRORX (LIST 7 X)))
      (T (ERRORX (LIST 27 Y))))))

(CHANGEPROP
  (LAMBDA (X PROP1 PROP2)
    (COND
      ((NOT (LITATOM X))
	(ERRORX (LIST 14 X)))
      ((SETQ PROP1 (FMEMB PROP1 (CDR X)))
	(FRPLACA PROP1 PROP2)
	X))))

(COPY
  (LAMBDA (X)
    (COND
      ((NLISTP X)
	X)
      (T (PROG (Y Z)
	       (SETQ Y (SETQ Z (LIST (COPY (CAR X)))))
	   LP  (COND
		 ((NLISTP (SETQ X (CDR X)))
		   (FRPLACD Z (COPY X))
		   (RETURN Y)))
	       (SETQ Z (CDR (FRPLACD Z
				     (FRPLACD
				       (CONS (COPY (CAR X))
					     Z)))))
	       (GO LP))))))

(DEFLIST
  [LAMBDA (L PROP)
    (PROG NIL
      LOOP(COND
	    ((NLISTP L)
	      (RETURN)))
          (PUT (CAAR L)
	       PROP
	       (CADAR L))

          (* NOTE: this call to PUT is changed to /PUT later in the 
          loadup.)


          (SETQ L (CDR L))
          (GO LOOP])

(DREMOVE
  (LAMBDA (X L)
    (COND
      ((NLISTP L)
	NIL)
      ((EQ X (CAR L))
	(COND
	  ((CDR L)
	    (FRPLACA L (CADR L))
	    (FRPLACD L (CDDR L))
	    (DREMOVE X L))))
      (T (PROG (Z)
	       (SETQ Z L)
	   LP  (COND
		 ((NLISTP (CDR L))
		   (RETURN Z))
		 ((EQ X (CADR L))
		   (FRPLACD L (CDDR L)))
		 (T (SETQ L (CDR L))))
	       (GO LP))))))

(DREVERSE
  (LAMBDA (L)
    (PROG (Y Z)
      R1  (COND
	    ((NLISTP (SETQ Y L))
	      (RETURN Z)))
          (SETQ L (CDR L))
          (SETQ Z (FRPLACD Y Z))
          (GO R1))))

(DSUBST
  (LAMBDA (X Y Z)
    (PROG (B)
          (COND
	    ((EQ Y (SETQ B Z))
	      (RETURN (COPY X))))
      LP  (COND
	    ((NLISTP Z)
	      (RETURN B))
	    ((COND
		((LITATOM Y)

          (* Most uses involve substitution for an atom, and 
          the check enables avoiding an extra function call 
          (to equal))


		  (EQ Y (CAR Z)))
		(T (EQUAL Y (CAR Z))))
	      (FRPLACA Z (COPY X)))
	    (T (DSUBST X Y (CAR Z))))
          (COND
	    ((AND Y (EQ Y (CDR Z)))
	      (FRPLACD Z (COPY X))
	      (RETURN B)))
          (SETQ Z (CDR Z))
          (GO LP))))

(ERSETQ
  (NLAMBDA (ERSETX)
    (ERRORSET ERSETX T)))

(EVERY
  (LAMBDA (EVERYX EVERYFN1 EVERYFN2)            (* Note that EVERY does 
                                                not compile open, 
                                                although SOME does.)
    (PROG NIL
      LOOP(COND
	    ((NLISTP EVERYX)
	      (RETURN T))
	    ((NULL (APPLY* EVERYFN1 (CAR EVERYX)
			   EVERYX))
	      (RETURN NIL)))
          (SETQ EVERYX (COND
	      (EVERYFN2 (APPLY* EVERYFN2 EVERYX))
	      (T (CDR EVERYX))))
          (GO LOOP))))

(FASSOC
  (LAMBDA (X Y)
    (PROG ((Y0 Y))
      LP  (COND
	    ((NLISTP Y)
	      (COND
		((NULL Y)
		  (RETURN NIL)))
	      (ERROR (QUOTE "bad argument - FASSOC")
		     Y0)                        (* Compiled, this might 
                                                hang, e.g. if Y were a 
                                                number.)
	      )
	    ((EQ (CAAR Y)
		 X)
	      (RETURN (CAR Y))))
          (SETQ Y (CDR Y))
          (GO LP))))

(FGETD
  (LAMBDA (X)
    (COND
      ((LITATOM X)
	(COND
	  ((SUBRP X)                            (* For consistency with 
                                                compiled version.)
	    (CDR (GETD X)))
	  (T (GETD X))))
      (T 

          (* Since FGETD would produce raadom results on this 
          argument when compiled, give an error interpreted to 
          help user findbugs before compiling.)


	 (ERROR (QUOTE "bad argument - FGETD")
		X)))))

(FLAST
  (LAMBDA (X)
    (PROG ((X0 X)
	   XX)
      L   (COND
	    ((NLISTP X)
	      (COND
		((NULL X)
		  (RETURN XX)))
	      (ERROR (QUOTE "bad argument - FLAST")
		     X0)                        (* Compiled, this might 
                                                hang, e.g. if Y were a 
                                                number.)
	      ))
          (SETQ XX X)
          (SETQ X (CDR X))
          (GO L))))

(FLENGTH
  (LAMBDA (X)
    (PROG ((X0 X)
	   (N 0))
      LP  (COND
	    ((NLISTP X)
	      (COND
		((NULL X)
		  (RETURN N)))
	      (ERROR (QUOTE "bad argument - FLENGTH")
		     X0)                        (* Compiled, this might 
                                                hang, e.g. if Y were a 
                                                number.)
	      ))
          (SETQ X (CDR X))
          (SETN N (ADD1 N))                     (* Increment)
          (GO LP))))

(FMEMB
  (LAMBDA (X Y)
    (PROG ((Y0 Y))
      LP  (RETURN (COND
		    ((NLISTP Y)
		      (COND
			((NULL Y)
			  (RETURN NIL)))
		      (ERROR (QUOTE "bad argument - FMEMB")
			     Y0)                (* Compiled, this might 
                                                hang, e.g. if Y were a 
                                                number.)
		      )
		    ((EQ X (CAR Y))
		      Y)
		    (T (SETQ Y (CDR Y))
		       (GO LP)))))))

(FNTH
  (LAMBDA (X N)
    (COND
      ((IGREATERP 1 N)
	(CONS NIL X))
      (T (PROG ((X0 X))
	   LP  (COND
		 ((NLISTP X)
		   (COND
		     ((NULL X)
		       (RETURN NIL)))
		   (ERROR (QUOTE "bad argument - FNTH")
			  X0)                   (* Compiled, this might 
                                                hang, e.g. if Y were a 
                                                number.)
		   )
		 ((NOT (IGREATERP N 1))
		   (RETURN X)))
	       (SETQ X (CDR X))
	       (SETQ N (SUB1 N))
	       (GO LP))))))

(GET
  (LAMBDA (X Y)

          (* Like GETP but works on lists, and does one cdr at 
          a time.)


    (PROG NIL
      LP  (COND
	    ((NLISTP X)
	      (RETURN))
	    ((EQ (CAR X)
		 Y)
	      (RETURN (CADR X))))
          (SETQ X (CDR X))
          (GO LP))))

(GETP
  (LAMBDA (ATM PROP)
    (AND (LITATOM ATM)
	 (PROG ((Z (CDR ATM)))
	   LOOP(COND
		 ((NLISTP Z)
		   (RETURN NIL))
		 ((EQ (CAR Z)
		      PROP)
		   (RETURN (CADR Z))))
	       (SETQ Z (CDDR Z))
	       (GO LOOP)))))

(GETLIS
  (LAMBDA (X PROPS)
    (PROG ((Z (COND
		((LITATOM X)
		  (CDR X))
		(T X))))
      LP  (COND
	    ((OR (NLISTP Z)
		 (FMEMB (CAR Z)
			PROPS))
	      (RETURN Z)))
          (SETQ Z (CDR Z))
          (GO LP))))

(INTERSECTION
  (LAMBDA (X Y)
    (PROG ((R (CONS))
	   S)
      LP  (COND
	    ((NLISTP X)
	      (RETURN (CAR R)))
	    ((COND
		((LITATOM (SETQ S (CAR X)))
		  (AND (FMEMB S Y)
		       (NULL (FMEMB S (CAR R)))))
		(T (AND (MEMBER S Y)
			(NULL (MEMBER S (CAR R))))))
	      (TCONC R S)))
          (SETQ X (CDR X))
          (GO LP))))

(KWOTE
  (LAMBDA (X)
    (LIST (QUOTE QUOTE)
	  X)))

(LAST
  (LAMBDA (X)
    (PROG (XX)
      L   (COND
	    ((NLISTP X)
	      (RETURN XX)))
          (SETQ XX X)
          (SETQ X (CDR X))
          (GO L))))

(LASTN
  (LAMBDA (L N)
    (PROG (X Y)
          (COND
	    ((NLISTP L)
	      (RETURN NIL))
	    ((NULL (SETQ X (FNTH L N)))
	      (RETURN)))
      LP  (COND
	    ((NULL (SETQ X (CDR X)))
	      (RETURN (CONS Y L))))
          (SETQ Y (NCONC1 Y (CAR L)))
          (SETQ L (CDR L))
          (GO LP))))

(LCONC
  (LAMBDA (PTR X)
    (PROG (XX)
          (RETURN (COND
		    ((NULL X)
		      PTR)
		    ((OR (NLISTP X)
			 (CDR (SETQ XX (LAST X))))
		      (SETQ XX X)
		      (GO ERROR))
		    ((NULL PTR)
		      (CONS X XX))
		    ((NLISTP PTR)
		      (SETQ XX PTR)
		      (GO ERROR))
		    ((NULL (CAR PTR))
		      (FRPLACA (FRPLACD PTR XX)
			       X))
		    (T (FRPLACD (CDR PTR)
				X)
		       (FRPLACD PTR XX))))
      ERROR
          (ERROR (QUOTE "bad argument - LCONC")
		 XX))))

(LDIFF
  (LAMBDA (X Y Z)
    (COND
      ((EQ X Y)
	Z)
      ((AND (NULL Y)
	    (NULL Z))
	X)
      (T (PROG (V)
	       (COND
		 (Z (SETQ V (CDR (FRPLACD (SETQ V (FLAST Z))
					  (FRPLACD (CONS (CAR X)
							 V))))))
		 (T (SETQ V (SETQ Z (CONS (CAR X))))))
	   LOOP(SETQ X (CDR X))
	       (COND
		 ((EQ X Y)
		   (RETURN Z))
		 ((NULL X)
		   (RETURN (ERROR (QUOTE "LDIFF: not a tail")
				  Y))))
	       (SETQ V (CDR (FRPLACD V (FRPLACD (CONS (CAR X)
						      V)))))
	       (GO LOOP))))))

(LENGTH
  (LAMBDA (L)
    (PROG ((N 0))
      LP  (COND
	    ((NLISTP L)
	      (RETURN N))
	    (T (SETN N (ADD1 N))
	       (SETQ L (CDR L))
	       (GO LP))))))

(DEFINEQ
  [NLAMBDA X
    (DEFINE X])

(DEFC
  [LAMBDA (NM DF)
    (PROG ((PROP (QUOTE CODE)))
          [COND
	    ((MKSWAPP NM DF)
	      (SETQ DF (MKSWAP DF]
          (COND
	    ((OR (NULL DFNFLG)
		 (EQ DFNFLG T))
	      [COND
		((GETD NM)
		  (VIRGINFN NM T)
		  (COND
		    ((NULL DFNFLG)
		      (PRINT (CONS NM (QUOTE (redefined)))
			     T T)

          (* NOTE: this call to PRINT is changed to LISPXPRINT 
          later in the loadup.)


		      (SAVEDEF NM]
	      (PUTD NM DF)

          (* NOTE: this call to PUTD is changed to /PUTD later 
          in the loadup.)


	      )
	    (T (PUT NM PROP DF)

          (* NOTE: this call to PUT is changed to /PUT later 
          in the loadup.)


	       ))
          (RETURN DF])

(LSUBST
  (LAMBDA (X Y Z)

          (* Substitutes X as a segment for Y in Z.
          E.g. LSUBST ((A B) Y (X Y Z)) is 
          (X A B Z) not meaningful for Y an atom and CDR of a 
          list. if X is NIL, operation effectively deletes Y, 
          i.e. produces a copy without Y in it.)


    (COND
      ((NULL Z)
	NIL)
      ((NLISTP Z)
	(COND
	  ((EQ Y Z)
	    X)
	  (T Z)))
      ((EQUAL Y (CAR Z))
	(NCONC (COPY X)
	       (LSUBST X Y (CDR Z))))
      (T (CONS (LSUBST X Y (CAR Z))
	       (LSUBST X Y (CDR Z)))))))

(MAP
  (LAMBDA (MAPX MAPFN1 MAPFN2)
    (PROG NIL
      LP  (COND
	    ((NLISTP MAPX)
	      (RETURN)))
          (APPLY* MAPFN1 MAPX)
          (SETQ MAPX (COND
	      (MAPFN2 (APPLY* MAPFN2 MAPX))
	      (T (CDR MAPX))))
          (GO LP))))

(MAPC
  (LAMBDA (MAPX MAPFN1 MAPFN2)
    (PROG NIL
      LP  (COND
	    ((NLISTP MAPX)
	      (RETURN)))
          (APPLY* MAPFN1 (CAR MAPX))
          (SETQ MAPX (COND
	      (MAPFN2 (APPLY* MAPFN2 MAPX))
	      (T (CDR MAPX))))
          (GO LP))))

(MAP2C
  (LAMBDA (MAPX MAPY MAPFN1 MAPFN2)
    (PROG NIL
      LP  (COND
	    ((OR (NLISTP MAPX)
		 (NLISTP MAPY))
	      (RETURN)))
          (APPLY* MAPFN1 (CAR MAPX)
		  (CAR MAPY))
          (COND
	    (MAPFN2 (SETQ MAPX (APPLY* MAPFN2 MAPX))
		    (SETQ MAPY (APPLY* MAPFN2 MAPY)))
	    (T (SETQ MAPX (CDR MAPX))
	       (SETQ MAPY (CDR MAPY))))
          (GO LP))))

(MAPCAR
  [LAMBDA (MAPX MAPFN1 MAPFN2)
    (COND
      (MAPX (PROG (MAPL MAPE)
	          [SETQ MAPL (SETQ MAPE (CONS (APPLY* MAPFN1 (CAR MAPX]
	      LP  (COND
		    ([NLISTP (SETQ MAPX (COND
				 (MAPFN2 (APPLY* MAPFN2 MAPX))
				 (T (CDR MAPX]
		      (RETURN MAPL)))
	          [SETQ MAPE (CDR (FRPLACD MAPE
					   (FRPLACD (CONS (APPLY* MAPFN1
								  (CAR MAPX))
							  MAPE]
	          (GO LP])

(MAP2CAR
  (LAMBDA (MAPX MAPY MAPFN1 MAPFN2)
    (COND
      ((AND MAPX MAPY)
	(PROG (MAPL MAPE)
	      (SETQ MAPL (SETQ MAPE (CONS (APPLY* MAPFN1 (CAR MAPX)
						  (CAR MAPY)))))
	  LP  (COND
		((OR (NLISTP (COND
			       (MAPFN2 (SETQ MAPY (APPLY* MAPFN2 MAPY))
				       (SETQ MAPX (APPLY* MAPFN2 MAPX)))
			       (T (SETQ MAPY (CDR MAPY))
				  (SETQ MAPX (CDR MAPX)))))
		     (NLISTP MAPY))
		  (RETURN MAPL)))
	      (SETQ MAPE
		(CDR (FRPLACD MAPE (FRPLACD (CONS (APPLY* MAPFN1
							  (CAR MAPX)
							  (CAR MAPY))
						  MAPE)))))
	      (GO LP))))))

(MAPCON
  (LAMBDA (MAPX MAPFN1 MAPFN2)
    (PROG (MAPL MAPE MAPY)
      LP  (COND
	    ((NLISTP MAPX)
	      (RETURN MAPL))
	    ((LISTP (SETQ MAPY (APPLY* MAPFN1 MAPX)))
	      (COND
		(MAPE (FRPLACD MAPE MAPY))
		(T (SETQ MAPL (SETQ MAPE MAPY))))
	      (PROG NIL
		LP  (COND
		      ((SETQ MAPY (CDR MAPE))
			(SETQ MAPE MAPY)
			(GO LP))))))
          (SETQ MAPX (COND
	      (MAPFN2 (APPLY* MAPFN2 MAPX))
	      (T (CDR MAPX))))
          (GO LP))))

(MAPCONC
  (LAMBDA (MAPX MAPFN1 MAPFN2)
    (PROG (MAPL MAPE MAPY)
      LP  (COND
	    ((NLISTP MAPX)
	      (RETURN MAPL))
	    ((LISTP (SETQ MAPY (APPLY* MAPFN1 (CAR MAPX))))
	      (COND
		(MAPE (FRPLACD MAPE MAPY))
		(T (SETQ MAPL (SETQ MAPE MAPY))))
	      (PROG NIL
		LP  (COND
		      ((SETQ MAPY (CDR MAPE))
			(SETQ MAPE MAPY)
			(GO LP))))))
          (SETQ MAPX (COND
	      (MAPFN2 (APPLY* MAPFN2 MAPX))
	      (T (CDR MAPX))))
          (GO LP))))

(MAPLIST
  (LAMBDA (MAPX MAPFN1 MAPFN2)
    (COND
      (MAPX (PROG (MAPL MAPE)
	          (SETQ MAPL (SETQ MAPE (CONS (APPLY* MAPFN1 MAPX))))
	      LP  (COND
		    ((NLISTP (SETQ MAPX (COND
				 (MAPFN2 (APPLY* MAPFN2 MAPX))
				 (T (CDR MAPX)))))
		      (RETURN MAPL)))
	          (SETQ MAPE (CDR (FRPLACD MAPE
					   (FRPLACD
					     (CONS (APPLY* MAPFN1 MAPX)
						   MAPE)))))
	          (GO LP))))))

(MEMB
  (LAMBDA (X Y)
    (PROG NIL
      LP  (RETURN (COND
		    ((NLISTP Y)
		      NIL)
		    ((EQ X (CAR Y))
		      Y)
		    (T (SETQ Y (CDR Y))
		       (GO LP)))))))

(MEMBER
  (LAMBDA (X Y)
    (PROG NIL
      LP  (RETURN (COND
		    ((NLISTP Y)
		      NIL)
		    ((COND
			((LITATOM X)
			  (EQ X (CAR Y)))
			(T (EQUAL X (CAR Y))))
		      Y)
		    (T (SETQ Y (CDR Y))
		       (GO LP)))))))

(NLEFT
  (LAMBDA (L N TAIL)

          (* Returns TAIL of L containing N elements more than 
          TAIL, e.g. if TAIL is NIL (the usual case) NLEFT 
          ((A B C D E) 2) is (D E). If FOO is 
          (A B C D E) and FIE is (CDDDR FOO), 
          (NLEFT FOO 1 FIE) is (C D E).)


    (PROG ((X L))
      LP  (COND
	    ((ZEROP N)
	      (GO LP1))
	    ((OR (EQ X TAIL)
		 (NLISTP X))
	      (RETURN NIL)))
          (SETQ X (CDR X))
          (SUB1VAR N)
          (GO LP)
      LP1 (COND
	    ((OR (EQ X TAIL)
		 (NLISTP X))
	      (RETURN L)))
          (SETQ X (CDR X))
          (SETQ L (CDR L))
          (GO LP1))))

(NLSETQ
  (NLAMBDA (NLSETX)
    (ERRORSET NLSETX NIL)))

(NOTANY
  (LAMBDA (SOMEX SOMEFN1 SOMEFN2)
    (NULL (SOME SOMEX SOMEFN1 SOMEFN2))))

(NOTEVERY
  (LAMBDA (EVERYX EVERYFN1 EVERYFN2)
    (NULL (EVERY EVERYX EVERYFN1 EVERYFN2))))

(PROP
  (LAMBDA (X Y)
    (COND
      ((NLISTP X))
      ((EQUAL (CAR X)
	      Y)
	(CDR X))
      (T (PROP (CDR X)
	       Y)))))

(PUTL
  (LAMBDA (LST PROP VAL)

          (* Inverse of GET. Similar to PUT but works on lists 
          (or NIL), and does one cdr at a time.
          Used by UNDONLSETQ, and RECORD package.)


    (PROG ((X LST))
      LP  (COND
	    ((NLISTP X)                         (* Note no checks for 
                                                lists ending in dotted 
                                                pairs.)
	      (RETURN (NCONC LST (LIST PROP VAL))))
	    ((EQ (CAR X)
		 PROP)
	      (COND
		((CDR X)
		  (FRPLACA (CDR X)
			   VAL))
		(T (FRPLACD X (LIST VAL))))
	      (RETURN LST)))
          (SETQ X (CDR X))
          (GO LP))))

(READFILE
  [LAMBDA (FILE)
    (PROG (L TEM HELPCLOCK)
          (SETQ FILE (INPUT (INFILE FILE)))
      LP  (COND
	    ([NULL (NLSETQ (SETQ TEM (READ FILE FILERDTBL]
	      (RETURN L))
	    ((EQ TEM (QUOTE STOP))
	      (CLOSEF FILE)
	      (RETURN L)))
          (SETQ L (NCONC1 L TEM))
          (GO LP])

(REMOVE
  (LAMBDA (X L)
    (COND
      ((NLISTP L)
	NIL)
      ((EQUAL X (CAR L))
	(REMOVE X (CDR L)))
      (T (CONS (CAR L)
	       (REMOVE X (CDR L)))))))

(REMPROP
  [LAMBDA (ATM PROP)
    (PROG (VAL)
          [COND
	    ((NOT (LITATOM ATM))
	      (ERRORX (LIST 14 ATM]
      LP  [COND
	    ((NLISTP (CDR ATM))
	      (RETURN VAL))
	    ((EQ (CADR ATM)
		 PROP)
	      (SETQ VAL PROP)
	      (FRPLACD ATM (CDDDR ATM)))
	    (T (SETQ ATM (CDDR ATM]
          (GO LP])

(REVERSE
  (LAMBDA (L)
    (PROG (U)
      LOOP(COND
	    ((NLISTP L)
	      (RETURN U)))
          (SETQ U (CONS (CAR L)
			U))
          (SETQ L (CDR L))
          (GO LOOP))))

(RPT
  (LAMBDA (RPTN RPTF)
    (PROG (RPTV)
      LP  (COND
	    ((IGREATERP RPTN 0)
	      (SETQ RPTV (EVAL RPTF (QUOTE INTERNAL)))
	      (SETQ RPTN (SUB1 RPTN))
	      (GO LP))
	    (T (RETURN RPTV))))))

(RPTQ
  (NLAMBDA (RPTN RPTF)
    (RPT (EVAL RPTN (QUOTE INTERNAL))
	 RPTF)))

(RPAQ
  (NLAMBDA (RPAQX RPAQY)                        (* RPAQ and RPAQQ are 
                                                used by PRETTYDEF to 
                                                save VARS.)
    (RPLACA RPAQX (EVAL RPAQY))))

(RPAQQ
  (NLAMBDA (X Y)
    (RPLACA X Y)))

(SASSOC
  (LAMBDA (XSAS YSAS)
    (PROG NIL
      LP  (COND
	    ((NLISTP YSAS)
	      (RETURN NIL))
	    ((EQUAL (CAAR YSAS)
		    XSAS)
	      (RETURN (CAR YSAS))))
          (SETQ YSAS (CDR YSAS))
          (GO LP))))

(SAVEDEF
  (LAMBDA (X)
    (COND
      ((ATOM X)
	(SAVEDEF1 X))
      (T (MAPCAR X (FUNCTION SAVEDEF1))))))

(SAVEDEF1
  [LAMBDA (X)
    (PROG ((DF (GETD X)))
          (RETURN (COND
		    (DF (PUT X (SETQ X (SELECTQ (FNTYP X)
						((SUBR SUBR* FSUBR 
						       FSUBR*)
						  (QUOTE SUBR))
						((EXPR EXPR* FEXPR 
						       FEXPR*)
						  (QUOTE EXPR))
						((CEXPR CEXPR* CFEXPR 
							CFEXPR*)
						  (QUOTE CODE))
						(QUOTE LIST)))
			     DF)

          (* NOTE: this call to PUT is changed to /PUT later 
          in the loadup.)


			X])

(SETQQ
  (NLAMBDA (XSET YSET)
    (SET XSET YSET)))

(SOME
  (LAMBDA (SOMEX SOMEFN1 SOMEFN2)               (* SOME compiles open.)
    (PROG NIL
      LOOP(COND
	    ((NLISTP SOMEX)
	      (RETURN NIL))
	    ((APPLY* SOMEFN1 (CAR SOMEX)
		     SOMEX)
	      (RETURN SOMEX)))
          (SETQ SOMEX (COND
	      (SOMEFN2 (APPLY* SOMEFN2 SOMEX))
	      (T (CDR SOMEX))))
          (GO LOOP))))

(SUB1VAR
  (NLAMBDA (SUB1X)
    (SET SUB1X (SUB1 (EVAL SUB1X)))))

(SUBLIS
  (LAMBDA (ALST EXPR FLG)
    (COND
      (ALST (SUBPR EXPR ALST))
      (FLG (COPY EXPR))
      (T EXPR))))

(SUBPAIR
  (LAMBDA (OLD NEW EXPR FLG)
    (COND
      (OLD 

          (* The FRPLACA is to distinguish calls to SUBPR from 
          SUBPAIR and SUBLIS. Rather than pass another flag, 
          which would have to be passed each recursion, we 
          list the substiution list by this method.)

                                                (* The FRPLACA is to 
                                                distinguish the call to 
                                                SUBPR)
	   (SUBPR EXPR OLD (FRPLACA (QUOTE ((D E F)))
				    NEW)))
      (FLG (COPY EXPR))
      (T EXPR))))

(SUBPR
  (LAMBDA (EXPR L1 L2)
    (PROG (I D A)
          (COND
	    ((NLISTP EXPR)
	      (COND
		((NULL L2)                      (* Called from SUBLIS, 
                                                L1 is an alist)
		  (GO LP2)))
	      (SETQ L2 (CAR L2))
	      (SETQ I 1)
	      (GO LP))
	    ((SETQ D (CDR EXPR))
	      (SETQ D (SUBPR D L1 L2))))
          (SETQ A (SUBPR (CAR EXPR)
			 L1 L2))
          (RETURN (COND
		    ((OR FLG (NEQ A (CAR EXPR))
			 (NEQ D (CDR EXPR)))
		      (CONS A D))
		    (T EXPR)))
      LP                                        (* Search L1 for EXPR.)
          (COND
	    ((NULL L1)
	      (RETURN EXPR))
	    ((NLISTP L1)
	      (COND
		((EQ EXPR L1)

          (* E.G. subpair ((A B . C) 
          (D E F G) (X Y C W)) returns 
          (X Y (F G) W))


		  (GO LP1)))
	      (RETURN EXPR))
	    ((EQ EXPR (CAR L1))
	      (GO LP1)))
          (SETQ I (ADD1 I))
          (SETQ L1 (CDR L1))
          (GO LP)
      LP1                                       (* EXPR found, now find 
                                                corresponding element on
                                                L2.)
          (COND
	    ((EQ I 1)
	      (SETQ L2 (COND
		  ((NLISTP L1)
		    L2)
		  (T (CAR L2))))
	      (RETURN (COND
			(FLG (COPY L2))
			(T L2)))))
          (SETQ I (SUB1 I))
          (SETQ L2 (CDR L2))
          (GO LP1)
      LP2 (COND
	    ((EQ (CAAR L1)
		 EXPR)
	      (RETURN (COND
			(FLG (COPY (CDAR L1)))
			(T (CDAR L1)))))
	    ((NULL (SETQ L1 (CDR L1)))
	      (RETURN EXPR)))
          (GO LP2))))

(SUBST
  (LAMBDA (X Y Z)
    (COND
      ((NULL Z)
	NIL)
      ((NLISTP Z)
	(COND
	  ((EQ Y Z)
	    (COND
	      ((NLISTP X)
		X)
	      (T (COPY X))))
	  (T Z)))
      (T (CONS (COND
		 ((COND
		     ((LITATOM Y)
		       (EQ Y (CAR Z)))
		     (T (EQUAL Y (CAR Z))))
		   (COND
		     ((NLISTP X)
		       X)
		     (T (COPY X))))
		 (T (SUBST X Y (CAR Z))))
	       (SUBST X Y (CDR Z)))))))

(SUBSET
  (LAMBDA (MAPX MAPFN1 MAPFN2)
    (PROG (MAPL MAPE)
      LP  (COND
	    ((NLISTP MAPX)
	      (RETURN MAPL))
	    ((APPLY* MAPFN1 (CAR MAPX))
	      (COND
		((NULL MAPL)
		  (SETQ MAPL (SETQ MAPE (CONS (CAR MAPX)))))
		(T (SETQ MAPE (CDR (FRPLACD MAPE
					    (FRPLACD
					      (CONS (CAR MAPX)
						    MAPE)))))
                                                (* Eseentially an open 
                                                TCONC.)
		   ))))
          (SETQ MAPX (COND
	      (MAPFN2 (APPLY* MAPFN2 MAPX))
	      (T (CDR MAPX))))
          (GO LP))))

(TAILP
  (LAMBDA (X Y)                                 (* True if X is A tail 
                                                of Y X and Y non-null.)
                                                (* Included with editor 
                                                for block compilation 
                                                purposes.)
    (AND X (PROG NIL
	     LP  (COND
		   ((NLISTP Y)
		     (RETURN NIL))
		   ((EQ X Y)
		     (RETURN X)))
	         (SETQ Y (CDR Y))
	         (GO LP)))))

(TCONC
  (LAMBDA (PTR X)
    (PROG (XX)
          (RETURN
	    (COND
	      ((NULL PTR)
		(CONS (SETQ XX (CONS X NIL))
		      XX))
	      ((NLISTP PTR)
		(ERROR (QUOTE "bad argument - TCONC")
		       PTR))
	      ((NULL (CDR PTR))
		(FRPLACA PTR (CONS X NIL))
		(FRPLACD PTR (CAR PTR)))
	      (T (FRPLACD PTR (CDR (FRPLACD (CDR PTR)
					    (FRPLACD
					      (CONS X (CDR PTR))))))))))
    ))

(TIME
  [NLAMBDA (TIMEX TIMEN TIMETYP)

          (* If TIMETYP is 0, also prints real time, i.e. 
          (CLOCK 0) if timetype is 3, does garbage collection time.
          If timetype is T does PAGEFAULTS.)



          (* Calls to prin1, terpri, print, and spaces changed to 
          correspoding lispx printing functions later in loadup.)


    (PROG (TIMEY TIMECNS TIMEM TIMECLK1 TIMECLK2 TIMEZ)
          [COND
	    ((NULL TIMEN)
	      (SETQ TIMEN 1))
	    [(MINUSP TIMEN)
	      (RETURN (CONS TIMEN (QUOTE (- ?]
	    ((NOT (SMALLP TIMEN))
	      (RETURN (CONS TIMEN (QUOTE (is too large]
          (SETQ TIMEM TIMEN)
          (SETQ TIMECNS (CONSCOUNT))
          (SETQ TIMEZ (SELECTQ TIMETYP
			       (0 (CLOCK 0))
			       (3 (CLOCK 3))
			       (T (PAGEFAULTS))
			       NIL))
          (SETQ TIMECLK1 (CLOCK 2))
      T1  (COND
	    ((NEQ TIMEM 0)
	      (SETQ TIMEY (EVAL TIMEX))
	      (SUB1VAR TIMEM)
	      (GO T1)))
          (SETQ TIMECLK2 (CLOCK 2))
          (AND TIMEZ (SETQ TIMEZ (IDIFFERENCE (SELECTQ TIMETYP
						       (0 (CLOCK 0))
						       (3 (CLOCK 3))
						       (T (PAGEFAULTS))
						       (ERROR TIMETYP))
					      TIMEZ)))
          (SETQ TIMECNS (IDIFFERENCE (CONSCOUNT)
				     TIMECNS))
          (COND
	    ((NEQ TIMEN 1)
	      (PRIN1 TIMECNS T)
	      (PRIN1 (QUOTE /)
		     T)
	      (PRIN1 TIMEN T)
	      (PRIN1 (QUOTE " = ")
		     T)))
          (PRIN1 (IQUOTIENT TIMECNS TIMEN)
		 T)
          (SPACES 1 T)
          (PRINT (QUOTE conses)
		 T)
          (SETQ TIMEM (FQUOTIENT (IPLUS TIMECLK2 (IMINUS TIMECLK1))
				 1000))
          (COND
	    ((NEQ TIMEN 1)
	      (PRIN1 TIMEM T)
	      (PRIN1 (QUOTE /)
		     T)
	      (PRIN1 TIMEN T)
	      (PRIN1 (QUOTE " = ")
		     T)))
          (PRIN1 (FQUOTIENT TIMEM TIMEN)
		 T)
          (SPACES 1 T)
          (PRINT (QUOTE seconds)
		 T)
          (SELECTQ TIMETYP
		   (0 (PRIN1 (FQUOTIENT TIMEZ 1000)
			     T)
		      (PRIN1 (QUOTE " seconds, real time
")
			     T))
		   (3 (PRIN1 (FQUOTIENT TIMEZ 1000)
			     T)
		      (PRIN1 (QUOTE " seconds, garbage collection time
")
			     T))
		   (T (PRIN1 TIMEZ T)
		      (PRIN1 (QUOTE " page faults
")
			     T))
		   NIL)
          (RETURN TIMEY])

(UNION
  (LAMBDA (X Y)
    (PROG ((L (CONS)))
      LP  (COND
	    ((NLISTP X)
	      (RETURN (NCONC (CAR L)
			     Y)))
	    ((NOT (COND
		    ((LITATOM (CAR X))
		      (FMEMB (CAR X)
			     Y))
		    (T (MEMBER (CAR X)
			       Y))))
	      (TCONC L (CAR X))))
          (SETQ X (CDR X))
          (GO LP))))

(WRITEFILE
  [LAMBDA (X FILE)

          (* X is a list of expression 
          (or an atom that evaluates to a list) X is written 
          on FILE. If X begins with a PRINTDATE expression, a 
          new one is written. Following the PRETTYDEF 
          conventions, if FILE is listed, it is left open.
          Otherwise a stop is printed and it is closed.)


    (PROG ((Y (OUTPUT))
	   Z)
          (COND
	    ((LISTP FILE)
	      (SETQ FILE (CAR FILE))
	      (SETQ Z T)))
          (OUTFILE FILE)
          [COND
	    ((ATOM X)
	      (SETQ X (EVAL X]
          (PRIN1 (QUOTE "
(PRIN1 (QUOTE %"
WRITEFILE OF "))
          (PRIN2 (OUTPUT))
          (PRIN1 (QUOTE " MADE BY "))
          (PRIN1 (USERNAME))
          (PRIN1 (QUOTE " ON "))
          (PRIN1 (DATE))
          (PRIN1 (QUOTE "
%")T)

"))
          [MAPC X (FUNCTION (LAMBDA (X1)
		    (PRINTDEF X1 NIL (EQ (CAR X1)
					 (QUOTE DEFINEQ]
          (TERPRI)
          (SETQ FILE (OUTPUT Y))
          (AND (NULL Z)
	       (ENDFILE FILE))
          (RETURN FILE])
)
  [RPAQQ MISCBLOCKS ((COPY)
	  (SUBSTBLOCK DSUBST LSUBST SUBST COPY (ENTRIES SUBST DSUBST 
							LSUBST)
		      (BLKLIBRARY EQUAL))
	  (SUBPRBLOCK SUBPAIR SUBLIS SUBPR (ENTRIES SUBPAIR SUBLIS)
		      (LOCALFREEVARS FLG))
	  (NIL DEFC (LINKFNS . T)
	       (NOLINKFNS MKSWAPP]
[DECLARE: DONTEVAL@LOAD DOEVAL@COMPILE DONTCOPY
  (BLOCK: COPY)
  (BLOCK: SUBSTBLOCK DSUBST LSUBST SUBST COPY (ENTRIES SUBST DSUBST 
						       LSUBST)
	  (BLKLIBRARY EQUAL))
  (BLOCK: SUBPRBLOCK SUBPAIR SUBLIS SUBPR (ENTRIES SUBPAIR SUBLIS)
	  (LOCALFREEVARS FLG))
  (BLOCK: NIL DEFC (LINKFNS . T)
	  (NOLINKFNS MKSWAPP))
]
[DECLARE: DONTEVAL@LOAD DOEVAL@COMPILE DONTCOPY COMPILERVARS 
  (ADDTOVAR NLAMA DEFINEQ ADDTOVAR)
  (ADDTOVAR NLAML TIME SUB1VAR SETQQ RPAQQ RPAQ RPTQ NLSETQ ERSETQ 
	    ADD1VAR)
]
(DECLARE: DONTCOPY
  (FILEMAP (NIL (1007 29742 (ADD1VAR 1019 . 1086) (ADDTOVAR 1090 . 1283)
(ADDPROP 1287 . 2243) (APPEND 2247 . 3127) (ASSOC 3131 . 3326) (ATTACH
3330 . 3519) (CHANGEPROP 3523 . 3697) (COPY 3701 . 4044) (DEFLIST
4048 . 4350) (DREMOVE 4354 . 4729) (DREVERSE 4733 . 4923) (DSUBST
4927 . 5532) (ERSETQ 5536 . 5591) (EVERY 5595 . 6095) (FASSOC 6099
. 6577) (FGETD 6581 . 7063) (FLAST 7067 . 7517) (FLENGTH 7521 . 8018)
(FMEMB 8022 . 8487) (FNTH 8491 . 9031) (GET 9035 . 9319) (GETP 9323
. 9558) (GETLIS 9562 . 9794) (INTERSECTION 9798 . 10152) (KWOTE 10156
. 10211) (LAST 10215 . 10380) (LASTN 10384 . 10701) (LCONC 10705 .
11219) (LDIFF 11223 . 11746) (LENGTH 11750 . 11921) (DEFINEQ 11925
. 11964) (DEFC 11968 . 12710) (LSUBST 12714 . 13267) (MAP 13271 .
13524) (MAPC 13528 . 13788) (MAP2C 13792 . 14177) (MAPCAR 14181 .
14601) (MAP2CAR 14605 . 15193) (MAPCON 15197 . 15669) (MAPCONC 15673
. 16152) (MAPLIST 16156 . 16581) (MEMB 16585 . 16766) (MEMBER 16770
. 17010) (NLEFT 17014 . 17671) (NLSETQ 17675 . 17732) (NOTANY 17736
. 17821) (NOTEVERY 17825 . 17919) (PROP 17923 . 18061) (PUTL 18065
. 18741) (READFILE 18745 . 19063) (REMOVE 19067 . 19233) (REMPROP
19237 . 19564) (REVERSE 19568 . 19755) (RPT 19759 . 19973) (RPTQ 19977
. 20056) (RPAQ 20060 . 20304) (RPAQQ 20308 . 20352) (SASSOC 20356
. 20586) (SAVEDEF 20590 . 20702) (SAVEDEF1 20706 . 21180) (SETQQ 21184
. 21237) (SOME 21241 . 21590) (SUB1VAR 21594 . 21661) (SUBLIS 21665
. 21786) (SUBPAIR 21790 . 22408) (SUBPR 22412 . 24047) (SUBST 24051
. 24467) (SUBSET 24471 . 25065) (TAILP 25069 . 25594) (TCONC 25598
. 26013) (TIME 26017 . 28325) (UNION 28329 . 28658) (WRITEFILE 28662
. 29739)))))
STOP
