(FILECREATED "13-SEP-74 01:48:42" UNDO.;1 33285  

     changes to:  SAVESET UNDOPRINT UNDOLISPX3

     previous date: "28-AUG-74 02:14:50" <LISP>UNDO.;2)


  (LISPXPRINT (QUOTE UNDOCOMS)
	      T)
  [RPAQQ
    UNDOCOMS
    ((FNS * UNDOFNS)
     (FNS * /FNS)
     [VARS #UNDOSAVES (TESTMODEFLG)
	   (LISPXFNS
	     (APPEND (QUOTE ((SETQ . SAVESETQ)
			     (SET . SAVESET)
			     (SETQQ . SAVESETQQ)))
		     (MAPCAR /FNS
			     (FUNCTION
			       (LAMBDA
				 (X Y)
				 [PUT X (QUOTE \DEF)
				      (GETD (SETQ Y (PACK (CDR (DUNPACK X 
								   CHCONLST]
				 (CONS Y X]
     (P (MOVD (QUOTE RPLNODE)
	      (QUOTE FRPLNODE))
	(MOVD (QUOTE RPLNODE2)
	      (QUOTE FRPLNODE2)))
     (BLOCKS * UNDOBLOCKS)
     (PROP INFO * NLAMEVALST)
     (DECLARE: DONTEVAL@LOAD DOEVAL@COMPILE DONTCOPY COMPILERVARS
	       (ADDVARS (NLAMA)
			(NLAML /PUTDQ UNDONLSETQ XNLSETQ RPAQ RPAQQ SAVESETQQ 
			       SAVESETQ]
  (RPAQQ UNDOFNS
	 (SAVESET UNDOSET SAVESETQ SAVESETQQ RPAQQ RPAQ RPLNODE RPLNODE2 
		  EQLENGTH TESTMODE NEW/FN UNDOSAVE UNDOLISPX UNDOLISPX1 
		  UNDOPRINT UNDOLISPX2 UNDOLISPX3 UNSET /LISPXPUT /PUT-1 /PUT+1 
		  /SETA-D XNLSETQ UNDONLSETQ))
(DEFINEQ

(SAVESET
  [LAMBDA (NAME VALUE TOPFLG FLG)

          (* Sets NAME to VALUE, binding used is most recent unless 
          TOPFLG is T in which case always uses top level binding.
          The setting is always undoable in conventional way.
          In addition, if the binding being reset is a top level 
          binding, its value is saved on its property list where it 
          can be recovered via UNSET, even outside the scope of the 
          history list, and (NAME RESET) is printed.
          If FLG is 'NOPRINT', the printing is suppressed.
          This is the case when called from UNSET.
          If FLG is 'NOSAVE', binding is not saved on property list.
          This is the case when called from /SET.
          Note that SET becomes SAVESET in type-ins.
          /SET is used when in TESTMODE.)


    [COND
      ((NOT (LITATOM NAME))
	(ERRORX (LIST 5 NAME)))
      ((NULL NAME)
	(ERRORX (LIST 6 VALUE]
    (PROG (PTR OLDVALUE TEM)
          [COND
	    (TOPFLG (SETQ PTR NAME))
	    (T [SETQ PTR (NEWSTKSCAN NAME (SETQ TEM (STKNTH -1 (QUOTE SAVESET]

          (* EVALV is not used because SAVESET needs to know whether 
          the variable was in fact bound 
          (on the stack) or whether it is set at the top level.)


	       (RELSTK TEM)
	       (AND (NULL PTR)
		    (SETQ PTR NAME]
          [SETQ OLDVALUE (COND
	      ((LITATOM PTR)
		(CAR PTR))
	      (T (EVALV NAME PTR]
          [COND
	    ((AND TOPFLG (EQ DFNFLG (QUOTE ALLPROP))
		  (NEQ OLDVALUE (QUOTE NOBIND)))
	      (/PUT NAME (QUOTE VALUE)
		    VALUE)
	      (AND DWIMFLG (ADDSPELL NAME T))
	      (RETURN VALUE))
	    ((OR (NOT (LITATOM PTR))
		 (EQ FLG (QUOTE NOSAVE)))

          (* The first predicate is because SAVESET only works for top 
          level bindings. The second indicates a call from /SET or 
          /SETQ. Note that in both cases the variable is NOT added to 
          the spelling list.)


	      (GO OUT))
	    ((OR (EQ OLDVALUE (QUOTE NOBIND))
		 (EQUAL OLDVALUE VALUE)))
	    (T (AND FILEPKGFLG (NEWFILE? NAME T))
                                                (* Variable is being reset.)
	       (COND
		 ((NEQ DFNFLG T)
		   [SETQ TEM (CONS NAME (QUOTE (reset]
		   (AND (NEQ FLG (QUOTE NOPRINT))
			[NULL (SOME (GET LISPXHIST (QUOTE *LISPXPRINT*))
				    (FUNCTION (LAMBDA (X)
                                                (* So only prints it once per 
                                                event.)
					(AND (EQ (CAR X)
						 (QUOTE PRINT))
					     (EQUAL (CADR X)
						    TEM]
			(LISPXPRINT TEM T T))
		   (/PUT NAME (QUOTE VALUE)
			 OLDVALUE]
          (AND DWIMFLG (ADDSPELL NAME T))
      OUT (AND LISPXHIST (UNDOSAVE (LIST (QUOTE UNDOSET)
					 PTR NAME OLDVALUE)
				   LISPXHIST))
          (COND
	    ((LITATOM PTR)
	      (FRPLACA PTR VALUE))
	    (T (SETSTKARG NAME PTR VALUE)

          (* Note that a stack pointer to the frame of NAME's binding 
          was created and not released. This is because it is being 
          saved for possible undoing.)


	       (AND (NEQ CLEARSTKLST T)
		    (SETQ CLEARSTKLST (CONS PTR CLEARSTKLST)))
                                                (* If the user control-D's, this
                                                will cause PTR to be relased.)
	       ))
          (RETURN VALUE])

(UNDOSET
  [LAMBDA (PTR NAME VALUE)
    (PROG (TEM)
          (RETURN (COND
		    ((LITATOM PTR)
		      (AND LISPXHIST (UNDOSAVE (LIST (QUOTE UNDOSET)
						     PTR NAME (CAR PTR))
					       LISPXHIST))
		      (FRPLACA PTR VALUE)
		      T)
		    ((NULL SPAGHETTIFLG)
		      (COND
			((EQ (CDR PTR)
			     NAME)
			  [AND LISPXHIST (UNDOSAVE (LIST (QUOTE UNDOSET)
							 PTR NAME (CAR PTR]
			  (FRPLACA PTR VALUE)
			  T)))
		    ((SETQ TEM (FRAMESCAN NAME PTR))
                                                (* W.T. check this.)
		      (AND LISPXHIST (UNDOSAVE (LIST (QUOTE UNDOSET)
						     PTR NAME (NEWSTKARG TEM 
									PTR))
					       LISPXHIST))
		      (SETSTKARG NAME PTR VALUE)
		      T])

(SAVESETQ
  [NLAMBDA (SETQX SETQY)
    (SAVESET SETQX (EVAL SETQY (QUOTE INTERNAL])

(SAVESETQQ
  [NLAMBDA (SETQX SETQY)
    (SAVESET SETQX SETQY])

(RPAQQ
  [NLAMBDA (X Y)
    (SAVESET X Y T])

(RPAQ
  [NLAMBDA (RPAQX RPAQY)
    (SAVESET RPAQX (EVAL RPAQY (QUOTE INTERNAL))
	     T])

(RPLNODE
  [LAMBDA (X A D)
    (AND (NLISTP X)
	 (ERRORX (LIST 27 X)))
    (RPLACA X A)
    (RPLACD X D])

(RPLNODE2
  [LAMBDA (X Y)

          (* Generated by paatern match. INcluded so user can load 
          code that has been dwimified and or compiled into a nonclisp 
          system and run it.)


    (COND
      ((NLISTP Y)
	(ERRORX (LIST 27 Y)))
      (T (RPLNODE X (CAR Y)
		  (CDR Y])

(EQLENGTH
  [LAMBDA (X N)

          (* Generated by paatern match. INcluded so user can load 
          code that has been dwimified and or compiled into a nonclisp 
          system and run it.)


    (COND
      ((ILESSP N 0)
	NIL)
      ((ZEROP N)
	(NLISTP X))
      (T (AND (LISTP (SETQ X (NTH X N)))
	      (NLISTP (CDR X])

(TESTMODE
  [LAMBDA (FLG)
    (SAVESET (QUOTE TESTMODEFLG)
	     FLG NIL (QUOTE NOSAVE))
    [MAPC /FNS (FUNCTION (LAMBDA (X Y)
	      [SETQ Y (PACK (CDR (DUNPACK X CHCONLST]
	      (COND
		(FLG (/PUTD Y (GETD X)))
		(T (/PUTD Y (GETP X (QUOTE \DEF]
    FLG])

(NEW/FN
  [LAMBDA (FN)
    (PROG (FN1)
          [COND
	    [(EQ (NTHCHAR FN 1)
		 (QUOTE /))
	      (SETQ FN1 (PACK (CDR (DUNPACK FN CHCONLST]
	    (T (SETQ FN1 FN)
	       (SETQ FN (PACK (LIST (QUOTE /)
				    FN]
          (SETQ /FNS (/NCONC1 /FNS FN))
          (/PUT FN (QUOTE \DEF)
		(GETD FN1))
          (SETQ LISPXFNS (/NCONC1 LISPXFNS (CONS FN1 FN)))
          (RETURN FN])

(UNDOSAVE
  [LAMBDA (UNDOFORM HISTENTRY)
    (AND (NULL HISTENTRY)
	 (SETQ HISTENTRY (EVQ LISPXHIST)))
    (AND HISTENTRY (PROG (Y N)
		         (LISPXWATCH UNDOSAVES)
		         (COND
			   ([NULL (CAR (SETQ Y (CDR (FMEMB (QUOTE SIDE)
							   HISTENTRY]

          (* There could be a property SIDE with value NIL if the user 
          did a FORGET during the execution of the event)


			     (NCONC HISTENTRY (LIST (QUOTE SIDE)
						    (LIST 1 UNDOFORM)))
			     (RETURN))
			   ((EQ (CAR Y)
				(QUOTE NOSAVE))
			     (RETURN))
			   ((EQ (SETQ N (CAAR Y))
				-1)             (* Already gone past #UNDOSAVES 
                                                and user has confirmed.)
			     )
			   ((AND #UNDOSAVES (IGREATERP (SETQ N (ADD1 N))
						       #UNDOSAVES)
				 DWIMFLG)
			     (DWIMESS #UNDOSAVES (QUOTE MUSTAPPROVE))
			     (PRIN1 (QUOTE " undosaves,")
				    T)
			     (COND
			       ((NEQ (DWIMREADC DWIMWAIT (QUOTE N)
						(QUOTE " continue saving ? "))
				     (QUOTE Y))
				 (FRPLACA Y (QUOTE NOSAVE))
				 (RETURN)))
			     (SETQ N -1)))
		         (FRPLACA (SETQ Y (CAR Y))
				  N)
		         (FRPLACD Y (CONS UNDOFORM (CDR Y])

(UNDOLISPX
  [LAMBDA (LINE)

          (* Note: undoing in order is guaranteed to restore you to 
          the original state. Undoing out of order is defined as 
          restoring any cells changed in the indicated operation to 
          their original state before the operation was performed.
          For independent operations, undoing will have the correct 
          effect. However, for dependent operations, it may have an 
          unforeseen effect. For example, ATTACH 
          (A X) ATTACH (B X) followed by UNDO A will remove both A and 
          B since the cell changed by the first ATTACH was the first 
          cell in X, and this will be restored to its former state.
          In general, operations are always independent if they affect 
          different lists or different sublists 
          (not TAILS) of the same list. However, because property list 
          functions might be thought of as independent, PUT, REMPROP, 
          and ADDPROP are treated specially.
          Thus put (FOO PROP1 VAL1) followed by PUT 
          (FOO PROP2 VAL2) followed by UNDO PROP1 will remove just 
          PROP1 even if both PUT'S resulted in new properties and 
          hence additions to the end of the property list.)


    (PROG (UNDONEFLG DWIMCHANGES)
          (SETQ DWIMCHANGES (FMEMB (QUOTE :)
				   LINE))
          (SETQ LINE (LDIFF LINE DWIMCHANGES))
          (SETQ DWIMCHANGES (CDR DWIMCHANGES))
          [COND
	    [LINE (MAPC (LISPXFIND LISPXHISTORY LINE (QUOTE ENTRIES)
				   T)
			(FUNCTION (LAMBDA (X)
			    (SETQ UNDONEFLG (OR (UNDOLISPX1 X NIL DWIMCHANGES)
						UNDONEFLG]
	    (T (SOME (CDAR LISPXHISTORY)
		     (FUNCTION (LAMBDA (X)
			 (SETQ UNDONEFLG (OR (UNDOLISPX1 X T DWIMCHANGES)
					     UNDONEFLG]
          (RETURN (COND
		    ((NULL UNDONEFLG)
		      (PRIN1 (COND
			       (DWIMCHANGES (QUOTE "not found.
"))
			       (T (QUOTE "nothing saved.
")))
			     T)
		      (QUOTE ))
		    (T UNDONEFLG])

(UNDOLISPX1
  [LAMBDA (EVENT FLG DWIMCHANGES)

          (* FLG is T when interpreting a simple UNDO command.
          In this case, does not UNDO commands already undone, nor 
          other UNDO commands.)


    (PROG (TEM Y X)
          (COND
	    ((AND FLG (EQ (CAAR EVENT)
			  (QUOTE UNDO)))
	      (RETURN NIL)))
          (SETQ TEM (UNDOLISPX2 EVENT NIL DWIMCHANGES))
          [COND
	    ((NULL TEM)
	      (RETURN))
	    ((EQ TEM (QUOTE already))
	      (COND
		(FLG                            (* Searching for last thing to 
                                                UNDO.)
		     (RETURN NIL)))
	      (SETQ X TEM))
	    ((AND (FMEMB HISTSTR0 (SETQ X (CAR EVENT)))
		  (SETQ Y (FMEMB (QUOTE *HISTORY*)
				 EVENT)))
	      (SETQ X (CAADR Y]
          (COND
	    ((OR (NULL DWIMCHANGES)
		 (EQ X (QUOTE already)))        (* Messages for DWIMCHANGES are 
                                                printed in UNDOLISPX3.)
	      (SETQ X (UNDOPRINT X T))

          (* Initially defined as PRIN1. Separate functin so user can 
          advise it to print the 'name' of the event.)


	      (PRIN1 (QUOTE " undone.
")
		     T)))
          (RETURN X])

(UNDOPRINT
  [LAMBDA (X)
    (PRIN2 (COND
	     ((NLISTP X)
	       X)
	     ((LISTP (CAR X))
	       (CAAR X))
	     (T (CAR X)))
	   T T])

(UNDOLISPX2
  [LAMBDA (X FORGETFLG DWIMCHANGES)

          (* Searches X for SIDE information.
          If finds some and is already undone, sets FLG1 to 'ALREADY, 
          otherwise sets FLG1 to T, undoes it, and marks it undone.)

                                                (* If FORGETFLG is T, just 
                                                erases the UNDO information 
                                                entirely.)
    (PROG (Y TEM VAL)
          [SETQ VAL (COND
	      ([CDAR (SETQ Y (CDR (FMEMB (QUOTE SIDE)
					 X]

          (* An attempted CLISP correction will leave a side property 
          consisting of just (0) the CDAR checks for this.)


		(COND
		  (FORGETFLG (FRPLACA Y NIL))
		  ((NLISTP (SETQ Y (CAR Y)))
		    NIL)
		  ((NULL (CAR Y))
		    (QUOTE already))
		  (DWIMCHANGES [MAPC DWIMCHANGES (FUNCTION (LAMBDA (DWIMCHANGE)
					 (SETQ VAL (OR (UNDOLISPX3 X DWIMCHANGE)
						       VAL]
			       VAL)
		  (T                            (* (CAR Y) Is the count.)
		     [MAPC (CDR Y)
			   (FUNCTION (LAMBDA (X)
			       [COND
				 ((LISTP (CAR X))
				   (/RPLNODE (CAR X)
					     (CADR X)
					     (CDDR X)))
				 (T (APPLY (CAR X)
					   (CDR X]
			       (LISPXWATCH UNDOSTATS]
		     (/ATTACH NIL Y)
		     T]
          [COND
	    ((SETQ Y (CADR (FMEMB (QUOTE *GROUP*)
				  X)))
	      (MAPC (REVERSE Y)
		    (FUNCTION (LAMBDA (X)
			(SETQ VAL (OR (UNDOLISPX2 X FORGETFLG DWIMCHANGES)
				      VAL]
          (RETURN VAL])

(UNDOLISPX3
  [LAMBDA (EVENT DWIMCHANGE)
    (RESETVAR EDITQUIETFLG T
      (RESETVAR MAXLEVEL 1500
	(RESETVAR CLISPTRANFLG (QUOTE CLISP% )
	  (PROG (L (COMS (LIST (LIST (QUOTE F)
				     DWIMCHANGE T)
			       1
			       (QUOTE (BELOW ^))
			       (QUOTE UP)))
		   MARKER L1 L2 TEM)
	        (COND
		  ([NULL (SETQ TEM (GET EVENT (QUOTE *LISPXPRINT*]
		    (RETURN NIL)))
	        (SETQ L (LIST TEM))
	    LP  (COND
		  ([NULL (AND L (NLSETQ (SETQ L (EDITL L COMS)))
			      (SETQ MARKER (FASSOC CLISPTRANFLG (CAR L]

          (* The FASSOC looks for the DWIM marker.
          If none is found, this message is not associated with a DWIM 
          correction.)


		    (RETURN))
		  ((NULL (TAILP (CAR L)
				(CADADR MARKER)))

          (* The form of MARKER is (CLISP 
          (QUOTE PTR1 PTR2 PTR3)) where PTR1 marks the print list at 
          the beginning of this DWIM correction, PTR2 the sides at the 
          beginning, and PTR3 the sides at the end.
          The TAILP checks to see that the place where this word was 
          found is inside of the DWIM correction.
          If not, it goes on to look for another instance of this word 
          by starting with the position after the DWIM marker.)


		    (SETQ L (CDR (FMEMB MARKER L)))
		    (GO LP)))
	        [SETQ L (SETQ L1 (CADDDR (SETQ TEM (CADR MARKER]
                                                (* The beginning of the side 
                                                info.)
	        (SETQ L2 (CADDR TEM))
	    LP1 [COND
		  ((EQ L1 L2)
		    (/RPLNODE L (QUOTE (QUOTE PATCHED))
			      L2)
		    (SETQ L1 (CADADR MARKER))
		    (GO LP2))
		  ([LISTP (CAR (SETQ TEM (CAR L1]
		    (/RPLNODE (CAR TEM)
			      (CADR TEM)
			      (CDDR TEM)))
		  (T (APPLY (CAR TEM)
			    (CDR TEM]
	        (LISPXWATCH UNDOSTATS)
	        (SETQ L1 (CDR L1))
	        (GO LP1)
	    LP2                                 (* Prints the message associated
                                                with the DWIM correction.)
	        (COND
		  ((EQ (CADR L1)
		       MARKER)
		    (LISPXPRIN1 (QUOTE " undone.
")
				T)
		    (RETURN T)))
	        (LISPXPUT (QUOTE *LISPXPRINT*)
			  (LIST (CAR L1))
			  T LISPXHIST)
	        [COND
		  ((NLISTP (CAR L1))
		    (PRIN2 (CAR L1)
			   T T))
		  (T (APPLY (CAAR L1)
			    (CDAR L1]
	        (SETQ L1 (CDR L1))
	        (GO LP2])

(UNSET
  [LAMBDA (NAME)
    (PROG (X TEM)
          (RETURN (COND
		    ([OR (SETQ X (FMEMB (QUOTE VALUE)
					(CDR NAME)))
			 (AND DWIMFLG (SETQ TEM (MISSPELLED? NAME 70 SPELLINGS3)
				)
			      (SETQ X (FMEMB (QUOTE VALUE)
					     (CDR (SETQ NAME TEM]

          (* Note that UNSET always works for top level bindings in 
          conjuncture with SAVESET: only top level bindings are saved 
          on property lists.)


		      (SAVESET NAME (CADR X)
			       T
			       (QUOTE NOPRINT))
		      NAME)
		    (T (ERROR (QUOTE "no value saved:")
			      NAME])

(/LISPXPUT
  [LAMBDA (PROP L ADDFLG LST)
    (PROG (Y)
          (AND (NULL LST)
	       (SETQ LST (CAAR LISPXHISTORY)))

          (* Puts property at top level of entry.
          Used mostly for calls with PROP=ERROR.)


          [COND
	    [(SETQ Y (CDR (FMEMB PROP LST)))
	      (/RPLACA Y (COND
			 (ADDFLG (/NCONC (CAR Y)
					 L))
			 (T L]
	    (T (/NCONC LST (LIST PROP L]
          (RETURN L])

(/PUT-1
  [LAMBDA (ATM PROP)
    (PROG ((X ATM))                             (* Removes property and value at
                                                PROP)
      LP  (COND
	    ((EQ (CDR X)
		 PROP)
	      (AND LISPXHIST (UNDOSAVE (LIST (QUOTE /PUT+1)
					     ATM X PROP)
				       LISPXHIST))
	      (FRPLACD X (CDDR PROP)))
	    ((SETQ X (CDR X))
	      (GO LP])

(/PUT+1
  [LAMBDA (ATM TAIL PROP)
    (PROG ((X ATM))                             (* Attaches PROP at TAIL or else
                                                at front.)
      LP  (COND
	    ((EQ X TAIL))
	    ((SETQ X (CDR X))
	      (GO LP))
	    (T (SETQ X ATM)))
          (AND LISPXHIST (UNDOSAVE (LIST (QUOTE /PUT-1)
					 ATM PROP)
				   LISPXHIST))
          (FRPLACD (CDR PROP)
		   (CDR X))
          (FRPLACD X PROP])

(/SETA-D
  [LAMBDA (A N V DFLG)
    (COND
      ((OR (NOT (ARRAYP A))
	   (NEQ A (ARRAYBEG A)))
	(ERRORX (LIST 28 A)))
      [[AND (IGREATERP N (IPLUS [LOC (CAR (VAG (ADD1 (LOC A]
				-2))
	    (ILESSP N (SUB1 (COND
			      ((NEQ (CDR A)
				    (VAG 0))
				(LOC (CDR A)))
			      (T (LOC (CAR A]
	(SETQ A (VAG (IPLUS (LOC A)
			    N 1)))
	(COND
	  (DFLG (/RPLACD A V))
	  (T (/RPLACA A V]
      ((AND (IGREATERP N 0)
	    (IGREATERP (SUB1 (LOC (CAR A)))
		       N))
	(/CLOSER (IPLUS (LOC A)
			N 1)
		 V))
      (T (ERROR (QUOTE "out of bounds seta")
		N)))
    V])

(XNLSETQ
  [NLAMBDA (XNLSETQX XNLSETFLG XNLSETFN)
    (ERRORSET XNLSETQX XNLSETFLG XNLSETFN])

(UNDONLSETQ
  [NLAMBDA (UNDOFORM UNDOFN)
    (PROG ((LISPXHIST LISPXHIST)
	   UNDOSIDE0 UNDOSIDE UNDOTEM)

          (* A version of NLSETQ that undoes all side effects if an 
          error occurs. There are several situations to 'WORRY' about.
          First, LISPXHIST may be NIL, but we still want UNDONLSETQ to 
          operate. Second, LISPXHIST may not yet contain a side 
          property. Third, LISPXHIST may contain a side property.
          In the latter two cases we also have to worry about the 
          number of undosaves exceeding (OR ALEADY HAVING EXCEEDED) 
          #UNDOSAVES. Finally, we want the entire event undoable if 
          the UNDONLSETQ is aborted with a control-d.)


          (COND
	    ([LISTP (SETQ UNDOSIDE (GET LISPXHIST (QUOTE SIDE]
                                                (* SIDE property may be NOSAVE.)
	      (SETQ UNDOSIDE0 (CONS (CAR UNDOSIDE)
				    (CDR UNDOSIDE)))
                                                (* Saves old value of side 
                                                property.)
	      (FRPLACA UNDOSIDE -1)             (* So that will continue saving 
                                                regardless of number.)
	      )
	    (T [SETQ LISPXHIST (PUTL LISPXHIST (QUOTE SIDE)
				     (SETQ UNDOSIDE (LIST -1]
                                                (* PUTL is like PUT, except it 
                                                works with lists.)
	       ))
          (SETQ UNDOTEM (ERRORSET UNDOFORM NIL UNDOFN))

          (* Note that all side effects are stored onto the higher 
          level LISPXHIST, if any, so that if a control-d is typed, 
          any changes made under the UNDONLSETQ will be undoable.)


          (COND
	    ((NULL UNDOTEM)
	      (FRPLACD (NLEFT UNDOSIDE 1 (CDR UNDOSIDE0)))

          (* Separates those undosaves that have occurred under the 
          UNDONLSETQ from those that took place above the UNDONLSETQ.)


	      [MAPC (CDR UNDOSIDE)
		    (FUNCTION (LAMBDA (X LISPXHIST)
			[COND
			  ((LISTP (CAR X))
			    (/RPLNODE (CAR X)
				      (CADR X)
				      (CDDR X)))
			  (T (APPLY (CAR X)
				    (CDR X]
			(LISPXWATCH UNDOSTATS]
	      (FRPLACD UNDOSIDE (CDR UNDOSIDE0))
                                                (* Puts back original list of 
                                                undosaves, if any.)
	      ))
          (FRPLACA UNDOSIDE (OR (CAR UNDOSIDE0)
				0))
          (RETURN UNDOTEM])
)
  (RPAQQ /FNS
	 (/ADDPROP /ATTACH /CLOSER /DREMOVE /DREVERSE /DSUBST /FNCLOSER 
		   /FNCLOSERA /FNCLOSERD /LCONC /MAPCON /MAPCONC /MOVD /NCONC 
		   /NCONC1 /PUT /PUTD /PUTDQ /PUTHASH /PUTL /REMPROP /RPLACA 
		   /RPLACD /RPLNODE /RPLNODE2 /SET /SETA /SETD /TCONC))
(DEFINEQ

(/ADDPROP
  [LAMBDA (ATM PROP NEW FLG)
    [COND
      ((NULL ATM)
	(ERRORX (LIST 7)))
      ((NOT (LITATOM ATM))
	(ERRORX (LIST 14 ATM]
    (PROG ((X ATM)
	   Y)

          (* If FLG is t, NEW is consed onto the front, otherwise 
          nconced onto the end.)

                                                (* Value is new PROP value.)
      LP  (COND
	    ((NLISTP (CDR X))                   (* End of PROP list reached.)
	      [SETQ Y (LIST PROP (SETQ NEW (LIST NEW]
	      (AND LISPXHIST (UNDOSAVE (LIST (QUOTE /PUT-1)
					     ATM Y)
				       LISPXHIST))
	      (FRPLACD X Y))
	    [(EQ (CADR X)
		 PROP)                          (* PROP found.)
	      (/RPLACA (CDDR X)
		       (SETQ NEW (COND
			   (FLG (CONS NEW (CADDR X)))
			   (T (/NCONC1 (CADDR X)
				       NEW]
	    ((SETQ X (CDDR X))
	      (GO LP))
	    (T 

          (* PROP list ran out on odd cycle.
          Add to beginning of PROP list.)


	       [SETQ Y (CONS PROP (CONS (SETQ NEW (LIST NEW))
					(CDR ATM]
	       (AND LISPXHIST (UNDOSAVE (LIST (QUOTE /PUT-1)
					      ATM Y)
					LISPXHIST))
	       (FRPLACD ATM Y)))
          (RETURN NEW])

(/ATTACH
  [LAMBDA (X Y)
    (COND
      ((LISTP Y)
	(/RPLACA (/RPLACD Y (CONS (CAR Y)
				  (CDR Y)))
		 X))
      ((NULL Y)
	(ERRORX (LIST 7 X)))
      (T (ERRORX (LIST 27 Y])

(/CLOSER
  [LAMBDA (ADR VAL)
    [AND LISPXHIST (UNDOSAVE (LIST (QUOTE /CLOSER)
				   ADR
				   (OPENR ADR]
    (CLOSER ADR VAL])

(/DREMOVE
  [LAMBDA (X Y)
    (COND
      ((NLISTP Y)
	NIL)
      [(EQ X (CAR Y))
	(COND
	  ((CDR Y)
	    (/RPLACA Y (CADR Y))
	    (/RPLACD Y (CDDR Y))
	    (/DREMOVE X Y]
      (T (PROG (Z)
	       (SETQ Z Y)
	   LP  [COND
		 ((NLISTP (CDR Y))
		   (RETURN Z))
		 ((EQ X (CADR Y))
		   (/RPLACD Y (CDDR Y)))
		 (T (SETQ Y (CDR Y]
	       (GO LP])

(/DREVERSE
  [LAMBDA (X)
    (PROG (Y Z)
      R1  (COND
	    ((NLISTP (SETQ Y X))
	      (RETURN Z)))
          (SETQ X (CDR X))
          (SETQ Z (/RPLACD Y Z))
          (GO R1])

(/DSUBST
  [LAMBDA (X Y Z)
    (PROG (B)
          [COND
	    ((EQ Y (SETQ B Z))
	      (RETURN (COPY X]
      LP  [COND
	    ((NLISTP Z)
	      (RETURN B))
	    ([COND
		((LITATOM Y)

          (* Most uses involve substitution for an atom, and the check 
          enables avoiding an extra function call 
          (to equal))


		  (EQ Y (CAR Z)))
		(T (EQUAL Y (CAR Z]
	      (/RPLACA Z (COPY X)))
	    (T (/DSUBST X Y (CAR Z]
          (COND
	    ((AND Y (EQ Y (CDR Z)))
	      (/RPLACD Z (COPY X))
	      (RETURN B)))
          (SETQ Z (CDR Z))
          (GO LP])

(/FNCLOSER
  [LAMBDA (HANDLE N X)
    [AND LISPXHIST (UNDOSAVE (LIST (QUOTE /FNCLOSER)
				   HANDLE N (FNOPENR HANDLE N]
    (FNCLOSER HANDLE N X])

(/FNCLOSERA
  [LAMBDA (HANDLE N X)
    [AND LISPXHIST (UNDOSAVE (LIST (QUOTE /FNCLOSERA)
				   HANDLE N (FNOPENRA HANDLE N]
    (FNCLOSERA HANDLE N X])

(/FNCLOSERD
  [LAMBDA (HANDLE N X)
    [AND LISPXHIST (UNDOSAVE (LIST (QUOTE /FNCLOSERD)
				   HANDLE N (FNOPENRD HANDLE N]
    (FNCLOSERD HANDLE N X])

(/LCONC
  [LAMBDA (PTR X)
    (PROG (XX)
          [RETURN (COND
		    ((NULL X)
		      PTR)
		    ([OR (NLISTP X)
			 (CDR (SETQ XX (LAST X]
		      (SETQ XX X)
		      (GO ERROR))
		    ((NULL PTR)
		      (CONS X XX))
		    ((NLISTP PTR)
		      (SETQ XX PTR)
		      (GO ERROR))
		    ((NULL (CAR PTR))
		      (/RPLACA (/RPLACD PTR XX)
			       X))
		    (T (/RPLACD (CDR PTR)
				X)
		       (/RPLACD PTR XX]
      ERROR
          (ERROR (QUOTE "bad argument - LCONC")
		 XX])

(/MAPCON
  [LAMBDA (MAPX MAPFN1 MAPFN2)
    (PROG (MAPL MAPE MAPY)
      LP  [COND
	    ((NLISTP MAPX)
	      (RETURN MAPL))
	    ((SETQ MAPY (APPLY* MAPFN1 MAPX))
	      [COND
		(MAPE (/RPLACD MAPE MAPY))
		(T (SETQ MAPL (SETQ MAPE MAPY]
	      (PROG NIL
		LP  (COND
		      ((SETQ MAPY (CDR MAPE))
			(SETQ MAPE MAPY)
			(GO LP]
          [SETQ MAPX (COND
	      (MAPFN2 (APPLY* MAPFN2 MAPX))
	      (T (CDR MAPX]
          (GO LP])

(/MAPCONC
  [LAMBDA (MAPX MAPFN1 MAPFN2)
    (PROG (MAPL MAPE MAPY)
      LP  [COND
	    ((NLISTP MAPX)
	      (RETURN MAPL))
	    ((SETQ MAPY (APPLY* MAPFN1 (CAR MAPX)))
	      [COND
		(MAPE (/RPLACD MAPE MAPY))
		(T (SETQ MAPL (SETQ MAPE MAPY]
	      (PROG NIL
		LP  (COND
		      ((SETQ MAPY (CDR MAPE))
			(SETQ MAPE MAPY)
			(GO LP]
          [SETQ MAPX (COND
	      (MAPFN2 (APPLY* MAPFN2 MAPX))
	      (T (CDR MAPX]
          (GO LP])

(/MOVD
  [LAMBDA (FN1 FN2 FLG)
    [/PUTD FN2 (COND
	     (FLG (COPY (GETD FN1)))
	     (T (GETD FN1]
    (AND FILEPKGFLG (NEWFILE? FN2))
    FN2])

(/NCONC
  [LAMBDA L
    (PROG (VAL X TEM (N 0))
      LP  (COND
	    ((EQ N L)
	      (RETURN VAL)))
          [SETQ TEM (ARG L (SETQ N (ADD1 N]
          [COND
	    ((LISTP X)
	      (/RPLACD (SETQ X (LAST X))
		       TEM))
	    (T (SETQ VAL (SETQ X TEM]
          (GO LP])

(/NCONC1
  [LAMBDA (LST X)
    (/NCONC LST (FRPLACD (CONS X LST])

(/PUT
  [LAMBDA (ATM PROP VAL)
    [COND
      ((NULL ATM)
	(ERRORX (LIST 7)))
      ((NOT (LITATOM ATM))
	(ERRORX (LIST 14 ATM]
    (PROG ((X ATM)
	   Y)
      LOOP(COND
	    ((NLISTP (CDR X))                   (* See comment in UNDOLISPX.)
	      (SETQ Y (LIST PROP VAL))
	      (AND LISPXHIST (UNDOSAVE (LIST (QUOTE /PUT-1)
					     ATM Y)
				       LISPXHIST))
	      (FRPLACD X Y))
	    ((EQ (CADR X)
		 PROP)
	      (/RPLACA (CDDR X)
		       VAL))
	    ((SETQ X (CDDR X))
	      (GO LOOP))
	    (T [SETQ Y (CONS PROP (CONS VAL (CDR ATM]
	       (AND LISPXHIST (UNDOSAVE (LIST (QUOTE /PUT-1)
					      ATM Y)
					LISPXHIST))
	       (FRPLACD ATM Y)))
          (RETURN VAL])

(/PUTD
  [LAMBDA (FN DEF)
    (PROG ((TEM (GETD FN)))
          (PUTD FN DEF)

          (* The reason for doing the PUTD first is to avoid storing 
          any undo information if the PUTD should cause an error -
          e.g. if FN is non-atomic. If undo information were stored, 
          then undoing the event would cause an error -
          thereby preventing the rest of the undo information 
          (if any) from being undone.)


          (AND LISPXHIST (UNDOSAVE (LIST (QUOTE /PUTD)
					 FN TEM)
				   LISPXHIST))
          (RETURN DEF])

(/PUTDQ
  [NLAMBDA (X Y)
    (/PUTD X Y)
    X])

(/PUTHASH
  [LAMBDA (ITEM VAL ARRAY)
    (AND LISPXHIST (UNDOSAVE (LIST (QUOTE /PUTHASH)
				   ITEM
				   (GETHASH ITEM ARRAY)
				   ARRAY)
			     LISPXHIST))
    (PUTHASH ITEM VAL ARRAY])

(/PUTL
  [LAMBDA (LST PROP VAL)

          (* Inverse of GET. Similar to PUT but works on lists 
          (or NIL), and does one cdr at a time.
          Used by UNDONLSETQ, and RECORD package.)


    (PROG ((X LST))
      LP  (COND
	    [(NLISTP X)                         (* Note no checks for lists 
                                                ending in dotted pairs.)
	      (RETURN (/NCONC LST (LIST PROP VAL]
	    ((EQ (CAR X)
		 PROP)
	      [COND
		((CDR X)
		  (/RPLACA (CDR X)
			   VAL))
		(T (/RPLACD X (LIST VAL]
	      (RETURN LST)))
          (SETQ X (CDR X))
          (GO LP])

(/REMPROP
  [LAMBDA (ATM PROP)
    (PROG ((X ATM)
	   VAL)
          [COND
	    ((NOT (LITATOM X))
	      (ERRORX (LIST 14 X]
      LP  [COND
	    ((NLISTP (CDR X))
	      (RETURN VAL))
	    ((EQ (CADR X)
		 PROP)
	      (SETQ VAL PROP)
	      (AND LISPXHIST (UNDOSAVE (LIST (QUOTE /PUT+1)
					     ATM X (CDR X))
				       LISPXHIST))
	      (FRPLACD X (CDDDR X)))
	    (T (SETQ X (CDDR X]
          (GO LP])

(/RPLACA
  [LAMBDA (X Y)
    (AND LISPXHIST (UNDOSAVE [COND
			       [(LISTP X)       (* Use /RPLNODE format -
                                                saves a cell.)
				 (CONS X (CONS (CAR X)
					       (CDR X]
			       (T (LIST (QUOTE /RPLACA)
					X
					(CAR X]
			     LISPXHIST))
    (RPLACA X Y])

(/RPLACD
  [LAMBDA (X Y)
    (AND LISPXHIST (UNDOSAVE [COND
			       [(LISTP X)       (* Use /RPLNODE format -
                                                saves a cell.)
				 (CONS X (CONS (CAR X)
					       (CDR X]
			       (T (LIST (QUOTE /RPLACD)
					X
					(CDR X]
			     LISPXHIST))
    (RPLACD X Y])

(/RPLNODE
  [LAMBDA (X A D)

          (* Coombines action of /RPLACA and /RPLACD.
          In this case, it takes only 3 cells to save the undo 
          informaion whereasa /RPLACA and /RPLACD take eight.
          However, even where only /RPLACA or /RPLACD is being 
          performed, an equivalent /RPLNODE is still cheaper, 3 cells 
          to four.)


    (COND
      ((LISTP X)
	(AND LISPXHIST (UNDOSAVE (CONS X (CONS (CAR X)
					       (CDR X)))
				 LISPXHIST))
	(RPLACA X A)
	(RPLACD X D))
      (T (ERRORX (LIST 27 X])

(/RPLNODE2
  [LAMBDA (X Y)
    (COND
      ((NLISTP Y)
	(ERRORX (LIST 27 Y)))
      (T (/RPLNODE X (CAR Y)
		   (CDR Y])

(/SET
  [LAMBDA (NAME VALUE)
    (SAVESET NAME VALUE NIL (QUOTE NOSAVE])

(/SETA
  [LAMBDA (A N V)
    (/SETA-D A N V])

(/SETD
  [LAMBDA (A N V)
    (/SETA-D A N V T])

(/TCONC
  [LAMBDA (PTR X)
    (PROG (XX)
          (RETURN (COND
		    ((NULL PTR)
		      (CONS (SETQ XX (CONS X NIL))
			    XX))
		    ((NLISTP PTR)
		      (ERROR (QUOTE "bad argument - TCONC")
			     PTR))
		    ((NULL (CDR PTR))
		      (/RPLACA PTR (CONS X NIL))
		      (/RPLACD PTR (CAR PTR)))
		    (T (/RPLACD PTR (CDR (/RPLACD (CDR PTR)
						  (/RPLACD (CONS X
								 (CDR PTR])
)
  (RPAQQ #UNDOSAVES NIL)
  (RPAQ TESTMODEFLG)
  [RPAQ LISPXFNS (APPEND (QUOTE ((SETQ . SAVESETQ)
				 (SET . SAVESET)
				 (SETQQ . SAVESETQQ)))
			 (MAPCAR
			   /FNS
			   (FUNCTION
			     (LAMBDA
			       (X Y)
			       [PUT X (QUOTE \DEF)
				    (GETD (SETQ Y (PACK (CDR (DUNPACK X 
								   CHCONLST]
			       (CONS Y X]
  (MOVD (QUOTE RPLNODE)
	(QUOTE FRPLNODE))
  (MOVD (QUOTE RPLNODE2)
	(QUOTE FRPLNODE2))
  [RPAQQ UNDOBLOCKS
	 ((NIL SAVESET UNSET RPLNODE RPLNODE2 EQLENGTH /LISPXPUT /PUT-1 /PUT+1 
	       /ADDPROP /ATTACH /CLOSER /FNCLOSER /FNCLOSERA /FNCLOSERD 
	       /DREMOVE /DREVERSE /DSUBST /LCONC /MAPCON /MAPCONC /MOVD /NCONC 
	       /NCONC1 /PUT /PUTD /PUTDQ /PUTHASH /PUTL /REMPROP /RPLACA 
	       /RPLACD /RPLNODE /RPLNODE2 /SET /SETA /SETA-D /SETD /TCONC
	       (LINKFNS . T)
	       UNDONLSETQ
	       (GLOBALVARS UNDOSTATS CLEARSTKLST)
	       UNDOPRINT)
	  (UNDOLISPXBLOCK UNDOSAVE UNDOLISPX UNDOLISPX1 UNDOLISPX2 UNDOLISPX3
			  (ENTRIES UNDOSAVE UNDOLISPX UNDOLISPX1 UNDOLISPX2)
			  (BLKLIBRARY LISPXWATCH)
			  (GLOBALVARS UNDOSAVES UNDOSTATS]
[DECLARE: DONTEVAL@LOAD DOEVAL@COMPILE DONTCOPY
  (BLOCK: NIL SAVESET UNSET RPLNODE RPLNODE2 EQLENGTH /LISPXPUT /PUT-1 /PUT+1 
	  /ADDPROP /ATTACH /CLOSER /FNCLOSER /FNCLOSERA /FNCLOSERD /DREMOVE 
	  /DREVERSE /DSUBST /LCONC /MAPCON /MAPCONC /MOVD /NCONC /NCONC1 /PUT 
	  /PUTD /PUTDQ /PUTHASH /PUTL /REMPROP /RPLACA /RPLACD /RPLNODE 
	  /RPLNODE2 /SET /SETA /SETA-D /SETD /TCONC (LINKFNS . T)
	  UNDONLSETQ
	  (GLOBALVARS UNDOSTATS CLEARSTKLST)
	  UNDOPRINT)
  (BLOCK: UNDOLISPXBLOCK UNDOSAVE UNDOLISPX UNDOLISPX1 UNDOLISPX2 UNDOLISPX3
	  (ENTRIES UNDOSAVE UNDOLISPX UNDOLISPX1 UNDOLISPX2)
	  (BLKLIBRARY LISPXWATCH)
	  (GLOBALVARS UNDOSAVES UNDOSTATS))
]
  (RPAQQ NLAMEVALST
	 (AND ARG COND ERSETQ NLSETQ OR PROG PROG1 PROG2 PROGN RESETFORM 
	      RESETLST RESETSAVE RESETVAR RPAQ RPTQ SAVESETQ SETN SETQ 
	      UNDONLSETQ XNLSETQ))
(DEFLIST(QUOTE(
  (AND EVAL)
  (ARG EVAL)
  (COND EVAL)
  (ERSETQ EVAL)
  (NLSETQ EVAL)
  (OR EVAL)
  (PROG EVAL)
  (PROG1 EVAL)
  (PROG2 EVAL)
  (PROGN EVAL)
  (RESETFORM EVAL)
  (RESETLST EVAL)
  (RESETSAVE EVAL)
  (RESETVAR EVAL)
  (RPAQ EVAL)
  (RPTQ EVAL)
  (SAVESETQ EVAL)
  (SETN EVAL)
  (SETQ EVAL)
  (UNDONLSETQ EVAL)
  (XNLSETQ EVAL)
))(QUOTE INFO))
[DECLARE: DONTEVAL@LOAD DOEVAL@COMPILE DONTCOPY COMPILERVARS 
  (ADDTOVAR NLAMA)
  (ADDTOVAR NLAML /PUTDQ UNDONLSETQ XNLSETQ RPAQ RPAQQ SAVESETQQ SAVESETQ)
]
(DECLARE: DONTCOPY
  (FILEMAP (NIL (1196 20811 (SAVESET 1208 . 4614) (UNDOSET 4618 . 5360) (SAVESETQ
5364 . 5449) (SAVESETQQ 5453 . 5517) (RPAQQ 5521 . 5567) (RPAQ 5571 . 5663)
(RPLNODE 5667 . 5777) (RPLNODE2 5781 . 6083) (EQLENGTH 6087 . 6430) (TESTMODE
6434 . 6702) (NEW/FN 6706 . 7104) (UNDOSAVE 7108 . 8317) (UNDOLISPX 8321 .
10344) (UNDOLISPX1 10348 . 11561) (UNDOPRINT 11565 . 11713) (UNDOLISPX2 11717
. 13254) (UNDOLISPX3 13258 . 15704) (UNSET 15708 . 16302) (/LISPXPUT 16306
. 16728) (/PUT-1 16732 . 17119) (/PUT+1 17123 . 17570) (/SETA-D 17574 . 18171)
(XNLSETQ 18175 . 18270) (UNDONLSETQ 18274 . 20808)) (21085 30745 (/ADDPROP
21097 . 22273) (/ATTACH 22277 . 22463) (/CLOSER 22467 . 22603) (/DREMOVE 22607
. 22974) (/DREVERSE 22978 . 23167) (/DSUBST 23171 . 23767) (/FNCLOSER 23771
. 23923) (/FNCLOSERA 23927 . 24083) (/FNCLOSERD 24087 . 24243) (/LCONC 24247
. 24754) (/MAPCON 24758 . 25210) (/MAPCONC 25214 . 25673) (/MOVD 25677 . 25830)
(/NCONC 25834 . 26121) (/NCONC1 26125 . 26192) (/PUT 26196 . 26907) (/PUTD
26911 . 27484) (/PUTDQ 27488 . 27539) (/PUTHASH 27543 . 27742) (/PUTL 27746
. 28366) (/REMPROP 28370 . 28799) (/RPLACA 28803 . 29128) (/RPLACD 29132 .
29457) (/RPLNODE 29461 . 30017) (/RPLNODE2 30021 . 30147) (/SET 30151 . 30225)
(/SETA 30229 . 30276) (/SETD 30280 . 30329) (/TCONC 30333 . 30742)))))
STOP
