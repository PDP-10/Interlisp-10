<LISP>HISTORY.INFO
Apr 13, 1975

New features of the history package

(1) whenever an event is referenced by a history command, and
the value of ARCHIVEFLG is T, its initial value,
the property ARCHIVE value T is added to the event.
This causes the event to be archived when it drops off.
Note that user can also add ARCHIVE properties to
events he wants archived.

(2) ! is now recognized in USE command to specify segment
	substitution. e.g. following LIST(A B C)
USE ! (X Y Z) FOR B
   will produce LIST(A X Y Z C).
USE ! NIL FOR B
   will produce LIST(A C)

(3) commands defined by the NAME command can be typed in directly,
e.g. FOO is equivalent to REDO @ FOO. (however, if FOO is
the name of a variable, this will take precedence, i.e.
FOO will evaluate FOO, and you can always say REDO @ FOO)
the main reason for this change is described in (4)

(4) NAME can also be given the arguments, i.e. parameters
for the corresponding named event.  The
command can then be executed with arguments supplied and
substitution will be automatic, e.g. following 

(PUTD (QUOTE FOO) (COPY (GETP (QUOTE FIE) (QUOTE EXPR))))

if one performs NAME MOVE FOO FIE : event-spec
then typing 
MOVE ZIP ZAP
  would be equivalent to
USE ZIP ZAP FOR FOO FIE IN @ MOVE
  and would cause
(PUTD (QUOTE ZIP) (COPY (GETP (QUOTE FIE)(QUOTE EXPR]
to be executed.
Substitution is carried out the same as with the USE command,
so that for example, MOVE A B C D would cause
two PUTD's to be executed, !'s will be recognized,
and alt-modes will work. For example,
if following PREPINDEX(<MANUAL>14LISP.XGP)
FIXFILE(<MANUAL>14LISP.XGPIDX) 
one performed NAME FOO $14$ : -2 AND -1
then FOO $15$ could be used to do the same two operations
with 14 replaced by 15.

At the time the NAME is executed, a check will be made
to make sure that the arguments mentioned appear
somewhere in the events, and a warning message
printed if they do not. The
NAME command itself appears on the history list, so
it can be referenced via a FIX, REDO, USE or (shudder) another
NAME, i.e. one can NAME the NAME command.

NAME thus provides a convenient way of defining macros
with parameters for LISPX
similar to that provided for by the M command in the editor.


The NAME command can continue to be used without a :,
the effect is the same as though the command were defined
with no arguments, i.e. NAME FOO : event-spec is same
as NAME FOO event-spec. In this event, if FOO is invoked
with arguments specified, an error will be generated.

(5) the value of lispx if lispxx is a history
command is now the value of historysave for the corresponding operation.

(6) the value of the function HISTORYSAVE is
the event itself. if the event corresponds to a previous
event, historysave adds a (input id bell . props)
to the group property and returns that entry. 
discussion on or about page 22.46 similarly changed.
e.g. in example, the event would look like
(input id value HISTORY command *GROUP*
 ((input1 id value1 SIDE side1) (input2  etc.


(7) the variable LISPXHIST is bound to the entire event, not
CDDR of it.

(8) the following functions exist in history package so that they
can be advised or redefined

HISTORYMATCH[input pat]  initially defined as
     editfindp[input pat t] used to match an input with pattern,
     i.e. used in event specification

LISPXFIX[input coms] initially a call to EDITL. used by FIX

LISPXSUBST[x y z charflg]  used by USE command, and
     when invoking a named command.
     initially defined to do either a subst or esubst.

LISPXGETINPUT[input;event] initially defined to return input.
     used by lispxfind when obtaining an input portion of an event.
     e.g. bard advises this to do some concats and make a string.

in addition, PRINTHISTORY is set up to call
PRINTHISTORY1 on each event, (recursively on grouped events)
and PRINTHISTORY1 calls PRINTHISTORY2 to print the input
portion of the event, so either of these can be advised or
redefined.
